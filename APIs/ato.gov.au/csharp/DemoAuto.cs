//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The Address resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Address
	{
		
		/// <summary>
		/// The city.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// The country.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The address line 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Line1 { get; set; }
		
		/// <summary>
		/// The address line 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Line2 { get; set; }
		
		/// <summary>
		/// The address line 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Line3 { get; set; }
		
		/// <summary>
		/// The address name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The postal code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The suburb.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Suburb { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Address_type : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddressId : resourceId
	{
	}
	
	/// <summary>
	/// The Business Name resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Business_name
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The business name's lifecycle state.
		/// </summary>
		public Business_nameLifecycleState LifecycleState { get; set; } = Business_nameLifecycleState.Pending Approval;
		
		/// <summary>
		/// The business name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Business_nameLifecycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Issued = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Approval")]
		Pending_Approval = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Business_name_lifecycle_state : type
	{
	}
	
	/// <summary>
	/// The Electronic Address resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Electronic_address
	{
		
		/// <summary>
		/// The area code, for example, "02".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
		
		/// <summary>
		/// The country prefix, for example, "61".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryPrefix { get; set; }
		
		/// <summary>
		/// The electronic address type.
		/// </summary>
		public Electronic_addressElectronicAddressType ElectronicAddressType { get; set; } = Electronic_addressElectronicAddressType.Landline;
		
		/// <summary>
		/// The email address, for example, "robert.ferguson@ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The extension number, for example, "4453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The number, for example, "62164453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
		
		/// <summary>
		/// The website address, for example, "https://ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Electronic_addressElectronicAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fax = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Landline = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mobile = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Website = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Electronic_address_type : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Failed_precondition
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public error-details[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The Gender resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Gender
	{
		
		/// <summary>
		/// The gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Gender")]
		public string Gender1 { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The Individual resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Individual
	{
		
		[System.Runtime.Serialization.DataMember()]
		public individual-address[] Addresses { get; set; }
		
		/// <summary>
		/// The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public electronic-address[] ElectronicAddresses { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The individual's gender.
		/// </summary>
		public IndividualGender Gender { get; set; } = IndividualGender.Male;
		
		/// <summary>
		/// The party's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public individual-name[] Names { get; set; }
		
		/// <summary>
		/// The individual's place of birth, for example, `Tamworth`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlaceOfBirth { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Individual_address : address
	{
		
		/// <summary>
		/// The address type.
		/// </summary>
		public Individual_addressAddressType AddressType { get; set; } = Individual_addressAddressType.Principal Place of Residence;
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Individual_addressAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mailing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Principal Place of Business")]
		Principal_Place_of_Business = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Principal Place of Residence")]
		Principal_Place_of_Residence = 2,
	}
	
	/// <summary>
	/// The Electronic Address resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Electronic_address
	{
		
		/// <summary>
		/// The area code, for example, "02".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
		
		/// <summary>
		/// The country prefix, for example, "61".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryPrefix { get; set; }
		
		/// <summary>
		/// The electronic address type.
		/// </summary>
		public Electronic_addressElectronicAddressType ElectronicAddressType { get; set; } = Electronic_addressElectronicAddressType.Landline;
		
		/// <summary>
		/// The email address, for example, "robert.ferguson@ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The extension number, for example, "4453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The number, for example, "62164453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
		
		/// <summary>
		/// The website address, for example, "https://ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndividualGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Female = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Male = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Not Applicable")]
		Not_Applicable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Not Known")]
		Not_Known = 3,
	}
	
	/// <summary>
	/// The Individual Name resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Individual_name
	{
		
		/// <summary>
		/// The direction used to render the individual's name.
		/// </summary>
		public Individual_nameDirection Direction { get; set; } = Individual_nameDirection.left-to-right;
		
		/// <summary>
		/// The individual's family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The individual's formal salutation, for example, "Mr William Smith".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FormalSalutation { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The individual's given name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The individual's informal salutation, for example, "Bill".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InformalSalutation { get; set; }
		
		/// <summary>
		/// The individual's middle name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The individual's name prefix.
		/// </summary>
		public Individual_nameNamePrefix NamePrefix { get; set; } = Individual_nameNamePrefix.Mr;
		
		/// <summary>
		/// The individual's name suffix, for example, "Jr" or "Sr".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NameSuffix { get; set; }
		
		/// <summary>
		/// The name type.
		/// </summary>
		public Individual_nameNameType NameType { get; set; } = Individual_nameNameType.Principal Name;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Individual_nameDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="left-to-right")]
		left_to_right = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="right-to-left")]
		right_to_left = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Individual_nameNamePrefix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mr = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ms = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Individual_nameNameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alias = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Principal Name")]
		Principal_Name = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Individual_address : address
	{
		
		/// <summary>
		/// The address type.
		/// </summary>
		public Individual_addressAddressType AddressType { get; set; } = Individual_addressAddressType.Principal Place of Residence;
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	/// <summary>
	/// The Individual Name resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Individual_name
	{
		
		/// <summary>
		/// The direction used to render the individual's name.
		/// </summary>
		public Individual_nameDirection Direction { get; set; } = Individual_nameDirection.left-to-right;
		
		/// <summary>
		/// The individual's family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The individual's formal salutation, for example, "Mr William Smith".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FormalSalutation { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The individual's given name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The individual's informal salutation, for example, "Bill".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InformalSalutation { get; set; }
		
		/// <summary>
		/// The individual's middle name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The individual's name prefix.
		/// </summary>
		public Individual_nameNamePrefix NamePrefix { get; set; } = Individual_nameNamePrefix.Mr;
		
		/// <summary>
		/// The individual's name suffix, for example, "Jr" or "Sr".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NameSuffix { get; set; }
		
		/// <summary>
		/// The name type.
		/// </summary>
		public Individual_nameNameType NameType { get; set; } = Individual_nameNameType.Principal Name;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invalid_argument
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public error-details[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Legal_entity_type : type
	{
	}
	
	/// <summary>
	/// The License resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class License
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The license type.
		/// </summary>
		public LicenseLicenseType LicenseType { get; set; } = LicenseLicenseType.Australian Financial Services License;
		
		/// <summary>
		/// The business name's lifecycle state.
		/// </summary>
		public LicenseLifecycleState LifecycleState { get; set; } = LicenseLifecycleState.Pending Approval;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LicenseLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Australian Financial Services License")]
		Australian_Financial_Services_License = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="License 2B")]
		License_2B = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LicenseLifecycleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Issued = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending Approval")]
		Pending_Approval = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class License_lifecycle_state : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class License_type : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Name_direction : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Name_prefix : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Name_type : type
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Not_found
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public error-details[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The Organisation resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organisation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public organisation-address[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public electronic-address[] ElectronicAddresses { get; set; }
		
		/// <summary>
		/// The organisation's establishment date, for example, `1928-03-03` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EstablishmentDate { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The party's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The organisation's legal entity type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public OrganisationLegalEntityType LegalEntityType { get; set; } = OrganisationLegalEntityType.Company;
		
		[System.Runtime.Serialization.DataMember()]
		public organisation-name[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public registered-identifier[] RegisteredIdentifiers { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organisation_address : address
	{
		
		/// <summary>
		/// The address type.
		/// </summary>
		public Organisation_addressAddressType AddressType { get; set; } = Organisation_addressAddressType.Principal Place of Business;
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Organisation_addressAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mailing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Principal Place of Business")]
		Principal_Place_of_Business = 1,
	}
	
	/// <summary>
	/// The Electronic Address resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Electronic_address
	{
		
		/// <summary>
		/// The area code, for example, "02".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
		
		/// <summary>
		/// The country prefix, for example, "61".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryPrefix { get; set; }
		
		/// <summary>
		/// The electronic address type.
		/// </summary>
		public Electronic_addressElectronicAddressType ElectronicAddressType { get; set; } = Electronic_addressElectronicAddressType.Landline;
		
		/// <summary>
		/// The email address, for example, "robert.ferguson@ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The extension number, for example, "4453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The number, for example, "62164453".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
		
		/// <summary>
		/// The website address, for example, "https://ato.gov.au".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OrganisationLegalEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partnership = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trust = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Joint Venture")]
		Joint_Venture = 3,
	}
	
	/// <summary>
	/// The Organisation Name resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organisation_name
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The organisation's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	/// <summary>
	/// The Registered Identifier resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Registered_identifier
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The registered identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The registered identifier type.
		/// </summary>
		public Registered_identifierIdentifierType IdentifierType { get; set; } = Registered_identifierIdentifierType.ACN;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Registered_identifierIdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organisation_address : address
	{
		
		/// <summary>
		/// The address type.
		/// </summary>
		public Organisation_addressAddressType AddressType { get; set; } = Organisation_addressAddressType.Principal Place of Business;
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	/// <summary>
	/// The Organisation Name resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Organisation_name
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The organisation's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	/// <summary>
	/// The Party Role resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Party_role
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The party's role type.
		/// </summary>
		public Party_rolePartyRoleType PartyRoleType { get; set; } = Party_rolePartyRoleType.Employee;
		
		/// <summary>
		/// The related party's unique identifier.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelatedPartyId { get; set; }
		
		/// <summary>
		/// The related party's role type.
		/// </summary>
		public Party_roleRelatedPartyRoleType RelatedPartyRoleType { get; set; } = Party_roleRelatedPartyRoleType.Employer;
		
		/// <summary>
		/// The relationship type.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public Party_roleRelationshipType RelationshipType { get; set; } = Party_roleRelationshipType.Employment;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Party_rolePartyRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Director = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Employee = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Member = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partner = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trustee = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Party_roleRelatedPartyRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Association = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Employer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Organisation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partnership = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trust = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Party_roleRelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Directorship = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Employment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Membership = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partnership = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trusteeship = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PartyId : resourceId
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Permission_denied
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public error-details[] Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// The Registered Identifier resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Registered_identifier
	{
		
		/// <summary>
		/// The date and time the resource became active in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FromDate { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The registered identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The registered identifier type.
		/// </summary>
		public Registered_identifierIdentifierType IdentifierType { get; set; } = Registered_identifierIdentifierType.ACN;
		
		/// <summary>
		/// The date and time the resource became inactive in the format defined by [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ToDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Registered_identifier_type : type
	{
	}
	
	/// <summary>
	/// The Role Type resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Role
	{
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The reciprocal role name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReciprocalRole { get; set; }
		
		/// <summary>
		/// The reciprocal role description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReciprocalRoleDescription { get; set; }
		
		/// <summary>
		/// The relationship name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Relationship { get; set; }
		
		/// <summary>
		/// The role name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="Role")]
		public string Role1 { get; set; }
		
		/// <summary>
		/// The role description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleId : resourceId
	{
	}
	
	/// <summary>
	/// The Type resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Type
	{
		
		/// <summary>
		/// The scheme value description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The resource's unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The scheme value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Unauthenticated
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Error-details Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error_details
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The error target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of business names
		/// Retrieve a list of business names
		/// 
		/// Business NamesGet business-names
		/// </summary>
		/// <returns>A list of business names was retrieved successfully</returns>
		public async Task<business-name[]> Business NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "business-names";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<business-name[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of address types
		/// Address TypesGet classifications/address-types
		/// </summary>
		/// <returns>Address types were retrieved successfully</returns>
		public async Task<address-type[]> Address TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/address-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<address-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of business name lifecycle states
		/// Business Name Lifecycle StatesGet classifications/business-name-lifecycle-states
		/// </summary>
		/// <returns>Business name lifecycle states were retrieved successfully</returns>
		public async Task<business-name-lifecycle-state[]> Business Name Lifecycle StatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/business-name-lifecycle-states";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<business-name-lifecycle-state[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of electronic address types
		/// Electronic Address TypesGet classifications/electronic-address-types
		/// </summary>
		/// <returns>Electronic address types were retrieved successfully</returns>
		public async Task<electronic-address-type[]> Electronic Address TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/electronic-address-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<electronic-address-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of genders
		/// GendersGet classifications/genders
		/// </summary>
		/// <returns>Genders were retrieved successfully</returns>
		public async Task<gender[]> GendersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/genders";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<gender[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of legal entity types
		/// Legal Entity TypesGet classifications/legal-entity-types
		/// </summary>
		/// <returns>Legal entity types were retrieved successfully</returns>
		public async Task<legal-entity-type[]> Legal Entity TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/legal-entity-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<legal-entity-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of license lifecycle states
		/// License Lifecycle StatesGet classifications/license-lifecycle-states
		/// </summary>
		/// <returns>License lifecycle states were retrieved successfully</returns>
		public async Task<license-lifecycle-state[]> License Lifecycle StatesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/license-lifecycle-states";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<license-lifecycle-state[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of license types
		/// License TypesGet classifications/license-types
		/// </summary>
		/// <returns>License types were retrieved successfully</returns>
		public async Task<license-type[]> License TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/license-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<license-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of name directions
		/// Name DirectionsGet classifications/name-directions
		/// </summary>
		/// <returns>Name directions were retrieved successfully</returns>
		public async Task<name-direction[]> Name DirectionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/name-directions";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<name-direction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of name prefixes
		/// Name PrefixesGet classifications/name-prefixes
		/// </summary>
		/// <returns>Name prefixes were retrieved successfully</returns>
		public async Task<name-prefix[]> Name PrefixesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/name-prefixes";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<name-prefix[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of name types
		/// Name TypesGet classifications/name-types
		/// </summary>
		/// <returns>Name types were retrieved successfully</returns>
		public async Task<name-type[]> Name TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/name-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<name-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of registered identifier types
		/// Registered Identifier TypesGet classifications/registered-identifier-types
		/// </summary>
		/// <returns>Registered identifier types were retrieved successfully</returns>
		public async Task<registered-identifier-type[]> Registered Identifier TypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/registered-identifier-types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<registered-identifier-type[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of roles
		/// RolesGet classifications/roles
		/// </summary>
		/// <returns>Roles were retrieved successfully</returns>
		public async Task<role[]> RolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "classifications/roles";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<role[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of individuals
		/// Retrieve a list of individuals
		/// 
		/// IndividualsGetByDateOfBirthAndPlaceOfBirth individuals
		/// </summary>
		/// <param name="dateOfBirth">The individual's date of birth, for example, `1979-01-13` (in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format).</param>
		/// <param name="placeOfBirth">The individual's place of birth, for example, `Tamworth`.</param>
		/// <returns>A list of individuals was retrieved successfully</returns>
		public async Task<individual[]> IndividualsGetByDateOfBirthAndPlaceOfBirthAsync(string dateOfBirth, string placeOfBirth, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals?dateOfBirth=" + (dateOfBirth==null? "" : Uri.EscapeDataString(dateOfBirth))+"&placeOfBirth=" + (placeOfBirth==null? "" : Uri.EscapeDataString(placeOfBirth));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<individual[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an individual
		/// Create an individual
		/// 
		/// IndividualsPost individuals
		/// </summary>
		/// <param name="requestBody">Individual resource</param>
		public async Task IndividualsPostAsync(individual requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an individual
		/// Delete an individual with the specified identifier
		/// 
		/// IndividualsDelete individuals/{partyId}
		/// </summary>
		public async Task IndividualsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an individual
		/// Retrieve an individual with the specified identifier
		/// 
		/// IndividualsGet individuals/{partyId}
		/// </summary>
		/// <returns>Individual was retrieved successfully</returns>
		public async Task<Individual> IndividualsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Individual>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an individual
		/// Update an individual
		/// 
		/// IndividualsPut individuals/{partyId}
		/// </summary>
		/// <param name="requestBody">Individual resource</param>
		/// <returns>Individual was updated</returns>
		public async Task<Individual> IndividualsPutAsync(individual requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Individual>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of addresses
		/// Individuals AddressesGet individuals/{partyId}/addresses
		/// </summary>
		/// <returns>Addresses were retrieved successfully</returns>
		public async Task<address[]> Individuals AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<address[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an address
		/// Create an address
		/// 
		/// Individuals AddressesPost individuals/{partyId}/addresses
		/// </summary>
		/// <param name="requestBody">Address resource</param>
		public async Task Individuals AddressesPostAsync(address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an address
		/// Delete an address
		/// 
		/// Individuals AddressesDelete individuals/{partyId}/addresses/{addressId}
		/// </summary>
		public async Task Individuals AddressesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an address
		/// Retrieve an address
		/// 
		/// Individuals AddressesGet individuals/{partyId}/addresses/{addressId}
		/// </summary>
		/// <returns>Address was retrieved successfully</returns>
		public async Task<Address> Individuals AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an address
		/// Update an address
		/// 
		/// Individuals AddressesPut individuals/{partyId}/addresses/{addressId}
		/// </summary>
		/// <param name="requestBody">Address resource</param>
		/// <returns>Address was updated</returns>
		public async Task<Address> Individuals AddressesPutAsync(address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of business names
		/// Individuals Business NamesGet individuals/{partyId}/business-names
		/// </summary>
		/// <returns>Business Names were retrieved successfully</returns>
		public async Task<business-name[]> Individuals Business NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/business-names";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<business-name[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a business name
		/// Create a business name
		/// 
		/// Individuals Business NamesPost individuals/{partyId}/business-names
		/// </summary>
		/// <param name="requestBody">Business Name resource</param>
		public async Task Individuals Business NamesPostAsync(business-name requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/business-names";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a business name
		/// Delete a business name
		/// 
		/// Individuals Business NamesDelete individuals/{partyId}/business-names/{productId}
		/// </summary>
		public async Task Individuals Business NamesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a business name
		/// Retrieve a business name
		/// 
		/// Individuals Business NamesGet individuals/{partyId}/business-names/{productId}
		/// </summary>
		/// <returns>Business Name was retrieved successfully</returns>
		public async Task<Business-name> Individuals Business NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Business-name>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a business name
		/// Update a business name
		/// 
		/// Individuals Business NamesPut individuals/{partyId}/business-names/{productId}
		/// </summary>
		/// <param name="requestBody">Business Name resource</param>
		/// <returns>Address was updated</returns>
		public async Task<Business-name> Individuals Business NamesPutAsync(business-name requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Business-name>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of electronic addresses
		/// Individuals Electronic AddressesGet individuals/{partyId}/electronic-addresses
		/// </summary>
		/// <returns>Electronic addresses were retrieved successfully</returns>
		public async Task<electronic-address[]> Individuals Electronic AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/electronic-addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<electronic-address[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an electronic address
		/// Create an electronic address
		/// 
		/// Individuals Electronic AddressesPost individuals/{partyId}/electronic-addresses
		/// </summary>
		/// <param name="requestBody">Electronic Address resource</param>
		public async Task Individuals Electronic AddressesPostAsync(electronic-address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/electronic-addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an electronic address
		/// Delete an electronic address
		/// 
		/// Individuals Electronic AddressesDelete individuals/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		public async Task Individuals Electronic AddressesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an electronic address
		/// Retrieve an electronic address
		/// 
		/// Individuals Electronic AddressesGet individuals/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		/// <returns>Electronic Address was retrieved successfully</returns>
		public async Task<Electronic-address> Individuals Electronic AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Electronic-address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an electronic address
		/// Update an electronic address
		/// 
		/// Individuals Electronic AddressesPut individuals/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		/// <param name="requestBody">Electronic Address resource</param>
		/// <returns>Electronic Address was updated</returns>
		public async Task<Electronic-address> Individuals Electronic AddressesPutAsync(electronic-address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Electronic-address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of licenses
		/// Individuals LicensesGet individuals/{partyId}/licenses
		/// </summary>
		/// <returns>Licenses were retrieved successfully</returns>
		public async Task<license[]> Individuals LicensesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/licenses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<license[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a license
		/// Create a license
		/// 
		/// Individuals LicensesPost individuals/{partyId}/licenses
		/// </summary>
		/// <param name="requestBody">License resource</param>
		public async Task Individuals LicensesPostAsync(license requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/licenses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a license
		/// Delete a license
		/// 
		/// Individuals LicensesDelete individuals/{partyId}/licenses/{productId}
		/// </summary>
		public async Task Individuals LicensesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a license
		/// Retrieve a license
		/// 
		/// Individuals LicensesGet individuals/{partyId}/licenses/{productId}
		/// </summary>
		/// <returns>License was retrieved successfully</returns>
		public async Task<License> Individuals LicensesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<License>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a license
		/// Update a license
		/// 
		/// Individuals LicensesPut individuals/{partyId}/licenses/{productId}
		/// </summary>
		/// <param name="requestBody">License resource</param>
		/// <returns>License was updated</returns>
		public async Task<License> Individuals LicensesPutAsync(license requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<License>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of roles
		/// Individuals RolesGet individuals/{partyId}/roles
		/// </summary>
		/// <returns>Roles were retrieved successfully</returns>
		public async Task<party-role[]> Individuals RolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/roles";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<party-role[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a role
		/// Create a role
		/// 
		/// Individuals RolesPost individuals/{partyId}/roles
		/// </summary>
		/// <param name="requestBody">Role resource</param>
		public async Task Individuals RolesPostAsync(party-role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/roles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role
		/// Delete a role
		/// 
		/// Individuals RolesDelete individuals/{partyId}/roles/{roleId}
		/// </summary>
		public async Task Individuals RolesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a role
		/// Retrieve a role
		/// 
		/// Individuals RolesGet individuals/{partyId}/roles/{roleId}
		/// </summary>
		/// <returns>Role was retrieved successfully</returns>
		public async Task<Party-role> Individuals RolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Party-role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a role
		/// Update a role
		/// 
		/// Individuals RolesPut individuals/{partyId}/roles/{roleId}
		/// </summary>
		/// <param name="requestBody">Role resource</param>
		/// <returns>Role was updated</returns>
		public async Task<Party-role> Individuals RolesPutAsync(party-role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "individuals/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Party-role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of licenses
		/// Retrieve a list of licenses
		/// 
		/// LicensesGet licenses
		/// </summary>
		/// <returns>A list of licenses was retrieved successfully</returns>
		public async Task<license[]> LicensesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licenses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<license[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of organisations
		/// Retrieve a list of organisations
		/// 
		/// OrganisationsGetByRegisteredIdentifierAndIdentifier organisations
		/// </summary>
		/// <param name="registeredIdentifier">The registered identifier, for example, `ACN` or `ABN`.</param>
		/// <param name="identifier">The identifier, for example, `123456789`.</param>
		/// <returns>A list of organisations was retrieved successfully</returns>
		public async Task<organisation[]> OrganisationsGetByRegisteredIdentifierAndIdentifierAsync(string registeredIdentifier, string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations?registeredIdentifier=" + (registeredIdentifier==null? "" : Uri.EscapeDataString(registeredIdentifier))+"&identifier=" + (identifier==null? "" : Uri.EscapeDataString(identifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<organisation[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an organisation
		/// Create an organisation
		/// 
		/// OrganisationsPost organisations
		/// </summary>
		/// <param name="requestBody">Organisation resource</param>
		public async Task OrganisationsPostAsync(organisation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an organisation
		/// Delete an organisation with the specified identifier
		/// 
		/// OrganisationsDelete organisations/{partyId}
		/// </summary>
		public async Task OrganisationsDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an organisation
		/// Retrieve an organisation with the specified identifier
		/// 
		/// OrganisationsGet organisations/{partyId}
		/// </summary>
		/// <returns>Individual was retrieved successfully</returns>
		public async Task<Organisation> OrganisationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Organisation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an organisation
		/// Update an organisation
		/// 
		/// OrganisationsPut organisations/{partyId}
		/// </summary>
		/// <param name="requestBody">Organisation resource</param>
		/// <returns>Organisation was updated</returns>
		public async Task<Organisation> OrganisationsPutAsync(organisation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Organisation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of addresses
		/// Organisations AddressesGet organisations/{partyId}/addresses
		/// </summary>
		/// <returns>Addresses were retrieved successfully</returns>
		public async Task<address[]> Organisations AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<address[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an address
		/// Create an address
		/// 
		/// Organisations AddressesPost organisations/{partyId}/addresses
		/// </summary>
		/// <param name="requestBody">Address resource</param>
		public async Task Organisations AddressesPostAsync(address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an address
		/// Delete an address
		/// 
		/// Organisations AddressesDelete organisations/{partyId}/addresses/{addressId}
		/// </summary>
		public async Task Organisations AddressesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an address
		/// Retrieve an address
		/// 
		/// Organisations AddressesGet organisations/{partyId}/addresses/{addressId}
		/// </summary>
		/// <returns>Address was retrieved successfully</returns>
		public async Task<Address> Organisations AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an address
		/// Update an address
		/// 
		/// Organisations AddressesPut organisations/{partyId}/addresses/{addressId}
		/// </summary>
		/// <param name="requestBody">Address resource</param>
		/// <returns>Address was updated</returns>
		public async Task<Address> Organisations AddressesPutAsync(address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of business names
		/// Organisations Business NamesGet organisations/{partyId}/business-names
		/// </summary>
		/// <returns>Business Names were retrieved successfully</returns>
		public async Task<business-name[]> Organisations Business NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/business-names";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<business-name[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a business name
		/// Create a business name
		/// 
		/// Organisations Business NamesPost organisations/{partyId}/business-names
		/// </summary>
		/// <param name="requestBody">Business Name resource</param>
		public async Task Organisations Business NamesPostAsync(business-name requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/business-names";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a business name
		/// Delete a business name
		/// 
		/// Organisations Business NamesDelete organisations/{partyId}/business-names/{productId}
		/// </summary>
		public async Task Organisations Business NamesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a business name
		/// Retrieve a business name
		/// 
		/// Organisations Business NamesGet organisations/{partyId}/business-names/{productId}
		/// </summary>
		/// <returns>Business Name was retrieved successfully</returns>
		public async Task<Business-name> Organisations Business NamesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Business-name>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a business name
		/// Update a business name
		/// 
		/// Organisations Business NamesPut organisations/{partyId}/business-names/{productId}
		/// </summary>
		/// <param name="requestBody">Business Name resource</param>
		/// <returns>Address was updated</returns>
		public async Task<Business-name> Organisations Business NamesPutAsync(business-name requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/business-names/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Business-name>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of electronic addresses
		/// Organisations Electronic AddressesGet organisations/{partyId}/electronic-addresses
		/// </summary>
		/// <returns>Electronic addresses were retrieved successfully</returns>
		public async Task<electronic-address[]> Organisations Electronic AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/electronic-addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<electronic-address[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an electronic address
		/// Create an electronic address
		/// 
		/// Organisations Electronic AddressesPost organisations/{partyId}/electronic-addresses
		/// </summary>
		/// <param name="requestBody">Electronic Address resource</param>
		public async Task Organisations Electronic AddressesPostAsync(electronic-address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/electronic-addresses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an electronic address
		/// Delete an electronic address
		/// 
		/// Organisations Electronic AddressesDelete organisations/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		public async Task Organisations Electronic AddressesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an electronic address
		/// Retrieve an electronic address
		/// 
		/// Organisations Electronic AddressesGet organisations/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		/// <returns>Electronic address was retrieved successfully</returns>
		public async Task<Electronic-address> Organisations Electronic AddressesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Electronic-address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an electronic address
		/// Update an electronic address
		/// 
		/// Organisations Electronic AddressesPut organisations/{partyId}/electronic-addresses/{addressId}
		/// </summary>
		/// <param name="requestBody">Electronic Address resource</param>
		/// <returns>Electronic Address was updated</returns>
		public async Task<Electronic-address> Organisations Electronic AddressesPutAsync(electronic-address requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/electronic-addresses/{addressId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Electronic-address>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of licenses
		/// Organisations LicensesGet organisations/{partyId}/licenses
		/// </summary>
		/// <returns>Licenses were retrieved successfully</returns>
		public async Task<license[]> Organisations LicensesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/licenses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<license[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a license
		/// Create a license
		/// 
		/// Organisations LicensesPost organisations/{partyId}/licenses
		/// </summary>
		/// <param name="requestBody">License resource</param>
		public async Task Organisations LicensesPostAsync(license requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/licenses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a license
		/// Delete a license
		/// 
		/// Organisations LicensesDelete organisations/{partyId}/licenses/{productId}
		/// </summary>
		public async Task Organisations LicensesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a license
		/// Retrieve a license
		/// 
		/// Organisations LicensesGet organisations/{partyId}/licenses/{productId}
		/// </summary>
		/// <returns>License was retrieved successfully</returns>
		public async Task<License> Organisations LicensesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<License>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a license
		/// Update a license
		/// 
		/// Organisations LicensesPut organisations/{partyId}/licenses/{productId}
		/// </summary>
		/// <param name="requestBody">License resource</param>
		/// <returns>License was updated</returns>
		public async Task<License> Organisations LicensesPutAsync(license requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/licenses/{productId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<License>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of roles
		/// Organisations RolesGet organisations/{partyId}/roles
		/// </summary>
		/// <returns>Roles were retrieved successfully</returns>
		public async Task<party-role[]> Organisations RolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/roles";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<party-role[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a role
		/// Create a role
		/// 
		/// Organisations RolesPost organisations/{partyId}/roles
		/// </summary>
		/// <param name="requestBody">Role resource</param>
		public async Task Organisations RolesPostAsync(party-role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/roles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a role
		/// Delete a role
		/// 
		/// Organisations RolesDelete organisations/{partyId}/roles/{roleId}
		/// </summary>
		public async Task Organisations RolesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a role
		/// Retrieve a role
		/// 
		/// Organisations RolesGet organisations/{partyId}/roles/{roleId}
		/// </summary>
		/// <returns>Role was retrieved successfully</returns>
		public async Task<Party-role> Organisations RolesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Party-role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a role
		/// Update a role
		/// 
		/// Organisations RolesPut organisations/{partyId}/roles/{roleId}
		/// </summary>
		/// <param name="requestBody">Role resource</param>
		/// <returns>Role was updated</returns>
		public async Task<Party-role> Organisations RolesPutAsync(party-role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organisations/{partyId}/roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Party-role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
