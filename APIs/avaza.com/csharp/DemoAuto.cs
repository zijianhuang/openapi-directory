//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowHidingCompletedTasksOnTimesheet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Format: ISO "YYYY-MM-DD HH:mm:ss.SSS"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrentServerTimeISO { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> LockApprovedTimesheets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subdomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimesheetDayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimesheetDisplayFormatCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WeeklyTimesheetReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Has24HourTimesheetFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasStartEndTimesheets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountTaskTypeDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountTaskTypeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IconType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Company
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CompanyContact[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultTradingTermIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompanyContact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContactID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompanyList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Company[] Companies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompanyContact[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// New Subscription to be Created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSubscription
	{
		
		/// <summary>
		/// The event code to be notified about. Possible values: company_created, contact_created, invoice_created, invoice_sent, project_created, task_created
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Event { get; set; }
		
		/// <summary>
		/// Optional Secret string (255 char max). If provided, the secret will be BASE 64 encoded and used as a basic authentication http header with webhook notifications. i.e. Authorization Basic [BASE64 of Secret]"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Secret { get; set; }
		
		/// <summary>
		/// The URL that should be notified of the event.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Target_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditNote
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteAllocation[] CreditNoteAllocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNoteLineItem[] CreditNoteLineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreditNoteNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditNoteAllocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AllocationAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AllocationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> CreditNoteTransactionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InvoiceTransactionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionAllocationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditNoteLineItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionLineItemID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditNoteList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreditNote[] CreditNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Currency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DecimalPlaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrencyList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Currency[] Currencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EstimateDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateSent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> EstimateID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimateItemNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimatePrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimateStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EstimateTaxConfigCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IssuerDetails Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EstimateLineItemDetails[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EstimateLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipientDetails Recipient { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IssuerDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EstimateLineItemDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> EstimateLineItemID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InventoryItemIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemSKU { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EstimateLinks
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientView { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Edit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecipientDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientBillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientBillingAddressCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientBillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientBillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientBillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientFormattedBillingAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EstimateList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EstimateDetails[] Estimates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpenseDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChargeableStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseApprovalStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExpenseCategoryHasUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpenseCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseCategoryUnitName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExpenseCategoryUnitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpenseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ExpenseID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ExpenseReimbursementIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseReimbursementStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ExpenseReportIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseReportName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Merchant { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MerchantTaxNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionTaxConfigCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsChargeable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReimbursable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpenseList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExpenseDetails[] Expenses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FixedAmountDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FixedAmountID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InventoryItemIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpdatedByUserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInvoiced { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FixedAmountList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FixedAmountDetails[] FixedAmounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CostPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InventoryItemID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SKU { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SalePrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SaleTaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsHidden { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryItem[] Inventory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invoice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerPONumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateSent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IssuerDetails Issuer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InvoiceLineItem[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InvoiceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecipientDetails Recipient { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionTaxConfigCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceLineItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InventoryItemIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemSKU { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionLineItemID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceLinks
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientView { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Edit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Invoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewCompany
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewCompanyContact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddressCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyBillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ContactEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UpdateExisting { get; set; }
	}
	
	/// <summary>
	/// New Estimate to be created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewEstimate
	{
		
		/// <summary>
		/// If left blank then you must specify Company Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		/// <summary>
		/// If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the Estimate creation will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the Estimate will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. 100 characters max
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerPONumber { get; set; }
		
		/// <summary>
		/// If not specified it will use today's date. The date should be specified as local date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		/// <summary>
		/// It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next Estimate number in the sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EstimateNumber { get; set; }
		
		/// <summary>
		/// A prefix for the Estimate number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EstimatePrefix { get; set; }
		
		/// <summary>
		/// Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EstimateTaxConfigCode { get; set; }
		
		/// <summary>
		/// Exchange rate is only valid for Estimates in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		/// <summary>
		/// If left blank the account default Estimate template will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvoiceTemplateIDFK { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewEstimateLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. (no HTML). Max 2000 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. (no HTML). 255 characters max
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
	}
	
	/// <summary>
	/// Line item to be added to new Estimate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewEstimateLineItem
	{
		
		/// <summary>
		/// Plain UTF8 text. (no HTML)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Enter 10.5 to give a 10.5% discount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Discount { get; set; }
		
		/// <summary>
		/// If not specified then Inventory Item Name must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryItemIDFK { get; set; }
		
		/// <summary>
		/// If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemName { get; set; }
		
		/// <summary>
		/// The quantity for the line item
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Quantity { get; set; }
		
		/// <summary>
		/// If specified then it must match an existing Tax ID. If not specified then Tax Name and Tax Percent must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		/// <summary>
		/// Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxName { get; set; }
		
		/// <summary>
		/// The Tax Percent will only be used if a new tax is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxPercent { get; set; }
		
		/// <summary>
		/// The unit price for the lineitem.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewExpense
	{
		
		/// <summary>
		/// Expense Amount (Required). Must be &gt;= 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// A 3-letter ISO CurrencyCode for the expense currency. (e.g. USD). If not provided, defaults to the Account base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The Avaza Customer ID to associate the Expense with. Either this field or CustomerName can be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		/// <summary>
		/// The name of an existing customer in Avaza. Must be an exact (case insensitive) match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerName { get; set; }
		
		/// <summary>
		/// Optional (Only relevant if the expense currency is different to your account currency. If not provided we will look up the market exchange rate for you based on the expense date.) Exchange Rate = Expense Currency Amount / Base Currency Amount (e.g. if Expense currency is in AUD, and Base Currency is in USD, Exchange Rate = AUD $140 / USD $100 = 1.4)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// The expense category to link the Expense to. If not provided, ExpenseCategoryName must be provided
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpenseCategoryIDFK { get; set; }
		
		/// <summary>
		/// Must match an existing expense category name otherwise a new category will be created. If left blank Expense Category ID must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExpenseCategoryName { get; set; }
		
		/// <summary>
		/// The date of the expense entry (Required)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpenseDate { get; set; }
		
		/// <summary>
		/// Links the expense to a Grouping/Trip report. If no matching name found, creates a new Group/Trip Report name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupTripName { get; set; }
		
		/// <summary>
		/// The name of the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Merchant { get; set; }
		
		/// <summary>
		/// A Tax number identifier for the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantTaxNumer { get; set; }
		
		/// <summary>
		/// Expense Notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// The Avaza project ID to associate the Expense with.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		/// <summary>
		/// Can work for matching an expense to a project, but only if it's an exact match for a single project under the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Avaza Tax ID the expense belongs to. If left blank then Tax Name must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		/// <summary>
		/// Must exactly match an existing Tax Name that you have configured in Avaza Tax settings. If left blank then Tax ID must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxName { get; set; }
		
		/// <summary>
		/// Optional - Enter "INC" if the tax amount is included in the expense amount otherwise enter "EX" when the amount exlcudes the tax. Defaults to "Ex". The tax amount on the expense will be autocalculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransactionTaxConfigCode { get; set; }
		
		/// <summary>
		/// The email address of a Timesheet/Expense user in Avaza. If not provided, UserIDFK field must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserEmail { get; set; }
		
		/// <summary>
		/// UserID for a Timesheet/Expense user in Avaza. If not provided, UserEmail field must be provided
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		/// <summary>
		/// aka Billable. Defaults to false if not provided. If set to true, a CustomerIDFK or CustomerName must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsChargeable { get; set; }
		
		/// <summary>
		/// Defaults to false if not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReimbursable { get; set; }
	}
	
	/// <summary>
	/// New invoice to be created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewInvoice
	{
		
		/// <summary>
		/// If left blank then you must specify Company Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		/// <summary>
		/// If left blank then you must specify Company ID. Specified Name will be used to match existing customer record. If not matched then it will be used to create a new customer. First Name, Last Name and Email will only be used if it is a new company. If the Company name appears multiple times we will check the email address to find a matching company. If email address doesn't identify a matching company then the invoice creation will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Expects ISO Standard 3 character currency code. If left blank the currency will default to account's currency in general setting. For existing companies this field will be ignored and the invoice will use the currency of the customer. For new customers if the currency is not specified then account currency will be used otherwise the specified currency will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. 100 characters max
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerPONumber { get; set; }
		
		/// <summary>
		/// If not specified it will use today's date. The date should be specified as local date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		/// <summary>
		/// It will be auto calculated based on the payment term and issue date. Due Date must be greater than or equal to Issue Date. If the Due Date is specified then Payment Terms will be set to -1 (Custom)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Exchange rate is only valid for invoices in currency other than default account currency. If not specified it will get the market rate based on the Date Issued.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		/// <summary>
		/// Pass any string. If left blank it will use the next number in the auto incrementing sequence. If an integer is passed then the largest integer will be use as the seed to auto generate the next invoice number in the sequence.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceNumber { get; set; }
		
		/// <summary>
		/// If left blank the account default invoice template will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvoiceTemplateIDFK { get; set; }
		
		/// <summary>
		/// Specified value will be used to create a new customer contact only if a new customer is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewInvoiceLineItem[] LineItems { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. (no HTML). Max 2000 characters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		///  "If left blank we will set it to customer default. If specified then it must match one of your existing pre configured payment term periods. Your account starts with:
		///(-1 --- Custom, 0 --- Upon Receipt, 7 --- 7 Days, 15 --- 15 Days, 30 --- 30 Days, 45 --- 45 Days, 60 --- 60 Days)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PaymentTerms { get; set; }
		
		/// <summary>
		/// Plain UTF8 text. (no HTML). 255 characters max
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		/// <summary>
		/// A prefix for the Invoice number. e.g. 'INV'. If left blank it will be set to the account default. Max length 20 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransactionPrefix { get; set; }
		
		/// <summary>
		/// Possible values are (EX --- Tax Exclusive, INC --- Tax Inclusive). If left empty it will use the account default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransactionTaxConfigCode { get; set; }
	}
	
	/// <summary>
	/// Line item to be added to new invoice
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewInvoiceLineItem
	{
		
		/// <summary>
		/// Plain UTF8 text. (no HTML)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Enter 10.5 to give a 10.5% discount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Discount { get; set; }
		
		/// <summary>
		/// If not specified then Inventory Item Name must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryItemIDFK { get; set; }
		
		/// <summary>
		/// If not specified then Inventory item ID must be specified. If specified and not matched to any existing inventory items then a new inventory item will be created. Max 200 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryItemName { get; set; }
		
		/// <summary>
		/// Optional. Project ID of an Avaza Project that belongs to this customer, so line item is attributed to that Project for reporting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		/// <summary>
		/// The quantity for the line item
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Quantity { get; set; }
		
		/// <summary>
		/// If specified then it must match an existing Tax ID. If not specified then Tax Name and Tax Percent must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		/// <summary>
		/// Must be specified if the Tax ID is blank. If the Tax Name is specified it will be matched to an existing Tax Name or else a new Tax will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxName { get; set; }
		
		/// <summary>
		/// The Tax Percent will only be used if a new tax is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TaxPercent { get; set; }
		
		/// <summary>
		/// The unit price for the lineitem.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double UnitPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPayment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Only required if no invoice allocations specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		/// <summary>
		/// Date of Payment. If not specified, assumes today.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		/// <summary>
		/// Optional. Only used when the Customer's currecy is different from the Avaza account's base currency. Specifies the exchange rate that should apply between the customer currency and base currency. If not provided we will obtain an up to date exchange rate for the Payment Issue Date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// List of amounts within this payment that are allocated to invoices. The sum of these be less than or equal to the payment amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NewPaymentAllocation[] PaymentAllocations { get; set; }
		
		/// <summary>
		/// Optional. If not specified will be automatically generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentNumber { get; set; }
		
		/// <summary>
		/// Optional for storing the payment provider who was the source of funds.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentProviderCode { get; set; }
		
		/// <summary>
		/// Optional to override the default prefix added to Payment Numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransactionPrefix { get; set; }
		
		/// <summary>
		/// Optional for storing the reference # of the payment method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransactionReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewPaymentAllocation
	{
		
		/// <summary>
		/// The Amount being allocated to the invoice. Expects same currency as invoice currency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AllocationAmount { get; set; }
		
		/// <summary>
		/// Optional. Defaults to the current time in the Avaza account's timezone. The date the allocation is applied to the invoice. Can be difference from the Payment Date when doing prepayments etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AllocationDate { get; set; }
		
		/// <summary>
		/// The Avaza Invoice TransactionID that is having a payment amount allocated to it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InvoiceTransactionIDFK { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewProjectMember
	{
		
		/// <summary>
		/// Optional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetAmount { get; set; }
		
		/// <summary>
		/// Optional. If not provided, defaults to the User's default Cost Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CostAmount { get; set; }
		
		/// <summary>
		/// Required. The ProjectID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		/// <summary>
		/// Optional. If not provided, defaults to the User's default Rate Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RateAmount { get; set; }
		
		/// <summary>
		/// Required. The UserID to assign
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanCommentOnTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanCreateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanDeleteTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanUpdateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsProjectManager { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetApprovalRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetApprover { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewProjectModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetHours { get; set; }
		
		/// <summary>
		/// An ID of a company in Avaza to create the Project under. You must provide either a CompanyID, or a CompanyName
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		/// <summary>
		/// The name for a Company to create the project under. Will create company unless it matches an existing company name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// The ISO 3 letter currency code to use when creating a new Company. If not provided, the account's default currency will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PopulateDefaultProjectMembers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectCategoryIDFK { get; set; }
		
		/// <summary>
		/// Any descriptive notes about the project. (2000 characters max)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectStatusCode { get; set; }
		
		/// <summary>
		/// The title of the new project. (255 characters max)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TimesheetApprovalRequiredbyDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTaskRequiredOnTimesheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewSection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewTag
	{
		
		/// <summary>
		/// Hex color code in format #000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountTaskTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AssignedToUserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDueUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStartUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Decimal hours
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedEffort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ProjectIDFK { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SectionIDFK { get; set; }
		
		/// <summary>
		/// Collection of tags specifying Name and Color (Hex)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NewTag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriorityCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewTimesheet
	{
		
		/// <summary>
		/// The duration of the timesheet, in decimal hours. If null or 0, a timer will be started.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// The date of the timesheet entry, with an optional start time component.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		/// <summary>
		/// Timesheet Notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// The project to associate the timesheet with.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		/// <summary>
		/// Optional. Link the timesheet to a specific task
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskIDFK { get; set; }
		
		/// <summary>
		/// The Project timesheet category to link the timesheet to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimesheetCategoryIDFK { get; set; }
		
		/// <summary>
		/// UserID for a Timesheet user in Avaza
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		/// <summary>
		/// If true, the start time will be take from the time component of the Entry Date field, and the end time will be calculated by adding the Duration to the StartDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasStartEndTime { get; set; }
		
		/// <summary>
		/// Optional. False by default. Allows you to mark the timesheet as invoiced in an external system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInvoiced { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Payment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateIssued { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentAllocation[] PaymentAllocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaymentNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaymentProviderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentAllocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AllocationAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AllocationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InvoiceTransactionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> PaymentTransactionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TransactionAllocationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Payment[] Payments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectCompanyGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectDropdownSelection[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDropdownSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultAccountTaskTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultAccountTaskTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectMemberDetails[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Possible values: CategoryHourly, NoRate, NotBillable, PersonHourly, ProjectHourly
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectBillableTypeCode { get; set; }
		
		/// <summary>
		/// Possible Values: CategoryHours, NoBudget, PersonHours, ProjectFees, ProjectHours
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectBudgetTypeCode { get; set; }
		
		/// <summary>
		/// Html Hex Color Code starting with #
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectCategoryColor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProjectHourlyRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectID { get; set; }
		
		/// <summary>
		/// Possible values: NotStarted, InProgress, Complete
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProjectStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectTagItem[] ProjectTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectSectionDetails[] Sections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTaskRequiredOnTimesheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectMemberDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CostAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fullname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RateAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanCommentOnTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanCreateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanDeleteTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CanUpdateTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMemberDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsProjectManager { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetApprovalRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTimesheetApprover { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectTagItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectTagID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectSectionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SectionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDropdownList
	{
		
		/// <summary>
		/// Current page size
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// List of Projects grouped by Customer Name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCompanyGroup[] Companies { get; set; }
		
		/// <summary>
		/// More records probably exist
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		/// <summary>
		/// Current page number (1 based)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectListDetails[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectListDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultAccountTaskTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultAccountTaskTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsArchived { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTaskRequiredOnTimesheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectTimesheetCategoryDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BudgetHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CostAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RateAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeSheetCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectTimesheetCategoryList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectTimesheetCategoryDetails[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleAssignmentDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ScheduleAssignmentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ScheduleDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ScheduleSeriesIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleAssignmentList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAssignmentDetails[] ScheduleAssignments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleSeriesDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HoursPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LeaveTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LeaveTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ScheduleOnDaysOff { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ScheduleSeriesID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeSheetCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeSheetCategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpdatedByUserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleSeriesList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleSeriesDetails[] ScheduleSeries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SectionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SectionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SectionList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SectionDetails[] Sections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubscribeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TagID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountTaskTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ActualTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignedToEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignedToFirstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignedToLastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssignedToUserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDueUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStartUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DescriptionNoHTML { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedEffort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PercentComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SectionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagItem[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriorityCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriorityName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskStatusName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCompleteStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskDropdownList
	{
		
		/// <summary>
		/// Current page size
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// More records probably exist
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		/// <summary>
		/// Current page number (1 based)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// List of Task grouped by Section
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaskSectionGroup[] Sections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskSectionGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskDropdownSelection[] Tasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskDropdownSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskDetails[] Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountTaskTypeIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsComplete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskStatusList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TaskStatusDetails[] Statuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaskTypeList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountTaskTypeDetails[] Tasktypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxComponent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ComponentTaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Percentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxComponentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCompound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CalculatedPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxComponent[] TaxComponents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TaxItem[] Taxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimesheetDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ApprovedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CustomerIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateApproved { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTimeLocal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasTimer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InvoiceIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> InvoiceLineItemIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProjectTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTimeLocal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTimeUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimerStartedAtUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimesheetCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimesheetEntryApprovalStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TimesheetEntryID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimesheetUserTimeZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInvoiced { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimesheetList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimesheetDetails[] Timesheets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimesheetSummaryGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BillableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimesheetSummaryGroup[] GroupData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalHours { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimesheetSummaryRequest
	{
		
		/// <summary>
		/// (Required) Filter for timesheets greater or equal to the specified date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDateFrom { get; set; }
		
		/// <summary>
		/// (Required) Filter for timesheets with an entry date smaller or equal to the specified  date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDateTo { get; set; }
		
		/// <summary>
		/// (Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: "Customer", "Project", "Category", "User", "Task", "Year", "Month", "Day", "Week".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupBy { get; set; }
		
		/// <summary>
		/// (Optional) Filter by Project
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProjectID { get; set; }
		
		/// <summary>
		/// (Optional) Defaults to the current user. Provide one or more UserIDs of Users whose timesheets should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] UserID { get; set; }
		
		/// <summary>
		/// (Optional) Filter by the billable status of Timesheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBillable { get; set; }
		
		/// <summary>
		/// (Optional) Filter for timesheets by whether they have been Invoiced or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsInvoiced { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimesheetSummaryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BillableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDateFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDateTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TimesheetSummaryGroup[] GroupData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupingLevels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[] UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCompany
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressPostCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddressState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldsToUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaxNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AssignedToUserIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDueUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateStartUTC { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Decimal hours
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EstimatedEffort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldsToUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SectionIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NewTag[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TaskID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskPriorityCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TaskStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTimesheetModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EntryDate { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FieldsToUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ProjectIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaskIDFK { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long TimeSheetEntryID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimesheetCategoryIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasStartEndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AccountIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompanyIDFK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DefaultBillableRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DefaultCostRate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FridayAvailableHours { get; set; }
		
		/// <summary>
		/// IANA tz database timezone name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IANATimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mobile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MondayAvailableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PositionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleDetails[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SaturdayAvailableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SundayAvailableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserTagDetails[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ThursdayAvailableHours { get; set; }
		
		/// <summary>
		/// Windows Timezone ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TuesdayAvailableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WednesdayAvailableHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTeamMember { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserTagDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserTagID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserTagName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserDetails[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WebhookDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NotificationURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubscriptionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserIDFK { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WebhookList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WebhookDetails[] Webhooks { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Account Details
		/// Account_Get api/Account
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AccountDetails> Account_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Account";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AccountDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Companies
		/// Company_Get api/Company
		/// </summary>
		/// <param name="pageSize">Number of results per page</param>
		/// <param name="pageNumber">1 based page number to retrieve</param>
		/// <returns>Success</returns>
		public async Task<CompanyList> Company_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Company?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CompanyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Company
		/// Company_Post api/Company
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Company> Company_PostAsync(NewCompany requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Company";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Company>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Company record.
		/// Requires CompanyID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.
		/// Company_Put api/Company
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Company> Company_PutAsync(UpdateCompany requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Company";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Company>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets Company by Company ID
		/// Company_GetByID api/Company/{id}
		/// </summary>
		/// <param name="id">Company ID Number</param>
		/// <returns>Success</returns>
		public async Task<Company> Company_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Company/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Company>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Contacts
		/// Contact_Get api/Contact
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<ContactList> Contact_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, int CompanyIDFK, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Contact?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort))+"&CompanyIDFK="+CompanyIDFK;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContactList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Contact
		/// Contact_Post api/Contact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CompanyContact> Contact_PostAsync(NewCompanyContact requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Contact";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CompanyContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets Contact by Contact ID
		/// Contact_GetByID api/Contact/{id}
		/// </summary>
		/// <param name="id">Contact ID number</param>
		/// <returns>Success</returns>
		public async Task<CompanyContact> Contact_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Contact/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CompanyContact>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of CreditNotes
		/// CreditNote_Get api/CreditNote
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<CreditNoteList> CreditNote_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/CreditNote?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreditNoteList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Credit Note by CreditNoteID
		/// CreditNote_GetByID api/CreditNote/{id}
		/// </summary>
		/// <param name="id">Credit Note ID Number</param>
		/// <returns>Success</returns>
		public async Task<CreditNote> CreditNote_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/CreditNote/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreditNote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Currencies
		/// Currency_Get api/Currency
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CurrencyList> Currency_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Currency";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CurrencyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Estimates
		/// EstimateStatusCode values are: "Draft", "Sent", "Accepted", "Converted", "Expired", "Rejected"
		/// Estimate_Get api/Estimate
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<EstimateList> Estimate_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, int CompanyIDFK, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Estimate?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort))+"&CompanyIDFK="+CompanyIDFK;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EstimateList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new draft Estimate
		/// Estimate_Post api/Estimate
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EstimateDetails> Estimate_PostAsync(NewEstimate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Estimate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EstimateDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets Estimate by Estimate ID
		/// Estimate_GetByID api/Estimate/{id}
		/// </summary>
		/// <param name="id">Estimate Estimate ID number</param>
		public async Task Estimate_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Estimate/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Expenses
		/// Expense_Get api/Expense
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<ExpenseList> Expense_GetAsync(System.DateTimeOffset UpdatedAfter, System.DateTimeOffset ExpenseDateFrom, System.DateTimeOffset ExpenseDateTo, string UserEmail, string CategoryName, int CustomerID, int ProjectID, bool isChargeable, bool isInvoiced, long ExpenseReimbursementIDFK, int pageSize, int pageNumber, string Sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Expense?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ExpenseDateFrom=" + ExpenseDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ExpenseDateTo=" + ExpenseDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UserEmail=" + (UserEmail==null? "" : Uri.EscapeDataString(UserEmail))+"&CategoryName=" + (CategoryName==null? "" : Uri.EscapeDataString(CategoryName))+"&CustomerID="+CustomerID+"&ProjectID="+ProjectID+"&isChargeable="+isChargeable+"&isInvoiced="+isInvoiced+"&ExpenseReimbursementIDFK="+ExpenseReimbursementIDFK+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExpenseList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Expense
		/// Create an Expense
		/// Expense_Post api/Expense
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ExpenseDetails> Expense_PostAsync(NewExpense requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Expense";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExpenseDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets an Expense Entry by Expense ID
		/// Expense_GetByID api/Expense/{id}
		/// </summary>
		/// <param name="id">Expense ID number</param>
		/// <returns>Success</returns>
		public async Task<ExpenseDetails> Expense_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Expense/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExpenseDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Fixed Amounts
		/// FixedAmount_Get api/FixedAmount
		/// </summary>
		/// <param name="ProjectID">(Optional) The ProjectID of a Project to filter Fixed Amounts for</param>
		/// <param name="TaskID">(Optional) The TaskID of a Task to filter Fixed Amounts for</param>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="Sort">Optional sorting instruction. Currently possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc","EntryDate", "EntryDate desc", "StartTimeLocal","StartTimeLocal desc", "TimeSheetEntryID", "TimeSheetEntryID desc"</param>
		/// <returns>Success</returns>
		public async Task<FixedAmountList> FixedAmount_GetAsync(System.DateTimeOffset UpdatedAfter, System.DateTimeOffset EntryDateFrom, System.DateTimeOffset EntryDateTo, int ProjectID, int TaskID, bool isInvoiced, int pageSize, int pageNumber, string Sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/FixedAmount?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EntryDateFrom=" + EntryDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EntryDateTo=" + EntryDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ProjectID="+ProjectID+"&TaskID="+TaskID+"&isInvoiced="+isInvoiced+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FixedAmountList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Inventory
		/// Inventory_Get api/Inventory
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<InventoryList> Inventory_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Inventory?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InventoryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets InventoryItem by InventoryItem ID
		/// Inventory_GetByID api/Inventory/{id}
		/// </summary>
		/// <param name="id">InventoryItem ID number</param>
		public async Task Inventory_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Inventory/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Invoices
		/// TransactionStatusCode values are: "Draft", "Sent", "Late", "Paid", "Partial", "Void"
		/// Invoice_Get api/Invoice
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<InvoiceList> Invoice_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, int CompanyIDFK, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Invoice?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort))+"&CompanyIDFK="+CompanyIDFK;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new draft invoice
		/// Invoice_Post api/Invoice
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Invoice> Invoice_PostAsync(NewInvoice requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Invoice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets Invoice by Invoice ID
		/// Invoice_GetByID api/Invoice/{id}
		/// </summary>
		/// <param name="id">Invoice Transaction ID number</param>
		public async Task Invoice_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Invoice/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Payments
		/// Payment_Get api/Payment
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <returns>Success</returns>
		public async Task<PaymentList> Payment_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Payment?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Payment and optionally assign payment allocations to Invoices
		/// Payment_Post api/Payment
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Payment> Payment_PostAsync(NewPayment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Payment";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets Payment by Payment Transaction ID
		/// Payment_GetByID api/Payment/{id}
		/// </summary>
		/// <param name="id">Invoice Transaction ID Number</param>
		/// <returns>Success</returns>
		public async Task<Payment> Payment_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Payment/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Projects
		/// Project_Get api/Project
		/// </summary>
		/// <param name="UpdatedAfter">Only show project records updated after a certain date (UTC)</param>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="Sort">A column to sort on. Current possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc"</param>
		/// <param name="TimesheetUserID">Filter to the projects that the supplied UserID can add timesheets to</param>
		/// <param name="includeArchived">Include Archived Projects in the results</param>
		/// <returns>OK</returns>
		public async Task<ProjectList> Project_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, int TimesheetUserID, bool includeArchived, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Project?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort))+"&TimesheetUserID="+TimesheetUserID+"&includeArchived="+includeArchived;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Project
		/// Project_Post api/Project
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectDetails> Project_PostAsync(NewProjectModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Project";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets minimal list of active Projects for the current user
		/// ProjectLookup api/Project/Lookup
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="TimesheetUserID">Filter to the projects that the supplied UserID can add timesheets to</param>
		/// <param name="search">Search string to match against Project title and Customer name</param>
		/// <returns>OK</returns>
		public async Task<ProjectDropdownList> ProjectLookupAsync(int pageSize, int pageNumber, int TimesheetUserID, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Project/Lookup?pageSize="+pageSize+"&pageNumber="+pageNumber+"&TimesheetUserID="+TimesheetUserID+"&search=" + (search==null? "" : Uri.EscapeDataString(search));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectDropdownList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Project by Project ID
		/// Project_GetByID api/Project/{id}
		/// </summary>
		/// <param name="id">Project ID number</param>
		/// <returns>Success</returns>
		public async Task<ProjectDetails> Project_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Project/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign a user as a Member of a Project
		/// the Amount columns for Cost, Budget, Rates should be specified as a decimal. Financial amounts assume the currency of the Customer company. Budget units depend on the Budget method set on the Project.
		/// ProjectMember_Post api/ProjectMember
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ProjectMemberDetails> ProjectMember_PostAsync(NewProjectMember requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ProjectMember";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectMemberDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets list of Project Timesheet Categories
		/// The default sort order is by isBillable desc, Name asc
		/// ProjectTimesheetCategory_Get api/ProjectTimesheetCategory
		/// </summary>
		/// <param name="ProjectID">Get categories filtered by ProjectID</param>
		/// <returns>Success</returns>
		public async Task<ProjectTimesheetCategoryList> ProjectTimesheetCategory_GetAsync(int ProjectID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ProjectTimesheetCategory?ProjectID="+ProjectID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectTimesheetCategoryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Schedule Assignments.
		/// Schedule assignments are per-day, and link to a parent Schedule Series.
		/// ScheduleAssignment_Get api/ScheduleAssignment
		/// </summary>
		/// <param name="UpdatedAfter">Limit results to records updated after the specified date</param>
		/// <param name="ScheduleDateFrom">Filter for schedule assignement  that are  on or after a specific date</param>
		/// <param name="ScheduleDateTo">Filter for schedules that are on or before a specific date</param>
		/// <param name="ScheduleSeriesID">Filter to records for a particular Schedule Series</param>
		/// <param name="UserID">The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.</param>
		/// <param name="UserEmail">The email of the user who has been scheduled</param>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="Sort">Optional sorting instruction. Currently possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc"</param>
		/// <returns>Success</returns>
		public async Task<ScheduleAssignmentList> ScheduleAssignment_GetAsync(System.DateTimeOffset UpdatedAfter, System.DateTimeOffset ScheduleDateFrom, System.DateTimeOffset ScheduleDateTo, long ScheduleSeriesID, int UserID, string UserEmail, int pageSize, int pageNumber, string Sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ScheduleAssignment?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleDateFrom=" + ScheduleDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleDateTo=" + ScheduleDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleSeriesID="+ScheduleSeriesID+"&UserID="+UserID+"&UserEmail=" + (UserEmail==null? "" : Uri.EscapeDataString(UserEmail))+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ScheduleAssignmentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Schedule Series
		/// Schedule Series represents a strip of time assigned to a user over a date range, for a certain number of hours per day. They can be for Leave or for project work Bookings.
		/// ScheduleSeries_Get api/ScheduleSeries
		/// </summary>
		/// <param name="UpdatedAfter">Limit results to records updated after the specified date</param>
		/// <param name="ScheduleStartDateFrom">Filter for schedules that start on or after a specific date</param>
		/// <param name="ScheduleStartDateTo">Filter for schedules that start on or before a specific date</param>
		/// <param name="ScheduleEndDateFrom">Filter for schedules that end on or after a specific date</param>
		/// <param name="ScheduleEndDateTo">Filter for schedules that end on or before a specific date</param>
		/// <param name="UserID">The UserID of a schedule user to filter assignments for. Only api users with Admin role can see all schedules across all users. Users with ScheduleUser role can access their own ScheduleSeries.</param>
		/// <param name="UserEmail">The email of the user who has been scheduled</param>
		/// <param name="TimeSheetCategoryID">Filter for schedule records linked to a specific timesheeet category</param>
		/// <param name="TimeSheetCategoryName">Filter for schedule records with a specific timesheeet category name (exact string match)</param>
		/// <param name="LeaveTypeID">Filter to records of a particular leave type</param>
		/// <param name="ProjectID">Filter to only include books linked to a specific project</param>
		/// <param name="CompanyID">Filter to only include records linked to projects, where that project belongs to a specific customer company</param>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="Sort">Optional sorting instruction. Currently possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc"</param>
		/// <returns>Success</returns>
		public async Task<ScheduleSeriesList> ScheduleSeries_GetAsync(
					System.DateTimeOffset UpdatedAfter, 
					System.DateTimeOffset ScheduleStartDateFrom, 
					System.DateTimeOffset ScheduleStartDateTo, 
					System.DateTimeOffset ScheduleEndDateFrom, 
					System.DateTimeOffset ScheduleEndDateTo, 
					int UserID, 
					string UserEmail, 
					int TimeSheetCategoryID, 
					string TimeSheetCategoryName, 
					int LeaveTypeID, 
					int ProjectID, 
					int CompanyID, 
					int pageSize, 
					int pageNumber, 
					string Sort, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ScheduleSeries?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleStartDateFrom=" + ScheduleStartDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleStartDateTo=" + ScheduleStartDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleEndDateFrom=" + ScheduleEndDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ScheduleEndDateTo=" + ScheduleEndDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UserID="+UserID+"&UserEmail=" + (UserEmail==null? "" : Uri.EscapeDataString(UserEmail))+"&TimeSheetCategoryID="+TimeSheetCategoryID+"&TimeSheetCategoryName=" + (TimeSheetCategoryName==null? "" : Uri.EscapeDataString(TimeSheetCategoryName))+"&LeaveTypeID="+LeaveTypeID+"&ProjectID="+ProjectID+"&CompanyID="+CompanyID+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ScheduleSeriesList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Sections
		/// Section_Get api/Section
		/// </summary>
		/// <param name="ProjectID">Get sections for Project with ProjectID</param>
		/// <returns>Success</returns>
		public async Task<SectionList> Section_GetAsync(int ProjectID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Section?ProjectID="+ProjectID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SectionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Section
		/// Section_Post api/Section
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SectionDetails> Section_PostAsync(NewSection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Section";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SectionDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Task
		/// Task_Delete api/Task
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Task_DeleteAsync(long TaskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task?TaskID="+TaskID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Tasks
		/// Task_Get api/Task
		/// </summary>
		/// <param name="UpdatedAfter">Optional filter to records updated after a specific date.</param>
		/// <param name="pageSize">Number of items per page. Defaults to 20.</param>
		/// <param name="pageNumber">Page to display. Starts from 1. Defaults to 1</param>
		/// <param name="Sort">Optional sorting instruction. Currently possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc", "SectionTitle", "Title"</param>
		/// <param name="isComplete">Optional filter to only display tasks linked to a Task Status where isComplete=false, or where isComplete=true</param>
		/// <param name="ProjectID">Optional filter to only display tasks belonging to a specific ProjectID</param>
		/// <returns>Success</returns>
		public async Task<TaskList> Task_GetAsync(System.DateTimeOffset UpdatedAfter, int pageSize, int pageNumber, string Sort, bool isComplete, int ProjectID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort))+"&isComplete="+isComplete+"&ProjectID="+ProjectID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Task
		/// Task_Post api/Task
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TaskDetails> Task_PostAsync(NewTask requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Task.
		/// Requires TaskID and a list of field names to update. The FieldsToUpdate field accepts a string array containing field names that should be updated.
		/// Task_Put api/Task
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TaskDetails> Task_PutAsync(UpdateTask requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets minimal list of Tasks for the current user
		/// Groups Tasks by Section. Default sort is by Section Title followed by Task Title
		/// TaskLookup api/Task/Lookup
		/// </summary>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="projectID">(optional) The ProjectID to use when filtering Tasks</param>
		/// <param name="hideCompleted">(optional) true/false to hide completed tasks. Defaults false</param>
		/// <param name="search">(optional) Search string to match against Task title. Performs begins-with match</param>
		/// <returns>OK</returns>
		public async Task<TaskDropdownList> TaskLookupAsync(int pageSize, int pageNumber, int projectID, bool hideCompleted, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task/Lookup?pageSize="+pageSize+"&pageNumber="+pageNumber+"&projectID="+projectID+"&hideCompleted="+hideCompleted+"&search=" + (search==null? "" : Uri.EscapeDataString(search));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskDropdownList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Task by Task ID
		/// Task_GetByID api/Task/{id}
		/// </summary>
		/// <param name="id">Task ID number</param>
		/// <returns>Success</returns>
		public async Task<TaskDetails> Task_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Task/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Task Statuses
		/// TaskStatus_Get api/TaskStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TaskStatusList> TaskStatus_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TaskStatus";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskStatusList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Task Types
		/// TaskType_Get api/TaskType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TaskTypeList> TaskType_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TaskType";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaskTypeList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List of Taxes configured in the Avaza account.
		/// Tax_Get api/Tax
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TaxList> Tax_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Tax";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TaxList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets list of Timsheets
		/// Timesheet_Get api/Timesheet
		/// </summary>
		/// <param name="UserID">The UserID of a timesheet user to filter timesheets for. Only api users with certain higher roles can see timesheets across multiple users.</param>
		/// <param name="pageSize">Number of items per page (max 1000)</param>
		/// <param name="pageNumber">Page to display. Starts from 1.</param>
		/// <param name="Sort">Optional sorting instruction. Currently possible values: "DateUpdated", "DateCreated", "DateUpdated desc", "DateCreated desc","EntryDate", "EntryDate desc", "StartTimeLocal","StartTimeLocal desc", "TimeSheetEntryID", "TimeSheetEntryID desc"</param>
		/// <returns>Success</returns>
		public async Task<TimesheetList> Timesheet_GetAsync(System.DateTimeOffset UpdatedAfter, System.DateTimeOffset EntryDateFrom, System.DateTimeOffset EntryDateTo, int UserID, string UserEmail, string CategoryName, int ProjectID, bool isBillable, bool isInvoiced, bool isTimerRunning, int pageSize, int pageNumber, string Sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Timesheet?UpdatedAfter=" + UpdatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EntryDateFrom=" + EntryDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EntryDateTo=" + EntryDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UserID="+UserID+"&UserEmail=" + (UserEmail==null? "" : Uri.EscapeDataString(UserEmail))+"&CategoryName=" + (CategoryName==null? "" : Uri.EscapeDataString(CategoryName))+"&ProjectID="+ProjectID+"&isBillable="+isBillable+"&isInvoiced="+isInvoiced+"&isTimerRunning="+isTimerRunning+"&pageSize="+pageSize+"&pageNumber="+pageNumber+"&Sort=" + (Sort==null? "" : Uri.EscapeDataString(Sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Timesheet Entry
		/// Timesheet_Post api/Timesheet
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TimesheetDetails> Timesheet_PostAsync(NewTimesheet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Timesheet";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Timesheet
		/// The FieldsToUpdate field expects a string array collection of the field names you would like updated. Valid fields to update inlcude "ProjectIDFK", "TimeSheetCategoryIDFK", "TaskIDFK", "Duration", "EntryDate", "Notes", "hasStartEndTime". If you intend to provide start/end times on timesheets, this is achieved by including the start time in the EntryDate field (Iso date format), along with a Duration (decimal format).
		/// Timesheet_Put api/Timesheet
		/// </summary>
		/// <returns>OK</returns>
		public async Task<TimesheetDetails> Timesheet_PutAsync(UpdateTimesheetModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Timesheet";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Timesheet Entry
		/// Timesheet_Delete api/Timesheet/{id}
		/// </summary>
		/// <param name="id">The TimesheetEntryID of the Timesheet Entry</param>
		/// <returns>OK</returns>
		public async Task<string> Timesheet_DeleteAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Timesheet/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Timesheet Entry by Timesheet ID
		/// Timesheet_GetByID api/Timesheet/{id}
		/// </summary>
		/// <param name="id">Timesheet ID number</param>
		/// <returns>Success</returns>
		public async Task<TimesheetDetails> Timesheet_GetByIDAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Timesheet/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit Timesheets for Approval.
		/// Either provide a a specific Day (WholeDayOf) or any day in a Week (WholeWeekOf) to submit all draft timesheets in that day or week
		/// TimesheetSubmission_Post api/TimesheetSubmission
		/// </summary>
		/// <param name="SendNotifications">Send email alerts to timesheet approvers. Defaults to true</param>
		/// <param name="WholeWeekOf">A date (yyyy-MM-dd) that falls within  a Week to have all timesheets in that week submitted. Respects the First Day of Week setting in your account Timesheet Settings to determine the week range.</param>
		/// <param name="WholeDayOf">A date (yyyy-MM-dd) to submit all timesheets on this day</param>
		/// <param name="UserID">The user to submit timesheets for. Defaults to current user. Only allowed to be different from the current user when the current user has rights to Impersonate other users.</param>
		/// <returns>OK</returns>
		public async Task<string> TimesheetSubmission_PostAsync(bool SendNotifications, System.DateTimeOffset WholeWeekOf, System.DateTimeOffset WholeDayOf, int UserID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TimesheetSubmission?SendNotifications="+SendNotifications+"&WholeWeekOf=" + WholeWeekOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&WholeDayOf=" + WholeDayOf.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&UserID="+UserID;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Basic Summary of Timesheet Statistics
		/// TimesheetSummary_Get api/TimesheetSummary
		/// </summary>
		/// <param name="model.groupBy">(Optional) Combine one, two or three levels of Grouping. Combine these possible grouping values: "Customer", "Project", "Category", "User", "Task", "Year", "Month", "Day", "Week".</param>
		/// <param name="model.entryDateFrom">(Required) Filter for timesheets greater or equal to the specified date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00</param>
		/// <param name="model.entryDateTo">(Required) Filter for timesheets with an entry date smaller or equal to the specified  date. e.g. 2019-01-25. You can optionally include a time component, otherwise it assumes 00:00</param>
		/// <param name="model.userID">(Optional) Defaults to the current user. Provide one or more UserIDs of Users whose timesheets should be retrieved. If the current user doesn't have impersonation rights, then they will only see their own data.</param>
		/// <param name="model.projectID">(Optional) Filter by Project</param>
		/// <param name="model.isBillable">(Optional) Filter by the billable status of Timesheets.</param>
		/// <param name="model.isInvoiced">(Optional) Filter for timesheets by whether they have been Invoiced or not.</param>
		/// <returns>OK</returns>
		public async Task<TimesheetSummaryResult> TimesheetSummary_GetAsync(string[] model.groupBy, System.DateTimeOffset model.entryDateFrom, System.DateTimeOffset model.entryDateTo, int[] model.userID, int model.projectID, bool model.isBillable, bool model.isInvoiced, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TimesheetSummary?"+String.Join("&", model.groupBy.Select(z => $"model.groupBy={Uri.EscapeDataString(z.ToString())}"))+"&model.entryDateFrom=" + model.entryDateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&model.entryDateTo=" + model.entryDateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", model.userID.Select(z => $"model.userID={z}"))+"&model.projectID="+model.projectID+"&model.isBillable="+model.isBillable+"&model.isInvoiced="+model.isInvoiced;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TimesheetSummaryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the  Running Timer if there is one for a user.
		/// TimesheetTimer_GetRunningTimer api/TimesheetTimer
		/// </summary>
		/// <param name="UserID">Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users</param>
		/// <returns>Success</returns>
		public async Task<string> TimesheetTimer_GetRunningTimerAsync(int UserID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TimesheetTimer?UserID="+UserID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop the timer running on an existing Timesheet Entry
		/// TimesheetTimer_StopTimer api/TimesheetTimer/{id}
		/// </summary>
		/// <param name="id">The ID of the existing timesheet entry that needs its timer stopped</param>
		/// <param name="UserID">Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users</param>
		/// <returns>Success</returns>
		public async Task<string> TimesheetTimer_StopTimerAsync(long id, int UserID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TimesheetTimer/"+id+"?UserID="+UserID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a Timer running on an existing Timesheet Entry
		/// TimesheetTimer_StartTimer api/TimesheetTimer/{id}
		/// </summary>
		/// <param name="id">The ID of the existing timesheet entry on which to start a timer</param>
		/// <param name="UserID">Optional - User ID number if impersonating a different user. Otherwise assumes the current user. Only users with certain security roles have permission to impersonate other users</param>
		/// <returns>Success</returns>
		public async Task<string> TimesheetTimer_StartTimerAsync(long id, int UserID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/TimesheetTimer/"+id+"?UserID="+UserID;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Collection of Users who have roles in the current Avaza account.
		/// Admin and Invoice Managers can see all. Other users are limited to seeing their own profile.
		/// UserProfile_Get api/UserProfile
		/// </summary>
		/// <param name="Roles">Optional list of comma separated role codes to filter users by (e.g. "TimesheetUser,Admin")</param>
		/// <param name="CurrentUserOnly">Optional boolean (true/false) to filter to only show current authenticated user (always true for non Admin/InvoiceManager users)</param>
		/// <param name="CompanyIDFK">Optionally filter by Company ID</param>
		/// <returns>OK</returns>
		public async Task<UserList> UserProfile_GetAsync(string Roles, string Tags, bool CurrentUserOnly, int CompanyIDFK, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/UserProfile?Roles=" + (Roles==null? "" : Uri.EscapeDataString(Roles))+"&Tags=" + (Tags==null? "" : Uri.EscapeDataString(Tags))+"&CurrentUserOnly="+CurrentUserOnly+"&CompanyIDFK="+CompanyIDFK;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UserList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete webhook subscription by URL
		/// Webhook_DeleteByUrl api/Webhook
		/// </summary>
		/// <param name="target_url">Target URL that should be used to delete subscriptions</param>
		/// <returns>Subscription Deleted OK</returns>
		public async Task<string> Webhook_DeleteByUrlAsync(string target_url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Webhook?target_url=" + (target_url==null? "" : Uri.EscapeDataString(target_url));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of Webhook Subscriptions
		/// Webhook_Get api/Webhook
		/// </summary>
		/// <returns>OK</returns>
		public async Task<WebhookList> Webhook_GetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Webhook";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<WebhookList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe to Webhook. On success, returns ID of webhook subscription.
		/// When you receive a webhook, you should respond with Http 200 OK Status Code, otherwise we will retry. To create a webhook, you need both the webhook_notifications scope, as well as the scope for the required entity being monitored.  Event values are: "company_created", "company_deleted", "company_updated", "contact_created", "contact_deleted", "contact_updated", "invoice_created", "invoice_sent","invoice_updated","invoice_deleted", "project_created", "project_deleted", "project_updated", "task_created", "task_updated","task_deleted", "timesheet_created", "timesheet_deleted", "timesheet_updated".  You can subscribe to any webhook, but you will only receive notifications for data appropriate to the roles of your user account. There is an optional  Secret parameter (string 255 char max). This allows for webhook authentication. If provided, the Secret will be BASE 64 encoded and passed with notications as a basic authentication http header. i.e. Authorization Basic [BASE64 of Secret]"
		/// Webhook_Post api/Webhook
		/// </summary>
		public async Task Webhook_PostAsync(CreateSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Webhook";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Webhook Subscription by ID
		/// Webhook_Delete api/Webhook/{id}
		/// </summary>
		/// <param name="id">Subscription id to be deleted</param>
		/// <returns>Subscription deleted ok</returns>
		public async Task<string> Webhook_DeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Webhook/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
