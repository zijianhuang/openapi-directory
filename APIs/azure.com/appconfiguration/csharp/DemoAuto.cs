//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An API key used for authenticating with a configuration store endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiKey
	{
		
		/// <summary>
		/// A connection string that can be used by supporting clients for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionString { get; set; }
		
		/// <summary>
		/// The key ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The last time any of the key's properties were modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A name for the key describing its usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this key can only be used for read operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// The value of the key that is used for authentication purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list API keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApiKeyListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApiKey[] Value { get; set; }
	}
	
	/// <summary>
	/// Parameters used for checking whether a resource name is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CheckNameAvailabilityParameters
	{
		
		/// <summary>
		/// The name to check for availability.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource type to check for name availability.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CheckNameAvailabilityParametersType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CheckNameAvailabilityParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft.AppConfiguration/configurationStores")]
		Microsoft_AppConfiguration_configurationStores = 0,
	}
	
	/// <summary>
	/// The configuration store along with all resource properties. The Configuration Store will have all information to begin utilizing it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationStore
	{
		
		/// <summary>
		/// An identity that can be associated with a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties of a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationStoreProperties Properties { get; set; }
		
		/// <summary>
		/// Describes a configuration store SKU.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Sku Sku { get; set; }
	}
	
	/// <summary>
	/// An identity that can be associated with a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceIdentity
	{
		
		/// <summary>
		/// The principal id of the identity. This property will only be provided for a system-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The tenant id associated with the resource's identity. This property will only be provided for a system-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenantId { get; set; }
		
		/// <summary>
		/// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
		/// </summary>
		public ResourceIdentityType Type { get; set; }
		
		/// <summary>
		/// The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserAssignedIdentities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceIdentityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemAssigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserAssigned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SystemAssigned, UserAssigned")]
		SystemAssigned,_UserAssigned = 3,
	}
	
	/// <summary>
	/// The properties of a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationStoreProperties
	{
		
		/// <summary>
		/// The creation date of configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The encryption settings for a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionProperties Encryption { get; set; }
		
		/// <summary>
		/// The DNS endpoint where the configuration store API will be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		/// <summary>
		/// The provisioning state of the configuration store.
		/// </summary>
		public ConfigurationStorePropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// The encryption settings for a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptionProperties
	{
		
		/// <summary>
		/// Settings concerning key vault encryption for a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyVaultProperties KeyVaultProperties { get; set; }
	}
	
	/// <summary>
	/// Settings concerning key vault encryption for a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyVaultProperties
	{
		
		/// <summary>
		/// The client id of the identity which will be used to access key vault.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IdentityClientId { get; set; }
		
		/// <summary>
		/// The URI of the key vault key used to encrypt data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationStorePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// Describes a configuration store SKU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sku
	{
		
		/// <summary>
		/// The SKU name of the configuration store.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list configuration stores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationStoreListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationStore[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties for updating a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationStorePropertiesUpdateParameters
	{
		
		/// <summary>
		/// The encryption settings for a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionProperties Encryption { get; set; }
	}
	
	/// <summary>
	/// The parameters for updating a configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationStoreUpdateParameters
	{
		
		/// <summary>
		/// An identity that can be associated with a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceIdentity Identity { get; set; }
		
		/// <summary>
		/// The properties for updating a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationStorePropertiesUpdateParameters Properties { get; set; }
		
		/// <summary>
		/// Describes a configuration store SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Sku Sku { get; set; }
		
		/// <summary>
		/// The ARM resource tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	/// <summary>
	/// AppConfiguration error object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The result of a request to retrieve a key-value from the specified configuration store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyValue
	{
		
		/// <summary>
		/// The content type of the key-value's value.
		///Providing a proper content-type can enable transformations of values when they are retrieved by applications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		/// <summary>
		/// An ETag indicating the state of a key-value within a configuration store.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		/// <summary>
		/// The primary identifier of a key-value.
		///The key is used in unison with the label to uniquely identify a key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// A value used to group key-values.
		///The label is used in unison with the key to uniquely identify a key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		/// <summary>
		/// The last time a modifying operation was performed on the given key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A value indicating whether the key-value is locked.
		///A locked key-value may not be modified until it is unlocked.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Locked { get; set; }
		
		/// <summary>
		/// A dictionary of tags that can help identify what a key-value may be applicable for.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// The value of the key-value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used to list a configuration store key-value
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListKeyValueParameters
	{
		
		/// <summary>
		/// The key to retrieve.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// The label of the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
	}
	
	/// <summary>
	/// The result of a request to check the availability of a resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NameAvailabilityStatus
	{
		
		/// <summary>
		/// If any, the error message that provides more detail for the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The value indicating whether the resource name is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// If any, the reason that the name is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// The definition of a configuration store operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationDefinition
	{
		
		/// <summary>
		/// The display information for a configuration store operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperationDefinitionDisplay Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The display information for a configuration store operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationDefinitionDisplay
	{
		
		/// <summary>
		/// The description for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The operation that users can perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		/// <summary>
		/// The resource provider name: Microsoft App Configuration."
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		/// <summary>
		/// The resource on which the operation is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// The result of a request to list configuration store operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationDefinitionListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperationDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// Private endpoint which a connection belongs to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateEndpoint
	{
		
		/// <summary>
		/// The resource Id for private endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// A private endpoint connection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateEndpointConnection
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of a private endpoint connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateEndpointConnectionProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of a private endpoint connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateEndpointConnectionProperties
	{
		
		/// <summary>
		/// Private endpoint which a connection belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateEndpoint PrivateEndpoint { get; set; }
		
		/// <summary>
		/// The state of a private link service connection.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }
		
		/// <summary>
		/// The provisioning status of the private endpoint connection.
		/// </summary>
		public PrivateEndpointConnectionPropertiesProvisioningState ProvisioningState { get; set; }
	}
	
	/// <summary>
	/// The state of a private link service connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateLinkServiceConnectionState
	{
		
		/// <summary>
		/// Any action that is required beyond basic workflow (approve/ reject/ disconnect)
		/// </summary>
		public PrivateLinkServiceConnectionStateActionsRequired ActionsRequired { get; set; }
		
		/// <summary>
		/// The private link service connection description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The private link service connection status.
		/// </summary>
		public PrivateLinkServiceConnectionStateStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrivateLinkServiceConnectionStateActionsRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recreate = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrivateLinkServiceConnectionStateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disconnected = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrivateEndpointConnectionPropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
	}
	
	/// <summary>
	/// A list of private endpoint connections
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateEndpointConnectionListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateEndpointConnection[] Value { get; set; }
	}
	
	/// <summary>
	/// A resource that supports private link capabilities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateLinkResource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Properties of a private link resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateLinkResourceProperties Properties { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Properties of a private link resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateLinkResourceProperties
	{
		
		/// <summary>
		/// The private link resource group id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		/// <summary>
		/// The private link resource required member names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] RequiredMembers { get; set; }
	}
	
	/// <summary>
	/// A list of private link resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateLinkResourceListResult
	{
		
		/// <summary>
		/// The URI that can be used to request the next set of paged results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The collection value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateLinkResource[] Value { get; set; }
	}
	
	/// <summary>
	/// The parameters used to regenerate an API key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegenerateKeyParameters
	{
		
		/// <summary>
		/// The id of the key to regenerate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// An Azure resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		/// <summary>
		/// The resource ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The location of the resource. This cannot be changed after the resource is created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The tags of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A resource identity that is managed by the user of the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserIdentity
	{
		
		/// <summary>
		/// The client ID of the user-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientId { get; set; }
		
		/// <summary>
		/// The principal ID of the user-assigned identity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the operations available from this provider.
		/// Operations_List providers/Microsoft.AppConfiguration/operations
		/// </summary>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<OperationDefinitionListResult> Operations_ListAsync(string api_version, string skipToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.AppConfiguration/operations?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&skipToken=" + (skipToken==null? "" : Uri.EscapeDataString(skipToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<OperationDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether the configuration store name is available for use.
		/// Operations_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/checkNameAvailability
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The object containing information for the availability request.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<NameAvailabilityStatus> Operations_CheckNameAvailabilityAsync(string subscriptionId, string api_version, CheckNameAvailabilityParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppConfiguration/checkNameAvailability&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NameAvailabilityStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the configuration stores for a given subscription.
		/// ConfigurationStores_List subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/configurationStores
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStoreListResult> ConfigurationStores_ListAsync(string subscriptionId, string api_version, string skipToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppConfiguration/configurationStores&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&skipToken=" + (skipToken==null? "" : Uri.EscapeDataString(skipToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigurationStoreListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the configuration stores for a given resource group.
		/// ConfigurationStores_ListByResourceGroup subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStoreListResult> ConfigurationStores_ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version, string skipToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&skipToken=" + (skipToken==null? "" : Uri.EscapeDataString(skipToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigurationStoreListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a configuration store.
		/// ConfigurationStores_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task ConfigurationStores_DeleteAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the properties of the specified configuration store.
		/// ConfigurationStores_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStore> ConfigurationStores_GetAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigurationStore>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a configuration store with the specified parameters.
		/// ConfigurationStores_Create subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for creating a configuration store.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ConfigurationStore> ConfigurationStores_CreateAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, ConfigurationStore requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ConfigurationStore>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the access key for the specified configuration store.
		/// ConfigurationStores_ListKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/ListKeys
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="skipToken">A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ApiKeyListResult> ConfigurationStores_ListKeysAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string skipToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/ListKeys&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&skipToken=" + (skipToken==null? "" : Uri.EscapeDataString(skipToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ApiKeyListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates an access key for the specified configuration store.
		/// ConfigurationStores_RegenerateKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/RegenerateKey
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for regenerating an access key.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<ApiKey> ConfigurationStores_RegenerateKeyAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, RegenerateKeyParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/RegenerateKey&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ApiKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a configuration store key-value.
		/// ConfigurationStores_ListKeyValue subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/listKeyValue
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="requestBody">The parameters for retrieving a key-value.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<KeyValue> ConfigurationStores_ListKeyValueAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, ListKeyValueParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/listKeyValue&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<KeyValue>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all private endpoint connections for a configuration store.
		/// PrivateEndpointConnections_ListByConfigurationStore subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<PrivateEndpointConnectionListResult> PrivateEndpointConnections_ListByConfigurationStoreAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateEndpointConnections&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PrivateEndpointConnectionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a private endpoint connection.
		/// PrivateEndpointConnections_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="privateEndpointConnectionName">Private endpoint connection name</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task PrivateEndpointConnections_DeleteAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string privateEndpointConnectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : Uri.EscapeDataString(privateEndpointConnectionName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified private endpoint connection associated with the configuration store.
		/// PrivateEndpointConnections_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="privateEndpointConnectionName">Private endpoint connection name</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_GetAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string privateEndpointConnectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : Uri.EscapeDataString(privateEndpointConnectionName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PrivateEndpointConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the state of the specified private endpoint connection associated with the configuration store.
		/// PrivateEndpointConnections_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="privateEndpointConnectionName">Private endpoint connection name</param>
		/// <param name="requestBody">The private endpoint connection properties.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<PrivateEndpointConnection> PrivateEndpointConnections_CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string privateEndpointConnectionName, PrivateEndpointConnection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateEndpointConnections/"+ (privateEndpointConnectionName==null? "" : Uri.EscapeDataString(privateEndpointConnectionName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PrivateEndpointConnection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the private link resources that need to be created for a configuration store.
		/// PrivateLinkResources_ListByConfigurationStore subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateLinkResources
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<PrivateLinkResourceListResult> PrivateLinkResources_ListByConfigurationStoreAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateLinkResources&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PrivateLinkResourceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a private link resource that need to be created for a configuration store.
		/// PrivateLinkResources_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateLinkResources/{groupName}
		/// </summary>
		/// <param name="subscriptionId">The Microsoft Azure subscription ID.</param>
		/// <param name="resourceGroupName">The name of the resource group to which the container registry belongs.</param>
		/// <param name="configStoreName">The name of the configuration store.</param>
		/// <param name="api_version">The client API version.</param>
		/// <param name="groupName">The name of the private link resource group.</param>
		/// <returns>The request was successful; the request was well-formed and received properly.</returns>
		public async Task<PrivateLinkResource> PrivateLinkResources_GetAsync(string subscriptionId, string resourceGroupName, string configStoreName, string api_version, string groupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppConfiguration/configurationStores/"+ (configStoreName==null? "" : Uri.EscapeDataString(configStoreName))+"/privateLinkResources/"+ (groupName==null? "" : Uri.EscapeDataString(groupName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PrivateLinkResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
