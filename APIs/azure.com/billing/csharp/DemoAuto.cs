//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request parameters to accept transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransferProperties
	{
		
		/// <summary>
		/// Request parameters to accept transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductDetails[] ProductDetails { get; set; }
	}
	
	/// <summary>
	/// Details of the product to be transferred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductDetails
	{
		
		/// <summary>
		/// Id of product to be transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Type of the product to be transferred.
		/// </summary>
		public ProductType ProductType { get; set; }
	}
	
	/// <summary>
	/// Type of the product to be transferred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureSubscription = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureReservation = 1,
	}
	
	/// <summary>
	/// Request parameters to accept transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransferRequest
	{
		
		/// <summary>
		/// Request parameters to accept transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AcceptTransferProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Address details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddressDetails
	{
		
		/// <summary>
		/// Address Line1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Address Line2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Address Line3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// Address City.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// Company Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Country code uses ISO2, 2-digit format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// First Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Last Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// Address Postal Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Address Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Status of the address validation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AddressValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 1,
	}
	
	/// <summary>
	/// Result of listing agreements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AgreementListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of agreements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Agreement[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the agreement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AgreementProperties
	{
		
		/// <summary>
		/// The link to the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AgreementLink { get; set; }
		
		/// <summary>
		/// Effective date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		/// <summary>
		/// Expiration date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Participants or signer of the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Participants[] Participants { get; set; }
		
		/// <summary>
		/// The agreement status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Details about the participant or signer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Participants
	{
		
		/// <summary>
		/// The email address of the participant or signer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The signing status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// The date when status got changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
	}
	
	/// <summary>
	/// The Amount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Amount
	{
		
		/// <summary>
		/// The currency for the amount value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// Amount value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	/// <summary>
	/// The properties of available balance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailableBalanceProperties
	{
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
	}
	
	/// <summary>
	/// Details about the azure plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AzurePlan
	{
		
		/// <summary>
		/// The sku description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuDescription { get; set; }
		
		/// <summary>
		/// The sku id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuId { get; set; }
	}
	
	/// <summary>
	/// Result of listing billing accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingAccountListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of billing accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the billing account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingAccountProperties
	{
		
		/// <summary>
		/// Address details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddressDetails Address { get; set; }
		
		/// <summary>
		/// The type of agreement.
		/// </summary>
		public BillingAccountPropertiesAgreementType AgreementType { get; set; }
		
		/// <summary>
		/// The billing profiles associated to the billing account. By default this is not populated, unless it's specified in $expand.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingProfile[] BillingProfiles { get; set; }
		
		/// <summary>
		/// The type of customer.
		/// </summary>
		public BillingAccountPropertiesCustomerType CustomerType { get; set; }
		
		/// <summary>
		/// The departments associated to the enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Department[] Departments { get; set; }
		
		/// <summary>
		/// The billing account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The accounts associated to the enrollment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnrollmentAccount[] EnrollmentAccounts { get; set; }
		
		/// <summary>
		/// Current entity level details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Enrollment EnrollmentDetails { get; set; }
		
		/// <summary>
		/// Organization id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingAccountPropertiesAgreementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftCustomerAgreement = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnterpriseAgreement = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftOnlineServicesProgram = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MicrosoftPartnerAgreement = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingAccountPropertiesCustomerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enterprise = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partner = 2,
	}
	
	/// <summary>
	/// Current entity level details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Enrollment
	{
		
		/// <summary>
		/// Enrollment billing cycle
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingCycle { get; set; }
		
		/// <summary>
		/// The channel for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Channel { get; set; }
		
		/// <summary>
		/// The countryCode for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The currency associated with enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// Enrollment End Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The language for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		/// <summary>
		/// The attributes associated with legacy enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnrollmentPolicies Policies { get; set; }
		
		/// <summary>
		/// Enrollment Start Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Enrollment status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The attributes associated with legacy enrollment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnrollmentPolicies
	{
		
		/// <summary>
		/// The accountOwnerViewCharges flag for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccountOwnerViewCharges { get; set; }
		
		/// <summary>
		/// The departmentAdminViewCharges flag for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DepartmentAdminViewCharges { get; set; }
		
		/// <summary>
		/// The marketplaces flag for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MarketplacesEnabled { get; set; }
		
		/// <summary>
		/// The reserved instances flag for Enrollment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReservedInstancesEnabled { get; set; }
	}
	
	/// <summary>
	/// The request properties of the billing account that can be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingAccountUpdateRequest
	{
		
		/// <summary>
		/// The properties of the billing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingAccountProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Result of list billingPermissions a caller has on a billing account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingPermissionsListResult
	{
		
		/// <summary>
		/// The list of billingPermissions a caller has on a billing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingPermissionsProperties[] Value { get; set; }
	}
	
	/// <summary>
	/// The set of allowed action and not allowed actions a caller has on a billing account
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingPermissionsProperties
	{
		
		/// <summary>
		/// The set of actions that the caller is allowed to do
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Actions { get; set; }
		
		/// <summary>
		/// The set of actions the caller is not allowed to do
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] NotActions { get; set; }
	}
	
	/// <summary>
	/// The request parameters for creating a new billing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingProfileCreationRequest
	{
		
		/// <summary>
		/// Address details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddressDetails Address { get; set; }
		
		/// <summary>
		/// The billing profile name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Enabled azure plans for this billing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AzurePlan[] EnabledAzurePlans { get; set; }
		
		/// <summary>
		/// If the billing profile is opted in to receive invoices via email.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InvoiceEmailOptIn { get; set; }
		
		/// <summary>
		/// Purchase order number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PoNumber { get; set; }
	}
	
	/// <summary>
	/// Result of listing billing profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingProfileListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of billing profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingProfile[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the billing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingProfileProperties
	{
		
		/// <summary>
		/// Address details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddressDetails Address { get; set; }
		
		/// <summary>
		/// The currency associated with the billing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// The billing profile name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Information about the enabled azure plans.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AzurePlan[] EnabledAzurePlans { get; set; }
		
		/// <summary>
		/// Invoice day.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InvoiceDay { get; set; }
		
		/// <summary>
		/// If the billing profile is opted in to receive invoices via email.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InvoiceEmailOptIn { get; set; }
		
		/// <summary>
		/// The invoice sections associated to the billing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InvoiceSection[] InvoiceSections { get; set; }
		
		/// <summary>
		/// Purchase order number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PoNumber { get; set; }
	}
	
	/// <summary>
	/// The billing property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingPropertyProperties
	{
		
		/// <summary>
		/// Billing account display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingAccountDisplayName { get; set; }
		
		/// <summary>
		/// Billing account Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingAccountId { get; set; }
		
		/// <summary>
		/// Billing profile display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// Billing profile Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Billing tenant Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingTenantId { get; set; }
		
		/// <summary>
		/// Cost center name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// Invoice Section display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionDisplayName { get; set; }
		
		/// <summary>
		/// Invoice Section Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
		
		/// <summary>
		/// Product Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		/// <summary>
		/// SKU description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuDescription { get; set; }
		
		/// <summary>
		/// SKU Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuId { get; set; }
	}
	
	/// <summary>
	/// Result of get list of role assignments
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRoleAssignmentListResult
	{
		
		/// <summary>
		/// The list role assignments
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingRoleAssignment[] Value { get; set; }
	}
	
	/// <summary>
	/// The payload use to update role assignment on a scope
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRoleAssignmentPayload
	{
		
		/// <summary>
		/// The role definition id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingRoleDefinitionId { get; set; }
		
		/// <summary>
		/// The user's principal id that the role gets assigned to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// The properties of the a role assignment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRoleAssignmentProperties
	{
		
		/// <summary>
		/// the creator's principal Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedByPrincipalId { get; set; }
		
		/// <summary>
		/// the creator's tenant Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedByPrincipalTenantId { get; set; }
		
		/// <summary>
		/// the date the role assignment is created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedOn { get; set; }
		
		/// <summary>
		/// the name of the role assignment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The user's principal id that the role gets assigned to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		/// <summary>
		/// The role definition id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleDefinitionName { get; set; }
		
		/// <summary>
		/// The scope the role get assigned to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
	}
	
	/// <summary>
	/// list the role definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRoleDefinitionListResult
	{
		
		/// <summary>
		/// The list of role definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingRoleDefinition[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the a role definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingRoleDefinitionProperties
	{
		
		/// <summary>
		/// The role description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The billingPermissions the role has
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingPermissionsProperties[] Permissions { get; set; }
		
		/// <summary>
		/// The name of the role
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	/// <summary>
	/// The usage context properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingSubscriptionProperties
	{
		
		/// <summary>
		/// Billing Profile display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// Billing Profile id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Display name of customer to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerDisplayName { get; set; }
		
		/// <summary>
		/// Customer id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Invoice section display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionDisplayName { get; set; }
		
		/// <summary>
		/// Invoice section id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount LastMonthCharges { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount MonthToDateCharges { get; set; }
		
		/// <summary>
		/// Details about a reseller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reseller Reseller { get; set; }
		
		/// <summary>
		/// The sku description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuDescription { get; set; }
		
		/// <summary>
		/// The sku id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuId { get; set; }
		
		/// <summary>
		/// Subscription billing status.
		/// </summary>
		public BillingSubscriptionPropertiesSubscriptionBillingStatus SubscriptionBillingStatus { get; set; }
		
		/// <summary>
		/// Subscription Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionId { get; set; }
	}
	
	/// <summary>
	/// Details about a reseller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Reseller
	{
		
		/// <summary>
		/// A description of the reseller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The reseller id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingSubscriptionPropertiesSubscriptionBillingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Abandoned = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Warning = 4,
	}
	
	/// <summary>
	/// Result of listing billing subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BillingSubscriptionsListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of billing subscriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BillingSubscription[] Value { get; set; }
	}
	
	/// <summary>
	/// Result of listing customers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Customer[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of a Customer's policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerPolicyProperties
	{
		
		/// <summary>
		/// Customer can view retail prices.
		/// </summary>
		public CustomerPolicyPropertiesViewCharges ViewCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CustomerPolicyPropertiesViewCharges
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 1,
	}
	
	/// <summary>
	/// The properties of a customer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerProperties
	{
		
		/// <summary>
		/// The name of the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Information about the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AzurePlan[] EnabledAzurePlans { get; set; }
		
		/// <summary>
		/// The resellers which are allowed to provide service to this customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reseller[] Resellers { get; set; }
	}
	
	/// <summary>
	/// Result of listing departments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DepartmentListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of departments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Department[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the department.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DepartmentProperties
	{
		
		/// <summary>
		/// The cost center name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// The name for department.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DepartmentName { get; set; }
		
		/// <summary>
		/// Associated enrollment accounts. By default this is not populated, unless it's specified in $expand.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnrollmentAccount[] EnrollmentAccounts { get; set; }
		
		/// <summary>
		/// The status for department.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Detailed transfer status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetailedTransferStatus
	{
		
		/// <summary>
		/// Error details for transfer execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Error ErrorDetails { get; set; }
		
		/// <summary>
		/// Id of product being transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Type of the product to be transferred.
		/// </summary>
		public ProductType ProductType { get; set; }
		
		/// <summary>
		/// Possible transfer status.
		/// </summary>
		public ProductTransferStatus TransferStatus { get; set; }
	}
	
	/// <summary>
	/// Error details for transfer execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Possible transfer status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductTransferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// The properties of the invoice download.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Document
	{
		
		/// <summary>
		/// Document type.
		/// </summary>
		public DocumentKind Kind { get; set; }
		
		/// <summary>
		/// Document URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoidNote = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Receipt = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditNote = 3,
	}
	
	/// <summary>
	/// A secure URL that can be used to download a an entity until the URL expires.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DownloadUrl
	{
		
		/// <summary>
		/// The time in UTC at which this download URL will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// The URL to the PDF file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Type of the products that can be transferred.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EligibleProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DevTestAzureSubscription = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StandardAzureSubscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureReservation = 2,
	}
	
	/// <summary>
	/// The rating context.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnrollmentAccountContext
	{
		
		/// <summary>
		/// The cost center name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// Account End Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The enrollment account id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnrollmentAccountName { get; set; }
		
		/// <summary>
		/// Account Start Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	/// <summary>
	/// Result of listing enrollment accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnrollmentAccountListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of enrollment accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnrollmentAccount[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnrollmentAccountProperties
	{
		
		/// <summary>
		/// The account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account owner
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountOwner { get; set; }
		
		/// <summary>
		/// The cost center name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// A department resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Department Department { get; set; }
		
		/// <summary>
		/// Account End Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Account Start Date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// The status for account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The details of the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Error message indicating why the operation failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorResponse
	{
		
		/// <summary>
		/// The details of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetails Error { get; set; }
	}
	
	/// <summary>
	/// Request parameters to initiate transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InitiateTransferProperties
	{
		
		/// <summary>
		/// Email Id of recipient for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecipientEmailId { get; set; }
		
		/// <summary>
		/// Optional reseller Id for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerId { get; set; }
	}
	
	/// <summary>
	/// Request parameters to initiate transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InitiateTransferRequest
	{
		
		/// <summary>
		/// Request parameters to initiate transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InitiateTransferProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Result of listing instructions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstructionListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of instructions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Instruction[] Value { get; set; }
	}
	
	/// <summary>
	/// A billing instruction used during invoice generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstructionProperties
	{
		
		/// <summary>
		/// The amount budgeted for this billing instruction.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Amount { get; set; }
		
		/// <summary>
		/// The date this billing instruction is no longer in effect.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndDate { get; set; }
		
		/// <summary>
		/// The date this billing instruction goes into effect.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartDate { get; set; }
	}
	
	/// <summary>
	/// Result of listing invoices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of invoices.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Invoice[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceProperties
	{
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount AmountDue { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount BilledAmount { get; set; }
		
		/// <summary>
		/// The billing profile display name this invoice belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// The billing profile id this invoice belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// List of documents available to download including invoice and tax documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Document[] Documents { get; set; }
		
		/// <summary>
		/// The due date for invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DueDate { get; set; }
		
		/// <summary>
		/// The date when invoice was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvoiceDate { get; set; }
		
		/// <summary>
		/// The end date of the billing period.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvoicePeriodEndDate { get; set; }
		
		/// <summary>
		/// The start date of the billing period.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InvoicePeriodStartDate { get; set; }
		
		/// <summary>
		/// Invoice type.
		/// </summary>
		public InvoicePropertiesInvoiceType InvoiceType { get; set; }
		
		/// <summary>
		/// List of payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentProperties[] Payments { get; set; }
		
		/// <summary>
		/// The purchase identifier for the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PurchaseOrderNumber { get; set; }
		
		/// <summary>
		/// Invoice status.
		/// </summary>
		public InvoicePropertiesStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InvoicePropertiesInvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureMarketplace = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureSupport = 2,
	}
	
	/// <summary>
	/// The properties of the payment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentProperties
	{
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The date of the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// The payment method family.
		/// </summary>
		public PaymentPropertiesPaymentMethodFamily PaymentMethodFamily { get; set; }
		
		/// <summary>
		/// The type of payment method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentMethodType { get; set; }
		
		/// <summary>
		/// The type of payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentPropertiesPaymentMethodFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credits = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckWire = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditCard = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InvoicePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PastDue = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Due = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Paid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Void = 3,
	}
	
	/// <summary>
	/// The properties of an InvoiceSection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceSectionCreationRequest
	{
		
		/// <summary>
		/// The name of the InvoiceSection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Result of listing invoice sections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceSectionListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of invoice sections.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InvoiceSection[] Value { get; set; }
	}
	
	/// <summary>
	/// Result of listing invoice section properties with create subscription permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceSectionListWithCreateSubPermissionResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of invoice section properties with create subscription permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InvoiceSectionWithCreateSubPermission[] Value { get; set; }
	}
	
	/// <summary>
	/// Invoice section properties with create subscription permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceSectionWithCreateSubPermission
	{
		
		/// <summary>
		/// Billing profile display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// Billing profile Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Enabled azure plans for the associated billing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AzurePlan[] EnabledAzurePlans { get; set; }
		
		/// <summary>
		/// Invoice Section display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionDisplayName { get; set; }
		
		/// <summary>
		/// Invoice Section Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
	}
	
	/// <summary>
	/// The properties of an InvoiceSection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceSectionProperties
	{
		
		/// <summary>
		/// The name of the InvoiceSection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// The properties of the line of credit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LineOfCreditProperties
	{
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount CreditLimit { get; set; }
		
		/// <summary>
		/// The reason for the line of credit status when not approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount RemainingBalance { get; set; }
		
		/// <summary>
		/// The line of credit status.
		/// </summary>
		public LineOfCreditPropertiesStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LineOfCreditPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 1,
	}
	
	/// <summary>
	/// A Billing REST API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Operation
	{
		
		/// <summary>
		/// The object that represents the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Display { get; set; }
		
		/// <summary>
		/// Operation name: {provider}/{resource}/{operation}.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Result listing billing operations. It contains a list of operations and a URL link to get the next set of results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationListResult
	{
		
		/// <summary>
		/// URL to get the next set of operation list results if there are any.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// List of billing operations supported by the Microsoft.Billing resource provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the payment method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentMethodProperties
	{
		
		/// <summary>
		/// The currency associated with the payment method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// Details about the payment method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		/// <summary>
		/// Expiration month and year.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Expiration { get; set; }
		
		/// <summary>
		/// Payment method type.
		/// </summary>
		public PaymentMethodPropertiesPaymentMethodType PaymentMethodType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentMethodPropertiesPaymentMethodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credits = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChequeWire = 1,
	}
	
	/// <summary>
	/// Result of listing payment methods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentMethodsListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of payment methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentMethod[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyProperties
	{
		
		/// <summary>
		/// The marketplace purchases are free, allowed or not allowed.
		/// </summary>
		public PolicyPropertiesMarketplacePurchases MarketplacePurchases { get; set; }
		
		/// <summary>
		/// The reservation purchases allowed or not.
		/// </summary>
		public PolicyPropertiesReservationPurchases ReservationPurchases { get; set; }
		
		/// <summary>
		/// Who can view charges.
		/// </summary>
		public PolicyPropertiesViewCharges ViewCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyPropertiesMarketplacePurchases
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllAllowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnlyFreeAllowed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyPropertiesReservationPurchases
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyPropertiesViewCharges
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAllowed = 1,
	}
	
	/// <summary>
	/// The properties of the product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductProperties
	{
		
		/// <summary>
		/// Availability Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityId { get; set; }
		
		/// <summary>
		/// Billing frequency.
		/// </summary>
		public ProductPropertiesBillingFrequency BillingFrequency { get; set; }
		
		/// <summary>
		/// Billing Profile display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// Billing Profile id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Display name of customer to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerDisplayName { get; set; }
		
		/// <summary>
		/// Customer id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The display name of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Invoice section display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionDisplayName { get; set; }
		
		/// <summary>
		/// Invoice section id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount LastCharge { get; set; }
		
		/// <summary>
		/// The date of the last charge.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastChargeDate { get; set; }
		
		/// <summary>
		/// Parent Product Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ParentProductId { get; set; }
		
		/// <summary>
		/// The type of product.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductType { get; set; }
		
		/// <summary>
		/// The product type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductTypeId { get; set; }
		
		/// <summary>
		/// The date of purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PurchaseDate { get; set; }
		
		/// <summary>
		/// The purchased product quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		/// <summary>
		/// Details about a reseller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reseller Reseller { get; set; }
		
		/// <summary>
		/// Sku description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuDescription { get; set; }
		
		/// <summary>
		/// Sku Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SkuId { get; set; }
		
		/// <summary>
		/// Product status.
		/// </summary>
		public ProductPropertiesStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductPropertiesBillingFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneTime = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UsageBased = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductPropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PastDue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expiring = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoRenew = 7,
	}
	
	/// <summary>
	/// Error code of the transfer validation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductTransferValidationErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProductNotActive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientPermissionOnSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientPermissionOnDestination = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationBillingProfilePastDue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProductTypeNotSupported = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CrossBillingAccountNotAllowed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailableForDestinationMarket = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OneTimePurchaseProductTransferNotAllowed = 8,
	}
	
	/// <summary>
	/// Result of listing products. It contains a list of available products summaries in reverse chronological order by purchase date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductsListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of products.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Product[] Value { get; set; }
	}
	
	/// <summary>
	/// Details of the transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecipientTransferDetails
	{
		
		/// <summary>
		/// Transfer Details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipientTransferProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Transfer Details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecipientTransferProperties
	{
		
		/// <summary>
		/// Type of subscriptions that can be transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EligibleProductType[] AllowedProductType { get; set; }
		
		/// <summary>
		/// Email Id who user canceled the transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CanceledBy { get; set; }
		
		/// <summary>
		/// Transfer creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Detailed transfer status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DetailedTransferStatus[] DetailedTransferStatus { get; set; }
		
		/// <summary>
		/// Transfer expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Customer type of the initiator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorCustomerType { get; set; }
		
		/// <summary>
		/// Email Id of initiator of transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorEmailId { get; set; }
		
		/// <summary>
		/// Transfer last modification time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Email Id of recipient of transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecipientEmailId { get; set; }
		
		/// <summary>
		/// Reseller Id for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerId { get; set; }
		
		/// <summary>
		/// Reseller name for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerName { get; set; }
		
		/// <summary>
		/// Possible transfer status.
		/// </summary>
		public TransferStatus TransferStatus { get; set; }
	}
	
	/// <summary>
	/// Possible transfer status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransferStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompletedWithErrors = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Declined = 6,
	}
	
	/// <summary>
	/// Result of listing details of the transfer received by caller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecipientTransferDetailsListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of transfers received by caller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecipientTransferDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// The Resource model definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		/// <summary>
		/// Resource Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Error code of the transfer validation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SubscriptionTransferValidationErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionNotActive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientPermissionOnSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientPermissionOnDestination = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DestinationBillingProfilePastDue = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubscriptionTypeNotSupported = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CrossBillingAccountNotAllowed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailableForDestinationMarket = 7,
	}
	
	/// <summary>
	/// Result of listing reservation transactions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransactionListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of reservation transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Transaction[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the reservation transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransactionProperties
	{
		
		/// <summary>
		/// Billing Profile display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileDisplayName { get; set; }
		
		/// <summary>
		/// Billing Profile id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Display name of customer to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerDisplayName { get; set; }
		
		/// <summary>
		/// Customer id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// The date of reservation transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Invoice number or 'pending' if not invoiced.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Invoice { get; set; }
		
		/// <summary>
		/// Invoice section display name to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionDisplayName { get; set; }
		
		/// <summary>
		/// Invoice section id to which this product belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
		
		/// <summary>
		/// The kind of transaction. Choices are all and reservation.
		/// </summary>
		public TransactionPropertiesKind Kind { get; set; }
		
		/// <summary>
		/// The reservation order id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The reservation order name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderName { get; set; }
		
		/// <summary>
		/// Product description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductDescription { get; set; }
		
		/// <summary>
		/// The product family.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductFamily { get; set; }
		
		/// <summary>
		/// The type of product.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductType { get; set; }
		
		/// <summary>
		/// The product type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductTypeId { get; set; }
		
		/// <summary>
		/// Purchase quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The subscription id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// The subscription name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubscriptionName { get; set; }
		
		/// <summary>
		/// The Amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount TransactionAmount { get; set; }
		
		/// <summary>
		/// Transaction types.
		/// </summary>
		public TransactionPropertiesTransactionType TransactionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransactionPropertiesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reservation = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransactionPropertiesTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purchase = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Usage Charge")]
		Usage_Charge = 1,
	}
	
	/// <summary>
	/// Request parameters to transfer billing subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferBillingSubscriptionRequest
	{
		
		/// <summary>
		/// Request parameters to transfer billing subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransferBillingSubscriptionRequestProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Request parameters to transfer billing subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferBillingSubscriptionRequestProperties
	{
		
		/// <summary>
		/// The destination billing profile id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBillingProfileId { get; set; }
		
		/// <summary>
		/// The destination invoice section id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationInvoiceSectionId { get; set; }
	}
	
	/// <summary>
	/// Request parameters to transfer billing subscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferBillingSubscriptionResult
	{
		
		/// <summary>
		/// Transfer billing subscription result properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransferBillingSubscriptionResultProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Transfer billing subscription result properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferBillingSubscriptionResultProperties
	{
		
		/// <summary>
		/// The destination billing subscription id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingSubscriptionName { get; set; }
	}
	
	/// <summary>
	/// Details of the transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDetails
	{
		
		/// <summary>
		/// Transfer details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransferProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Transfer details
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferProperties
	{
		
		/// <summary>
		/// Target billing account Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingAccountId { get; set; }
		
		/// <summary>
		/// Target billing profile Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BillingProfileId { get; set; }
		
		/// <summary>
		/// Email Id who user canceled the transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CanceledBy { get; set; }
		
		/// <summary>
		/// Transfer creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Detailed transfer status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DetailedTransferStatus[] DetailedTransferStatus { get; set; }
		
		/// <summary>
		/// Transfer expiration time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Customer type of the initiator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorCustomerType { get; set; }
		
		/// <summary>
		/// Email Id of initiator of transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InitiatorEmailId { get; set; }
		
		/// <summary>
		/// Target invoice section Id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InvoiceSectionId { get; set; }
		
		/// <summary>
		/// Transfer last modification time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Email Id of recipient of transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecipientEmailId { get; set; }
		
		/// <summary>
		/// Reseller Id for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerId { get; set; }
		
		/// <summary>
		/// Reseller name for transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResellerName { get; set; }
		
		/// <summary>
		/// Possible transfer status.
		/// </summary>
		public TransferStatus TransferStatus { get; set; }
	}
	
	/// <summary>
	/// Result of listing details of the transfer initiated by caller.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferDetailsListResult
	{
		
		/// <summary>
		/// The link (url) to the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The list of transfers initiated by caller.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransferDetails[] Value { get; set; }
	}
	
	/// <summary>
	/// The properties of the product to initiate a transfer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferProductRequestProperties
	{
		
		/// <summary>
		/// The destination billing profile id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationBillingProfileId { get; set; }
		
		/// <summary>
		/// The destination invoice section id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationInvoiceSectionId { get; set; }
	}
	
	/// <summary>
	/// Summary of cancel product operation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAutoRenewOperation
	{
		
		/// <summary>
		/// update auto renew operation properties
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAutoRenewOperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// update auto renew operation properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAutoRenewOperationProperties
	{
		
		/// <summary>
		/// The end date of this asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
	}
	
	/// <summary>
	/// Request parameters to update auto renew for support product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAutoRenewRequest
	{
		
		/// <summary>
		/// Request parameters to update auto renew policy a product.
		/// </summary>
		public UpdateAutoRenewRequestAutoRenew AutoRenew { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAutoRenewRequestAutoRenew
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@false = 1,
	}
	
	/// <summary>
	/// Result of the address validation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateAddressResponse
	{
		
		/// <summary>
		/// Status of the address validation response.
		/// </summary>
		public AddressValidationStatus Status { get; set; }
		
		/// <summary>
		/// list of suggested addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AddressDetails[] SuggestedAddresses { get; set; }
		
		/// <summary>
		/// Validation error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ValidationMessage { get; set; }
	}
	
	/// <summary>
	/// Error details of the product transfer eligibility validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateProductTransferEligibilityError
	{
		
		/// <summary>
		/// Error code of the transfer validation response.
		/// </summary>
		public ProductTransferValidationErrorCode Code { get; set; }
		
		/// <summary>
		/// Detailed error message explaining the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Result of the product transfer eligibility validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateProductTransferEligibilityResult
	{
		
		/// <summary>
		/// Error details of the product transfer eligibility validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidateProductTransferEligibilityError ErrorDetails { get; set; }
		
		/// <summary>
		/// Specifies whether the transfer is eligible or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTransferEligible { get; set; }
	}
	
	/// <summary>
	/// Error details of the transfer eligibility validation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateSubscriptionTransferEligibilityError
	{
		
		/// <summary>
		/// Error code of the transfer validation response.
		/// </summary>
		public SubscriptionTransferValidationErrorCode Code { get; set; }
		
		/// <summary>
		/// Detailed error message explaining the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		/// <summary>
		/// The error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Result of the transfer eligibility validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateSubscriptionTransferEligibilityResult
	{
		
		/// <summary>
		/// Error details of the transfer eligibility validation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidateSubscriptionTransferEligibilityError ErrorDetails { get; set; }
		
		/// <summary>
		/// Specifies whether the transfer is eligible or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTransferEligible { get; set; }
	}
	
	/// <summary>
	/// Result of transfer validation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateTransferListResponse
	{
		
		/// <summary>
		/// The list of transfer validation results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidateTransferResponse[] Value { get; set; }
	}
	
	/// <summary>
	/// Transfer validation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateTransferResponse
	{
		
		/// <summary>
		/// Properties of transfer validation response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidateTransferResponseProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of transfer validation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidateTransferResponseProperties
	{
		
		/// <summary>
		/// The product id for which this result applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Array of validation results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidationResultProperties[] Results { get; set; }
		
		/// <summary>
		/// The status of validation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// The properties of the validation result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidationResultProperties
	{
		
		/// <summary>
		/// Result Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Result Level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Level { get; set; }
		
		/// <summary>
		/// The validation message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all billing accounts for a user which he has access to.
		/// BillingAccounts_List providers/Microsoft.Billing/billingAccounts
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="expand">May be used to expand the address, invoiceSections and billingProfiles.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingAccountListResult> BillingAccounts_ListAsync(string api_version, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the billing account by id.
		/// BillingAccounts_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="expand">May be used to expand the address, invoiceSections and billingProfiles.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingAccount> BillingAccounts_GetAsync(string api_version, string billingAccountName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all agreements for a billing account.
		/// Agreements_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="expand">May be used to expand the participants.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<AgreementListResult> Agreements_ListByBillingAccountAsync(string api_version, string billingAccountName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/agreements?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AgreementListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the agreement by name.
		/// Agreements_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="agreementName">Agreement Id.</param>
		/// <param name="expand">May be used to expand the participants.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Agreement> Agreements_GetAsync(string api_version, string billingAccountName, string agreementName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/agreements/"+ (agreementName==null? "" : Uri.EscapeDataString(agreementName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Agreement>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all billing permissions for the caller under a billing account.
		/// BillingPermissions_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingPermissions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingPermissionsListResult> BillingPermissions_ListByBillingAccountAsync(string api_version, string billingAccountName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingPermissions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingPermissionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all billing profiles for a user which that user has access to.
		/// BillingProfiles_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="expand">May be used to expand the invoiceSections.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingProfileListResult> BillingProfiles_ListByBillingAccountAsync(string api_version, string billingAccountName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingProfileListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the billing profile by id.
		/// BillingProfiles_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="expand">May be used to expand the invoiceSections.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingProfile> BillingProfiles_GetAsync(string api_version, string billingAccountName, string billingProfileName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create a BillingProfile.
		/// BillingProfiles_Create providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="requestBody">Request parameters supplied to the Create BillingProfile operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingProfile> BillingProfiles_CreateAsync(string api_version, string billingAccountName, string billingProfileName, BillingProfileCreationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The latest available credit balance for a given billingAccountName and billingProfileName.
		/// AvailableBalances_GetByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/availableBalance/default
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<AvailableBalance> AvailableBalances_GetByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/availableBalance/default&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AvailableBalance>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all billing permissions the caller has for a billing account.
		/// BillingPermissions_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingPermissions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingPermissionsListResult> BillingPermissions_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingPermissions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingPermissionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignments on the Billing Profile
		/// BillingRoleAssignments_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignmentListResult> BillingRoleAssignments_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingRoleAssignments?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignment for the caller on the Billing Profile
		/// BillingRoleAssignments_GetByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_GetByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the role assignment on this Billing Profile
		/// BillingRoleAssignments_DeleteByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_DeleteByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the role definition for a Billing Profile
		/// BillingRoleDefinitions_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinitionListResult> BillingRoleDefinitions_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingRoleDefinitions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the role definition for a role
		/// BillingRoleDefinitions_GetByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/{billingRoleDefinitionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="billingRoleDefinitionName">role definition id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinition> BillingRoleDefinitions_GetByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, string billingRoleDefinitionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingRoleDefinitions/"+ (billingRoleDefinitionName==null? "" : Uri.EscapeDataString(billingRoleDefinitionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists billing subscriptions by billing profile name.
		/// BillingSubscriptions_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscriptionsListResult> BillingSubscriptions_ListByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/billingSubscriptions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to add a role assignment to a billing profile.
		/// BillingRoleAssignments_AddByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/createBillingRoleAssignment
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="requestBody">Parameters supplied to add a role assignment.</param>
		public async Task BillingRoleAssignments_AddByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, BillingRoleAssignmentPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/createBillingRoleAssignment?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists customers by billing profile which the current user can work with on-behalf of a partner.
		/// Customers_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="filter">May be used to filter the list of customers.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CustomerListResult> Customers_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, string filter, string skiptoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/customers?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&skiptoken=" + (skiptoken==null? "" : Uri.EscapeDataString(skiptoken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CustomerListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates the request to transfer the legacy subscriptions or RIs.
		/// PartnerTransfers_Initiate providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/initiateTransfer
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="requestBody">Parameters supplied to initiate the transfer.</param>
		/// <returns>Initiated transfer details.</returns>
		public async Task<TransferDetails> PartnerTransfers_InitiateAsync(string billingAccountName, string billingProfileName, string customerName, InitiateTransferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/initiateTransfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all transfer's details initiated from given invoice section.
		/// PartnerTransfers_List providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <returns>List of transfers initiated from this invoice section.</returns>
		public async Task<TransferDetailsListResult> PartnerTransfers_ListAsync(string billingAccountName, string billingProfileName, string customerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/transfers";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetailsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the transfer details for given transfer Id.
		/// PartnerTransfers_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of transfer.</returns>
		public async Task<TransferDetails> PartnerTransfers_GetAsync(string billingAccountName, string billingProfileName, string customerName, string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the transfer for given transfer Id.
		/// PartnerTransfers_Cancel providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/transfers/{transferName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of canceled transfer.</returns>
		public async Task<TransferDetails> PartnerTransfers_CancelAsync(string billingAccountName, string billingProfileName, string customerName, string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the instructions by billing profile id.
		/// Instructions_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InstructionListResult> Instructions_ListByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/instructions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InstructionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the instruction by name.
		/// Instructions_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="instructionName">Instruction Name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Instruction> Instructions_GetAsync(string api_version, string billingAccountName, string billingProfileName, string instructionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/instructions/"+ (instructionName==null? "" : Uri.EscapeDataString(instructionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Instruction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create or update a instruction.
		/// Instructions_Put providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="instructionName">Instruction Name.</param>
		/// <param name="requestBody">The new instruction.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Instruction> Instructions_PutAsync(string api_version, string billingAccountName, string billingProfileName, string instructionName, Instruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/instructions/"+ (instructionName==null? "" : Uri.EscapeDataString(instructionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Instruction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all invoice sections for a user which he has access to.
		/// InvoiceSections_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceSectionListResult> InvoiceSections_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceSectionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the InvoiceSection by id.
		/// InvoiceSections_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceSection> InvoiceSections_GetAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceSection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to create an invoice section.
		/// InvoiceSections_Create providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="requestBody">Request parameters supplied to the Create InvoiceSection operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceSection> InvoiceSections_CreateAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, InvoiceSectionCreationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceSection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all billing permissions for the caller under invoice section.
		/// BillingPermissions_ListByInvoiceSections providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingPermissions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingPermissionsListResult> BillingPermissions_ListByInvoiceSectionsAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingPermissions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingPermissionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignments on the invoice Section
		/// BillingRoleAssignments_ListByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignmentListResult> BillingRoleAssignments_ListByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingRoleAssignments?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignment for the caller on the invoice Section
		/// BillingRoleAssignments_GetByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_GetByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the role assignment on the invoice Section
		/// BillingRoleAssignments_DeleteByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_DeleteByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the role definition for an invoice Section
		/// BillingRoleDefinitions_ListByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinitionListResult> BillingRoleDefinitions_ListByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingRoleDefinitions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the role definition for a role
		/// BillingRoleDefinitions_GetByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/{billingRoleDefinitionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingRoleDefinitionName">role definition id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinition> BillingRoleDefinitions_GetByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, string billingRoleDefinitionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingRoleDefinitions/"+ (billingRoleDefinitionName==null? "" : Uri.EscapeDataString(billingRoleDefinitionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists billing subscription by invoice section name.
		/// BillingSubscriptions_ListByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscriptionsListResult> BillingSubscriptions_ListByInvoiceSectionAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingSubscriptions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single billing subscription by name.
		/// BillingSubscriptions_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscription> BillingSubscriptions_GetAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string billingSubscriptionName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfers the subscription from one invoice section to another within a billing account.
		/// BillingSubscriptions_Transfer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="requestBody">Request parameters supplied to the Transfer Billing Subscription operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<TransferBillingSubscriptionResult> BillingSubscriptions_TransferAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string billingSubscriptionName, TransferBillingSubscriptionRequestProperties requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"/transfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferBillingSubscriptionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates the transfer of billing subscriptions across invoice sections.
		/// BillingSubscriptions_ValidateTransfer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/validateTransferEligibility
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="requestBody">Parameters supplied to the Transfer Billing Subscription operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ValidateSubscriptionTransferEligibilityResult> BillingSubscriptions_ValidateTransferAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string billingSubscriptionName, TransferBillingSubscriptionRequestProperties requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"/validateTransferEligibility";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ValidateSubscriptionTransferEligibilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The operation to add a role assignment to a invoice Section.
		/// BillingRoleAssignments_AddByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/createBillingRoleAssignment
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="requestBody">Parameters supplied to add a role assignment.</param>
		public async Task BillingRoleAssignments_AddByInvoiceSectionAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceSectionName, BillingRoleAssignmentPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/createBillingRoleAssignment?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Elevates the caller's access to match their billing profile access.
		/// InvoiceSections_ElevateToBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/elevate
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		public async Task InvoiceSections_ElevateToBillingProfileAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/elevate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates the request to transfer the legacy subscriptions or RIs.
		/// Transfers_Initiate providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/initiateTransfer
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="requestBody">Parameters supplied to initiate the transfer.</param>
		/// <returns>Initiated transfer details.</returns>
		public async Task<TransferDetails> Transfers_InitiateAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, InitiateTransferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/initiateTransfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists products by invoice section name.
		/// Products_ListByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="filter">May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ProductsListResult> Products_ListByInvoiceSectionAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string api_version, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/products&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single product by name.
		/// Products_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="productName">Invoice Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Product> Products_GetAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string productName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/products/"+ (productName==null? "" : Uri.EscapeDataString(productName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to transfer a Product to another invoice section.
		/// Products_Transfer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/transfer
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="productName">Invoice Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="requestBody">Parameters supplied to the Transfer Product operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Product> Products_TransferAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string productName, string api_version, TransferProductRequestProperties requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/products/"+ (productName==null? "" : Uri.EscapeDataString(productName))+"/transfer&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel auto renew for product by product id and invoice section name
		/// Products_UpdateAutoRenewByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/updateAutoRenew
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="productName">Invoice Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="requestBody">Update auto renew request parameters.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<UpdateAutoRenewOperation> Products_UpdateAutoRenewByInvoiceSectionAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string productName, string api_version, UpdateAutoRenewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/products/"+ (productName==null? "" : Uri.EscapeDataString(productName))+"/updateAutoRenew&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAutoRenewOperation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates the transfer of products across invoice sections.
		/// Products_ValidateTransfer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products/{productName}/validateTransferEligibility
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="productName">Invoice Id.</param>
		/// <param name="requestBody">Parameters supplied to the Transfer Products operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ValidateProductTransferEligibilityResult> Products_ValidateTransferAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string productName, TransferProductRequestProperties requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/products/"+ (productName==null? "" : Uri.EscapeDataString(productName))+"/validateTransferEligibility";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ValidateProductTransferEligibilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the transactions by invoice section name for given start date and end date.
		/// Transactions_ListByInvoiceSection providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transactions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="periodStartDate">Start date</param>
		/// <param name="periodEndDate">End date</param>
		/// <param name="filter">May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<TransactionListResult> Transactions_ListByInvoiceSectionAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string api_version, string periodStartDate, string periodEndDate, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/transactions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransactionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all transfer's details initiated from given invoice section.
		/// Transfers_List providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <returns>List of transfers initiated from this invoice section.</returns>
		public async Task<TransferDetailsListResult> Transfers_ListAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/transfers";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetailsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the transfer details for given transfer Id.
		/// Transfers_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of transfer.</returns>
		public async Task<TransferDetails> Transfers_GetAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels the transfer for given transfer Id.
		/// Transfers_Cancel providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/transfers/{transferName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceSectionName">InvoiceSection Id.</param>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of canceled transfer.</returns>
		public async Task<TransferDetails> Transfers_CancelAsync(string billingAccountName, string billingProfileName, string invoiceSectionName, string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoiceSections/"+ (invoiceSectionName==null? "" : Uri.EscapeDataString(invoiceSectionName))+"/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of invoices for a billing profile.
		/// Invoices_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="periodStartDate">Invoice period start date.</param>
		/// <param name="periodEndDate">Invoice period end date.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceListResult> Invoices_ListByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, string periodStartDate, string periodEndDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoices?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the invoice by name.
		/// Invoices_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceName">Invoice Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Invoice> Invoices_GetAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoices/"+ (invoiceName==null? "" : Uri.EscapeDataString(invoiceName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download price sheet for an invoice.
		/// PriceSheet_Download providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices/{invoiceName}/pricesheet/default/download
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="invoiceName">Invoice Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<DownloadUrl> PriceSheet_DownloadAsync(string api_version, string billingAccountName, string billingProfileName, string invoiceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/invoices/"+ (invoiceName==null? "" : Uri.EscapeDataString(invoiceName))+"/pricesheet/default/download?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DownloadUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Payment Methods by billing profile Id.
		/// PaymentMethods_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethods
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<PaymentMethodsListResult> PaymentMethods_ListByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/paymentMethods&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The policy for a given billing account name and billing profile name.
		/// Policies_GetByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Policy> Policies_GetByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/policies/default&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to update a policy.
		/// Policies_Update providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="requestBody">Parameters supplied to the update policy operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Policy> Policies_UpdateAsync(string api_version, string billingAccountName, string billingProfileName, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/policies/default?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Policy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Download price sheet for a billing profile.
		/// PriceSheet_DownloadByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/pricesheet/default/download
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<DownloadUrl> PriceSheet_DownloadByBillingProfileAsync(string api_version, string billingAccountName, string billingProfileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/pricesheet/default/download?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DownloadUrl>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the transactions by billing profile name for given start date and end date.
		/// Transactions_ListByBillingProfile providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="periodStartDate">Start date</param>
		/// <param name="periodEndDate">End date</param>
		/// <param name="filter">May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<TransactionListResult> Transactions_ListByBillingProfileAsync(string billingAccountName, string billingProfileName, string api_version, string periodStartDate, string periodEndDate, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/transactions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransactionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the transaction.
		/// Transactions_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/transactions/{transactionName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingProfileName">Billing Profile Id.</param>
		/// <param name="transactionName">Transaction name.</param>
		/// <param name="periodStartDate">Start date</param>
		/// <param name="periodEndDate">End date</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Transaction> Transactions_GetAsync(string billingAccountName, string billingProfileName, string transactionName, string periodStartDate, string periodEndDate, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingProfiles/"+ (billingProfileName==null? "" : Uri.EscapeDataString(billingProfileName))+"/transactions/"+ (transactionName==null? "" : Uri.EscapeDataString(transactionName))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignments on the Billing Account
		/// BillingRoleAssignments_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignmentListResult> BillingRoleAssignments_ListByBillingAccountAsync(string api_version, string billingAccountName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingRoleAssignments?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the role assignment for the caller
		/// BillingRoleAssignments_GetByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_GetByBillingAccountAsync(string api_version, string billingAccountName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the role assignment on this billing account
		/// BillingRoleAssignments_DeleteByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingRoleAssignmentName">role assignment id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleAssignment> BillingRoleAssignments_DeleteByBillingAccountAsync(string api_version, string billingAccountName, string billingRoleAssignmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingRoleAssignments/"+ (billingRoleAssignmentName==null? "" : Uri.EscapeDataString(billingRoleAssignmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleAssignment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the role definition for a billing account
		/// BillingRoleDefinitions_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinitionListResult> BillingRoleDefinitions_ListByBillingAccountAsync(string api_version, string billingAccountName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingRoleDefinitions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinitionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the role definition for a role
		/// BillingRoleDefinitions_GetByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/{billingRoleDefinitionName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingRoleDefinitionName">role definition id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingRoleDefinition> BillingRoleDefinitions_GetByBillingAccountAsync(string api_version, string billingAccountName, string billingRoleDefinitionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingRoleDefinitions/"+ (billingRoleDefinitionName==null? "" : Uri.EscapeDataString(billingRoleDefinitionName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingRoleDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists billing subscriptions by billing account name.
		/// BillingSubscriptions_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscriptionsListResult> BillingSubscriptions_ListByBillingAccountAsync(string billingAccountName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingSubscriptions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists invoices by billing subscriptions name.
		/// Invoices_ListByBillingSubscription providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="periodStartDate">Invoice period start date.</param>
		/// <param name="periodEndDate">Invoice period end date.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceListResult> Invoices_ListByBillingSubscriptionAsync(string billingAccountName, string billingSubscriptionName, string periodStartDate, string periodEndDate, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"/invoices&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the invoice by name.
		/// Invoices_GetById providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/invoices/{invoiceName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="invoiceName">Invoice Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Invoice> Invoices_GetByIdAsync(string billingAccountName, string billingSubscriptionName, string invoiceName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"/invoices/"+ (invoiceName==null? "" : Uri.EscapeDataString(invoiceName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to add a role assignment to a billing account.
		/// BillingRoleAssignments_AddByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/createBillingRoleAssignment
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="requestBody">Parameters supplied to add a role assignment.</param>
		public async Task BillingRoleAssignments_AddByBillingAccountAsync(string api_version, string billingAccountName, BillingRoleAssignmentPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/createBillingRoleAssignment?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists customers which the current user can work with on-behalf of a partner.
		/// Customers_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="filter">May be used to filter the list of customers.</param>
		/// <param name="skiptoken">Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CustomerListResult> Customers_ListByBillingAccountAsync(string api_version, string billingAccountName, string filter, string skiptoken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&skiptoken=" + (skiptoken==null? "" : Uri.EscapeDataString(skiptoken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CustomerListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a customer by its id.
		/// Customers_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="expand">May be used to expand enabledAzurePlans, resellers.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Customer> Customers_GetAsync(string api_version, string billingAccountName, string customerName, string expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Customer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all billing permissions the caller has for a customer.
		/// BillingPermissions_ListByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingPermissions
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingPermissionsListResult> BillingPermissions_ListByCustomerAsync(string api_version, string billingAccountName, string customerName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/billingPermissions?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingPermissionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists billing subscription by customer id.
		/// BillingSubscriptions_ListByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscriptionsListResult> BillingSubscriptions_ListByCustomerAsync(string billingAccountName, string customerName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/billingSubscriptions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscriptionsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a single billing subscription by id.
		/// BillingSubscriptions_GetByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions/{billingSubscriptionName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="billingSubscriptionName">Billing Subscription Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingSubscription> BillingSubscriptions_GetByCustomerAsync(string billingAccountName, string customerName, string billingSubscriptionName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/billingSubscriptions/"+ (billingSubscriptionName==null? "" : Uri.EscapeDataString(billingSubscriptionName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingSubscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The policy for a given billing account name and customer name.
		/// Policies_GetByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CustomerPolicy> Policies_GetByCustomerAsync(string billingAccountName, string customerName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/policies/default&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CustomerPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The operation to update a Customer policy.
		/// Policies_UpdateCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="requestBody">Parameters supplied to the update customer policy operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<CustomerPolicy> Policies_UpdateCustomerAsync(string api_version, string billingAccountName, string customerName, CustomerPolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/policies/default?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CustomerPolicy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists products by customer id.
		/// Products_ListByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="filter">May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ProductsListResult> Products_ListByCustomerAsync(string billingAccountName, string customerName, string api_version, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/products&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a customer's product by name.
		/// Products_GetByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products/{productName}
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="productName">Invoice Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Product> Products_GetByCustomerAsync(string billingAccountName, string customerName, string productName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/products/"+ (productName==null? "" : Uri.EscapeDataString(productName))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the transactions by customer id for given start date and end date.
		/// Transactions_ListByCustomer providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/transactions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="customerName">Customer name.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="periodStartDate">Start date</param>
		/// <param name="periodEndDate">End date</param>
		/// <param name="filter">May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<TransactionListResult> Transactions_ListByCustomerAsync(string billingAccountName, string customerName, string api_version, string periodStartDate, string periodEndDate, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/customers/"+ (customerName==null? "" : Uri.EscapeDataString(customerName))+"/transactions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransactionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all departments for a user which he has access to.
		/// Departments_ListByBillingAccountName providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="expand">May be used to expand the enrollmentAccounts.</param>
		/// <param name="filter">The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<DepartmentListResult> Departments_ListByBillingAccountNameAsync(string api_version, string billingAccountName, string expand, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/departments?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DepartmentListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the department by id.
		/// Departments_Get providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="departmentName">Department Id.</param>
		/// <param name="expand">May be used to expand the enrollmentAccounts.</param>
		/// <param name="filter">The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<Department> Departments_GetAsync(string api_version, string billingAccountName, string departmentName, string expand, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/departments/"+ (departmentName==null? "" : Uri.EscapeDataString(departmentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Department>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Enrollment Accounts for a user which he has access to.
		/// EnrollmentAccounts_ListByBillingAccountName providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="expand">May be used to expand the department.</param>
		/// <param name="filter">The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<EnrollmentAccountListResult> EnrollmentAccounts_ListByBillingAccountNameAsync(string api_version, string billingAccountName, string expand, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/enrollmentAccounts?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnrollmentAccountListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the enrollment account by id.
		/// EnrollmentAccounts_GetByEnrollmentAccountId providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="enrollmentAccountName">Enrollment Account Id.</param>
		/// <param name="expand">May be used to expand the Department.</param>
		/// <param name="filter">The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<EnrollmentAccount> EnrollmentAccounts_GetByEnrollmentAccountIdAsync(string api_version, string billingAccountName, string enrollmentAccountName, string expand, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/enrollmentAccounts/"+ (enrollmentAccountName==null? "" : Uri.EscapeDataString(enrollmentAccountName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&expand=" + (expand==null? "" : Uri.EscapeDataString(expand))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnrollmentAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of invoices for a billing account.
		/// Invoices_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="periodStartDate">Invoice period start date.</param>
		/// <param name="periodEndDate">Invoice period end date.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceListResult> Invoices_ListByBillingAccountAsync(string api_version, string billingAccountName, string periodStartDate, string periodEndDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/invoices?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all invoice sections with create subscription permission for a user.
		/// BillingAccounts_ListInvoiceSectionsByCreateSubscriptionPermission providers/Microsoft.Billing/billingAccounts/{billingAccountName}/listInvoiceSectionsWithCreateSubscriptionPermission
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<InvoiceSectionListWithCreateSubPermissionResult> BillingAccounts_ListInvoiceSectionsByCreateSubscriptionPermissionAsync(string api_version, string billingAccountName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/listInvoiceSectionsWithCreateSubscriptionPermission?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvoiceSectionListWithCreateSubPermissionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Payment Methods by billing account Id.
		/// PaymentMethods_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<PaymentMethodsListResult> PaymentMethods_ListByBillingAccountAsync(string billingAccountName, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/paymentMethods&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentMethodsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists products by billing account name.
		/// Products_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="filter">May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ProductsListResult> Products_ListByBillingAccountAsync(string billingAccountName, string api_version, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/products&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProductsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the transactions by billing account name for given start and end date.
		/// Transactions_ListByBillingAccount providers/Microsoft.Billing/billingAccounts/{billingAccountName}/transactions
		/// </summary>
		/// <param name="billingAccountName">billing Account Id.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="periodStartDate">Start date</param>
		/// <param name="periodEndDate">End date</param>
		/// <param name="filter">May be used to filter by transaction kind. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<TransactionListResult> Transactions_ListByBillingAccountAsync(string billingAccountName, string api_version, string periodStartDate, string periodEndDate, string filter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/billingAccounts/"+ (billingAccountName==null? "" : Uri.EscapeDataString(billingAccountName))+"/transactions&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version))+"&periodStartDate=" + (periodStartDate==null? "" : Uri.EscapeDataString(periodStartDate))+"&periodEndDate=" + (periodEndDate==null? "" : Uri.EscapeDataString(periodEndDate))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransactionListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all of the available billing REST API operations.
		/// Operations_List providers/Microsoft.Billing/operations
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<OperationListResult> Operations_ListAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/operations?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<OperationListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the transfers received by caller.
		/// RecipientTransfers_List providers/Microsoft.Billing/transfers
		/// </summary>
		/// <returns>List of transfers received by caller.</returns>
		public async Task<RecipientTransferDetailsListResult> RecipientTransfers_ListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/transfers";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RecipientTransferDetailsListResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the transfer with given transfer Id.
		/// RecipientTransfers_Get providers/Microsoft.Billing/transfers/{transferName}
		/// </summary>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of the transfers with given Id.</returns>
		public async Task<RecipientTransferDetails> RecipientTransfers_GetAsync(string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RecipientTransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts the transfer with given transfer Id.
		/// RecipientTransfers_Accept providers/Microsoft.Billing/transfers/{transferName}/acceptTransfer
		/// </summary>
		/// <param name="transferName">Transfer Name.</param>
		/// <param name="requestBody">Parameters supplied to accept the transfer.</param>
		/// <returns>Details of the accepted transfer.</returns>
		public async Task<RecipientTransferDetails> RecipientTransfers_AcceptAsync(string transferName, AcceptTransferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName))+"/acceptTransfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RecipientTransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Declines the transfer with given transfer Id.
		/// RecipientTransfers_Decline providers/Microsoft.Billing/transfers/{transferName}/declineTransfer
		/// </summary>
		/// <param name="transferName">Transfer Name.</param>
		/// <returns>Details of the declined transfer.</returns>
		public async Task<RecipientTransferDetails> RecipientTransfers_DeclineAsync(string transferName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName))+"/declineTransfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RecipientTransferDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates if the products can be transferred in the context of the given transfer name.
		/// RecipientTransfers_Validate providers/Microsoft.Billing/transfers/{transferName}/validateTransfer
		/// </summary>
		/// <param name="transferName">Transfer Name.</param>
		/// <param name="requestBody">Parameters supplied to validate the transfer.</param>
		/// <returns>Results of the transfer validation.</returns>
		public async Task<ValidateTransferListResponse> RecipientTransfers_ValidateAsync(string transferName, AcceptTransferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/transfers/"+ (transferName==null? "" : Uri.EscapeDataString(transferName))+"/validateTransfer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ValidateTransferListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates the address.
		/// Address_Validate providers/Microsoft.Billing/validateAddress
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<ValidateAddressResponse> Address_ValidateAsync(string api_version, AddressDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.Billing/validateAddress?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ValidateAddressResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the current line of credit.
		/// LineOfCredits_Get subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<LineOfCredit> LineOfCredits_GetAsync(string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LineOfCredit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Increase the current line of credit.
		/// LineOfCredits_Update subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default
		/// </summary>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="requestBody">Parameters supplied to the increase line of credit operation.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<LineOfCredit> LineOfCredits_UpdateAsync(string api_version, string subscriptionId, LineOfCredit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LineOfCredit>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get billing property by subscription Id.
		/// BillingProperty_Get subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default
		/// </summary>
		/// <param name="subscriptionId">Azure Subscription ID.</param>
		/// <param name="api_version">Version of the API to be used with the client request. The current version is 2019-10-01-preview.</param>
		/// <returns>OK. The request has succeeded.</returns>
		public async Task<BillingProperty> BillingProperty_GetAsync(string subscriptionId, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.Billing/billingProperty/default&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BillingProperty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
