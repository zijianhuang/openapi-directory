//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// App resource payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppResource
	{
		
		/// <summary>
		/// App resource properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// App resource properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppResourceProperties
	{
		
		/// <summary>
		/// Name of the active deployment of the App
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActiveDeploymentName { get; set; }
		
		/// <summary>
		/// Date time when the resource is created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Persistent disk payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PersistentDisk PersistentDisk { get; set; }
		
		/// <summary>
		/// Provisioning state of the App
		/// </summary>
		public AppResourcePropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Indicates whether the App exposes public endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// Temporary disk payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemporaryDisk TemporaryDisk { get; set; }
		
		/// <summary>
		/// URL of the App
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Persistent disk payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersistentDisk
	{
		
		/// <summary>
		/// Mount path of the persistent disk
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Size of the persistent disk in GB
		/// Minimum: 0
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50)]
		public System.Nullable<System.Int32> SizeInGB { get; set; }
		
		/// <summary>
		/// Size of the used persistent disk in GB
		/// Minimum: 0
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50)]
		public System.Nullable<System.Int32> UsedInGB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AppResourcePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 3,
	}
	
	/// <summary>
	/// Temporary disk payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemporaryDisk
	{
		
		/// <summary>
		/// Mount path of the temporary disk
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MountPath { get; set; }
		
		/// <summary>
		/// Size of the temporary disk in GB
		/// Minimum: 0
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 5)]
		public System.Nullable<System.Int32> SizeInGB { get; set; }
	}
	
	/// <summary>
	/// Object that includes an array of App resources and a possible link for next set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AppResourceCollection
	{
		
		/// <summary>
		/// URL client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of App resources
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AppResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Available operations of the service
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailableOperations
	{
		
		/// <summary>
		/// URL client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of available operation details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperationDetail[] Value { get; set; }
	}
	
	/// <summary>
	/// Operation detail payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationDetail
	{
		
		/// <summary>
		/// Indicates whether the operation is a data action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataAction { get; set; }
		
		/// <summary>
		/// Operation display payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperationDisplay Display { get; set; }
		
		/// <summary>
		/// Name of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Origin { get; set; }
		
		/// <summary>
		/// Extra Operation properties
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OperationProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Operation display payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationDisplay
	{
		
		/// <summary>
		/// Localized friendly description for the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Localized friendly name for the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Operation { get; set; }
		
		/// <summary>
		/// Resource provider of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		/// <summary>
		/// Resource of the operation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
	}
	
	/// <summary>
	/// Extra Operation properties
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationProperties
	{
		
		/// <summary>
		/// Service specification payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecification ServiceSpecification { get; set; }
	}
	
	/// <summary>
	/// Service specification payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceSpecification
	{
		
		/// <summary>
		/// Specifications of the Log for Azure Monitoring
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogSpecification[] LogSpecifications { get; set; }
		
		/// <summary>
		/// Specifications of the Metrics for Azure Monitoring
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricSpecification[] MetricSpecifications { get; set; }
	}
	
	/// <summary>
	/// Specifications of the Log for Azure Monitoring
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogSpecification
	{
		
		/// <summary>
		/// Blob duration of the log
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BlobDuration { get; set; }
		
		/// <summary>
		/// Localized friendly display name of the log
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Name of the log
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Specifications of the Metrics for Azure Monitoring
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricSpecification
	{
		
		/// <summary>
		/// Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// Name of the metric category that the metric belongs to. A metric can only belong to a single category.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// Dimensions of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Localized friendly description of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayDescription { get; set; }
		
		/// <summary>
		/// Localized friendly display name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FillGapWithZero { get; set; }
		
		/// <summary>
		/// Name of the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Supported aggregation types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedAggregationTypes { get; set; }
		
		/// <summary>
		/// Supported time grain types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SupportedTimeGrainTypes { get; set; }
		
		/// <summary>
		/// Unit that makes sense for the metric
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Specifications of the Dimension of metrics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricDimension
	{
		
		/// <summary>
		/// Localized friendly display name of the dimension
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Name of the dimension
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Binding resource payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BindingResource
	{
		
		/// <summary>
		/// Binding resource properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BindingResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Binding resource properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BindingResourceProperties
	{
		
		/// <summary>
		/// Binding parameters of the Binding resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BindingParameters { get; set; }
		
		/// <summary>
		/// Creation time of the Binding resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// The generated Spring Boot property file for this binding. The secret will be deducted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GeneratedProperties { get; set; }
		
		/// <summary>
		/// The key of the bound resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// The Azure resource id of the bound resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The name of the bound resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The standard Azure resource type of the bound resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Update time of the Binding resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Object that includes an array of Binding resources and a possible link for next set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BindingResourceCollection
	{
		
		/// <summary>
		/// URL client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Binding resources
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BindingResource[] Value { get; set; }
	}
	
	/// <summary>
	/// An error response from the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudError
	{
		
		/// <summary>
		/// An error response from the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudErrorBody Error { get; set; }
	}
	
	/// <summary>
	/// An error response from the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudErrorBody
	{
		
		/// <summary>
		/// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// A list of additional details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudErrorBody[] Details { get; set; }
		
		/// <summary>
		/// A message describing the error, intended to be suitable for display in a user interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The target of the particular error. For example, the name of the property in error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Service properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterResourceProperties
	{
		
		/// <summary>
		/// Config server git properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigServerProperties ConfigServerProperties { get; set; }
		
		/// <summary>
		/// Provisioning state of the Service
		/// </summary>
		public ClusterResourcePropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// ServiceInstanceEntity GUID which uniquely identifies a created resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// Trace properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TraceProperties Trace { get; set; }
		
		/// <summary>
		/// Version of the Service
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Config server git properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigServerProperties
	{
		
		/// <summary>
		/// The settings of config server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigServerSettings ConfigServer { get; set; }
		
		/// <summary>
		/// The error code compose of code and message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Error Error { get; set; }
		
		/// <summary>
		/// State of the config server.
		/// </summary>
		public ConfigServerPropertiesState State { get; set; }
	}
	
	/// <summary>
	/// The settings of config server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigServerSettings
	{
		
		/// <summary>
		/// Property of git.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigServerGitProperty GitProperty { get; set; }
	}
	
	/// <summary>
	/// Property of git.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigServerGitProperty
	{
		
		/// <summary>
		/// Public sshKey of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostKey { get; set; }
		
		/// <summary>
		/// SshKey algorithm of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostKeyAlgorithm { get; set; }
		
		/// <summary>
		/// Label of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		/// <summary>
		/// Password of git repository basic auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Private sshKey algorithm of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Repositories of git.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GitPatternRepository[] Repositories { get; set; }
		
		/// <summary>
		/// Searching path of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SearchPaths { get; set; }
		
		/// <summary>
		/// Strict host key checking or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StrictHostKeyChecking { get; set; }
		
		/// <summary>
		/// URI of the repository
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Username of git repository basic auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Git repository property payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GitPatternRepository
	{
		
		/// <summary>
		/// Public sshKey of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostKey { get; set; }
		
		/// <summary>
		/// SshKey algorithm of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostKeyAlgorithm { get; set; }
		
		/// <summary>
		/// Label of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		/// <summary>
		/// Name of the repository
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Password of git repository basic auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Collection of pattern of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Pattern { get; set; }
		
		/// <summary>
		/// Private sshKey algorithm of git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Searching path of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SearchPaths { get; set; }
		
		/// <summary>
		/// Strict host key checking or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StrictHostKeyChecking { get; set; }
		
		/// <summary>
		/// URI of the repository
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Username of git repository basic auth.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// The error code compose of code and message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		/// <summary>
		/// The code of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The message of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigServerPropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterResourcePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moving = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moved = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MoveFailed = 8,
	}
	
	/// <summary>
	/// Trace properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TraceProperties
	{
		
		/// <summary>
		/// Target application insight instrumentation key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AppInsightInstrumentationKey { get; set; }
		
		/// <summary>
		/// Indicates whether enable the tracing functionality
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The error code compose of code and message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Error Error { get; set; }
		
		/// <summary>
		/// State of the trace proxy.
		/// </summary>
		public TracePropertiesState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TracePropertiesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAvailable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 3,
	}
	
	/// <summary>
	/// Deployment instance payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentInstance
	{
		
		/// <summary>
		/// Discovery status of the deployment instance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DiscoveryStatus { get; set; }
		
		/// <summary>
		/// Name of the deployment instance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Failed reason of the deployment instance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		/// <summary>
		/// Status of the deployment instance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Deployment resource payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentResource
	{
		
		/// <summary>
		/// Deployment resource properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Deployment resource properties payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentResourceProperties
	{
		
		/// <summary>
		/// Indicates whether the Deployment is active
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// App name of the deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AppName { get; set; }
		
		/// <summary>
		/// Date time when the resource is created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTime { get; set; }
		
		/// <summary>
		/// Deployment settings payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentSettings DeploymentSettings { get; set; }
		
		/// <summary>
		/// Collection of instances belong to the Deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentInstance[] Instances { get; set; }
		
		/// <summary>
		/// Provisioning state of the Deployment
		/// </summary>
		public DeploymentResourcePropertiesProvisioningState ProvisioningState { get; set; }
		
		/// <summary>
		/// Source information for a deployment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserSourceInfo Source { get; set; }
		
		/// <summary>
		/// Status of the Deployment
		/// </summary>
		public DeploymentResourcePropertiesStatus Status { get; set; }
	}
	
	/// <summary>
	/// Deployment settings payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentSettings
	{
		
		/// <summary>
		/// Required CPU
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> Cpu { get; set; }
		
		/// <summary>
		/// Collection of environment variables
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Instance count
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		/// <summary>
		/// JVM parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JvmOptions { get; set; }
		
		/// <summary>
		/// Required Memory size in GB
		/// Minimum: 1
		/// Maximum: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 8)]
		public System.Nullable<System.Int32> MemoryInGB { get; set; }
		
		/// <summary>
		/// Runtime version
		/// </summary>
		public DeploymentSettingsRuntimeVersion RuntimeVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentSettingsRuntimeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Java_8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Java_11 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentResourcePropertiesProvisioningState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Updating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Source information for a deployment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserSourceInfo
	{
		
		/// <summary>
		/// Selector for the artifact to be used for the deployment for multi-module projects. This should be
		///the relative path to the target module/project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactSelector { get; set; }
		
		/// <summary>
		/// Relative path of the storage which stores the source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelativePath { get; set; }
		
		/// <summary>
		/// Type of the source uploaded
		/// </summary>
		public UserSourceInfoType Type { get; set; }
		
		/// <summary>
		/// Version of the source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserSourceInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Jar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Source = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentResourcePropertiesStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allocating = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Upgrading = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Compiling = 6,
	}
	
	/// <summary>
	/// Object that includes an array of App resources and a possible link for next set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentResourceCollection
	{
		
		/// <summary>
		/// URL client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Deployment resources
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Log file URL payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogFileUrlResponse
	{
		
		/// <summary>
		/// URL of the log file
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Name availability result payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NameAvailability
	{
		
		/// <summary>
		/// Message why the name is not available
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Indicates whether the name is available
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NameAvailable { get; set; }
		
		/// <summary>
		/// Reason why the name is not available
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Name availability parameters payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NameAvailabilityParameters
	{
		
		/// <summary>
		/// Name to be checked
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of the resource to check name availability
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Regenerate test key request payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegenerateTestKeyRequestPayload
	{
		
		/// <summary>
		/// Type of the test key
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public RegenerateTestKeyRequestPayloadKeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegenerateTestKeyRequestPayloadKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Primary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Secondary = 1,
	}
	
	/// <summary>
	/// The core properties of ARM resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resource
	{
		
		/// <summary>
		/// Fully qualified resource Id for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Resource upload definition payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceUploadDefinition
	{
		
		/// <summary>
		/// Source relative path
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelativePath { get; set; }
		
		/// <summary>
		/// Upload URL
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UploadUrl { get; set; }
	}
	
	/// <summary>
	/// Service resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceResource
	{
		
		/// <summary>
		/// Service properties payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterResourceProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Object that includes an array of Service resources and a possible link for next set
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceResourceList
	{
		
		/// <summary>
		/// URL client should use to fetch the next page (per server side paging).
		///It's null for now, added for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextLink { get; set; }
		
		/// <summary>
		/// Collection of Service resources
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceResource[] Value { get; set; }
	}
	
	/// <summary>
	/// Test keys payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestKeys
	{
		
		/// <summary>
		/// Indicates whether the test endpoint feature enabled or not
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Primary key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryKey { get; set; }
		
		/// <summary>
		/// Primary test endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryTestEndpoint { get; set; }
		
		/// <summary>
		/// Secondary key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryKey { get; set; }
		
		/// <summary>
		/// Secondary test endpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryTestEndpoint { get; set; }
	}
	
	/// <summary>
	/// The resource model definition for a ARM tracked top level resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrackedResource
	{
		
		/// <summary>
		/// The GEO location of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Tags of the service which is a list of key value pairs that describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all of the available REST API operations of the Microsoft.AppPlatform provider.
		/// Operations_List providers/Microsoft.AppPlatform/operations
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <returns>Success. The response describes the list of operations.</returns>
		public async Task<AvailableOperations> Operations_ListAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/Microsoft.AppPlatform/operations?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AvailableOperations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Handles requests to list all resources in a subscription.
		/// Services_ListBySubscription subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/Spring
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Success. The response describes the list of Services in the subscription.</returns>
		public async Task<ServiceResourceList> Services_ListBySubscriptionAsync(string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppPlatform/Spring?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceResourceList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the resource name is valid and is not already in use.
		/// Services_CheckNameAvailability subscriptions/{subscriptionId}/providers/Microsoft.AppPlatform/locations/{location}/checkNameAvailability
		/// </summary>
		/// <param name="location">the region</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Parameters supplied to the operation.</param>
		/// <returns>Success. The response describes the name availability.</returns>
		public async Task<NameAvailability> Services_CheckNameAvailabilityAsync(string location, string api_version, string subscriptionId, NameAvailabilityParameters requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/providers/Microsoft.AppPlatform/locations/"+ (location==null? "" : Uri.EscapeDataString(location))+"/checkNameAvailability&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NameAvailability>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Handles requests to list all resources in a resource group.
		/// Services_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <returns>Success. The response describes the list of Services in the resource group.</returns>
		public async Task<ServiceResourceList> Services_ListAsync(string api_version, string subscriptionId, string resourceGroupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceResourceList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Operation to delete a Service.
		/// Services_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		public async Task Services_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Service and its properties.
		/// Services_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success. The response describes the corresponding Service.</returns>
		public async Task<ServiceResource> Services_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Service or update an exiting Service.
		/// Services_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="requestBody">Parameters for the create or update operation</param>
		/// <returns>Success. The response describes the updated Service.</returns>
		public async Task<ServiceResource> Services_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, ServiceResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ServiceResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Handles requests to list all resources in a Service.
		/// Apps_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success. The response describes the list of Apps in the Service.</returns>
		public async Task<AppResourceCollection> Apps_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AppResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Operation to delete an App.
		/// Apps_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <returns>Success. The response indicates the resource is deleted.</returns>
		public async Task Apps_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an App and its properties.
		/// Apps_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}
		/// </summary>
		/// <param name="syncStatus">Indicates whether sync status</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <returns>Success. The response describes the corresponding App.</returns>
		public async Task<AppResource> Apps_GetAsync(string syncStatus, string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"?syncStatus=" + (syncStatus==null? "" : Uri.EscapeDataString(syncStatus))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AppResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new App or update an exiting App.
		/// Apps_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="requestBody">Parameters for the create or update operation</param>
		/// <returns>Success. The response describes the updated App.</returns>
		public async Task<AppResource> Apps_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, AppResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AppResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Handles requests to list all resources in an App.
		/// Bindings_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <returns>Success. The response describes the list of Bindings in the App.</returns>
		public async Task<BindingResourceCollection> Bindings_ListAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/bindings?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BindingResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Operation to delete a Binding.
		/// Bindings_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="bindingName">The name of the Binding resource.</param>
		/// <returns>Success. The response indicates the resource is deleted.</returns>
		public async Task Bindings_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string bindingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/bindings/"+ (bindingName==null? "" : Uri.EscapeDataString(bindingName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Binding and its properties.
		/// Bindings_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="bindingName">The name of the Binding resource.</param>
		/// <returns>Success. The response describes the corresponding Binding.</returns>
		public async Task<BindingResource> Bindings_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string bindingName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/bindings/"+ (bindingName==null? "" : Uri.EscapeDataString(bindingName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BindingResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Binding or update an exiting Binding.
		/// Bindings_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/bindings/{bindingName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="bindingName">The name of the Binding resource.</param>
		/// <param name="requestBody">Parameters for the create or update operation</param>
		/// <returns>Success. The response describes the created or updated Binding.</returns>
		public async Task<BindingResource> Bindings_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string bindingName, BindingResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/bindings/"+ (bindingName==null? "" : Uri.EscapeDataString(bindingName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BindingResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Handles requests to list all resources in an App.
		/// Deployments_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments
		/// </summary>
		/// <param name="version">Version of the deployments to be listed</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <returns>Success. The response describes the list of Deployments in the App.</returns>
		public async Task<DeploymentResourceCollection> Deployments_ListAsync(string[] version, string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments?"+String.Join("&", version.Select(z => $"version={Uri.EscapeDataString(z.ToString())}"))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Operation to delete a Deployment.
		/// Deployments_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success. The response indicates the resource is deleted.</returns>
		public async Task Deployments_DeleteAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Deployment and its properties.
		/// Deployments_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success. The response describes the corresponding Deployment.</returns>
		public async Task<DeploymentResource> Deployments_GetAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Deployment or update an exiting Deployment.
		/// Deployments_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <param name="requestBody">Parameters for the create or update operation</param>
		/// <returns>Success. The response describes the updated Deployment.</returns>
		public async Task<DeploymentResource> Deployments_CreateOrUpdateAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, DeploymentResource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentResource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get deployment log file URL
		/// Deployments_GetLogFileUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/getLogFileUrl
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success. The response contains the log file URL.</returns>
		public async Task<LogFileUrlResponse> Deployments_GetLogFileUrlAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"/getLogFileUrl?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<LogFileUrlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart the deployment.
		/// Deployments_Restart subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/restart
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success.</returns>
		public async Task Deployments_RestartAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"/restart?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start the deployment.
		/// Deployments_Start subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/start
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success.</returns>
		public async Task Deployments_StartAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"/start?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop the deployment.
		/// Deployments_Stop subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/deployments/{deploymentName}/stop
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <param name="deploymentName">The name of the Deployment resource.</param>
		/// <returns>Success.</returns>
		public async Task Deployments_StopAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, string deploymentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/deployments/"+ (deploymentName==null? "" : Uri.EscapeDataString(deploymentName))+"/stop?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an resource upload URL for an App, which may be artifacts or source archive.
		/// Apps_GetResourceUploadUrl subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/getResourceUploadUrl
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="appName">The name of the App resource.</param>
		/// <returns>Success. The response describes the resource upload URL.</returns>
		public async Task<ResourceUploadDefinition> Apps_GetResourceUploadUrlAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, string appName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apps/"+ (appName==null? "" : Uri.EscapeDataString(appName))+"/getResourceUploadUrl?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ResourceUploadDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List deployments for a certain service
		/// Deployments_ListClusterAllDeployments subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/deployments
		/// </summary>
		/// <param name="version">Version of the deployments to be listed</param>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success</returns>
		public async Task<DeploymentResourceCollection> Deployments_ListClusterAllDeploymentsAsync(string[] version, string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/deployments?"+String.Join("&", version.Select(z => $"version={Uri.EscapeDataString(z.ToString())}"))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentResourceCollection>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Services_DisableTestEndpoint subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/disableTestEndpoint
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success</returns>
		public async Task Services_DisableTestEndpointAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/disableTestEndpoint?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Services_EnableTestEndpoint subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/enableTestEndpoint
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success</returns>
		public async Task<TestKeys> Services_EnableTestEndpointAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/enableTestEndpoint?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List test keys for a Service.
		/// Services_ListTestKeys subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/listTestKeys
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <returns>Success. The response describes the test keys.</returns>
		public async Task<TestKeys> Services_ListTestKeysAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/listTestKeys?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate a test key for a Service.
		/// Services_RegenerateTestKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/regenerateTestKey
		/// </summary>
		/// <param name="api_version">Client Api Version.</param>
		/// <param name="subscriptionId">Gets subscription ID which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="resourceGroupName">The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.</param>
		/// <param name="serviceName">The name of the Service resource.</param>
		/// <param name="requestBody">Parameters for the operation</param>
		/// <returns>Success.</returns>
		public async Task<TestKeys> Services_RegenerateTestKeyAsync(string api_version, string subscriptionId, string resourceGroupName, string serviceName, RegenerateTestKeyRequestPayload requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.AppPlatform/Spring/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/regenerateTestKey?api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestKeys>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
