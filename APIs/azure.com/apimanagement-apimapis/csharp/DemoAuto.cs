//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all APIs of the API Management service instance.
		/// Api_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| serviceUrl | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| path | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="tags">Include tags in the response.</param>
		/// <param name="expandApiVersionSet">Include full ApiVersionSet resource in response</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Paged Result response of Apis.</returns>
		public async Task Api_ListByServiceAsync(string resourceGroupName, string serviceName, string filter, int top, int skip, string tags, bool expandApiVersionSet, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&tags=" + (tags==null? "" : Uri.EscapeDataString(tags))+"&expandApiVersionSet="+expandApiVersionSet+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified API of the API Management service instance.
		/// Api_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="deleteRevisions">Delete all revisions of the Api.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The API was successfully deleted.</returns>
		public async Task Api_DeleteAsync(string resourceGroupName, string serviceName, string apiId, bool deleteRevisions, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"&deleteRevisions="+deleteRevisions+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the API specified by its identifier.
		/// Api_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified API entity.</returns>
		public async Task Api_GetAsync(string resourceGroupName, string serviceName, string apiId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates new or updates existing specified API of the API Management service instance.
		/// Api_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create or update parameters.</param>
		/// <returns>API was successfully updated.</returns>
		public async Task Api_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all diagnostics of an API.
		/// ApiDiagnostic_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Paged Result response of diagnostics for an API.</returns>
		public async Task ApiDiagnostic_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/diagnostics&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Diagnostic from an API.
		/// ApiDiagnostic_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="diagnosticId">Diagnostic identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Diagnostic successfully removed</returns>
		public async Task ApiDiagnostic_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string diagnosticId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/diagnostics/"+ (diagnosticId==null? "" : Uri.EscapeDataString(diagnosticId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the Diagnostic for an API specified by its identifier.
		/// ApiDiagnostic_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="diagnosticId">Diagnostic identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified Diagnostic entity.</returns>
		public async Task ApiDiagnostic_GetAsync(string resourceGroupName, string serviceName, string apiId, string diagnosticId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/diagnostics/"+ (diagnosticId==null? "" : Uri.EscapeDataString(diagnosticId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Diagnostic for an API or updates an existing one.
		/// ApiDiagnostic_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/diagnostics/{diagnosticId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="diagnosticId">Diagnostic identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Diagnostic was successfully updated.</returns>
		public async Task ApiDiagnostic_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string diagnosticId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/diagnostics/"+ (diagnosticId==null? "" : Uri.EscapeDataString(diagnosticId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all issues associated with the specified API.
		/// ApiIssue_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br></param>
		/// <param name="expandCommentsAttachments">Expand the comment attachments. </param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Paged Result response of issues for the API.</returns>
		public async Task ApiIssue_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string filter, bool expandCommentsAttachments, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&expandCommentsAttachments="+expandCommentsAttachments+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Issue from an API.
		/// ApiIssue_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Issue successfully removed</returns>
		public async Task ApiIssue_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the Issue for an API specified by its identifier.
		/// ApiIssue_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="expandCommentsAttachments">Expand the comment attachments. </param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified Issue entity.</returns>
		public async Task ApiIssue_GetAsync(string resourceGroupName, string serviceName, string apiId, string issueId, bool expandCommentsAttachments, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"&expandCommentsAttachments="+expandCommentsAttachments+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Issue for an API or updates an existing one.
		/// ApiIssue_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Api issue successfully updated</returns>
		public async Task ApiIssue_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all attachments for the Issue associated with the specified API.
		/// ApiIssueAttachment_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Paged Result response of issue attachments for the API.</returns>
		public async Task ApiIssueAttachment_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/attachments&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified comment from an Issue.
		/// ApiIssueAttachment_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="attachmentId">Attachment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Attachment successfully removed</returns>
		public async Task ApiIssueAttachment_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string attachmentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/attachments/"+ (attachmentId==null? "" : Uri.EscapeDataString(attachmentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the issue Attachment for an API specified by its identifier.
		/// ApiIssueAttachment_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="attachmentId">Attachment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified issue Attachment entity.</returns>
		public async Task ApiIssueAttachment_GetAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string attachmentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/attachments/"+ (attachmentId==null? "" : Uri.EscapeDataString(attachmentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Attachment for the Issue in an API or updates an existing one.
		/// ApiIssueAttachment_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="attachmentId">Attachment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Api issue attachment successfully updated</returns>
		public async Task ApiIssueAttachment_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string attachmentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/attachments/"+ (attachmentId==null? "" : Uri.EscapeDataString(attachmentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all comments for the Issue associated with the specified API.
		/// ApiIssueComment_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Paged Result response of issue comments for the API.</returns>
		public async Task ApiIssueComment_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/comments&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified comment from an Issue.
		/// ApiIssueComment_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="commentId">Comment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Comment successfully removed</returns>
		public async Task ApiIssueComment_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string commentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/comments/"+ (commentId==null? "" : Uri.EscapeDataString(commentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the issue Comment for an API specified by its identifier.
		/// ApiIssueComment_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="commentId">Comment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified issue Comment entity.</returns>
		public async Task ApiIssueComment_GetAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string commentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/comments/"+ (commentId==null? "" : Uri.EscapeDataString(commentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Comment for the Issue in an API or updates an existing one.
		/// ApiIssueComment_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/issues/{issueId}/comments/{commentId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="issueId">Issue identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="commentId">Comment identifier within an Issue. Must be unique in the current Issue.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Api issue comment successfully updated</returns>
		public async Task ApiIssueComment_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string issueId, string commentId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/issues/"+ (issueId==null? "" : Uri.EscapeDataString(issueId))+"/comments/"+ (commentId==null? "" : Uri.EscapeDataString(commentId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a collection of the operations for the specified API.
		/// ApiOperation_ListByApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="tags">Include tags in the response.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>A collection of operation summary entities at the API level.</returns>
		public async Task ApiOperation_ListByApiAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string tags, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&tags=" + (tags==null? "" : Uri.EscapeDataString(tags))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified operation in the API.
		/// ApiOperation_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>API operation successfully removed</returns>
		public async Task ApiOperation_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details of the API Operation specified by its identifier.
		/// ApiOperation_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified Operation entity.</returns>
		public async Task ApiOperation_GetAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new operation in the API or updates an existing one.
		/// ApiOperation_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Operation was successfully updated.</returns>
		public async Task ApiOperation_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of policy configuration at the API Operation level.
		/// ApiOperationPolicy_ListByOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Api Operations Policy Collection.</returns>
		public async Task ApiOperationPolicy_ListByOperationAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/policies&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the policy configuration at the Api Operation.
		/// ApiOperationPolicy_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Policy successfully removed</returns>
		public async Task ApiOperationPolicy_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string policyId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the policy configuration at the API Operation level.
		/// ApiOperationPolicy_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="format">Policy Export Format.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Api Operation Policy information.</returns>
		public async Task ApiOperationPolicy_GetAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string format, string policyId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&format=" + (format==null? "" : Uri.EscapeDataString(format))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates policy configuration for the API Operation level.
		/// ApiOperationPolicy_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The policy contents to apply.</param>
		/// <returns>Api Operation policy configuration of the tenant was successfully updated.</returns>
		public async Task ApiOperationPolicy_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string policyId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Tags associated with the Operation.
		/// Tag_ListByOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a collection of tags associated with the Operation entity.</returns>
		public async Task Tag_ListByOperationAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/tags&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach the tag from the Operation.
		/// Tag_DetachFromOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Tag was successfully removed from Operation</returns>
		public async Task Tag_DetachFromOperationAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tag associated with the Operation.
		/// Tag_GetByOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Gets the details of the tag specified by its identifier.</returns>
		public async Task Tag_GetByOperationAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign tag to the Operation.
		/// Tag_AssignToOperation subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operations/{operationId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="operationId">Operation identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Tag is already assigned to the Operation.</returns>
		public async Task Tag_AssignToOperationAsync(string resourceGroupName, string serviceName, string apiId, string operationId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operations/"+ (operationId==null? "" : Uri.EscapeDataString(operationId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a collection of operations associated with tags.
		/// Operation_ListByTags subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/operationsByTags
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| apiName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| description | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| method | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| urlTemplate | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="includeNotTaggedOperations">Include not tagged Operations.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Lists a collection of TagResource entities.</returns>
		public async Task Operation_ListByTagsAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, bool includeNotTaggedOperations, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/operationsByTags&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&includeNotTaggedOperations="+includeNotTaggedOperations+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the policy configuration at the API level.
		/// ApiPolicy_ListByApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Apis Policy Collection.</returns>
		public async Task ApiPolicy_ListByApiAsync(string resourceGroupName, string serviceName, string apiId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/policies&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the policy configuration at the Api.
		/// ApiPolicy_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully deleted the policy configuration at the API level.</returns>
		public async Task ApiPolicy_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string policyId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the policy configuration at the API level.
		/// ApiPolicy_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="format">Policy Export Format.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Api Policy information.</returns>
		public async Task ApiPolicy_GetAsync(string resourceGroupName, string serviceName, string apiId, string policyId, string format, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&format=" + (format==null? "" : Uri.EscapeDataString(format))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates policy configuration for the API.
		/// ApiPolicy_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/policies/{policyId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="policyId">The identifier of the Policy.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The policy contents to apply.</param>
		/// <returns>Api policy configuration of the tenant was successfully updated.</returns>
		public async Task ApiPolicy_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string policyId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Products, which the API is part of.
		/// ApiProduct_ListByApis subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/products
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a collection of products which have the Api entity.</returns>
		public async Task ApiProduct_ListByApisAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/products&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all releases of an API. An API release is created when making an API Revision current. Releases are also used to rollback to previous revisions. Results will be paged and can be constrained by the $top and $skip parameters.
		/// ApiRelease_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| notes | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a list of API Releases.</returns>
		public async Task ApiRelease_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/releases&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified release in the API.
		/// ApiRelease_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="releaseId">Release identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>API release successfully removed</returns>
		public async Task ApiRelease_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string releaseId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/releases/"+ (releaseId==null? "" : Uri.EscapeDataString(releaseId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the details of an API release.
		/// ApiRelease_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="releaseId">Release identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns the details of an API Release.</returns>
		public async Task ApiRelease_GetAsync(string resourceGroupName, string serviceName, string apiId, string releaseId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/releases/"+ (releaseId==null? "" : Uri.EscapeDataString(releaseId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Release for the API.
		/// ApiRelease_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/releases/{releaseId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="releaseId">Release identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Release was successfully updated.</returns>
		public async Task ApiRelease_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string releaseId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/releases/"+ (releaseId==null? "" : Uri.EscapeDataString(releaseId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all revisions of an API.
		/// ApiRevision_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/revisions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| apiRevision | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a list of revision details.</returns>
		public async Task ApiRevision_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/revisions&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the schema configuration at the API level.
		/// ApiSchema_ListByApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| contentType | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Apis Schema Collection.</returns>
		public async Task ApiSchema_ListByApiAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/schemas&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the schema configuration at the Api.
		/// ApiSchema_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="schemaId">Schema identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="force">If true removes all references to the schema before deleting it.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Successfully deleted the schema configuration at the API level.</returns>
		public async Task ApiSchema_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string schemaId, bool force, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/schemas/"+ (schemaId==null? "" : Uri.EscapeDataString(schemaId))+"&force="+force+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the schema configuration at the API level.
		/// ApiSchema_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="schemaId">Schema identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Api Schema information.</returns>
		public async Task ApiSchema_GetAsync(string resourceGroupName, string serviceName, string apiId, string schemaId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/schemas/"+ (schemaId==null? "" : Uri.EscapeDataString(schemaId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates schema configuration for the API.
		/// ApiSchema_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="schemaId">Schema identifier within an API. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">The schema contents to apply.</param>
		/// <returns>Api schema configuration of the tenant was successfully updated.</returns>
		public async Task ApiSchema_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string schemaId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/schemas/"+ (schemaId==null? "" : Uri.EscapeDataString(schemaId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Tags descriptions in scope of API. Model similar to swagger - tagDescription is defined on API level but tag may be assigned to the Operations
		/// ApiTagDescription_ListByService subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a collection of tagDescriptions associated with the Api entity.</returns>
		public async Task ApiTagDescription_ListByServiceAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tagDescriptions&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete tag description for the Api.
		/// ApiTagDescription_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagDescriptionId">Tag description identifier. Used when creating tagDescription for API/Tag association. Based on API and Tag names.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Tag description successfully removed</returns>
		public async Task ApiTagDescription_DeleteAsync(string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tagDescriptions/"+ (tagDescriptionId==null? "" : Uri.EscapeDataString(tagDescriptionId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Tag description in scope of API
		/// ApiTagDescription_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagDescriptionId">Tag description identifier. Used when creating tagDescription for API/Tag association. Based on API and Tag names.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Gets the description of the tag specified by its identifier in scope if the Api.</returns>
		public async Task ApiTagDescription_GetAsync(string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tagDescriptions/"+ (tagDescriptionId==null? "" : Uri.EscapeDataString(tagDescriptionId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create/Update tag description in scope of the Api.
		/// ApiTagDescription_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tagDescriptions/{tagDescriptionId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagDescriptionId">Tag description identifier. Used when creating tagDescription for API/Tag association. Based on API and Tag names.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>Tag Description was updated for the Api.</returns>
		public async Task ApiTagDescription_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string apiId, string tagDescriptionId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tagDescriptions/"+ (tagDescriptionId==null? "" : Uri.EscapeDataString(tagDescriptionId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Tags associated with the API.
		/// Tag_ListByApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The operation returns a collection of tags associated with the Api entity.</returns>
		public async Task Tag_ListByApiAsync(string resourceGroupName, string serviceName, string apiId, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tags&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach the tag from the Api.
		/// Tag_DetachFromApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>API/Tag association successfully removed</returns>
		public async Task Tag_DetachFromApiAsync(string resourceGroupName, string serviceName, string apiId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tag associated with the API.
		/// Tag_GetByApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Gets the details of the tag specified by its identifier.</returns>
		public async Task Tag_GetByApiAsync(string resourceGroupName, string serviceName, string apiId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign tag to the Api.
		/// Tag_AssignToApi subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/tags/{tagId}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="apiId">API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.</param>
		/// <param name="tagId">Tag identifier. Must be unique in the current API Management service instance.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>Tag is already assigned to the Api.</returns>
		public async Task Tag_AssignToApiAsync(string resourceGroupName, string serviceName, string apiId, string tagId, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/apis/"+ (apiId==null? "" : Uri.EscapeDataString(apiId))+"/tags/"+ (tagId==null? "" : Uri.EscapeDataString(tagId))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
