//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all subscriptions of the API Management service instance.
		/// Subscription_List subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="filter">|   Field     |     Usage     |     Supported operators     |     Supported functions     |</br>|-------------|-------------|-------------|-------------|</br>| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | </br>| state | filter | eq |     | </br>| user | expand |     |     | </br></param>
		/// <param name="top">Number of records to return.</param>
		/// <param name="skip">Number of records to skip.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>A collection of the Subscription entities for the specified API Management service instance.</returns>
		public async Task Subscription_ListAsync(string resourceGroupName, string serviceName, string filter, int top, int skip, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&top="+top+"&skip="+skip+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified subscription.
		/// Subscription_Delete subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The subscription details were successfully deleted.</returns>
		public async Task Subscription_DeleteAsync(string resourceGroupName, string serviceName, string sid, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified Subscription entity.
		/// Subscription_Get subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains the specified Subscription entity.</returns>
		public async Task Subscription_GetAsync(string resourceGroupName, string serviceName, string sid, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates the subscription of specified user to the specified product.
		/// Subscription_CreateOrUpdate subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="notify">Notify change in Subscription State. 
		/// - If false, do not send any email notification for change of state of subscription 
		/// - If true, send email notification of change of state of subscription </param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <param name="requestBody">Create parameters.</param>
		/// <returns>The user already subscribed to the product.</returns>
		public async Task Subscription_CreateOrUpdateAsync(string resourceGroupName, string serviceName, string sid, bool notify, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"&notify="+notify+"&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the subscription keys.
		/// Subscription_ListSecrets subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/listSecrets
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		/// <returns>The response body contains subscription keys.</returns>
		public async Task Subscription_ListSecretsAsync(string resourceGroupName, string serviceName, string sid, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"/listSecrets&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates primary key of existing subscription of the API Management service instance.
		/// Subscription_RegeneratePrimaryKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regeneratePrimaryKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		public async Task Subscription_RegeneratePrimaryKeyAsync(string resourceGroupName, string serviceName, string sid, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"/regeneratePrimaryKey&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerates secondary key of existing subscription of the API Management service instance.
		/// Subscription_RegenerateSecondaryKey subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}/regenerateSecondaryKey
		/// </summary>
		/// <param name="resourceGroupName">The name of the resource group.</param>
		/// <param name="serviceName">The name of the API Management service.</param>
		/// <param name="sid">Subscription entity Identifier. The entity represents the association between a user and a product in API Management.</param>
		/// <param name="api_version">Version of the API to be used with the client request.</param>
		/// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
		public async Task Subscription_RegenerateSecondaryKeyAsync(string resourceGroupName, string serviceName, string sid, string api_version, string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : Uri.EscapeDataString(subscriptionId))+"/resourceGroups/"+ (resourceGroupName==null? "" : Uri.EscapeDataString(resourceGroupName))+"/providers/Microsoft.ApiManagement/service/"+ (serviceName==null? "" : Uri.EscapeDataString(serviceName))+"/subscriptions/"+ (sid==null? "" : Uri.EscapeDataString(sid))+"/regenerateSecondaryKey&api_version=" + (api_version==null? "" : Uri.EscapeDataString(api_version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
