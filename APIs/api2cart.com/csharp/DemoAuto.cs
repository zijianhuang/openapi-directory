//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class A2CDateTime
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BaseCustomer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Basket
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Basket_Item[] Basket_products { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Basket_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BaseCustomer Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Basket_Item
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Basket_Item_Option[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Variant_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Basket_Item_Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Used_in_combination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Currency
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Iso3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Symbol_left { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Symbol_right { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Basket_LiveShippingService
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Callback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Callback_err_cnt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled_on_store { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Brand
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Full_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Stores_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Carrier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_ShippingMethod[] Shipping_methods { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_ShippingMethod
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cart
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Db_prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cart_ShippingZone[] Shipping_zones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cart_StoreInfo[] Stores_info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cart_Warehouse[] Warehouses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cart_ShippingZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Country_iso2_codes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cart_StoreInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Carrier[] Carrier_info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Default_warehouse_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Dimension_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Multi_store_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Prices_include_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Root_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Currency[] Store_currencies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Language[] Store_languages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Info Store_owner_info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Iso_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Info
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street_address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Street_address_line_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Zip_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cart_Warehouse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Customer_Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Carriers_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Stores_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Customer_Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Country Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public State State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class State
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CartConfigUpdate
	{
		
		/// <summary>
		/// This parameter sets the list of params to the shopping cart.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		/// <summary>
		/// This parameter is deprecated for this method. Please, use this parameter in method account.config.update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Db_tables_prefix { get; set; }
		
		/// <summary>
		/// Store Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CartCouponAdd
	{
		
		/// <summary>
		/// Defines the discount amount value.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Action_amount { get; set; }
		
		/// <summary>
		/// Defines where discount should be applied
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CartCouponAddAction_apply_to Action_apply_to { get; set; }
		
		/// <summary>
		/// Defines entity for action condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action_condition_entity { get; set; }
		
		/// <summary>
		/// Defines entity attribute code for action condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action_condition_key { get; set; }
		
		/// <summary>
		/// Defines condition operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action_condition_operator { get; set; }
		
		/// <summary>
		/// Defines condition attribute value/s. Can be comma separated string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action_condition_value { get; set; }
		
		/// <summary>
		/// Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CartCouponAddAction_scope Action_scope { get; set; }
		
		/// <summary>
		/// Coupon discount type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public CartCouponAddAction_type Action_type { get; set; }
		
		/// <summary>
		/// Coupon code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Entity codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Codes { get; set; }
		
		/// <summary>
		/// Defines when discount code will be expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date_end { get; set; }
		
		/// <summary>
		/// Defines when discount code will be available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date_start { get; set; } = "now";
		
		/// <summary>
		/// Coupon name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Store Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		/// <summary>
		/// Usage limit for coupon.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Usage_limit { get; set; }
		
		/// <summary>
		/// Usage limit per customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Usage_limit_per_customer { get; set; }
	}
	
	public enum CartCouponAddAction_apply_to
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		order_total = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		item_price = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipping = 2,
	}
	
	public enum CartCouponAddAction_scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		order = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		matching_items = 1,
	}
	
	public enum CartCouponAddAction_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@fixed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Seo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Stores_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Alt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Create_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string File_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Http_path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mime-type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Child
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_AdvancedPrice[] Advanced_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Allow_backorders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail_for_sale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChildCombination[] ChildCombination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Default_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Default_qty_in_pack { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Dimensions_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ean { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Full_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gtin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> In_stock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_Inventory[] Inventory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Inventory_level { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_qty_in_pack_fixed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> List_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Manage_stock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Min_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mpn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tax_class_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Upc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Wholesale_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_AdvancedPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Expire_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity_from { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	public class ChildCombination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Option_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Option_value_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Inventory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> In_stock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warehouse_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coupon
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_Action[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_Code[] Codes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_Condition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Date_end { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Date_start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Logic_operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_History[] Usage_history { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Usage_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Usage_limit_per_customer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Used_times { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coupon_Action
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Apply_to { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_Condition[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Discount_quantity_step { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Discounted_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Include_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Logic_operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coupon_Condition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Entity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Logic_operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Match_items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_Condition[] Sub-conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coupon_Code
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Used_times { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coupon_History
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Customer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Customer_Address[] Address_book { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Birth_day { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Customer_Group[] Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Last_login { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Login { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> News_letter_subscription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Orders_count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Stores_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Customer_Group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerAdd
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerAddAddress[] CustomerAddAddress { get; set; }
		
		/// <summary>
		/// Defines customer's birthday
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Birth_day { get; set; }
		
		/// <summary>
		/// Defines customer's company
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Company { get; set; }
		
		/// <summary>
		/// Entity's date creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_time { get; set; }
		
		/// <summary>
		/// Defines customer's email
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Defines customer's fax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Fax { get; set; }
		
		/// <summary>
		/// Defines customer's first name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string First_name { get; set; }
		
		/// <summary>
		/// Defines customer's gender
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Gender { get; set; }
		
		/// <summary>
		/// Defines the group where the customer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		/// <summary>
		/// Defines customer's last login time
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Last_login { get; set; }
		
		/// <summary>
		/// Defines customer's last name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Specifies customer's login name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Login { get; set; }
		
		/// <summary>
		/// Entity's date modification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified_time { get; set; }
		
		/// <summary>
		/// Defines whether the newsletter subscription is available for the user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> News_letter_subscription { get; set; }
		
		/// <summary>
		/// Defines customer's unique password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Defines customer's phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Phone { get; set; }
		
		/// <summary>
		/// Defines customer's status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; } = "enabled";
		
		/// <summary>
		/// Link to customer website
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Website { get; set; }
	}
	
	public class CustomerAddAddress
	{
		
		/// <summary>
		/// Specifies customer's first address in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_address1 { get; set; }
		
		/// <summary>
		/// Specifies customer's second address in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_address2 { get; set; }
		
		/// <summary>
		/// Specifies customer's city in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_city { get; set; }
		
		/// <summary>
		/// Specifies customer's company name in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_company { get; set; }
		
		/// <summary>
		/// ISO code or name of country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_country { get; set; }
		
		/// <summary>
		/// Defines whether the address is used by default
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Address_book_default { get; set; }
		
		/// <summary>
		/// Specifies customer's fax in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_fax { get; set; }
		
		/// <summary>
		/// Specifies customer's first name in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_first_name { get; set; }
		
		/// <summary>
		/// Specifies customer's gender
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_gender { get; set; }
		
		/// <summary>
		/// Specifies customer's last name in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_last_name { get; set; }
		
		/// <summary>
		/// Specifies customer's phone number in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_phone { get; set; }
		
		/// <summary>
		/// Specifies customer's postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_postcode { get; set; }
		
		/// <summary>
		/// Specifies customer's region
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_region { get; set; }
		
		/// <summary>
		/// ISO code or name of state.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_state { get; set; }
		
		/// <summary>
		/// Specifies customer's address type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_type { get; set; }
		
		/// <summary>
		/// Specifies customer's website in the address book
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address_book_website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GiftCard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Avail_to { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Free_product_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Initial_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner_email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Recipient_email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Recipient_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Coupon_History[] Usage_history { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Model_Response_Order_List
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Pagination Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Response_Order_List_Result Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Return_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Return_message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Pagination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Response_Order_List_Result
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order[] Order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Orders_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Basket_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Customer_Address Billing_address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Item[] Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Create_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Totals_NewDiscount[] Discounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Finished_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Item[] Order_products { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_PaymentMethod Payment_method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Refund[] Refunds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Customer_Address Shipping_address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_ShippingMethod Shipping_method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_ShippingMethod[] Shipping_methods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Total Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Totals Totals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Warehouses_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Item
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Discount_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Item_Option[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parent_order_product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price_inc_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax_percent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax_value_after_discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Variant_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Item_Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Option_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_option_value_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Totals_NewDiscount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_PaymentMethod
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Refund
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Fee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Status_Refund_Item[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Status_Refund_Item
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Qty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Refund { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Variant_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Status
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Status_HistoryItem[] History { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Status_Refund Refund_info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Status_HistoryItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Notify { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Status_Refund
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Fee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Status_Refund_Item[] Refunded_items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_refunded { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Total
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping_ex_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Subtotal_ex_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_paid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Wrapping_ex_tax { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Order_Totals
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Model_Response_Product_List
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Pagination Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Response_Product_List_Result Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Return_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Return_message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Response_Product_List_Result
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product[] Product { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Products_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_AdvancedPrice[] Advanced_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail_sale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail_view { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Backorders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Create_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Dimensions_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_GroupPrice[] Group_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_Inventory[] Inventory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_downloadable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_virtual { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Manage_stock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Meta_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_Option[] Product_options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Related_products_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Seo_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpecialPrice Special_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Stores_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tax_class_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_TierPrice[] Tier_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_brand_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_mpn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_sku { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string U_upc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_GroupPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expire_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_Option_Item[] Option_items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_option_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Used_in_combination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Option_Item
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_option_item_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpecialPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Expired_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_TierPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Qty { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderAbandoned
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Basket_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Basket_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Item[] Order_products { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Order_Totals Totals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderAdd
	{
		
		/// <summary>
		/// Specifies admin's order comment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Admin_comment { get; set; }
		
		/// <summary>
		/// Specifies first billing address
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_address_1 { get; set; }
		
		/// <summary>
		/// Specifies second billing address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bill_address_2 { get; set; }
		
		/// <summary>
		/// Specifies billing city
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_city { get; set; }
		
		/// <summary>
		/// Specifies billing company
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bill_company { get; set; }
		
		/// <summary>
		/// Specifies billing country code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_country { get; set; }
		
		/// <summary>
		/// Specifies billing fax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bill_fax { get; set; }
		
		/// <summary>
		/// Specifies billing first name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_first_name { get; set; }
		
		/// <summary>
		/// Specifies billing last name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_last_name { get; set; }
		
		/// <summary>
		/// Specifies billing phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bill_phone { get; set; }
		
		/// <summary>
		/// Specifies billing postcode
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_postcode { get; set; }
		
		/// <summary>
		/// Specifies billing state code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bill_state { get; set; }
		
		/// <summary>
		/// Specifies order comment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		/// <summary>
		/// Specifies order's coupon discount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Coupon_discount { get; set; }
		
		/// <summary>
		/// Defines whether the invoice is created automatically along with the order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Create_invoice { get; set; }
		
		/// <summary>
		/// Currency code of order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Currency { get; set; }
		
		/// <summary>
		/// Specifies customer’s birthday
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Customer_birthday { get; set; }
		
		/// <summary>
		/// Defines the customer specified by email for whom order has to be created
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Customer_email { get; set; }
		
		/// <summary>
		/// Specifies customer’s fax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Customer_fax { get; set; }
		
		/// <summary>
		/// Specifies customer's first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Customer_first_name { get; set; }
		
		/// <summary>
		/// Specifies customer’s last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Customer_last_name { get; set; }
		
		/// <summary>
		/// Specifies customer’s phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Customer_phone { get; set; }
		
		/// <summary>
		/// Specifies an order creation date in format Y-m-d H:i:s
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		/// <summary>
		/// Specifies order's  finished date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date_finished { get; set; }
		
		/// <summary>
		/// Specifies order's  modification date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date_modified { get; set; }
		
		/// <summary>
		/// Specifies order's discount
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Discount { get; set; }
		
		/// <summary>
		/// Identifying the system used to generate the order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string External_source { get; set; }
		
		/// <summary>
		/// Create order with financial status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Financial_status { get; set; }
		
		/// <summary>
		/// Create order with fulfillment status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Fulfillment_status { get; set; }
		
		/// <summary>
		/// Discounts for order with gift certificates
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Gift_certificate_discount { get; set; }
		
		/// <summary>
		/// The behaviour to use when updating inventory.<hr><div style="font-style:normal">Values description:<div style="margin-left: 2%; padding-top: 2%"><div style="font-size:85%"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Inventory_behaviour { get; set; } = "bypass";
		
		/// <summary>
		/// Defines the order id if it is supported by the cart
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrderAddOrder_item[] OrderAddOrder_item { get; set; }
		
		/// <summary>
		/// Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_payment_method { get; set; }
		
		/// <summary>
		/// Defines order shipping method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_shipping_method { get; set; }
		
		/// <summary>
		/// Defines order status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_status { get; set; }
		
		/// <summary>
		/// Send notifications to customer after order was created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Send_notifications { get; set; }
		
		/// <summary>
		/// Specifies first shipping address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_address_1 { get; set; }
		
		/// <summary>
		/// Specifies second address line of a shipping street address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_address_2 { get; set; }
		
		/// <summary>
		/// Specifies shipping city
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_city { get; set; }
		
		/// <summary>
		/// Specifies shipping company
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_company { get; set; }
		
		/// <summary>
		/// Specifies shipping country code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_country { get; set; }
		
		/// <summary>
		/// Specifies shipping fax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_fax { get; set; }
		
		/// <summary>
		/// Specifies shipping first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_first_name { get; set; }
		
		/// <summary>
		/// Specifies shipping last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_last_name { get; set; }
		
		/// <summary>
		/// Specifies shipping phone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_phone { get; set; }
		
		/// <summary>
		/// Specifies shipping postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_postcode { get; set; }
		
		/// <summary>
		/// Specifies shipping state code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipp_state { get; set; }
		
		/// <summary>
		/// Specifies order's shipping price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping_price { get; set; }
		
		/// <summary>
		/// Specifies order's shipping price tax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping_tax { get; set; }
		
		/// <summary>
		/// Defines store id where the order should be assigned
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		/// <summary>
		/// Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Subtotal_price { get; set; }
		
		/// <summary>
		/// Order tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// The value of tax cost for order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax_price { get; set; }
		
		/// <summary>
		/// Defines total paid amount for the order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_paid { get; set; }
		
		/// <summary>
		/// Defines order's total price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_price { get; set; }
	}
	
	public class OrderAddOrder_item
	{
		
		/// <summary>
		/// Indicates whether subitems of the grouped/bundle product can be refunded separately
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Order_item_allow_refund_items_separately { get; set; }
		
		/// <summary>
		/// Indicates whether subitems of the grouped/bundle product can be shipped separately
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Order_item_allow_ship_items_separately { get; set; }
		
		/// <summary>
		/// Defines orders specified by order item id
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_id { get; set; }
		
		/// <summary>
		/// Defines orders specified by order item model
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_model { get; set; }
		
		/// <summary>
		/// Defines orders specified by order item name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderAddOrder_itemOrder_item_option[] OrderAddOrder_itemOrder_item_option { get; set; }
		
		/// <summary>
		/// Index of the parent grouped/bundle product
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Order_item_parent { get; set; }
		
		/// <summary>
		/// Option name of the parent grouped/bundle product
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_parent_option_name { get; set; }
		
		/// <summary>
		/// Defines orders specified by order item price
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Order_item_price { get; set; }
		
		/// <summary>
		/// Defines if item price includes tax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Order_item_price_includes_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderAddOrder_itemOrder_item_property[] OrderAddOrder_itemOrder_item_property { get; set; }
		
		/// <summary>
		/// Defines orders specified by order item quantity
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Order_item_quantity { get; set; }
		
		/// <summary>
		/// Percentage of tax for product order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Order_item_tax { get; set; }
		
		/// <summary>
		/// Ordered product variant. Where x is order item ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_variant_id { get; set; }
	}
	
	public class OrderAddOrder_itemOrder_item_option
	{
		
		/// <summary>
		/// Ordered Product Option Name. Where x is order item ID, y is order item option ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_option_name { get; set; }
		
		/// <summary>
		/// Ordered product option price Where x is order item ID, y - order item option ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Order_item_option_price { get; set; }
		
		/// <summary>
		/// Ordered product option value Where x is order item ID, y - order item option ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_option_value { get; set; }
	}
	
	public class OrderAddOrder_itemOrder_item_property
	{
		
		/// <summary>
		/// Ordered product property name. Where x is order item ID, y is order item property ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_property_name { get; set; }
		
		/// <summary>
		/// Ordered product property value. Where x is order item ID, y - order item property ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Order_item_property_value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderRefundAdd
	{
		
		/// <summary>
		/// Specifies an order creation date in format Y-m-d H:i:s
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		/// <summary>
		/// Specifies refund's fee price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Fee_price { get; set; }
		
		/// <summary>
		/// Indicates whether refund type is online
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_online { get; set; }
		
		/// <summary>
		/// Boolean, whether or not to add the line items back to the store inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Item_restock { get; set; }
		
		/// <summary>
		/// Defines items in the order that will be refunded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrderRefundAddItems[] OrderRefundAddItems { get; set; }
		
		/// <summary>
		/// Refund reason, or some else message which assigned to refund.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Defines the order for which the refund will be created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Send notifications to customer after refund was created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Send_notifications { get; set; }
		
		/// <summary>
		/// Defines refund shipping amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Shipping_price { get; set; }
		
		/// <summary>
		/// Defines order refund amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Total_price { get; set; }
	}
	
	public class OrderRefundAddItems
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderShipmentAdd
	{
		
		/// <summary>
		/// This parameter is used for adjust stock.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Adjust_stock { get; set; }
		
		/// <summary>
		/// Defines items in the order that will be shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrderShipmentAddItems[] OrderShipmentAddItems { get; set; }
		
		/// <summary>
		/// Defines the order for which the shipment will be created
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Send notifications to customer after shipment was created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Send_notifications { get; set; }
		
		/// <summary>
		/// Defines company name that provide tracking of shipment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Shipment_provider { get; set; }
		
		/// <summary>
		/// Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = "http://docs.api2cart.com/cart-info">cart.info</a > method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrderShipmentAddTracking_numbers[] OrderShipmentAddTracking_numbers { get; set; }
		
		/// <summary>
		/// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Warehouse_id { get; set; }
	}
	
	public class OrderShipmentAddItems
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
	}
	
	public class OrderShipmentAddTracking_numbers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Carrier_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderShipmentTrackingAdd
	{
		
		/// <summary>
		/// Defines tracking carrier id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Carrier_id { get; set; }
		
		/// <summary>
		/// Defines the order id
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Shipment id indicates the number of delivery
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Shipment_id { get; set; }
		
		/// <summary>
		/// Store Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		/// <summary>
		/// Defines custom tracking link
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_link { get; set; }
		
		/// <summary>
		/// Defines tracking number
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_number { get; set; }
		
		/// <summary>
		/// Defines name of the company which provides shipment tracking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OrderShipmentUpdate
	{
		
		/// <summary>
		/// Defines the order that will be updated
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		/// <summary>
		/// Allows rewrite tracking numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
		
		/// <summary>
		/// Shipment id indicates the number of delivery
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Shipment_id { get; set; }
		
		/// <summary>
		/// Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = "http://docs.api2cart.com/cart-info">cart.info</a > method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrderShipmentUpdateTracking_numbers[] OrderShipmentUpdateTracking_numbers { get; set; }
	}
	
	public class OrderShipmentUpdateTracking_numbers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Carrier_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Plugin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PluginList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> All_plugins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Plugin[] Plugins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductAdd
	{
		
		/// <summary>
		/// Defines product’s attribute name separated with a comma in Magento
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_name { get; set; }
		
		/// <summary>
		/// Defines product’s attribute set name in Magento
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_set_name { get; set; } = "Default";
		
		/// <summary>
		/// Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Avail_from { get; set; }
		
		/// <summary>
		/// Specifies the set of visible/invisible products for sale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available_for_sale { get; set; }
		
		/// <summary>
		/// Specifies the set of visible/invisible products for users
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available_for_view { get; set; }
		
		/// <summary>
		/// The price at which Best Offers are automatically accepted.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Best_offer { get; set; }
		
		/// <summary>
		/// Defines product add that is specified by comma-separated categories id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Categories_ids { get; set; }
		
		/// <summary>
		/// The human-readable label for the condition (e.g., "New").
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Condition { get; set; }
		
		/// <summary>
		/// Defines the date of entity creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Defines product's description that has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Defines whether the product is downloadable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Downloadable { get; set; }
		
		/// <summary>
		/// European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ean { get; set; }
		
		/// <summary>
		/// Defines product's group prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductAddGroup_prices[] ProductAddGroup_prices { get; set; }
		
		/// <summary>
		/// International Standard Book Number. An ISBN is a unique identifier for books.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Isbn { get; set; }
		
		/// <summary>
		/// Language id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Lang_id { get; set; }
		
		/// <summary>
		/// Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Listing_duration { get; set; }
		
		/// <summary>
		/// Indicates the selling format of the eBay listing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Listing_type { get; set; } = "FixedPrice";
		
		/// <summary>
		/// Defines product's manufacturer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Defines unique meta description of a entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_description { get; set; }
		
		/// <summary>
		/// Defines unique meta keywords for each entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_keywords { get; set; }
		
		/// <summary>
		/// Defines unique meta title for each entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_title { get; set; }
		
		/// <summary>
		/// Defines product's model that has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		/// <summary>
		/// Defines product's name that has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines how many times the product was ordered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ordered_count { get; set; }
		
		/// <summary>
		/// If the seller is subscribed to "Business Policies", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Package_details { get; set; }
		
		/// <summary>
		/// Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Payment_methods { get; set; }
		
		/// <summary>
		/// Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Paypal_email { get; set; }
		
		/// <summary>
		/// Defines product's price that has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Price { get; set; }
		
		/// <summary>
		/// Defines product's quantity that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		/// <summary>
		/// Indicates whether the seller allows the buyer to return the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return_accepted { get; set; }
		
		/// <summary>
		/// Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Sales_tax { get; set; }
		
		/// <summary>
		/// The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">shipping_details[<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Shipping_details { get; set; }
		
		/// <summary>
		/// The numeric ID of the shipping template associated with the products in Etsy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Shipping_template_id { get; set; }
		
		/// <summary>
		/// Defines short description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		/// <summary>
		/// Defines product's sku that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sku { get; set; }
		
		/// <summary>
		/// Defines product's model that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Special_price { get; set; }
		
		/// <summary>
		/// An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.
		///        <hr>
		///        <div style="font-style:normal">Param structure:
		///          <div style="margin-left: 2%;">
		///            <code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">
		///              specifics[int][<b>name</b>] = string</br>
		///              specifics[int][<b>value</b>] = string</br>
		///            </code>
		///          </div>
		///        </div>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Specifics { get; set; }
		
		/// <summary>
		/// Defines the date of special price creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_create { get; set; }
		
		/// <summary>
		/// Defines the term of special price offer duration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_expire { get; set; }
		
		/// <summary>
		/// Defines the date of special price modification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_modified { get; set; }
		
		/// <summary>
		/// Assign product to the stores that is specified by comma-separated stores' id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Stores_ids { get; set; }
		
		/// <summary>
		/// Product tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Defines tax classes where entity has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Tax_class_id { get; set; }
		
		/// <summary>
		/// Defines product's tier prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductAddTier_prices[] ProductAddTier_prices { get; set; }
		
		/// <summary>
		/// Defines product's type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; } = "simple";
		
		/// <summary>
		/// Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Upc { get; set; }
		
		/// <summary>
		/// Defines unique product's URL
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Specifies the number of product's reviews
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Viewed_count { get; set; }
		
		/// <summary>
		/// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Warehouse_id { get; set; }
		
		/// <summary>
		/// Weight
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
		
		/// <summary>
		/// Weight Unit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Weight_unit { get; set; }
		
		/// <summary>
		/// Defines product's sale price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Wholesale_price { get; set; }
	}
	
	public class ProductAddGroup_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
	}
	
	public class ProductAddTier_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductPriceAdd
	{
		
		/// <summary>
		/// Defines product's group prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductPriceAddGroup_prices[] ProductPriceAddGroup_prices { get; set; }
		
		/// <summary>
		/// Defines the product to which the price has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
	}
	
	public class ProductPriceAddGroup_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductPriceUpdate
	{
		
		/// <summary>
		/// Defines product's group prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductPriceUpdateGroup_prices[] ProductPriceUpdateGroup_prices { get; set; }
		
		/// <summary>
		/// Defines the product where the price has to be updated
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
	}
	
	public class ProductPriceUpdateGroup_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductTaxAdd
	{
		
		/// <summary>
		/// Defines tax class name where tax has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines products specified by product id
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		/// <summary>
		/// Defines tax rates of specified tax classes
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProductTaxAddTax_rates[] ProductTaxAddTax_rates { get; set; }
	}
	
	public class ProductTaxAddTax_rates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductVariantAdd
	{
		
		/// <summary>
		/// Defines variant's attributes list
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Specifies the set of visible/invisible product's variants for sale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available_for_sale { get; set; }
		
		/// <summary>
		/// Specifies the set of visible/invisible product's variants for users
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Available_for_view { get; set; }
		
		/// <summary>
		/// Defines the date of entity creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		/// <summary>
		/// Specifies variant's description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Language id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Lang_id { get; set; }
		
		/// <summary>
		/// Specifies the product variant's manufacturer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Defines unique meta description of a entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_description { get; set; }
		
		/// <summary>
		/// Defines unique meta keywords for each entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_keywords { get; set; }
		
		/// <summary>
		/// Defines unique meta title for each entity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Meta_title { get; set; }
		
		/// <summary>
		/// Specifies variant's model that has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		/// <summary>
		/// Defines variant's name that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines new product's variant price
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		/// <summary>
		/// Defines product's id where the variant has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		/// <summary>
		/// Defines product variant's quantity that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		/// <summary>
		/// Defines short description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		/// <summary>
		/// Specifies variant's model that has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Special_price { get; set; }
		
		/// <summary>
		/// Defines the date of special price creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_create { get; set; }
		
		/// <summary>
		/// Defines the term of special price offer duration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_expire { get; set; }
		
		/// <summary>
		/// Defines the date of special price modification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Sprice_modified { get; set; }
		
		/// <summary>
		/// Add variants specified by store id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		/// <summary>
		/// Defines tax classes where entity has to be added
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Tax_class_id { get; set; }
		
		/// <summary>
		/// Defines unique product variant's URL
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Warehouse_id { get; set; }
		
		/// <summary>
		/// Weight
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductVariantPriceAdd
	{
		
		/// <summary>
		/// Defines variants's group prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductVariantPriceAddGroup_prices[] ProductVariantPriceAddGroup_prices { get; set; }
		
		/// <summary>
		/// Defines the variant to which the price has to be added
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	public class ProductVariantPriceAddGroup_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductVariantPriceUpdate
	{
		
		/// <summary>
		/// Defines variants's group prices
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProductVariantPriceUpdateGroup_prices[] ProductVariantPriceUpdateGroup_prices { get; set; }
		
		/// <summary>
		/// Defines the variant where the price has to be updated
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	public class ProductVariantPriceUpdateGroup_prices
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Attribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Lang_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Store_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Review
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Nick_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Rating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Product_Review_Rating[] Ratings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product_Review_Rating
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Script
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Event { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Html { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Load_method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Src { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Shipment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public A2CDateTime Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShipmentItems[] ShipmentItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Order_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Shipment_provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Shipment_TrackingNumber[] Tracking_numbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warehouse_id { get; set; }
	}
	
	public class ShipmentItems
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Shipment_TrackingNumber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Carrier_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tracking_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StoreAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Default_values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Lang_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> System { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StoreAttribute_Group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Assigned_attribute_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_set_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subscriber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Subscribed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxClass
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Avail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaxClass_Rate[] Tax_rates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Tax_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxClass_Rate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Cities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Countries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Tax { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Tax_based_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Tax_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Zip_codes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Webhook
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Additional_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Callback { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Custom_fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Entity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Add store to the account
		/// AccountCartAdd account.cart.add.json
		/// </summary>
		/// <param name="cart_id">Store’s identifier which you can get from cart_list method</param>
		/// <param name="store_url">A web address of a store that you would like to connect to API2Cart</param>
		/// <param name="bridge_url">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)</param>
		/// <param name="store_root">Absolute path to the store root directory (used with "bridge_url" parameter)</param>
		/// <param name="store_key">Set this parameter if bridge is already uploaded to store</param>
		/// <param name="validate_version">Specify if api2cart should validate cart version</param>
		/// <param name="verify">Enables or disables cart's verification</param>
		/// <param name="db_tables_prefix">This parameter is deprecated for this method. Please, use this parameter in method account.config.update</param>
		/// <param name="ftp_host">FTP connection host</param>
		/// <param name="ftp_user">FTP User</param>
		/// <param name="ftp_password">FTP Password</param>
		/// <param name="ftp_port">FTP Port</param>
		/// <param name="ftp_store_dir">FTP Store dir</param>
		/// <param name="3dcartapi_api_key">3DCart API Key</param>
		/// <param name="amazon_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="amazon_seller_id">Seller Id</param>
		/// <param name="amazon_marketplaces_ids">Comma separated marketplaces ids</param>
		/// <param name="amazon_secret_key">Amazon Secret Key</param>
		/// <param name="amazon_access_key_id">Amazon Secret Key Id</param>
		/// <param name="aspdotnetstorefront_api_user">It's a AspDotNetStorefront account for which API is available</param>
		/// <param name="aspdotnetstorefront_api_pass">AspDotNetStorefront API Password</param>
		/// <param name="bigcommerceapi_admin_account">It's a BigCommerce account for which API is enabled</param>
		/// <param name="bigcommerceapi_api_path">BigCommerce API URL</param>
		/// <param name="bigcommerceapi_api_key">Bigcommerce API Key</param>
		/// <param name="bigcommerceapi_client_id">Client ID of the requesting app</param>
		/// <param name="bigcommerceapi_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="bigcommerceapi_context">API Path section unique to the store</param>
		/// <param name="demandware_client_id">Demandware client id</param>
		/// <param name="demandware_api_password">Demandware api password</param>
		/// <param name="demandware_user_name">Demandware user name</param>
		/// <param name="demandware_user_password">Demandware user password</param>
		/// <param name="demandware_env_type">Demandware environment</param>
		/// <param name="ebay_client_id">Application ID (AppID).</param>
		/// <param name="ebay_client_secret">Shared Secret from eBay application</param>
		/// <param name="ebay_runame">The RuName value that eBay assigns to your application.</param>
		/// <param name="ebay_access_token">Used to authenticate API requests.</param>
		/// <param name="ebay_refresh_token">Used to renew the access token.</param>
		/// <param name="ebay_environment">eBay environment</param>
		/// <param name="ebay_site_id">eBay global ID</param>
		/// <param name="walmart_client_id">Walmart client ID</param>
		/// <param name="walmart_client_secret">Walmart client secret</param>
		/// <param name="ecwid_acess_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="ecwid_store_id">Store Id</param>
		/// <param name="etsy_keystring">Etsy keystring</param>
		/// <param name="etsy_shared_secret">Etsy shared secret</param>
		/// <param name="etsy_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="etsy_token_secret">Secret token authorizing the app to access resources on behalf of a user</param>
		/// <param name="neto_api_key">Neto API Key</param>
		/// <param name="neto_api_username">Neto User Name</param>
		/// <param name="shopify_api_key">Shopify API Key</param>
		/// <param name="shopify_api_password">Shopify API Password</param>
		/// <param name="shopify_shared_secret">Shared secret</param>
		/// <param name="shopify_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="volusion_login">It's a Volusion account for which API is enabled</param>
		/// <param name="volusion_password">Volusion API Password</param>
		/// <param name="hybris_client_id">Omni Commerce Connector Client ID</param>
		/// <param name="hybris_client_secret">Omni Commerce Connector Client Secret</param>
		/// <returns>successful operation</returns>
		public async Task<string> AccountCartAddAsync(
					string cart_id, 
					string store_url, 
					string bridge_url, 
					string store_root, 
					string store_key, 
					bool validate_version, 
					bool verify, 
					string db_tables_prefix, 
					string ftp_host, 
					string ftp_user, 
					string ftp_password, 
					int ftp_port, 
					string ftp_store_dir, 
					string 3dcartapi_api_key, 
					string amazon_access_token, 
					string amazon_seller_id, 
					string amazon_marketplaces_ids, 
					string amazon_secret_key, 
					string amazon_access_key_id, 
					string aspdotnetstorefront_api_user, 
					string aspdotnetstorefront_api_pass, 
					string bigcommerceapi_admin_account, 
					string bigcommerceapi_api_path, 
					string bigcommerceapi_api_key, 
					string bigcommerceapi_client_id, 
					string bigcommerceapi_access_token, 
					string bigcommerceapi_context, 
					string demandware_client_id, 
					string demandware_api_password, 
					string demandware_user_name, 
					string demandware_user_password, 
					string demandware_env_type, 
					string ebay_client_id, 
					string ebay_client_secret, 
					string ebay_runame, 
					string ebay_access_token, 
					string ebay_refresh_token, 
					string ebay_environment, 
					int ebay_site_id, 
					string walmart_client_id, 
					string walmart_client_secret, 
					string ecwid_acess_token, 
					string ecwid_store_id, 
					string etsy_keystring, 
					string etsy_shared_secret, 
					string etsy_access_token, 
					string etsy_token_secret, 
					string neto_api_key, 
					string neto_api_username, 
					string shopify_api_key, 
					string shopify_api_password, 
					string shopify_shared_secret, 
					string shopify_access_token, 
					string volusion_login, 
					string volusion_password, 
					string hybris_client_id, 
					string hybris_client_secret, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account.cart.add.json?cart_id=" + (cart_id==null? "" : Uri.EscapeDataString(cart_id))+"&store_url=" + (store_url==null? "" : Uri.EscapeDataString(store_url))+"&bridge_url=" + (bridge_url==null? "" : Uri.EscapeDataString(bridge_url))+"&store_root=" + (store_root==null? "" : Uri.EscapeDataString(store_root))+"&store_key=" + (store_key==null? "" : Uri.EscapeDataString(store_key))+"&validate_version="+validate_version+"&verify="+verify+"&db_tables_prefix=" + (db_tables_prefix==null? "" : Uri.EscapeDataString(db_tables_prefix))+"&ftp_host=" + (ftp_host==null? "" : Uri.EscapeDataString(ftp_host))+"&ftp_user=" + (ftp_user==null? "" : Uri.EscapeDataString(ftp_user))+"&ftp_password=" + (ftp_password==null? "" : Uri.EscapeDataString(ftp_password))+"&ftp_port="+ftp_port+"&ftp_store_dir=" + (ftp_store_dir==null? "" : Uri.EscapeDataString(ftp_store_dir))+"&3dcartapi_api_key=" + (3dcartapi_api_key==null? "" : Uri.EscapeDataString(3dcartapi_api_key))+"&amazon_access_token=" + (amazon_access_token==null? "" : Uri.EscapeDataString(amazon_access_token))+"&amazon_seller_id=" + (amazon_seller_id==null? "" : Uri.EscapeDataString(amazon_seller_id))+"&amazon_marketplaces_ids=" + (amazon_marketplaces_ids==null? "" : Uri.EscapeDataString(amazon_marketplaces_ids))+"&amazon_secret_key=" + (amazon_secret_key==null? "" : Uri.EscapeDataString(amazon_secret_key))+"&amazon_access_key_id=" + (amazon_access_key_id==null? "" : Uri.EscapeDataString(amazon_access_key_id))+"&aspdotnetstorefront_api_user=" + (aspdotnetstorefront_api_user==null? "" : Uri.EscapeDataString(aspdotnetstorefront_api_user))+"&aspdotnetstorefront_api_pass=" + (aspdotnetstorefront_api_pass==null? "" : Uri.EscapeDataString(aspdotnetstorefront_api_pass))+"&bigcommerceapi_admin_account=" + (bigcommerceapi_admin_account==null? "" : Uri.EscapeDataString(bigcommerceapi_admin_account))+"&bigcommerceapi_api_path=" + (bigcommerceapi_api_path==null? "" : Uri.EscapeDataString(bigcommerceapi_api_path))+"&bigcommerceapi_api_key=" + (bigcommerceapi_api_key==null? "" : Uri.EscapeDataString(bigcommerceapi_api_key))+"&bigcommerceapi_client_id=" + (bigcommerceapi_client_id==null? "" : Uri.EscapeDataString(bigcommerceapi_client_id))+"&bigcommerceapi_access_token=" + (bigcommerceapi_access_token==null? "" : Uri.EscapeDataString(bigcommerceapi_access_token))+"&bigcommerceapi_context=" + (bigcommerceapi_context==null? "" : Uri.EscapeDataString(bigcommerceapi_context))+"&demandware_client_id=" + (demandware_client_id==null? "" : Uri.EscapeDataString(demandware_client_id))+"&demandware_api_password=" + (demandware_api_password==null? "" : Uri.EscapeDataString(demandware_api_password))+"&demandware_user_name=" + (demandware_user_name==null? "" : Uri.EscapeDataString(demandware_user_name))+"&demandware_user_password=" + (demandware_user_password==null? "" : Uri.EscapeDataString(demandware_user_password))+"&demandware_env_type=" + (demandware_env_type==null? "" : Uri.EscapeDataString(demandware_env_type))+"&ebay_client_id=" + (ebay_client_id==null? "" : Uri.EscapeDataString(ebay_client_id))+"&ebay_client_secret=" + (ebay_client_secret==null? "" : Uri.EscapeDataString(ebay_client_secret))+"&ebay_runame=" + (ebay_runame==null? "" : Uri.EscapeDataString(ebay_runame))+"&ebay_access_token=" + (ebay_access_token==null? "" : Uri.EscapeDataString(ebay_access_token))+"&ebay_refresh_token=" + (ebay_refresh_token==null? "" : Uri.EscapeDataString(ebay_refresh_token))+"&ebay_environment=" + (ebay_environment==null? "" : Uri.EscapeDataString(ebay_environment))+"&ebay_site_id="+ebay_site_id+"&walmart_client_id=" + (walmart_client_id==null? "" : Uri.EscapeDataString(walmart_client_id))+"&walmart_client_secret=" + (walmart_client_secret==null? "" : Uri.EscapeDataString(walmart_client_secret))+"&ecwid_acess_token=" + (ecwid_acess_token==null? "" : Uri.EscapeDataString(ecwid_acess_token))+"&ecwid_store_id=" + (ecwid_store_id==null? "" : Uri.EscapeDataString(ecwid_store_id))+"&etsy_keystring=" + (etsy_keystring==null? "" : Uri.EscapeDataString(etsy_keystring))+"&etsy_shared_secret=" + (etsy_shared_secret==null? "" : Uri.EscapeDataString(etsy_shared_secret))+"&etsy_access_token=" + (etsy_access_token==null? "" : Uri.EscapeDataString(etsy_access_token))+"&etsy_token_secret=" + (etsy_token_secret==null? "" : Uri.EscapeDataString(etsy_token_secret))+"&neto_api_key=" + (neto_api_key==null? "" : Uri.EscapeDataString(neto_api_key))+"&neto_api_username=" + (neto_api_username==null? "" : Uri.EscapeDataString(neto_api_username))+"&shopify_api_key=" + (shopify_api_key==null? "" : Uri.EscapeDataString(shopify_api_key))+"&shopify_api_password=" + (shopify_api_password==null? "" : Uri.EscapeDataString(shopify_api_password))+"&shopify_shared_secret=" + (shopify_shared_secret==null? "" : Uri.EscapeDataString(shopify_shared_secret))+"&shopify_access_token=" + (shopify_access_token==null? "" : Uri.EscapeDataString(shopify_access_token))+"&volusion_login=" + (volusion_login==null? "" : Uri.EscapeDataString(volusion_login))+"&volusion_password=" + (volusion_password==null? "" : Uri.EscapeDataString(volusion_password))+"&hybris_client_id=" + (hybris_client_id==null? "" : Uri.EscapeDataString(hybris_client_id))+"&hybris_client_secret=" + (hybris_client_secret==null? "" : Uri.EscapeDataString(hybris_client_secret));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of carts.
		/// AccountCartList account.cart.list.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="request_from_date">Retrieve entities from their creation date</param>
		/// <param name="request_to_date">Retrieve entities to their creation date</param>
		/// <param name="store_url">A web address of a store</param>
		/// <param name="store_key">Find store by store key</param>
		/// <returns>successful operation</returns>
		public async Task<string> AccountCartListAsync(string @params, string exclude, string request_from_date, string request_to_date, string store_url, string store_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account.cart.list.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&request_from_date=" + (request_from_date==null? "" : Uri.EscapeDataString(request_from_date))+"&request_to_date=" + (request_to_date==null? "" : Uri.EscapeDataString(request_to_date))+"&store_url=" + (store_url==null? "" : Uri.EscapeDataString(store_url))+"&store_key=" + (store_key==null? "" : Uri.EscapeDataString(store_key));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update configs in the API2Cart database.
		/// AccountConfigUpdate account.config.update.json
		/// </summary>
		/// <param name="new_store_key">Update store key</param>
		/// <param name="bridge_url">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)</param>
		/// <param name="store_root">Absolute path to the store root directory (used with "bridge_url" parameter)</param>
		/// <param name="db_tables_prefix">This parameter is deprecated for this method. Please, use this parameter in method account.config.update</param>
		/// <param name="3dcartapi_api_key">3DCart API Key</param>
		/// <param name="amazon_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="amazon_seller_id">Seller Id</param>
		/// <param name="amazon_marketplaces_ids">Comma separated marketplaces ids</param>
		/// <param name="amazon_secret_key">Amazon Secret Key</param>
		/// <param name="amazon_access_key_id">Amazon Secret Key Id</param>
		/// <param name="aspdotnetstorefront_api_user">It's a AspDotNetStorefront account for which API is available</param>
		/// <param name="aspdotnetstorefront_api_pass">AspDotNetStorefront API Password</param>
		/// <param name="bigcommerceapi_admin_account">It's a BigCommerce account for which API is enabled</param>
		/// <param name="bigcommerceapi_api_path">BigCommerce API URL</param>
		/// <param name="bigcommerceapi_api_key">Bigcommerce API Key</param>
		/// <param name="bigcommerceapi_client_id">Client ID of the requesting app</param>
		/// <param name="bigcommerceapi_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="bigcommerceapi_context">API Path section unique to the store</param>
		/// <param name="demandware_client_id">Demandware client id</param>
		/// <param name="demandware_api_password">Demandware api password</param>
		/// <param name="demandware_user_name">Demandware user name</param>
		/// <param name="demandware_user_password">Demandware user password</param>
		/// <param name="demandware_env_type">Demandware environment</param>
		/// <param name="ebay_client_id">Application ID (AppID).</param>
		/// <param name="ebay_client_secret">Shared Secret from eBay application</param>
		/// <param name="ebay_runame">The RuName value that eBay assigns to your application.</param>
		/// <param name="ebay_access_token">Used to authenticate API requests.</param>
		/// <param name="ebay_refresh_token">Used to renew the access token.</param>
		/// <param name="ebay_environment">eBay environment</param>
		/// <param name="ebay_site_id">eBay global ID</param>
		/// <param name="ecwid_acess_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="ecwid_store_id">Store Id</param>
		/// <param name="etsy_keystring">Etsy keystring</param>
		/// <param name="etsy_shared_secret">Etsy shared secret</param>
		/// <param name="etsy_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="etsy_token_secret">Secret token authorizing the app to access resources on behalf of a user</param>
		/// <param name="neto_api_key">Neto API Key</param>
		/// <param name="neto_api_username">Neto User Name</param>
		/// <param name="shopify_api_key">Shopify API Key</param>
		/// <param name="shopify_api_password">Shopify API Password</param>
		/// <param name="shopify_shared_secret">Shared secret</param>
		/// <param name="shopify_access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="volusion_login">It's a Volusion account for which API is enabled</param>
		/// <param name="volusion_password">Volusion API Password</param>
		/// <param name="walmart_client_id">Walmart client ID</param>
		/// <param name="walmart_client_secret">Walmart client secret</param>
		/// <returns>successful operation</returns>
		public async Task<string> AccountConfigUpdateAsync(
					string new_store_key, 
					string bridge_url, 
					string store_root, 
					string db_tables_prefix, 
					string 3dcartapi_api_key, 
					string amazon_access_token, 
					string amazon_seller_id, 
					string amazon_marketplaces_ids, 
					string amazon_secret_key, 
					string amazon_access_key_id, 
					string aspdotnetstorefront_api_user, 
					string aspdotnetstorefront_api_pass, 
					string bigcommerceapi_admin_account, 
					string bigcommerceapi_api_path, 
					string bigcommerceapi_api_key, 
					string bigcommerceapi_client_id, 
					string bigcommerceapi_access_token, 
					string bigcommerceapi_context, 
					string demandware_client_id, 
					string demandware_api_password, 
					string demandware_user_name, 
					string demandware_user_password, 
					string demandware_env_type, 
					string ebay_client_id, 
					string ebay_client_secret, 
					string ebay_runame, 
					string ebay_access_token, 
					string ebay_refresh_token, 
					string ebay_environment, 
					int ebay_site_id, 
					string ecwid_acess_token, 
					string ecwid_store_id, 
					string etsy_keystring, 
					string etsy_shared_secret, 
					string etsy_access_token, 
					string etsy_token_secret, 
					string neto_api_key, 
					string neto_api_username, 
					string shopify_api_key, 
					string shopify_api_password, 
					string shopify_shared_secret, 
					string shopify_access_token, 
					string volusion_login, 
					string volusion_password, 
					string walmart_client_id, 
					string walmart_client_secret, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account.config.update.json?new_store_key=" + (new_store_key==null? "" : Uri.EscapeDataString(new_store_key))+"&bridge_url=" + (bridge_url==null? "" : Uri.EscapeDataString(bridge_url))+"&store_root=" + (store_root==null? "" : Uri.EscapeDataString(store_root))+"&db_tables_prefix=" + (db_tables_prefix==null? "" : Uri.EscapeDataString(db_tables_prefix))+"&3dcartapi_api_key=" + (3dcartapi_api_key==null? "" : Uri.EscapeDataString(3dcartapi_api_key))+"&amazon_access_token=" + (amazon_access_token==null? "" : Uri.EscapeDataString(amazon_access_token))+"&amazon_seller_id=" + (amazon_seller_id==null? "" : Uri.EscapeDataString(amazon_seller_id))+"&amazon_marketplaces_ids=" + (amazon_marketplaces_ids==null? "" : Uri.EscapeDataString(amazon_marketplaces_ids))+"&amazon_secret_key=" + (amazon_secret_key==null? "" : Uri.EscapeDataString(amazon_secret_key))+"&amazon_access_key_id=" + (amazon_access_key_id==null? "" : Uri.EscapeDataString(amazon_access_key_id))+"&aspdotnetstorefront_api_user=" + (aspdotnetstorefront_api_user==null? "" : Uri.EscapeDataString(aspdotnetstorefront_api_user))+"&aspdotnetstorefront_api_pass=" + (aspdotnetstorefront_api_pass==null? "" : Uri.EscapeDataString(aspdotnetstorefront_api_pass))+"&bigcommerceapi_admin_account=" + (bigcommerceapi_admin_account==null? "" : Uri.EscapeDataString(bigcommerceapi_admin_account))+"&bigcommerceapi_api_path=" + (bigcommerceapi_api_path==null? "" : Uri.EscapeDataString(bigcommerceapi_api_path))+"&bigcommerceapi_api_key=" + (bigcommerceapi_api_key==null? "" : Uri.EscapeDataString(bigcommerceapi_api_key))+"&bigcommerceapi_client_id=" + (bigcommerceapi_client_id==null? "" : Uri.EscapeDataString(bigcommerceapi_client_id))+"&bigcommerceapi_access_token=" + (bigcommerceapi_access_token==null? "" : Uri.EscapeDataString(bigcommerceapi_access_token))+"&bigcommerceapi_context=" + (bigcommerceapi_context==null? "" : Uri.EscapeDataString(bigcommerceapi_context))+"&demandware_client_id=" + (demandware_client_id==null? "" : Uri.EscapeDataString(demandware_client_id))+"&demandware_api_password=" + (demandware_api_password==null? "" : Uri.EscapeDataString(demandware_api_password))+"&demandware_user_name=" + (demandware_user_name==null? "" : Uri.EscapeDataString(demandware_user_name))+"&demandware_user_password=" + (demandware_user_password==null? "" : Uri.EscapeDataString(demandware_user_password))+"&demandware_env_type=" + (demandware_env_type==null? "" : Uri.EscapeDataString(demandware_env_type))+"&ebay_client_id=" + (ebay_client_id==null? "" : Uri.EscapeDataString(ebay_client_id))+"&ebay_client_secret=" + (ebay_client_secret==null? "" : Uri.EscapeDataString(ebay_client_secret))+"&ebay_runame=" + (ebay_runame==null? "" : Uri.EscapeDataString(ebay_runame))+"&ebay_access_token=" + (ebay_access_token==null? "" : Uri.EscapeDataString(ebay_access_token))+"&ebay_refresh_token=" + (ebay_refresh_token==null? "" : Uri.EscapeDataString(ebay_refresh_token))+"&ebay_environment=" + (ebay_environment==null? "" : Uri.EscapeDataString(ebay_environment))+"&ebay_site_id="+ebay_site_id+"&ecwid_acess_token=" + (ecwid_acess_token==null? "" : Uri.EscapeDataString(ecwid_acess_token))+"&ecwid_store_id=" + (ecwid_store_id==null? "" : Uri.EscapeDataString(ecwid_store_id))+"&etsy_keystring=" + (etsy_keystring==null? "" : Uri.EscapeDataString(etsy_keystring))+"&etsy_shared_secret=" + (etsy_shared_secret==null? "" : Uri.EscapeDataString(etsy_shared_secret))+"&etsy_access_token=" + (etsy_access_token==null? "" : Uri.EscapeDataString(etsy_access_token))+"&etsy_token_secret=" + (etsy_token_secret==null? "" : Uri.EscapeDataString(etsy_token_secret))+"&neto_api_key=" + (neto_api_key==null? "" : Uri.EscapeDataString(neto_api_key))+"&neto_api_username=" + (neto_api_username==null? "" : Uri.EscapeDataString(neto_api_username))+"&shopify_api_key=" + (shopify_api_key==null? "" : Uri.EscapeDataString(shopify_api_key))+"&shopify_api_password=" + (shopify_api_password==null? "" : Uri.EscapeDataString(shopify_api_password))+"&shopify_shared_secret=" + (shopify_shared_secret==null? "" : Uri.EscapeDataString(shopify_shared_secret))+"&shopify_access_token=" + (shopify_access_token==null? "" : Uri.EscapeDataString(shopify_access_token))+"&volusion_login=" + (volusion_login==null? "" : Uri.EscapeDataString(volusion_login))+"&volusion_password=" + (volusion_password==null? "" : Uri.EscapeDataString(volusion_password))+"&walmart_client_id=" + (walmart_client_id==null? "" : Uri.EscapeDataString(walmart_client_id))+"&walmart_client_secret=" + (walmart_client_secret==null? "" : Uri.EscapeDataString(walmart_client_secret));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List webhooks that was not delivered to the callback.
		/// AccountFailedWebhooks account.failed_webhooks.json
		/// </summary>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="ids">List of сomma-separated webhook ids</param>
		/// <returns>successful operation</returns>
		public async Task<string> AccountFailedWebhooksAsync(int count, int start, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account.failed_webhooks.json?count="+count+"&start="+start+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of supported platforms
		/// AccountSupportedPlatforms account.supported_platforms.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> AccountSupportedPlatformsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account.supported_platforms.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new attribute
		/// AttributeAdd attribute.add.json
		/// </summary>
		/// <param name="type">Defines attribute's type</param>
		/// <param name="code">Entity code</param>
		/// <param name="name">Defines attributes's name</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="visible">Set visibility status</param>
		/// <param name="required">Defines if the option is required</param>
		/// <param name="position">Attribute`s position</param>
		/// <param name="is_global">Attribute saving scope</param>
		/// <param name="is_searchable">Use attribute in Quick Search</param>
		/// <param name="is_filterable">Use In Layered Navigation</param>
		/// <param name="is_comparable">Comparable on Front-end</param>
		/// <param name="is_html_allowed_on_front">Allow HTML Tags on Frontend</param>
		/// <param name="is_filterable_in_search">Use In Search Results Layered Navigation</param>
		/// <param name="is_configurable">Use To Create Configurable Product</param>
		/// <param name="is_visible_in_advanced_search">Use in Advanced Search</param>
		/// <param name="is_used_for_promo_rules">Use for Promo Rule Conditions</param>
		/// <param name="used_in_product_listing">Used in Product Listing</param>
		/// <param name="used_for_sort_by">Used for Sorting in Product Listing</param>
		/// <param name="apply_to">Types of products which can have this attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeAddAsync(
					string type, 
					string code, 
					string name, 
					string store_id, 
					string lang_id, 
					bool visible, 
					bool required, 
					int position, 
					string is_global, 
					bool is_searchable, 
					string is_filterable, 
					bool is_comparable, 
					bool is_html_allowed_on_front, 
					bool is_filterable_in_search, 
					bool is_configurable, 
					bool is_visible_in_advanced_search, 
					bool is_used_for_promo_rules, 
					bool used_in_product_listing, 
					bool used_for_sort_by, 
					string apply_to, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.add.json?type=" + (type==null? "" : Uri.EscapeDataString(type))+"&code=" + (code==null? "" : Uri.EscapeDataString(code))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&visible="+visible+"&required="+required+"&position="+position+"&is_global=" + (is_global==null? "" : Uri.EscapeDataString(is_global))+"&is_searchable="+is_searchable+"&is_filterable=" + (is_filterable==null? "" : Uri.EscapeDataString(is_filterable))+"&is_comparable="+is_comparable+"&is_html_allowed_on_front="+is_html_allowed_on_front+"&is_filterable_in_search="+is_filterable_in_search+"&is_configurable="+is_configurable+"&is_visible_in_advanced_search="+is_visible_in_advanced_search+"&is_used_for_promo_rules="+is_used_for_promo_rules+"&used_in_product_listing="+used_in_product_listing+"&used_for_sort_by="+used_for_sort_by+"&apply_to=" + (apply_to==null? "" : Uri.EscapeDataString(apply_to));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign attribute to the group
		/// AttributeAssignGroup attribute.assign.group.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="group_id">Attribute group_id</param>
		/// <param name="attribute_set_id">Attribute set id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeAssignGroupAsync(string id, int group_id, string attribute_set_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.assign.group.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&group_id="+group_id+"&attribute_set_id=" + (attribute_set_id==null? "" : Uri.EscapeDataString(attribute_set_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign attribute to the attribute set
		/// AttributeAssignSet attribute.assign.set.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="group_id">Attribute group_id</param>
		/// <param name="attribute_set_id">Attribute set id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeAssignSetAsync(string id, int group_id, string attribute_set_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.assign.set.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&group_id="+group_id+"&attribute_set_id=" + (attribute_set_id==null? "" : Uri.EscapeDataString(attribute_set_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attribute_set list
		/// AttributeAttributesetList attribute.attributeset.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeAttributesetListAsync(int start, int count, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.attributeset.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attributes count
		/// AttributeCount attribute.count.json
		/// </summary>
		/// <param name="type">Defines attribute's type</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="visible">Filter items by visibility status</param>
		/// <param name="required">Defines if the option is required</param>
		/// <param name="system">True if attribute is system</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeCountAsync(string type, string store_id, string lang_id, bool visible, bool required, bool system, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.count.json?type=" + (type==null? "" : Uri.EscapeDataString(type))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&visible="+visible+"&required="+required+"&system="+system;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete attribute from store
		/// AttributeDelete attribute.delete.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="id">Entity id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeDeleteAsync(string store_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.delete.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&id=" + (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attribute group list
		/// AttributeGroupList attribute.group.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="attribute_set_id">Attribute set id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeGroupListAsync(int start, int count, string @params, string exclude, string attribute_set_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.group.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&attribute_set_id=" + (attribute_set_id==null? "" : Uri.EscapeDataString(attribute_set_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attribute info
		/// AttributeInfo attribute.info.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeInfoAsync(string id, string store_id, string lang_id, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.info.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attributes list
		/// AttributeList attribute.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="type">Defines attribute's type</param>
		/// <param name="attribute_ids">Filter attributes by ids</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Retrieves attributes on specified language id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="visible">Filter items by visibility status</param>
		/// <param name="required">Defines if the option is required</param>
		/// <param name="system">True if attribute is system</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeListAsync(int start, int count, string type, string attribute_ids, string store_id, string lang_id, string @params, string exclude, bool visible, bool required, bool system, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.list.json?start="+start+"&count="+count+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&attribute_ids=" + (attribute_ids==null? "" : Uri.EscapeDataString(attribute_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&visible="+visible+"&required="+required+"&system="+system;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of supported attributes types
		/// AttributeTypeList attribute.type.list.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeTypeListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.type.list.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassign attribute from group
		/// AttributeUnassignGroup attribute.unassign.group.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="group_id">Customer group_id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeUnassignGroupAsync(string id, int group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.unassign.group.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&group_id="+group_id;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassign attribute from attribute set
		/// AttributeUnassignSet attribute.unassign.set.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="attribute_set_id">Attribute set id</param>
		/// <returns>successful operation</returns>
		public async Task<string> AttributeUnassignSetAsync(string id, string attribute_set_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attribute.unassign.set.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&attribute_set_id=" + (attribute_set_id==null? "" : Uri.EscapeDataString(attribute_set_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve basket information.
		/// BasketInfo basket.info.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> BasketInfoAsync(string id, string store_id, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basket.info.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add item to basket
		/// BasketItemAdd basket.item.add.json
		/// </summary>
		/// <param name="customer_id">Retrieves orders specified by customer id</param>
		/// <param name="product_id">Defines id of the product which should be added to the basket</param>
		/// <param name="variant_id">Defines product's variants specified by variant id</param>
		/// <param name="quantity">Defines new items quantity</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> BasketItemAddAsync(string customer_id, string product_id, string variant_id, float quantity, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basket.item.add.json?customer_id=" + (customer_id==null? "" : Uri.EscapeDataString(customer_id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&variant_id=" + (variant_id==null? "" : Uri.EscapeDataString(variant_id))+"&quantity="+quantity+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create live shipping rate service. (Beta)
		/// BasketLiveShippingServiceCreate basket.live_shipping_service.create.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="name">Shipping Service Name</param>
		/// <param name="callback">Callback url that returns shipping rates. It should be able to accept POST requests with json data.</param>
		/// <returns>successful operation</returns>
		public async Task<string> BasketLiveShippingServiceCreateAsync(string store_id, string name, string callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basket.live_shipping_service.create.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&callback=" + (callback==null? "" : Uri.EscapeDataString(callback));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete live shipping rate service. (Beta)
		/// BasketLiveShippingServiceDelete basket.live_shipping_service.delete.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <returns>successful operation</returns>
		public async Task<string> BasketLiveShippingServiceDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basket.live_shipping_service.delete.json?id="+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of live shipping rate services. (Beta)
		/// BasketLiveShippingServiceList basket.live_shipping_service.list.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <returns>successful operation</returns>
		public async Task<string> BasketLiveShippingServiceListAsync(string store_id, int start, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "basket.live_shipping_service.list.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&start="+start+"&count="+count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete bridge from the store.
		/// BridgeDelete bridge.delete.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> BridgeDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bridge.delete.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download bridge for store
		/// BridgeDownload bridge.download.file
		/// </summary>
		/// <param name="whitelabel">Identifies if there is a necessity to download whitelabel bridge.</param>
		/// <returns>successful operation</returns>
		public async Task BridgeDownloadAsync(bool whitelabel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bridge.download.file?whitelabel="+whitelabel;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update bridge in the store.
		/// BridgeUpdate bridge.update.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> BridgeUpdateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bridge.update.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get bridge key and store key
		/// CartBridge cart.bridge.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartBridgeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.bridge.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear cache on store.
		/// CartClearCache cart.clear_cache.json
		/// </summary>
		/// <param name="cache_type">Defines which cache should be cleared.</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartClearCacheAsync(string cache_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.clear_cache.json?cache_type=" + (cache_type==null? "" : Uri.EscapeDataString(cache_type));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of cart configs
		/// CartConfig cart.config.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartConfigAsync(string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.config.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this API method to update custom data in client database.
		/// CartConfigUpdate cart.config.update.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartConfigUpdateAsync(CartConfigUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.config.update.json";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create new coupon
		/// CartCouponAdd cart.coupon.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartCouponAddAsync(CartCouponAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.coupon.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create new coupon condition
		/// CartCouponConditionAdd cart.coupon.condition.add.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="coupon_id">Coupon Id</param>
		/// <param name="target">Defines condition operator</param>
		/// <param name="entity">Defines condition entity type</param>
		/// <param name="key">Defines condition entity attribute key</param>
		/// <param name="operator">Defines condition operator</param>
		/// <param name="value">Defines condition value, can be comma separated according to the operator.</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartCouponConditionAddAsync(string store_id, string coupon_id, string target, string entity, string key, string @operator, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.coupon.condition.add.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&coupon_id=" + (coupon_id==null? "" : Uri.EscapeDataString(coupon_id))+"&target=" + (target==null? "" : Uri.EscapeDataString(target))+"&entity=" + (entity==null? "" : Uri.EscapeDataString(entity))+"&key=" + (key==null? "" : Uri.EscapeDataString(key))+"&operator=" + (operator==null? "" : Uri.EscapeDataString(operator))+"&value=" + (value==null? "" : Uri.EscapeDataString(value));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cart coupons count.
		/// CartCouponCount cart.coupon.count.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="date_start_from">Filter entity by date_start (greater or equal)</param>
		/// <param name="date_start_to">Filter entity by date_start (less or equal)</param>
		/// <param name="date_end_from">Filter entity by date_end (greater or equal)</param>
		/// <param name="date_end_to">Filter entity by date_end (less or equal)</param>
		/// <param name="avail">Defines category's visibility status</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartCouponCountAsync(string store_id, string date_start_from, string date_start_to, string date_end_from, string date_end_to, bool avail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.coupon.count.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&date_start_from=" + (date_start_from==null? "" : Uri.EscapeDataString(date_start_from))+"&date_start_to=" + (date_start_to==null? "" : Uri.EscapeDataString(date_start_to))+"&date_end_from=" + (date_end_from==null? "" : Uri.EscapeDataString(date_end_from))+"&date_end_to=" + (date_end_to==null? "" : Uri.EscapeDataString(date_end_to))+"&avail="+avail;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete coupon
		/// CartCouponDelete cart.coupon.delete.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartCouponDeleteAsync(string id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.coupon.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cart coupon discounts.
		/// CartCouponList cart.coupon.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="coupons_ids">Filter coupons by ids</param>
		/// <param name="store_id">Filter coupons by store id</param>
		/// <param name="date_start_from">Filter entity by date_start (greater or equal)</param>
		/// <param name="date_start_to">Filter entity by date_start (less or equal)</param>
		/// <param name="date_end_from">Filter entity by date_end (greater or equal)</param>
		/// <param name="date_end_to">Filter entity by date_end (less or equal)</param>
		/// <param name="avail">Filter coupons by avail status</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartCouponListAsync(int start, int count, string coupons_ids, string store_id, string date_start_from, string date_start_to, string date_end_from, string date_end_to, bool avail, string lang_id, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.coupon.list.json?start="+start+"&count="+count+"&coupons_ids=" + (coupons_ids==null? "" : Uri.EscapeDataString(coupons_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&date_start_from=" + (date_start_from==null? "" : Uri.EscapeDataString(date_start_from))+"&date_start_to=" + (date_start_to==null? "" : Uri.EscapeDataString(date_start_to))+"&date_end_from=" + (date_end_from==null? "" : Uri.EscapeDataString(date_end_from))+"&date_end_to=" + (date_end_to==null? "" : Uri.EscapeDataString(date_end_to))+"&avail="+avail+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add store to the account
		/// CartCreate cart.create.json
		/// </summary>
		/// <param name="cart_id">Store’s identifier which you can get from cart_list method</param>
		/// <param name="store_url">A web address of a store that you would like to connect to API2Cart</param>
		/// <param name="bridge_url">This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)</param>
		/// <param name="store_root">Absolute path to the store root directory (used with "bridge_url" parameter)</param>
		/// <param name="store_key">Set this parameter if bridge is already uploaded to store</param>
		/// <param name="shared_secret">Shared secret</param>
		/// <param name="validate_version">Specify if api2cart should validate cart version</param>
		/// <param name="verify">Enables or disables cart's verification</param>
		/// <param name="db_tables_prefix">This parameter is deprecated for this method. Please, use this parameter in method account.config.update</param>
		/// <param name="ftp_host">FTP connection host</param>
		/// <param name="ftp_user">FTP User</param>
		/// <param name="ftp_password">FTP Password</param>
		/// <param name="ftp_port">FTP Port</param>
		/// <param name="ftp_store_dir">FTP Store dir</param>
		/// <param name="apiKey_3dcart">3DCart API Key</param>
		/// <param name="AdminAccount">It's a BigCommerce account for which API is enabled</param>
		/// <param name="ApiPath">BigCommerce API URL</param>
		/// <param name="ApiKey">Bigcommerce API Key</param>
		/// <param name="client_id">Client ID of the requesting app</param>
		/// <param name="accessToken">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="context">API Path section unique to the store</param>
		/// <param name="access_token">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="apiKey_shopify">Shopify API Key</param>
		/// <param name="apiPassword">Shopify API Password</param>
		/// <param name="accessToken_shopify">Access token authorizing the app to access resources on behalf of a user</param>
		/// <param name="apiKey">Neto API Key</param>
		/// <param name="apiUsername">Neto User Name</param>
		/// <param name="EncryptedPassword">Volusion API Password</param>
		/// <param name="Login">It's a Volusion account for which API is enabled</param>
		/// <param name="apiUser_adnsf">It's a AspDotNetStorefront account for which API is available</param>
		/// <param name="apiPass">AspDotNetStorefront API Password</param>
		/// <param name="accessKey_scelite">Shopping Cart Elite Access Key</param>
		/// <param name="apiKey_scelite">Shopping Cart Elite API Key</param>
		/// <param name="apiSecretKey_scelite">Shopping Cart Elite API Secret Key</param>
		/// <param name="privateKey">3DCart Application Private Key</param>
		/// <param name="appToken">3DCart Token from Application</param>
		/// <param name="etsy_keystring">Etsy keystring</param>
		/// <param name="etsy_shared_secret">Etsy shared secret</param>
		/// <param name="tokenSecret">Secret token authorizing the app to access resources on behalf of a user</param>
		/// <param name="ebay_client_id">Application ID (AppID).</param>
		/// <param name="ebay_client_secret">Shared Secret from eBay application</param>
		/// <param name="ebay_runame">The RuName value that eBay assigns to your application.</param>
		/// <param name="ebay_access_token">Used to authenticate API requests.</param>
		/// <param name="ebay_refresh_token">Used to renew the access token.</param>
		/// <param name="ebay_environment">eBay environment</param>
		/// <param name="ebay_site_id">eBay global ID</param>
		/// <param name="dw_client_id">Demandware client id</param>
		/// <param name="dw_api_pass">Demandware api password</param>
		/// <param name="demandware_user_name">Demandware user name</param>
		/// <param name="demandware_user_password">Demandware user password</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="seller_id">Seller Id</param>
		/// <param name="amazon_secret_key">Amazon Secret Key</param>
		/// <param name="amazon_access_key_id">Amazon Secret Key Id</param>
		/// <param name="marketplaces_ids">Comma separated marketplaces ids</param>
		/// <param name="hybris_client_id">Omni Commerce Connector Client ID</param>
		/// <param name="hybris_client_secret">Omni Commerce Connector Client Secret</param>
		/// <param name="walmart_client_id">Walmart client ID</param>
		/// <param name="walmart_client_secret">Walmart client secret</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartCreateAsync(
					string cart_id, 
					string store_url, 
					string bridge_url, 
					string store_root, 
					string store_key, 
					string shared_secret, 
					bool validate_version, 
					bool verify, 
					string db_tables_prefix, 
					string ftp_host, 
					string ftp_user, 
					string ftp_password, 
					int ftp_port, 
					string ftp_store_dir, 
					string apiKey_3dcart, 
					string AdminAccount, 
					string ApiPath, 
					string ApiKey, 
					string client_id, 
					string accessToken, 
					string context, 
					string access_token, 
					string apiKey_shopify, 
					string apiPassword, 
					string accessToken_shopify, 
					string apiKey, 
					string apiUsername, 
					string EncryptedPassword, 
					string Login, 
					string apiUser_adnsf, 
					string apiPass, 
					string accessKey_scelite, 
					string apiKey_scelite, 
					string apiSecretKey_scelite, 
					string privateKey, 
					string appToken, 
					string etsy_keystring, 
					string etsy_shared_secret, 
					string tokenSecret, 
					string ebay_client_id, 
					string ebay_client_secret, 
					string ebay_runame, 
					string ebay_access_token, 
					string ebay_refresh_token, 
					string ebay_environment, 
					int ebay_site_id, 
					string dw_client_id, 
					string dw_api_pass, 
					string demandware_user_name, 
					string demandware_user_password, 
					string store_id, 
					string seller_id, 
					string amazon_secret_key, 
					string amazon_access_key_id, 
					string marketplaces_ids, 
					string environment, 
					string hybris_client_id, 
					string hybris_client_secret, 
					string walmart_client_id, 
					string walmart_client_secret, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.create.json?cart_id=" + (cart_id==null? "" : Uri.EscapeDataString(cart_id))+"&store_url=" + (store_url==null? "" : Uri.EscapeDataString(store_url))+"&bridge_url=" + (bridge_url==null? "" : Uri.EscapeDataString(bridge_url))+"&store_root=" + (store_root==null? "" : Uri.EscapeDataString(store_root))+"&store_key=" + (store_key==null? "" : Uri.EscapeDataString(store_key))+"&shared_secret=" + (shared_secret==null? "" : Uri.EscapeDataString(shared_secret))+"&validate_version="+validate_version+"&verify="+verify+"&db_tables_prefix=" + (db_tables_prefix==null? "" : Uri.EscapeDataString(db_tables_prefix))+"&ftp_host=" + (ftp_host==null? "" : Uri.EscapeDataString(ftp_host))+"&ftp_user=" + (ftp_user==null? "" : Uri.EscapeDataString(ftp_user))+"&ftp_password=" + (ftp_password==null? "" : Uri.EscapeDataString(ftp_password))+"&ftp_port="+ftp_port+"&ftp_store_dir=" + (ftp_store_dir==null? "" : Uri.EscapeDataString(ftp_store_dir))+"&apiKey_3dcart=" + (apiKey_3dcart==null? "" : Uri.EscapeDataString(apiKey_3dcart))+"&AdminAccount=" + (AdminAccount==null? "" : Uri.EscapeDataString(AdminAccount))+"&ApiPath=" + (ApiPath==null? "" : Uri.EscapeDataString(ApiPath))+"&ApiKey=" + (ApiKey==null? "" : Uri.EscapeDataString(ApiKey))+"&client_id=" + (client_id==null? "" : Uri.EscapeDataString(client_id))+"&accessToken=" + (accessToken==null? "" : Uri.EscapeDataString(accessToken))+"&context=" + (context==null? "" : Uri.EscapeDataString(context))+"&access_token=" + (access_token==null? "" : Uri.EscapeDataString(access_token))+"&apiKey_shopify=" + (apiKey_shopify==null? "" : Uri.EscapeDataString(apiKey_shopify))+"&apiPassword=" + (apiPassword==null? "" : Uri.EscapeDataString(apiPassword))+"&accessToken_shopify=" + (accessToken_shopify==null? "" : Uri.EscapeDataString(accessToken_shopify))+"&apiKey=" + (apiKey==null? "" : Uri.EscapeDataString(apiKey))+"&apiUsername=" + (apiUsername==null? "" : Uri.EscapeDataString(apiUsername))+"&EncryptedPassword=" + (EncryptedPassword==null? "" : Uri.EscapeDataString(EncryptedPassword))+"&Login=" + (Login==null? "" : Uri.EscapeDataString(Login))+"&apiUser_adnsf=" + (apiUser_adnsf==null? "" : Uri.EscapeDataString(apiUser_adnsf))+"&apiPass=" + (apiPass==null? "" : Uri.EscapeDataString(apiPass))+"&accessKey_scelite=" + (accessKey_scelite==null? "" : Uri.EscapeDataString(accessKey_scelite))+"&apiKey_scelite=" + (apiKey_scelite==null? "" : Uri.EscapeDataString(apiKey_scelite))+"&apiSecretKey_scelite=" + (apiSecretKey_scelite==null? "" : Uri.EscapeDataString(apiSecretKey_scelite))+"&privateKey=" + (privateKey==null? "" : Uri.EscapeDataString(privateKey))+"&appToken=" + (appToken==null? "" : Uri.EscapeDataString(appToken))+"&etsy_keystring=" + (etsy_keystring==null? "" : Uri.EscapeDataString(etsy_keystring))+"&etsy_shared_secret=" + (etsy_shared_secret==null? "" : Uri.EscapeDataString(etsy_shared_secret))+"&tokenSecret=" + (tokenSecret==null? "" : Uri.EscapeDataString(tokenSecret))+"&ebay_client_id=" + (ebay_client_id==null? "" : Uri.EscapeDataString(ebay_client_id))+"&ebay_client_secret=" + (ebay_client_secret==null? "" : Uri.EscapeDataString(ebay_client_secret))+"&ebay_runame=" + (ebay_runame==null? "" : Uri.EscapeDataString(ebay_runame))+"&ebay_access_token=" + (ebay_access_token==null? "" : Uri.EscapeDataString(ebay_access_token))+"&ebay_refresh_token=" + (ebay_refresh_token==null? "" : Uri.EscapeDataString(ebay_refresh_token))+"&ebay_environment=" + (ebay_environment==null? "" : Uri.EscapeDataString(ebay_environment))+"&ebay_site_id="+ebay_site_id+"&dw_client_id=" + (dw_client_id==null? "" : Uri.EscapeDataString(dw_client_id))+"&dw_api_pass=" + (dw_api_pass==null? "" : Uri.EscapeDataString(dw_api_pass))+"&demandware_user_name=" + (demandware_user_name==null? "" : Uri.EscapeDataString(demandware_user_name))+"&demandware_user_password=" + (demandware_user_password==null? "" : Uri.EscapeDataString(demandware_user_password))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&seller_id=" + (seller_id==null? "" : Uri.EscapeDataString(seller_id))+"&amazon_secret_key=" + (amazon_secret_key==null? "" : Uri.EscapeDataString(amazon_secret_key))+"&amazon_access_key_id=" + (amazon_access_key_id==null? "" : Uri.EscapeDataString(amazon_access_key_id))+"&marketplaces_ids=" + (marketplaces_ids==null? "" : Uri.EscapeDataString(marketplaces_ids))+"&environment=" + (environment==null? "" : Uri.EscapeDataString(environment))+"&hybris_client_id=" + (hybris_client_id==null? "" : Uri.EscapeDataString(hybris_client_id))+"&hybris_client_secret=" + (hybris_client_secret==null? "" : Uri.EscapeDataString(hybris_client_secret))+"&walmart_client_id=" + (walmart_client_id==null? "" : Uri.EscapeDataString(walmart_client_id))+"&walmart_client_secret=" + (walmart_client_secret==null? "" : Uri.EscapeDataString(walmart_client_secret));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove store from API2Cart
		/// CartDelete cart.delete.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.delete.json";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnect with the store and clear store session data.
		/// CartDisconnect cart.disconnect.json
		/// </summary>
		/// <param name="delete_bridge">Identifies if there is a necessity to delete bridge</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartDisconnectAsync(bool delete_bridge, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.disconnect.json?delete_bridge="+delete_bridge;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new gift card
		/// CartGiftcardAdd cart.giftcard.add.json
		/// </summary>
		/// <param name="amount">Defines the gift card amount value.</param>
		/// <param name="code">Gift card code</param>
		/// <param name="owner_email">Gift card owner email</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartGiftcardAddAsync(float amount, string code, string owner_email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.giftcard.add.json?amount="+amount+"&code=" + (code==null? "" : Uri.EscapeDataString(code))+"&owner_email=" + (owner_email==null? "" : Uri.EscapeDataString(owner_email));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get gift cards count.
		/// CartGiftcardCount cart.giftcard.count.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartGiftcardCountAsync(string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.giftcard.count.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get gift cards list.
		/// CartGiftcardList cart.giftcard.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartGiftcardListAsync(int start, int count, string store_id, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.giftcard.list.json?start="+start+"&count="+count+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get cart information
		/// CartInfo cart.info.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartInfoAsync(string @params, string exclude, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.info.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of supported carts
		/// CartList cart.list.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.list.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of cart methods
		/// CartMethods cart.methods.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CartMethodsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.methods.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of installed plugins
		/// CartPluginList cart.plugin.list.json
		/// </summary>
		/// <param name="store_key">Set this parameter if bridge is already uploaded to store</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartPluginListAsync(string store_key, string store_id, int start, int count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.plugin.list.json?store_key=" + (store_key==null? "" : Uri.EscapeDataString(store_key))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&start="+start+"&count="+count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new script to the storefront
		/// CartScriptAdd cart.script.add.json
		/// </summary>
		/// <param name="name">The user-friendly script name</param>
		/// <param name="description">The user-friendly description</param>
		/// <param name="html">An html string containing exactly one `script` tag.</param>
		/// <param name="src">The URL of the remote script</param>
		/// <param name="load_method">The load method to use for the script</param>
		/// <param name="scope">The page or pages on the online store where the script should be included</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartScriptAddAsync(string name, string description, string html, string src, string load_method, string scope, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.script.add.json?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&html=" + (html==null? "" : Uri.EscapeDataString(html))+"&src=" + (src==null? "" : Uri.EscapeDataString(src))+"&load_method=" + (load_method==null? "" : Uri.EscapeDataString(load_method))+"&scope=" + (scope==null? "" : Uri.EscapeDataString(scope))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove script from the storefront
		/// CartScriptDelete cart.script.delete.json
		/// </summary>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartScriptDeleteAsync(string id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.script.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get scripts installed to the storefront
		/// CartScriptList cart.script.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="script_ids">Retrieves only scripts with specific ids</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartScriptListAsync(int start, int count, string @params, string exclude, string created_from, string created_to, string modified_from, string modified_to, string script_ids, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.script.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&script_ids=" + (script_ids==null? "" : Uri.EscapeDataString(script_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of shipping zones
		/// CartShippingZonesList cart.shipping_zones.list.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartShippingZonesListAsync(string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.shipping_zones.list.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
		/// CartValidate cart.validate.json
		/// </summary>
		/// <param name="validate_version">Specify if api2cart should validate cart version</param>
		/// <returns>successful operation</returns>
		public async Task<string> CartValidateAsync(bool validate_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cart.validate.json?validate_version="+validate_version;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new category in store
		/// CategoryAdd category.add.json
		/// </summary>
		/// <param name="name">Defines category's name that has to be added</param>
		/// <param name="parent_id">Adds categories specified by parent id</param>
		/// <param name="stores_ids">Create category in the stores that is specified by comma-separated stores' id</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="avail">Defines category's visibility status</param>
		/// <param name="sort_order">Sort number in the list</param>
		/// <param name="created_time">Entity's date creation</param>
		/// <param name="modified_time">Entity's date modification</param>
		/// <param name="description">Defines category's description</param>
		/// <param name="meta_title">Defines unique meta title for each entity</param>
		/// <param name="meta_description">Defines unique meta description of a entity</param>
		/// <param name="meta_keywords">Defines unique meta keywords for each entity</param>
		/// <param name="seo_url">Defines unique category's URL for SEO</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryAddAsync(string name, string parent_id, string stores_ids, string store_id, bool avail, int sort_order, string created_time, string modified_time, string description, string meta_title, string meta_description, string meta_keywords, string seo_url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.add.json?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&parent_id=" + (parent_id==null? "" : Uri.EscapeDataString(parent_id))+"&stores_ids=" + (stores_ids==null? "" : Uri.EscapeDataString(stores_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&avail="+avail+"&sort_order="+sort_order+"&created_time=" + (created_time==null? "" : Uri.EscapeDataString(created_time))+"&modified_time=" + (modified_time==null? "" : Uri.EscapeDataString(modified_time))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&meta_title=" + (meta_title==null? "" : Uri.EscapeDataString(meta_title))+"&meta_description=" + (meta_description==null? "" : Uri.EscapeDataString(meta_description))+"&meta_keywords=" + (meta_keywords==null? "" : Uri.EscapeDataString(meta_keywords))+"&seo_url=" + (seo_url==null? "" : Uri.EscapeDataString(seo_url));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign category to product
		/// CategoryAssign category.assign.json
		/// </summary>
		/// <param name="product_id">Defines category assign to the product, specified by product id</param>
		/// <param name="category_id">Defines category assign, specified by category id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryAssignAsync(string product_id, string category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.assign.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count categories in store.
		/// CategoryCount category.count.json
		/// </summary>
		/// <param name="parent_id">Counts categories specified by parent id</param>
		/// <param name="store_id">Counts category specified by store id</param>
		/// <param name="lang_id">Counts category specified by language id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryCountAsync(string parent_id, string store_id, string lang_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.count.json?parent_id=" + (parent_id==null? "" : Uri.EscapeDataString(parent_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete category in store
		/// CategoryDelete category.delete.json
		/// </summary>
		/// <param name="id">Defines category removal, specified by category id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search category in store. "Laptop" is specified here by default.
		/// CategoryFind category.find.json
		/// </summary>
		/// <param name="find_value">Entity search that is specified by some value</param>
		/// <param name="find_where">Entity search that is specified by the comma-separated unique fields</param>
		/// <param name="find_params">Entity search that is specified by comma-separated parameters</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryFindAsync(string find_value, string find_where, string find_params, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.find.json?find_value=" + (find_value==null? "" : Uri.EscapeDataString(find_value))+"&find_where=" + (find_where==null? "" : Uri.EscapeDataString(find_where))+"&find_params=" + (find_params==null? "" : Uri.EscapeDataString(find_params));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add image to category
		/// CategoryImageAdd category.image.add.json
		/// </summary>
		/// <param name="category_id">Defines category id where the image should be added</param>
		/// <param name="image_name">Defines image's name</param>
		/// <param name="url">Defines URL of the image that has to be added</param>
		/// <param name="label">Defines alternative text that has to be attached to the picture</param>
		/// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.</param>
		/// <param name="type">Defines image's types that are specified by comma-separated list</param>
		/// <param name="position">Defines image’s position in the list</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryImageAddAsync(string category_id, string image_name, string url, string label, string mime, string type, int position, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.image.add.json?category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&image_name=" + (image_name==null? "" : Uri.EscapeDataString(image_name))+"&url=" + (url==null? "" : Uri.EscapeDataString(url))+"&label=" + (label==null? "" : Uri.EscapeDataString(label))+"&mime=" + (mime==null? "" : Uri.EscapeDataString(mime))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&position="+position+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete image
		/// CategoryImageDelete category.image.delete.json
		/// </summary>
		/// <param name="category_id">Defines category id where the image should be deleted</param>
		/// <param name="image_id">Define image id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryImageDeleteAsync(string category_id, string image_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.image.delete.json?category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&image_id=" + (image_id==null? "" : Uri.EscapeDataString(image_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get category info about category ID*** or specify other category ID.
		/// CategoryInfo category.info.json
		/// </summary>
		/// <param name="id">Retrieves category's info specified by category id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Retrieves category info  specified by store id</param>
		/// <param name="lang_id">Retrieves category info  specified by language id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryInfoAsync(string id, string @params, string exclude, string store_id, string lang_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.info.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of categories from store. Returns 4 categories by default.
		/// CategoryList category.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="parent_id">Retrieves categories specified by parent id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Retrieves categories specified by store id</param>
		/// <param name="lang_id">Retrieves categorys specified by language id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryListAsync(int start, int count, string parent_id, string @params, string exclude, string store_id, string lang_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.list.json?start="+start+"&count="+count+"&parent_id=" + (parent_id==null? "" : Uri.EscapeDataString(parent_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassign category to product
		/// CategoryUnassign category.unassign.json
		/// </summary>
		/// <param name="category_id">Defines category unassign, specified by category id</param>
		/// <param name="product_id">Defines category unassign to the product, specified by product id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryUnassignAsync(string category_id, string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.unassign.json?category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update category in store
		/// CategoryUpdate category.update.json
		/// </summary>
		/// <param name="id">Defines category update specified by category id</param>
		/// <param name="name">Defines new category’s name</param>
		/// <param name="parent_id">Defines new parent category id</param>
		/// <param name="stores_ids">Update category in the stores that is specified by comma-separated stores' id</param>
		/// <param name="avail">Defines category's visibility status</param>
		/// <param name="sort_order">Sort number in the list</param>
		/// <param name="modified_time">Entity's date modification</param>
		/// <param name="description">Defines new category's description</param>
		/// <param name="meta_title">Defines unique meta title for each entity</param>
		/// <param name="meta_description">Defines unique meta description of a entity</param>
		/// <param name="meta_keywords">Defines unique meta keywords for each entity</param>
		/// <param name="seo_url">Defines unique category's URL for SEO</param>
		/// <returns>successful operation</returns>
		public async Task<string> CategoryUpdateAsync(string id, string name, string parent_id, string stores_ids, bool avail, int sort_order, string modified_time, string description, string meta_title, string meta_description, string meta_keywords, string seo_url, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "category.update.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&parent_id=" + (parent_id==null? "" : Uri.EscapeDataString(parent_id))+"&stores_ids=" + (stores_ids==null? "" : Uri.EscapeDataString(stores_ids))+"&avail="+avail+"&sort_order="+sort_order+"&modified_time=" + (modified_time==null? "" : Uri.EscapeDataString(modified_time))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&meta_title=" + (meta_title==null? "" : Uri.EscapeDataString(meta_title))+"&meta_description=" + (meta_description==null? "" : Uri.EscapeDataString(meta_description))+"&meta_keywords=" + (meta_keywords==null? "" : Uri.EscapeDataString(meta_keywords))+"&seo_url=" + (seo_url==null? "" : Uri.EscapeDataString(seo_url));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add customer into store.
		/// CustomerAdd customer.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerAddAsync(CustomerAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get number of customers from store.
		/// CustomerCount customer.count.json
		/// </summary>
		/// <param name="group_id">Customer group_id</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="store_id">Counts customer specified by store id</param>
		/// <param name="customer_list_id">The numeric ID of the customer list in Demandware.</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerCountAsync(int group_id, string created_from, string created_to, string modified_from, string modified_to, string store_id, string customer_list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.count.json?group_id="+group_id+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&customer_list_id=" + (customer_list_id==null? "" : Uri.EscapeDataString(customer_list_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find customers in store.
		/// CustomerFind customer.find.json
		/// </summary>
		/// <param name="find_value">Entity search that is specified by some value</param>
		/// <param name="find_where">Entity search that is specified by the comma-separated unique fields</param>
		/// <param name="find_params">Entity search that is specified by comma-separated parameters</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerFindAsync(string find_value, string find_where, string find_params, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.find.json?find_value=" + (find_value==null? "" : Uri.EscapeDataString(find_value))+"&find_where=" + (find_where==null? "" : Uri.EscapeDataString(find_where))+"&find_params=" + (find_params==null? "" : Uri.EscapeDataString(find_params))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create customer group.
		/// CustomerGroupAdd customer.group.add.json
		/// </summary>
		/// <param name="name">Customer group name</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="stores_ids">Assign customer group to the stores that is specified by comma-separated stores' id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerGroupAddAsync(string name, string store_id, string stores_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.group.add.json?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&stores_ids=" + (stores_ids==null? "" : Uri.EscapeDataString(stores_ids));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of customers groups.
		/// CustomerGroupList customer.group.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="group_ids">Groups that will be assigned to a customer</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerGroupListAsync(int start, int count, string store_id, string lang_id, string group_ids, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.group.list.json?start="+start+"&count="+count+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&group_ids=" + (group_ids==null? "" : Uri.EscapeDataString(group_ids))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get customers' details from store.
		/// CustomerInfo customer.info.json
		/// </summary>
		/// <param name="id">Retrieves customer's info specified by customer id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Retrieves customer info specified by store id</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerInfoAsync(string id, string @params, string exclude, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.info.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of customers from store.
		/// CustomerList customer.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="group_id">Customer group_id</param>
		/// <param name="store_id">Retrieves customers specified by store id</param>
		/// <param name="customer_list_id">The numeric ID of the customer list in Demandware.</param>
		/// <returns>successful operation</returns>
		public async Task<string> CustomerListAsync(int start, int count, string created_from, string created_to, string modified_from, string modified_to, string @params, string exclude, int group_id, string store_id, string customer_list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "customer.list.json?start="+start+"&count="+count+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&group_id="+group_id+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&customer_list_id=" + (customer_list_id==null? "" : Uri.EscapeDataString(customer_list_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of orders that were left by customers before completing the order.
		/// OrderAbandonedList order.abandoned.list.json
		/// </summary>
		/// <param name="store_id">Store Id</param>
		/// <param name="customer_id">Retrieves orders specified by customer id</param>
		/// <param name="customer_email">Retrieves orders specified by customer email</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="skip_empty_email">Filter empty emails</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderAbandonedListAsync(string store_id, string customer_id, string customer_email, int start, int count, string @params, string exclude, string created_to, string created_from, string modified_to, string modified_from, bool skip_empty_email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.abandoned.list.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&customer_id=" + (customer_id==null? "" : Uri.EscapeDataString(customer_id))+"&customer_email=" + (customer_email==null? "" : Uri.EscapeDataString(customer_email))+"&start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&skip_empty_email="+skip_empty_email;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new order to the cart.
		/// OrderAdd order.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderAddAsync(OrderAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Count orders in store
		/// OrderCount order.count.json
		/// </summary>
		/// <param name="customer_id">Counts orders quantity specified by customer id</param>
		/// <param name="customer_email">Counts orders quantity specified by customer email</param>
		/// <param name="order_status">Counts orders quantity specified by order status</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="store_id">Counts orders quantity specified by store id</param>
		/// <param name="ids">Counts orders specified by ids</param>
		/// <param name="order_ids">Counts orders specified by order ids</param>
		/// <param name="ebay_order_status">Counts orders quantity specified by order status</param>
		/// <param name="financial_status">Counts orders quantity specified by financial status</param>
		/// <param name="fulfillment_status">Create order with fulfillment status</param>
		/// <param name="shipping_method">Retrieve entities according to shipping method</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderCountAsync(string customer_id, string customer_email, string order_status, string created_to, string created_from, string modified_to, string modified_from, string store_id, string ids, string order_ids, string ebay_order_status, string financial_status, string fulfillment_status, string shipping_method, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.count.json?customer_id=" + (customer_id==null? "" : Uri.EscapeDataString(customer_id))+"&customer_email=" + (customer_email==null? "" : Uri.EscapeDataString(customer_email))+"&order_status=" + (order_status==null? "" : Uri.EscapeDataString(order_status))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids))+"&order_ids=" + (order_ids==null? "" : Uri.EscapeDataString(order_ids))+"&ebay_order_status=" + (ebay_order_status==null? "" : Uri.EscapeDataString(ebay_order_status))+"&financial_status=" + (financial_status==null? "" : Uri.EscapeDataString(financial_status))+"&fulfillment_status=" + (fulfillment_status==null? "" : Uri.EscapeDataString(fulfillment_status))+"&shipping_method=" + (shipping_method==null? "" : Uri.EscapeDataString(shipping_method));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve list of financial statuses
		/// OrderFinancialStatusList order.financial_status.list.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderFinancialStatusListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.financial_status.list.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find orders
		/// OrderFind order.find.json
		/// </summary>
		/// <param name="customer_id">Retrieves orders specified by customer id</param>
		/// <param name="customer_email">Retrieves orders specified by customer email</param>
		/// <param name="order_status">Retrieves orders specified by order status</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="financial_status">Retrieves orders specified by financial status</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderFindAsync(string customer_id, string customer_email, string order_status, int start, int count, string @params, string exclude, string created_to, string created_from, string modified_to, string modified_from, string financial_status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.find.json?customer_id=" + (customer_id==null? "" : Uri.EscapeDataString(customer_id))+"&customer_email=" + (customer_email==null? "" : Uri.EscapeDataString(customer_email))+"&order_status=" + (order_status==null? "" : Uri.EscapeDataString(order_status))+"&start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&financial_status=" + (financial_status==null? "" : Uri.EscapeDataString(financial_status));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Info about a specific order by ID
		/// OrderInfo order.info.json
		/// </summary>
		/// <param name="order_id">Retrieves order’s info specified by order id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Defines store id where the order should be found</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderInfoAsync(string order_id, string @params, string exclude, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.info.json?order_id=" + (order_id==null? "" : Uri.EscapeDataString(order_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of orders from store. Returns 4 orders by default.
		/// OrderList order.list.json
		/// </summary>
		/// <param name="customer_id">Retrieves orders specified by customer id</param>
		/// <param name="customer_email">Retrieves orders specified by customer email</param>
		/// <param name="order_status">Retrieves orders specified by order status</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="page_cursor">Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)</param>
		/// <param name="sort_by">Set field to sort by</param>
		/// <param name="sort_direction">Set sorting direction</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="ids">Retrieves orders specified by ids</param>
		/// <param name="order_ids">Retrieves orders specified by order ids</param>
		/// <param name="ebay_order_status">Retrieves orders specified by order status</param>
		/// <param name="basket_id">Retrieves order’s info specified by basket id.</param>
		/// <param name="financial_status">Retrieves orders specified by financial status</param>
		/// <param name="fulfillment_status">Create order with fulfillment status</param>
		/// <param name="shipping_method">Retrieve entities according to shipping method</param>
		/// <param name="skip_order_ids">Skipped orders by ids</param>
		/// <param name="since_id">Retrieve entities starting from the specified id.</param>
		/// <param name="is_deleted">Filter deleted orders</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderListAsync(
					string customer_id, 
					string customer_email, 
					string order_status, 
					int start, 
					int count, 
					string page_cursor, 
					string sort_by, 
					string sort_direction, 
					string @params, 
					string exclude, 
					string created_to, 
					string created_from, 
					string modified_to, 
					string modified_from, 
					string store_id, 
					string ids, 
					string order_ids, 
					string ebay_order_status, 
					string basket_id, 
					string financial_status, 
					string fulfillment_status, 
					string shipping_method, 
					string skip_order_ids, 
					int since_id, 
					bool is_deleted, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.list.json?customer_id=" + (customer_id==null? "" : Uri.EscapeDataString(customer_id))+"&customer_email=" + (customer_email==null? "" : Uri.EscapeDataString(customer_email))+"&order_status=" + (order_status==null? "" : Uri.EscapeDataString(order_status))+"&start="+start+"&count="+count+"&page_cursor=" + (page_cursor==null? "" : Uri.EscapeDataString(page_cursor))+"&sort_by=" + (sort_by==null? "" : Uri.EscapeDataString(sort_by))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids))+"&order_ids=" + (order_ids==null? "" : Uri.EscapeDataString(order_ids))+"&ebay_order_status=" + (ebay_order_status==null? "" : Uri.EscapeDataString(ebay_order_status))+"&basket_id=" + (basket_id==null? "" : Uri.EscapeDataString(basket_id))+"&financial_status=" + (financial_status==null? "" : Uri.EscapeDataString(financial_status))+"&fulfillment_status=" + (fulfillment_status==null? "" : Uri.EscapeDataString(fulfillment_status))+"&shipping_method=" + (shipping_method==null? "" : Uri.EscapeDataString(shipping_method))+"&skip_order_ids=" + (skip_order_ids==null? "" : Uri.EscapeDataString(skip_order_ids))+"&since_id="+since_id+"&is_deleted="+is_deleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a refund to the order.
		/// OrderRefundAdd order.refund.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderRefundAddAsync(OrderRefundAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.refund.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a shipment to the order.
		/// OrderShipmentAdd order.shipment.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderShipmentAddAsync(OrderShipmentAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.shipment.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of shipments by orders.
		/// OrderShipmentList order.shipment.list.json
		/// </summary>
		/// <param name="order_id">Retrieves shipments specified by order id</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderShipmentListAsync(string order_id, int start, int count, string @params, string exclude, string created_from, string created_to, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.shipment.list.json?order_id=" + (order_id==null? "" : Uri.EscapeDataString(order_id))+"&start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add order shipment's tracking info.
		/// OrderShipmentTrackingAdd order.shipment.tracking.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderShipmentTrackingAddAsync(OrderShipmentTrackingAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.shipment.tracking.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update order's shipment information.
		/// OrderShipmentUpdate order.shipment.update.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderShipmentUpdateAsync(OrderShipmentUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.shipment.update.json";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve list of statuses
		/// OrderStatusList order.status.list.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> OrderStatusListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.status.list.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update existing order.
		/// OrderUpdate order.update.json
		/// </summary>
		/// <param name="order_id">Defines the orders specified by order id</param>
		/// <param name="store_id">Defines store id where the order should be found</param>
		/// <param name="order_status">Defines new order's status</param>
		/// <param name="comment">Specifies order comment</param>
		/// <param name="date_modified">Specifies order's  modification date</param>
		/// <param name="date_finished">Specifies order's  finished date</param>
		/// <param name="financial_status">Update order financial status to specified</param>
		/// <param name="order_payment_method">Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'</param>
		/// <param name="send_notifications">Send notifications to customer after order was created</param>
		/// <returns>successful operation</returns>
		public async Task<string> OrderUpdateAsync(string order_id, string store_id, string order_status, string comment, string date_modified, string date_finished, string financial_status, string order_payment_method, bool send_notifications, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "order.update.json?order_id=" + (order_id==null? "" : Uri.EscapeDataString(order_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&order_status=" + (order_status==null? "" : Uri.EscapeDataString(order_status))+"&comment=" + (comment==null? "" : Uri.EscapeDataString(comment))+"&date_modified=" + (date_modified==null? "" : Uri.EscapeDataString(date_modified))+"&date_finished=" + (date_finished==null? "" : Uri.EscapeDataString(date_finished))+"&financial_status=" + (financial_status==null? "" : Uri.EscapeDataString(financial_status))+"&order_payment_method=" + (order_payment_method==null? "" : Uri.EscapeDataString(order_payment_method))+"&send_notifications="+send_notifications;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new product to store.
		/// ProductAdd product.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductAddAsync(ProductAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of attributes.
		/// ProductAttributeList product.attribute.list.json
		/// </summary>
		/// <param name="product_id">Retrieves attributes specified by product id</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="sort_by">Set field to sort by</param>
		/// <param name="sort_direction">Set sorting direction</param>
		/// <param name="lang_id">Retrieves attributes specified by language id</param>
		/// <param name="store_id">Retrieves attributes specified by store id</param>
		/// <param name="attribute_id">Retrieves info for specified attribute_id</param>
		/// <param name="attribute_group_id">Filter by attribute_group_id</param>
		/// <param name="set_name">Retrieves attributes specified by set_name in Magento</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductAttributeListAsync(string product_id, int start, int count, string @params, string exclude, string sort_by, string sort_direction, string lang_id, string store_id, string attribute_id, string attribute_group_id, string set_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.attribute.list.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&sort_by=" + (sort_by==null? "" : Uri.EscapeDataString(sort_by))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&attribute_id=" + (attribute_id==null? "" : Uri.EscapeDataString(attribute_id))+"&attribute_group_id=" + (attribute_group_id==null? "" : Uri.EscapeDataString(attribute_group_id))+"&set_name=" + (set_name==null? "" : Uri.EscapeDataString(set_name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set attribute value to product.
		/// ProductAttributeValueSet product.attribute.value.set.json
		/// </summary>
		/// <param name="product_id">Defines product id where the attribute should be added</param>
		/// <param name="attribute_id">Filter by attribute_id</param>
		/// <param name="attribute_group_id">Filter by attribute_group_id</param>
		/// <param name="attribute_name">Define attribute name</param>
		/// <param name="value">Define attribute value</param>
		/// <param name="value_id">Define attribute value id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductAttributeValueSetAsync(string product_id, string attribute_id, string attribute_group_id, string attribute_name, string value, int value_id, string lang_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.attribute.value.set.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&attribute_id=" + (attribute_id==null? "" : Uri.EscapeDataString(attribute_id))+"&attribute_group_id=" + (attribute_group_id==null? "" : Uri.EscapeDataString(attribute_group_id))+"&attribute_name=" + (attribute_name==null? "" : Uri.EscapeDataString(attribute_name))+"&value=" + (value==null? "" : Uri.EscapeDataString(value))+"&value_id="+value_id+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of brands from your store.
		/// ProductBrandList product.brand.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="brand_ids">Retrieves brands specified by brand ids</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductBrandListAsync(int start, int count, string @params, string brand_ids, string exclude, string store_id, string lang_id, string created_from, string created_to, string modified_from, string modified_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.brand.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&brand_ids=" + (brand_ids==null? "" : Uri.EscapeDataString(brand_ids))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search product child item (bundled item or configurable product variant) in store catalog.
		/// ProductChildItemFind product.child_item.find.json
		/// </summary>
		/// <param name="find_value">Entity search that is specified by some value</param>
		/// <param name="find_where">Entity search that is specified by the comma-separated unique fields</param>
		/// <param name="find_params">Entity search that is specified by comma-separated parameters</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductChildItemFindAsync(string find_value, string find_where, string find_params, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.child_item.find.json?find_value=" + (find_value==null? "" : Uri.EscapeDataString(find_value))+"&find_where=" + (find_where==null? "" : Uri.EscapeDataString(find_where))+"&find_params=" + (find_params==null? "" : Uri.EscapeDataString(find_params))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get child for specific product.
		/// ProductChildItemInfo product.child_item.info.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="product_id">Filter by parent product id</param>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductChildItemInfoAsync(string @params, string exclude, string product_id, string id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.child_item.info.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get child items list of specific product(s).
		/// ProductChildItemList product.child_item.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="product_id">Filter by parent product id</param>
		/// <param name="product_ids">Filter by parent product id</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="currency_id">Currency Id</param>
		/// <param name="avail_sale">Specifies the set of available/not available products for sale</param>
		/// <param name="report_request_id">Report request id</param>
		/// <param name="disable_report_cache">Disable report cache for current request</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductChildItemListAsync(
					int start, 
					int count, 
					string @params, 
					string exclude, 
					string created_from, 
					string created_to, 
					string modified_from, 
					string modified_to, 
					string product_id, 
					string product_ids, 
					string store_id, 
					string lang_id, 
					string currency_id, 
					bool avail_sale, 
					string report_request_id, 
					bool disable_report_cache, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.child_item.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&product_ids=" + (product_ids==null? "" : Uri.EscapeDataString(product_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&currency_id=" + (currency_id==null? "" : Uri.EscapeDataString(currency_id))+"&avail_sale="+avail_sale+"&report_request_id=" + (report_request_id==null? "" : Uri.EscapeDataString(report_request_id))+"&disable_report_cache="+disable_report_cache;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count products in store.
		/// ProductCount product.count.json
		/// </summary>
		/// <param name="category_id">Counts products specified by category id</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="avail_view">Specifies the set of visible/invisible products</param>
		/// <param name="avail_sale">Specifies the set of available/not available products for sale</param>
		/// <param name="store_id">Counts products specified by store id</param>
		/// <param name="lang_id">Counts products specified by language id</param>
		/// <param name="product_ids">Counts products specified by product ids</param>
		/// <param name="report_request_id">Report request id</param>
		/// <param name="disable_report_cache">Disable report cache for current request</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductCountAsync(string category_id, string created_from, string created_to, string modified_from, string modified_to, bool avail_view, bool avail_sale, string store_id, string lang_id, string product_ids, string report_request_id, bool disable_report_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.count.json?category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&avail_view="+avail_view+"&avail_sale="+avail_sale+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&product_ids=" + (product_ids==null? "" : Uri.EscapeDataString(product_ids))+"&report_request_id=" + (report_request_id==null? "" : Uri.EscapeDataString(report_request_id))+"&disable_report_cache="+disable_report_cache;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add currency and/or set default in store
		/// ProductCurrencyAdd product.currency.add.json
		/// </summary>
		/// <param name="iso3">Specifies standardized currency code</param>
		/// <param name="rate">Defines the numerical identifier against to the major currency</param>
		/// <param name="name">Defines currency's name</param>
		/// <param name="avail">Specifies whether the currency is available</param>
		/// <param name="symbol_left">Defines the symbol that is located before the currency</param>
		/// <param name="symbol_right">Defines the symbol that is located after the currency</param>
		/// <param name="default">Specifies currency's default meaning</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductCurrencyAddAsync(string iso3, float rate, string name, bool avail, string symbol_left, string symbol_right, bool @default, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.currency.add.json?iso3=" + (iso3==null? "" : Uri.EscapeDataString(iso3))+"&rate="+rate+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&avail="+avail+"&symbol_left=" + (symbol_left==null? "" : Uri.EscapeDataString(symbol_left))+"&symbol_right=" + (symbol_right==null? "" : Uri.EscapeDataString(symbol_right))+"&default="+default;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of currencies
		/// ProductCurrencyList product.currency.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="default">Specifies the set of default/not default currencies</param>
		/// <param name="avail">Specifies the set of available/not available currencies</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductCurrencyListAsync(int start, int count, string @params, string exclude, bool @default, bool avail, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.currency.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&default="+default+"&avail="+avail;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Product delete
		/// ProductDelete product.delete.json
		/// </summary>
		/// <param name="id">Product id that will be removed</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all available fields for product item in store.
		/// ProductFields product.fields.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductFieldsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.fields.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search product in store catalog. "Apple" is specified here by default.
		/// ProductFind product.find.json
		/// </summary>
		/// <param name="find_value">Entity search that is specified by some value</param>
		/// <param name="find_where">Entity search that is specified by the comma-separated unique fields</param>
		/// <param name="find_params">Entity search that is specified by comma-separated parameters</param>
		/// <param name="find_what">Parameter's value specifies the entity that has to be found</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductFindAsync(string find_value, string find_where, string find_params, string find_what, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.find.json?find_value=" + (find_value==null? "" : Uri.EscapeDataString(find_value))+"&find_where=" + (find_where==null? "" : Uri.EscapeDataString(find_where))+"&find_params=" + (find_params==null? "" : Uri.EscapeDataString(find_params))+"&find_what=" + (find_what==null? "" : Uri.EscapeDataString(find_what));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add image to product
		/// ProductImageAdd product.image.add.json
		/// </summary>
		/// <param name="product_id">Defines product id where the image should be added</param>
		/// <param name="image_name">Defines image's name</param>
		/// <param name="type">Defines image's types that are specified by comma-separated list</param>
		/// <param name="url">Defines URL of the image that has to be added</param>
		/// <param name="label">Defines alternative text that has to be attached to the picture</param>
		/// <param name="mime">Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.</param>
		/// <param name="position">Defines image’s position in the list</param>
		/// <param name="content">Content(body) encoded in base64 of image file</param>
		/// <param name="product_variant_id">Defines product's variants specified by variant id</param>
		/// <param name="variant_ids">Defines product's variants ids</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductImageAddAsync(string product_id, string image_name, string type, string url, string label, string mime, int position, string content, int product_variant_id, string variant_ids, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.image.add.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&image_name=" + (image_name==null? "" : Uri.EscapeDataString(image_name))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&url=" + (url==null? "" : Uri.EscapeDataString(url))+"&label=" + (label==null? "" : Uri.EscapeDataString(label))+"&mime=" + (mime==null? "" : Uri.EscapeDataString(mime))+"&position="+position+"&content=" + (content==null? "" : Uri.EscapeDataString(content))+"&product_variant_id="+product_variant_id+"&variant_ids=" + (variant_ids==null? "" : Uri.EscapeDataString(variant_ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete image
		/// ProductImageDelete product.image.delete.json
		/// </summary>
		/// <param name="product_id">Defines product id where the image should be deleted</param>
		/// <param name="id">Entity id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductImageDeleteAsync(string product_id, string id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.image.delete.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update details of image
		/// ProductImageUpdate product.image.update.json
		/// </summary>
		/// <param name="product_id">Defines product id where the image should be updated</param>
		/// <param name="image_name">Defines image's name</param>
		/// <param name="type">Defines image's types that are specified by comma-separated list</param>
		/// <param name="label">Defines alternative text that has to be attached to the picture</param>
		/// <param name="position">Defines image’s position in the list</param>
		/// <param name="id">Defines image update specified by image id</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="hidden">Define is hide image</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductImageUpdateAsync(string product_id, string image_name, string type, string label, int position, string id, string store_id, bool hidden, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.image.update.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&image_name=" + (image_name==null? "" : Uri.EscapeDataString(image_name))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&label=" + (label==null? "" : Uri.EscapeDataString(label))+"&position="+position+"&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&hidden="+hidden;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get product info about product ID *** or specify other product ID.
		/// ProductInfo product.info.json
		/// </summary>
		/// <param name="id">Retrieves product's info specified by product id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="store_id">Retrieves product info specified by store id</param>
		/// <param name="lang_id">Retrieves product info specified by language id</param>
		/// <param name="currency_id">Currency Id</param>
		/// <param name="product_variant_params">Set this parameter in order to choose which product variants fields you want to retrieve</param>
		/// <param name="report_request_id">Report request id</param>
		/// <param name="disable_report_cache">Disable report cache for current request</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductInfoAsync(string id, string @params, string exclude, string store_id, string lang_id, string currency_id, string product_variant_params, string report_request_id, bool disable_report_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.info.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&currency_id=" + (currency_id==null? "" : Uri.EscapeDataString(currency_id))+"&product_variant_params=" + (product_variant_params==null? "" : Uri.EscapeDataString(product_variant_params))+"&report_request_id=" + (report_request_id==null? "" : Uri.EscapeDataString(report_request_id))+"&disable_report_cache="+disable_report_cache;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of products from your store. Returns 10 products by default.
		/// ProductList product.list.json
		/// </summary>
		/// <param name="page_cursor">Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="category_id">Retrieves products specified by category id</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="avail_view">Specifies the set of visible/invisible products</param>
		/// <param name="avail_sale">Specifies the set of available/not available products for sale</param>
		/// <param name="store_id">Retrieves products specified by store id</param>
		/// <param name="lang_id">Retrieves products specified by language id</param>
		/// <param name="currency_id">Currency Id</param>
		/// <param name="product_ids">Retrieves products specified by product ids</param>
		/// <param name="product_variant_params">Set this parameter in order to choose which product variants fields you want to retrieve</param>
		/// <param name="since_id">Retrieve entities starting from the specified id.</param>
		/// <param name="report_request_id">Report request id</param>
		/// <param name="disable_report_cache">Disable report cache for current request</param>
		/// <param name="sort_by">Set field to sort by</param>
		/// <param name="sort_direction">Set sorting direction</param>
		/// <param name="sku">Filter by product's sku</param>
		/// <param name="disable_cache">Disable cache for current request</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductListAsync(
					string page_cursor, 
					int start, 
					int count, 
					string @params, 
					string exclude, 
					string category_id, 
					string created_from, 
					string created_to, 
					string modified_from, 
					string modified_to, 
					bool avail_view, 
					bool avail_sale, 
					string store_id, 
					string lang_id, 
					string currency_id, 
					string product_ids, 
					string product_variant_params, 
					int since_id, 
					string report_request_id, 
					bool disable_report_cache, 
					string sort_by, 
					string sort_direction, 
					string sku, 
					bool disable_cache, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.list.json?page_cursor=" + (page_cursor==null? "" : Uri.EscapeDataString(page_cursor))+"&start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&avail_view="+avail_view+"&avail_sale="+avail_sale+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&currency_id=" + (currency_id==null? "" : Uri.EscapeDataString(currency_id))+"&product_ids=" + (product_ids==null? "" : Uri.EscapeDataString(product_ids))+"&product_variant_params=" + (product_variant_params==null? "" : Uri.EscapeDataString(product_variant_params))+"&since_id="+since_id+"&report_request_id=" + (report_request_id==null? "" : Uri.EscapeDataString(report_request_id))+"&disable_report_cache="+disable_report_cache+"&sort_by=" + (sort_by==null? "" : Uri.EscapeDataString(sort_by))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&sku=" + (sku==null? "" : Uri.EscapeDataString(sku))+"&disable_cache="+disable_cache;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add manufacturer to store and assign to product
		/// ProductManufacturerAdd product.manufacturer.add.json
		/// </summary>
		/// <param name="product_id">Defines products specified by product id</param>
		/// <param name="manufacturer">Defines product’s manufacturer's name</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductManufacturerAddAsync(string product_id, string manufacturer, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.manufacturer.add.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&manufacturer=" + (manufacturer==null? "" : Uri.EscapeDataString(manufacturer));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add product option from store.
		/// ProductOptionAdd product.option.add.json
		/// </summary>
		/// <param name="name">Defines option's name</param>
		/// <param name="type">Defines option's type that has to be added</param>
		/// <param name="product_id">Defines product id where the option should be added</param>
		/// <param name="option_values">Defines option values that has to be added in Magento</param>
		/// <param name="description">Defines option's description</param>
		/// <param name="avail">Defines whether the option is available</param>
		/// <param name="sort_order">Sort number in the list</param>
		/// <param name="required">Defines if the option is required</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionAddAsync(string name, string type, string product_id, string option_values, string description, bool avail, int sort_order, bool required, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.add.json?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&option_values=" + (option_values==null? "" : Uri.EscapeDataString(option_values))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&avail="+avail+"&sort_order="+sort_order+"&required="+required;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign option from product.
		/// ProductOptionAssign product.option.assign.json
		/// </summary>
		/// <param name="product_id">Defines product id where the option should be assigned</param>
		/// <param name="option_id">Defines option id which has to be assigned</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionAssignAsync(string product_id, int option_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.assign.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&option_id="+option_id;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of options.
		/// ProductOptionList product.option.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="product_id">Retrieves products' options specified by product id</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="store_id">Store Id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionListAsync(int start, int count, string @params, string exclude, string product_id, string lang_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add product option item from option.
		/// ProductOptionValueAdd product.option.value.add.json
		/// </summary>
		/// <param name="option_id">Defines option id where the value has to be added</param>
		/// <param name="option_value">Defines option value that has to be added</param>
		/// <param name="sort_order">Sort number in the list</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionValueAddAsync(int option_id, string option_value, int sort_order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.value.add.json?option_id="+option_id+"&option_value=" + (option_value==null? "" : Uri.EscapeDataString(option_value))+"&sort_order="+sort_order;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign product option item from product.
		/// ProductOptionValueAssign product.option.value.assign.json
		/// </summary>
		/// <param name="product_option_id">Defines product's option id where the value has to be assigned</param>
		/// <param name="option_value_id">Defines value id that has to be assigned</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionValueAssignAsync(int product_option_id, int option_value_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.value.assign.json?product_option_id="+product_option_id+"&option_value_id="+option_value_id;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update product option item from option.
		/// ProductOptionValueUpdate product.option.value.update.json
		/// </summary>
		/// <param name="option_value_id">Defines value id that has to be assigned</param>
		/// <param name="price">Defines new product option price</param>
		/// <param name="quantity">Defines new products' options quantity</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductOptionValueUpdateAsync(int option_value_id, float price, float quantity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.option.value.update.json?option_value_id="+option_value_id+"&price="+price+"&quantity="+quantity;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add some prices to the product.
		/// ProductPriceAdd product.price.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductPriceAddAsync(ProductPriceAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.price.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete some prices of the product
		/// ProductPriceDelete product.price.delete.json
		/// </summary>
		/// <param name="product_id">Defines the product where the price has to be deleted</param>
		/// <param name="group_prices">Defines product's group prices</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductPriceDeleteAsync(string product_id, string group_prices, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.price.delete.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&group_prices=" + (group_prices==null? "" : Uri.EscapeDataString(group_prices));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update some prices of the product.
		/// ProductPriceUpdate product.price.update.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductPriceUpdateAsync(ProductPriceUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.price.update.json";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get reviews of a specific product.
		/// ProductReviewList product.review.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="product_id">Product id</param>
		/// <param name="ids">Retrieves reviews specified by ids</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="status">Defines status</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductReviewListAsync(int start, int count, string product_id, string ids, string store_id, string status, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.review.list.json?start="+start+"&count="+count+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&status=" + (status==null? "" : Uri.EscapeDataString(status))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assign product to store
		/// ProductStoreAssign product.store.assign.json
		/// </summary>
		/// <param name="product_id">Defines id of the product which should be assigned to a store</param>
		/// <param name="store_id">Defines id of the store product should be assigned to</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductStoreAssignAsync(string product_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.store.assign.json?product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add tax class and tax rate to store and assign to product.
		/// ProductTaxAdd product.tax.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductTaxAddAsync(ProductTaxAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.tax.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update price and quantity for a specific product
		/// ProductUpdate product.update.json
		/// </summary>
		/// <param name="id">Defines product id that has to be updated</param>
		/// <param name="model">Defines product model that has to be updated</param>
		/// <param name="price">Defines new product's price</param>
		/// <param name="special_price">Defines new product's special price</param>
		/// <param name="sprice_create">Defines the date of special price creation</param>
		/// <param name="sprice_expire">Defines the term of special price offer duration</param>
		/// <param name="cost_price">Defines new product's cost price</param>
		/// <param name="retail_price">Defines new product's retail price</param>
		/// <param name="quantity">Defines new product's quantity</param>
		/// <param name="weight">Weight</param>
		/// <param name="increase_quantity">Defines the incremental changes in product quantity</param>
		/// <param name="reduce_quantity">Defines the decrement changes in product quantity</param>
		/// <param name="warehouse_id">This parameter is used for selecting a warehouse where you need to set/modify a product quantity.</param>
		/// <param name="reserve_quantity">This parameter allows to reserve/unreserve product quantity.</param>
		/// <param name="manage_stock">Defines inventory tracking for product</param>
		/// <param name="name">Defines product's name that has to be updated</param>
		/// <param name="sku">Defines new product's sku</param>
		/// <param name="visible">Set visibility status</param>
		/// <param name="manufacturer">Defines product's manufacturer</param>
		/// <param name="manufacturer_id">Defines product's manufacturer by manufacturer_id</param>
		/// <param name="description">Defines new product's description</param>
		/// <param name="short_description">Defines short description</param>
		/// <param name="meta_title">Defines unique meta title for each entity</param>
		/// <param name="meta_keywords">Defines unique meta keywords for each entity</param>
		/// <param name="meta_description">Defines unique meta description of a entity</param>
		/// <param name="store_id">Defines store id where the product should be found</param>
		/// <param name="lang_id">Language id</param>
		/// <param name="in_stock">Set stock status</param>
		/// <param name="status">Defines product's status</param>
		/// <param name="seo_url">Defines unique URL for SEO</param>
		/// <param name="report_request_id">Report request id</param>
		/// <param name="disable_report_cache">Disable report cache for current request</param>
		/// <param name="reindex">Defines if the reindex is required</param>
		/// <param name="tags">Product tags</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductUpdateAsync(
					string id, 
					string model, 
					float price, 
					float special_price, 
					string sprice_create, 
					string sprice_expire, 
					float cost_price, 
					float retail_price, 
					float quantity, 
					float weight, 
					float increase_quantity, 
					float reduce_quantity, 
					string warehouse_id, 
					float reserve_quantity, 
					bool manage_stock, 
					string name, 
					string sku, 
					string visible, 
					string manufacturer, 
					string manufacturer_id, 
					string description, 
					string short_description, 
					string meta_title, 
					string meta_keywords, 
					string meta_description, 
					string store_id, 
					string lang_id, 
					bool in_stock, 
					string status, 
					string seo_url, 
					string report_request_id, 
					bool disable_report_cache, 
					bool reindex, 
					string tags, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.update.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&model=" + (model==null? "" : Uri.EscapeDataString(model))+"&price="+price+"&special_price="+special_price+"&sprice_create=" + (sprice_create==null? "" : Uri.EscapeDataString(sprice_create))+"&sprice_expire=" + (sprice_expire==null? "" : Uri.EscapeDataString(sprice_expire))+"&cost_price="+cost_price+"&retail_price="+retail_price+"&quantity="+quantity+"&weight="+weight+"&increase_quantity="+increase_quantity+"&reduce_quantity="+reduce_quantity+"&warehouse_id=" + (warehouse_id==null? "" : Uri.EscapeDataString(warehouse_id))+"&reserve_quantity="+reserve_quantity+"&manage_stock="+manage_stock+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&sku=" + (sku==null? "" : Uri.EscapeDataString(sku))+"&visible=" + (visible==null? "" : Uri.EscapeDataString(visible))+"&manufacturer=" + (manufacturer==null? "" : Uri.EscapeDataString(manufacturer))+"&manufacturer_id=" + (manufacturer_id==null? "" : Uri.EscapeDataString(manufacturer_id))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&short_description=" + (short_description==null? "" : Uri.EscapeDataString(short_description))+"&meta_title=" + (meta_title==null? "" : Uri.EscapeDataString(meta_title))+"&meta_keywords=" + (meta_keywords==null? "" : Uri.EscapeDataString(meta_keywords))+"&meta_description=" + (meta_description==null? "" : Uri.EscapeDataString(meta_description))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&lang_id=" + (lang_id==null? "" : Uri.EscapeDataString(lang_id))+"&in_stock="+in_stock+"&status=" + (status==null? "" : Uri.EscapeDataString(status))+"&seo_url=" + (seo_url==null? "" : Uri.EscapeDataString(seo_url))+"&report_request_id=" + (report_request_id==null? "" : Uri.EscapeDataString(report_request_id))+"&disable_report_cache="+disable_report_cache+"&reindex="+reindex+"&tags=" + (tags==null? "" : Uri.EscapeDataString(tags));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add variant to product.
		/// ProductVariantAdd product.variant.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantAddAsync(ProductVariantAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get count variants.
		/// ProductVariantCount product.variant.count.json
		/// </summary>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="category_id">Counts products’ variants specified by category id</param>
		/// <param name="product_id">Retrieves products' variants specified by product id</param>
		/// <param name="store_id">Retrieves variants specified by store id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantCountAsync(string created_from, string created_to, string modified_from, string modified_to, string category_id, string product_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.count.json?created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete variant.
		/// ProductVariantDelete product.variant.delete.json
		/// </summary>
		/// <param name="id">Defines variant removal, specified by variant id</param>
		/// <param name="product_id">Defines product's id where the variant has to be deleted</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantDeleteAsync(string id, string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get variant info.
		/// ProductVariantInfo product.variant.info.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="id">Retrieves variant's info specified by variant id</param>
		/// <param name="store_id">Retrieves variant info specified by store id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantInfoAsync(string @params, string exclude, string id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.info.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list variants.
		/// ProductVariantList product.variant.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <param name="created_from">Retrieve entities from their creation date</param>
		/// <param name="created_to">Retrieve entities to their creation date</param>
		/// <param name="modified_from">Retrieve entities from their modification date</param>
		/// <param name="modified_to">Retrieve entities to their modification date</param>
		/// <param name="category_id">Retrieves products’ variants specified by category id</param>
		/// <param name="product_id">Retrieves products' variants specified by product id</param>
		/// <param name="store_id">Retrieves variants specified by store id</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantListAsync(int start, int count, string @params, string exclude, string created_from, string created_to, string modified_from, string modified_to, string category_id, string product_id, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.list.json?start="+start+"&count="+count+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude))+"&created_from=" + (created_from==null? "" : Uri.EscapeDataString(created_from))+"&created_to=" + (created_to==null? "" : Uri.EscapeDataString(created_to))+"&modified_from=" + (modified_from==null? "" : Uri.EscapeDataString(modified_from))+"&modified_to=" + (modified_to==null? "" : Uri.EscapeDataString(modified_to))+"&category_id=" + (category_id==null? "" : Uri.EscapeDataString(category_id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add some prices to the product variant.
		/// ProductVariantPriceAdd product.variant.price.add.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantPriceAddAsync(ProductVariantPriceAdd requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.price.add.json";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete some prices of the product variant.
		/// ProductVariantPriceDelete product.variant.price.delete.json
		/// </summary>
		/// <param name="id">Defines the variant where the price has to be deleted</param>
		/// <param name="group_prices">Defines variants's group prices</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantPriceDeleteAsync(string id, string group_prices, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.price.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&group_prices=" + (group_prices==null? "" : Uri.EscapeDataString(group_prices));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update some prices of the product variant.
		/// ProductVariantPriceUpdate product.variant.price.update.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantPriceUpdateAsync(ProductVariantPriceUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.price.update.json";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update variant.
		/// ProductVariantUpdate product.variant.update.json
		/// </summary>
		/// <param name="store_id">Defines store id where the variant should be found</param>
		/// <param name="id">Defines variant update specified by variant id</param>
		/// <param name="product_id">Defines product's id where the variant has to be updated</param>
		/// <param name="warehouse_id">This parameter is used for selecting a warehouse where you need to set/modify a product quantity.</param>
		/// <param name="reserve_quantity">This parameter allows to reserve/unreserve product variants quantity.</param>
		/// <param name="quantity">Defines new products' variants quantity</param>
		/// <param name="increase_quantity">Defines the incremental changes in product quantity</param>
		/// <param name="reduce_quantity">Defines the decrement changes in product quantity</param>
		/// <param name="price">Defines new product's variant price</param>
		/// <param name="special_price">Defines new product's variant special price</param>
		/// <param name="sprice_create">Defines the date of special price creation</param>
		/// <param name="sprice_expire">Defines the term of special price offer duration</param>
		/// <param name="manage_stock">Defines inventory tracking for product variant</param>
		/// <param name="in_stock">Set stock status</param>
		/// <param name="name">Defines variant's name that has to be updated</param>
		/// <param name="description">Specifies variant's description</param>
		/// <param name="sku">Defines new product's variant sku</param>
		/// <param name="meta_title">Defines unique meta title for each entity</param>
		/// <param name="meta_description">Defines unique meta description of a entity</param>
		/// <param name="meta_keywords">Defines unique meta keywords for each entity</param>
		/// <param name="short_description">Defines short description</param>
		/// <param name="visible">Set visibility status</param>
		/// <param name="status">Defines product variant's status</param>
		/// <param name="weight">Weight</param>
		/// <param name="reindex">Defines if the reindex is required</param>
		/// <returns>successful operation</returns>
		public async Task<string> ProductVariantUpdateAsync(
					string store_id, 
					string id, 
					string product_id, 
					string warehouse_id, 
					float reserve_quantity, 
					float quantity, 
					float increase_quantity, 
					float reduce_quantity, 
					float price, 
					float special_price, 
					string sprice_create, 
					string sprice_expire, 
					bool manage_stock, 
					bool in_stock, 
					string name, 
					string description, 
					string sku, 
					string meta_title, 
					string meta_description, 
					string meta_keywords, 
					string short_description, 
					string visible, 
					string status, 
					float weight, 
					bool reindex, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product.variant.update.json?store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&warehouse_id=" + (warehouse_id==null? "" : Uri.EscapeDataString(warehouse_id))+"&reserve_quantity="+reserve_quantity+"&quantity="+quantity+"&increase_quantity="+increase_quantity+"&reduce_quantity="+reduce_quantity+"&price="+price+"&special_price="+special_price+"&sprice_create=" + (sprice_create==null? "" : Uri.EscapeDataString(sprice_create))+"&sprice_expire=" + (sprice_expire==null? "" : Uri.EscapeDataString(sprice_expire))+"&manage_stock="+manage_stock+"&in_stock="+in_stock+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&description=" + (description==null? "" : Uri.EscapeDataString(description))+"&sku=" + (sku==null? "" : Uri.EscapeDataString(sku))+"&meta_title=" + (meta_title==null? "" : Uri.EscapeDataString(meta_title))+"&meta_description=" + (meta_description==null? "" : Uri.EscapeDataString(meta_description))+"&meta_keywords=" + (meta_keywords==null? "" : Uri.EscapeDataString(meta_keywords))+"&short_description=" + (short_description==null? "" : Uri.EscapeDataString(short_description))+"&visible=" + (visible==null? "" : Uri.EscapeDataString(visible))+"&status=" + (status==null? "" : Uri.EscapeDataString(status))+"&weight="+weight+"&reindex="+reindex;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get subscribers list
		/// SubscriberList subscriber.list.json
		/// </summary>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="subscribed">Filter by subscription status</param>
		/// <param name="store_id">Store Id</param>
		/// <param name="email">Filter subscribers by email</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> SubscriberListAsync(int start, int count, bool subscribed, string store_id, string email, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriber.list.json?start="+start+"&count="+count+"&subscribed="+subscribed+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id))+"&email=" + (email==null? "" : Uri.EscapeDataString(email))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get info about tax
		/// TaxClassInfo tax.class.info.json
		/// </summary>
		/// <param name="tax_class_id">Retrieves taxes specified by class id</param>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="exclude">Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all</param>
		/// <returns>successful operation</returns>
		public async Task<string> TaxClassInfoAsync(string tax_class_id, string @params, string exclude, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tax.class.info.json?tax_class_id=" + (tax_class_id==null? "" : Uri.EscapeDataString(tax_class_id))+"&params=" + (params==null? "" : Uri.EscapeDataString(params))+"&exclude=" + (exclude==null? "" : Uri.EscapeDataString(exclude));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Count registered webhooks on the store.
		/// WebhookCount webhook.count.json
		/// </summary>
		/// <param name="entity">The entity you want to filter webhooks by (e.g. order or product)</param>
		/// <param name="action">The action you want to filter webhooks by (e.g. order or product)</param>
		/// <param name="active">The webhook status you want to filter webhooks by</param>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookCountAsync(string entity, string action, bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.count.json?entity=" + (entity==null? "" : Uri.EscapeDataString(entity))+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&active="+active;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create webhook on the store and subscribe to it.
		/// WebhookCreate webhook.create.json
		/// </summary>
		/// <param name="entity">Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)</param>
		/// <param name="action">Specify what action (event) will trigger the webhook (e.g add, delete, or update)</param>
		/// <param name="callback">Callback where the webhook should send the POST request when the event occurs</param>
		/// <param name="label">The name you give to the webhook</param>
		/// <param name="fields">Fields the webhook should send</param>
		/// <param name="active">Webhook status</param>
		/// <param name="store_id">Defines store id where the webhook should be assigned</param>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookCreateAsync(string entity, string action, string callback, string label, string fields, bool active, string store_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.create.json?entity=" + (entity==null? "" : Uri.EscapeDataString(entity))+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&callback=" + (callback==null? "" : Uri.EscapeDataString(callback))+"&label=" + (label==null? "" : Uri.EscapeDataString(label))+"&fields=" + (fields==null? "" : Uri.EscapeDataString(fields))+"&active="+active+"&store_id=" + (store_id==null? "" : Uri.EscapeDataString(store_id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete registered webhook on the store.
		/// WebhookDelete webhook.delete.json
		/// </summary>
		/// <param name="id">Webhook id</param>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.delete.json?id=" + (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Webhooks that are available on this store.
		/// WebhookEvents webhook.events.json
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookEventsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.events.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List registered webhook on the store.
		/// WebhookList webhook.list.json
		/// </summary>
		/// <param name="params">Set this parameter in order to choose which entity fields you want to retrieve</param>
		/// <param name="start">This parameter sets the number from which you want to get entities</param>
		/// <param name="count">This parameter sets the entity amount that has to be retrieved. Max allowed count=250</param>
		/// <param name="entity">The entity you want to filter webhooks by (e.g. order or product)</param>
		/// <param name="action">The action you want to filter webhooks by (e.g. add, update, or delete)</param>
		/// <param name="active">The webhook status you want to filter webhooks by</param>
		/// <param name="ids">List of сomma-separated webhook ids</param>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookListAsync(string @params, int start, int count, string entity, string action, bool active, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.list.json?params=" + (params==null? "" : Uri.EscapeDataString(params))+"&start="+start+"&count="+count+"&entity=" + (entity==null? "" : Uri.EscapeDataString(entity))+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&active="+active+"&ids=" + (ids==null? "" : Uri.EscapeDataString(ids));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Webhooks parameters.
		/// WebhookUpdate webhook.update.json
		/// </summary>
		/// <param name="id">Webhook id</param>
		/// <param name="callback">Callback where the webhook should send the POST request when the event occurs</param>
		/// <param name="label">The name you give to the webhook</param>
		/// <param name="fields">Fields the webhook should send</param>
		/// <param name="active">Webhook status</param>
		/// <returns>successful operation</returns>
		public async Task<string> WebhookUpdateAsync(string id, string callback, string label, string fields, bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook.update.json?id=" + (id==null? "" : Uri.EscapeDataString(id))+"&callback=" + (callback==null? "" : Uri.EscapeDataString(callback))+"&label=" + (label==null? "" : Uri.EscapeDataString(label))+"&fields=" + (fields==null? "" : Uri.EscapeDataString(fields))+"&active="+active;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
