//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class City
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public System.Nullable<System.Int32> Zip_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClockingRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Checked_in { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checked_out { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkin_latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkin_longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkout_latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkout_longitude { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Company
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_person_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Cvr { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Invoice_email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Next_invoice_number { get; set; }
		
		/// <summary>
		/// Format like eg. `28680133` or `046158971404`
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Format like eg. `45` or `49`
		/// Max length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3)]
		public string Phone_countrycode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Receive_form_mails { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
		
		/// <summary>
		/// Max length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contact
	{
		
		/// <summary>
		/// Street address
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		/// <summary>
		/// Only filled out if this represents another company within Apacta (used for partners)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Cvr { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Format like eg. `28680133` or `046158971404`
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactType
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// One of 3 values
		/// </summary>
		public ContactTypeIdentifier Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	public enum ContactTypeIdentifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		partner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supplier = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Currency
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string Currency_sign { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorNotFound
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorValidation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Expense
	{
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Delivery_date { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Short_text { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Supplier_invoice_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpenseFile
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expense_id { get; set; }
		
		/// <summary>
		/// File's name
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File_extension { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File_original_name { get; set; }
		
		/// <summary>
		/// File size in bytes
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File_size { get; set; }
		
		/// <summary>
		/// File's MIME type
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File_type { get; set; }
		
		/// <summary>
		/// Read-only
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string File_url { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpenseLine
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Buying_price { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expense_id { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Form
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Approved_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Form_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_template_id { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_draft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_invoiced { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_shared { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mass_form_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FormField
	{
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Content_value { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_field_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_template_field_id { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Placement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FormFieldType
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Read-only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FormTemplate
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_overview_category_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Pdf_template_identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntegrationFeatureSetting
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Default_value { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Integration_feature_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_custom_setting { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Invoice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_payment_term_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Eu_customer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Gross_payment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Integration_id { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Invoice_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_draft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_locked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_offer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Issued_date { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Message { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Net_payment { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Offer_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Payment_due_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Payment_term_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceLine
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Discount_percent { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Discount_text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Invoice_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MassMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Content { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MassMessagesUser
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_read { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_sent_email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MassMessage Mass_message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mass_message_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Material
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Barcode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Billing_cycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Cost_price { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_single_usage { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaterialRental
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Amount { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Is_invoiced { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Material_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string To_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaginationDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Current_page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Has_next_page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Has_prev_page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Page_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentTerm
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// Max length: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(11)]
		public System.Nullable<System.Int32> Days_of_credit { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Payment_term_type_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentTermType
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Buying_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Product_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Selling_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_task_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_status_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start_time { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectStatus
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// One of 3 values
		/// Max length: 255
		/// </summary>
		public ProjectStatusIdentifier Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	public enum ProjectStatusIdentifier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ready_for_billing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StockLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntry
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_all_day { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Amount of seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string To_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntryInterval
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntryType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_interval_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_value_type_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntryUnitType
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntryValueType
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Identifier { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Modified_by_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_unit_type_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Api_key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Company_id { get; set; }
		
		/// <summary>
		/// Cost of salaries
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Cost_price { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Additional cost on this employee (pension, vacation etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Extra_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string First_name { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Full_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string Mobile_countrycode { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Password { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string Phone_countrycode { get; set; }
		
		/// <summary>
		/// If `true` the employee will receive an email receipt of every form submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Receive_form_mails { get; set; }
		
		/// <summary>
		/// The price this employee costs per hour when working
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Sale_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VendorProduct
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Barcode { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_by_id { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Product_category_number { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Product_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WallComment
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string User_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Wall_post_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WallPost
	{
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// READ-ONLY - only present if it's an deleted object
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// READ-ONLY
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get list of cities supported in Apacta
		/// CitiesGetByZip_code cities
		/// </summary>
		/// <param name="zip_code">Used to search for a city with specific zip code</param>
		/// <returns>OK</returns>
		public async Task<string> CitiesGetByZip_codeAsync(string zip_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cities?zip_code=" + (zip_code==null? "" : Uri.EscapeDataString(zip_code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about one city
		/// CitiesGetByCity_id cities/{city_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CitiesGetByCity_idAsync(string city_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cities/"+ (city_id==null? "" : Uri.EscapeDataString(city_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of clocking records
		/// ClockingRecordsGetByActive clocking_records
		/// </summary>
		/// <param name="active">Used to search for active clocking records</param>
		/// <returns>OK</returns>
		public async Task<string> ClockingRecordsGetByActiveAsync(bool active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records?active="+active;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create clocking record for authenticated user
		/// ClockingRecordsPost clocking_records
		/// </summary>
		public async Task ClockingRecordsPostAsync(ClockingRecordsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checkout active clocking record for authenticated user
		/// ClockingRecordsPost clocking_records/checkout
		/// </summary>
		public async Task ClockingRecordsPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records/checkout";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a clocking record
		/// ClockingRecordsDeleteByClocking_record_id clocking_records/{clocking_record_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ClockingRecordsDeleteByClocking_record_idAsync(string clocking_record_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records/"+ (clocking_record_id==null? "" : Uri.EscapeDataString(clocking_record_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of 1 clocking_record
		/// ClockingRecordsGetByClocking_record_id clocking_records/{clocking_record_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ClockingRecordsGetByClocking_record_idAsync(string clocking_record_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records/"+ (clocking_record_id==null? "" : Uri.EscapeDataString(clocking_record_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a clocking record
		/// ClockingRecordsPutByClocking_record_id clocking_records/{clocking_record_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ClockingRecordsPutByClocking_record_idAsync(string clocking_record_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clocking_records/"+ (clocking_record_id==null? "" : Uri.EscapeDataString(clocking_record_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of companies
		/// CompaniesGet companies
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CompaniesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "companies";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of 1 company
		/// CompaniesGetByCompany_id companies/{company_id}
		/// </summary>
		/// <returns>Company object</returns>
		public async Task<string> CompaniesGetByCompany_idAsync(string company_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "companies/"+ (company_id==null? "" : Uri.EscapeDataString(company_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of integration feature settings
		/// CompaniesGetByCompany_id companies/{company_id}/integration_feature_settings
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CompaniesGetByCompany_idAsync(string company_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "companies/"+ (company_id==null? "" : Uri.EscapeDataString(company_id))+"/integration_feature_settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show details of 1 integration feature setting
		/// CompaniesGetByCompany_idAndIntegration_feature_setting_id companies/{company_id}/integration_feature_settings/{integration_feature_setting_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CompaniesGetByCompany_idAndIntegration_feature_setting_idAsync(string company_id, string integration_feature_setting_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "companies/"+ (company_id==null? "" : Uri.EscapeDataString(company_id))+"/integration_feature_settings/"+ (integration_feature_setting_id==null? "" : Uri.EscapeDataString(integration_feature_setting_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of contact types supported in Apacta
		/// ContactTypesGetByIdentifier contact_types
		/// </summary>
		/// <param name="identifier">Search for specific identifier value</param>
		/// <returns>OK</returns>
		public async Task<string> ContactTypesGetByIdentifierAsync(string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact_types?identifier=" + (identifier==null? "" : Uri.EscapeDataString(identifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about one contact type
		/// ContactTypesGetByContact_type_id contact_types/{contact_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ContactTypesGetByContact_type_idAsync(string contact_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contact_types/"+ (contact_type_id==null? "" : Uri.EscapeDataString(contact_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of contacts
		/// ContactsGetByNameAndCvrAndEanAndErp_idAndContact_typeAndCity contacts
		/// </summary>
		/// <param name="name">Used to search for a contact with a specific name</param>
		/// <param name="cvr">Search for values in CVR field</param>
		/// <param name="ean">Search for values in EAN field</param>
		/// <param name="erp_id">Search for values in ERP id field</param>
		/// <param name="contact_type">Used to show only contacts with with one specific `ContactType`</param>
		/// <param name="city">Used to show only contacts with with one specific `City`</param>
		/// <returns>OK</returns>
		public async Task<string> ContactsGetByNameAndCvrAndEanAndErp_idAndContact_typeAndCityAsync(string name, string cvr, string ean, string erp_id, string contact_type, string city, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&cvr=" + (cvr==null? "" : Uri.EscapeDataString(cvr))+"&ean=" + (ean==null? "" : Uri.EscapeDataString(ean))+"&erp_id=" + (erp_id==null? "" : Uri.EscapeDataString(erp_id))+"&contact_type=" + (contact_type==null? "" : Uri.EscapeDataString(contact_type))+"&city=" + (city==null? "" : Uri.EscapeDataString(city));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new contact
		/// ContactsPost contacts
		/// </summary>
		public async Task ContactsPostAsync(ContactsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a contact
		/// ContactsDeleteByContact_id contacts/{contact_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ContactsDeleteByContact_idAsync(string contact_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (contact_id==null? "" : Uri.EscapeDataString(contact_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of 1 contact
		/// ContactsGetByContact_id contacts/{contact_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ContactsGetByContact_idAsync(string contact_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (contact_id==null? "" : Uri.EscapeDataString(contact_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a contact
		/// ContactsPutByContact_id contacts/{contact_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ContactsPutByContact_idAsync(string contact_id, ContactsPutByContact_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "contacts/"+ (contact_id==null? "" : Uri.EscapeDataString(contact_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of currencies supported in Apacta
		/// CurrenciesGet currencies
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CurrenciesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "currencies";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about one currency
		/// CurrenciesGetByCurrency_id currencies/{currency_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> CurrenciesGetByCurrency_idAsync(string currency_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "currencies/"+ (currency_id==null? "" : Uri.EscapeDataString(currency_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to retrieve details about the logged in user's hours
		/// EmployeeHoursGetByDate_fromAndDate_to employee_hours
		/// </summary>
		/// <param name="date_from">Date formatted as Y-m-d (2016-06-28)</param>
		/// <param name="date_to">Date formatted as Y-m-d (2016-06-28)</param>
		/// <returns>OK</returns>
		public async Task<string> EmployeeHoursGetByDate_fromAndDate_toAsync(string date_from, string date_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "employee_hours?date_from=" + (date_from==null? "" : Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : Uri.EscapeDataString(date_to));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of expense files
		/// ExpenseFilesGetByCreated_by_idAndExpense_id expense_files
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseFilesGetByCreated_by_idAndExpense_idAsync(string created_by_id, string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_files?created_by_id=" + (created_by_id==null? "" : Uri.EscapeDataString(created_by_id))+"&expense_id=" + (expense_id==null? "" : Uri.EscapeDataString(expense_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete file
		/// ExpenseFilesDeleteByExpense_file_id expense_files/{expense_file_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseFilesDeleteByExpense_file_idAsync(string expense_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_files/"+ (expense_file_id==null? "" : Uri.EscapeDataString(expense_file_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show file
		/// ExpenseFilesGetByExpense_file_id expense_files/{expense_file_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseFilesGetByExpense_file_idAsync(string expense_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_files/"+ (expense_file_id==null? "" : Uri.EscapeDataString(expense_file_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit file
		/// ExpenseFilesPutByExpense_file_id expense_files/{expense_file_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseFilesPutByExpense_file_idAsync(string expense_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_files/"+ (expense_file_id==null? "" : Uri.EscapeDataString(expense_file_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of expense lines
		/// ExpenseLinesGetByCreated_by_idAndCurrency_idAndExpense_id expense_lines
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseLinesGetByCreated_by_idAndCurrency_idAndExpense_idAsync(string created_by_id, string currency_id, string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_lines?created_by_id=" + (created_by_id==null? "" : Uri.EscapeDataString(created_by_id))+"&currency_id=" + (currency_id==null? "" : Uri.EscapeDataString(currency_id))+"&expense_id=" + (expense_id==null? "" : Uri.EscapeDataString(expense_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add line to expense
		/// ExpenseLinesPost expense_lines
		/// </summary>
		public async Task ExpenseLinesPostAsync(ExpenseLinesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_lines";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete expense line
		/// ExpenseLinesDeleteByExpense_line_id expense_lines/{expense_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseLinesDeleteByExpense_line_idAsync(string expense_line_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_lines/"+ (expense_line_id==null? "" : Uri.EscapeDataString(expense_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show expense line
		/// ExpenseLinesGetByExpense_line_id expense_lines/{expense_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseLinesGetByExpense_line_idAsync(string expense_line_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_lines/"+ (expense_line_id==null? "" : Uri.EscapeDataString(expense_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit expense line
		/// ExpenseLinesPutByExpense_line_id expense_lines/{expense_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpenseLinesPutByExpense_line_idAsync(string expense_line_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expense_lines/"+ (expense_line_id==null? "" : Uri.EscapeDataString(expense_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of expenses
		/// ExpensesGetByCreated_by_idAndCompany_idAndContact_idAndProject_idAndGt_createdAndLt_created expenses
		/// </summary>
		/// <param name="gt_created">Created after date</param>
		/// <param name="lt_created">Created before date</param>
		/// <returns>OK</returns>
		public async Task<string> ExpensesGetByCreated_by_idAndCompany_idAndContact_idAndProject_idAndGt_createdAndLt_createdAsync(string created_by_id, string company_id, string contact_id, string project_id, System.DateTimeOffset gt_created, System.DateTimeOffset lt_created, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses?created_by_id=" + (created_by_id==null? "" : Uri.EscapeDataString(created_by_id))+"&company_id=" + (company_id==null? "" : Uri.EscapeDataString(company_id))+"&contact_id=" + (contact_id==null? "" : Uri.EscapeDataString(contact_id))+"&project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&gt_created=" + gt_created.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&lt_created=" + lt_created.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add line to expense
		/// ExpensesPost expenses
		/// </summary>
		public async Task ExpensesPostAsync(ExpensesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete expense
		/// ExpensesDeleteByExpense_id expenses/{expense_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpensesDeleteByExpense_idAsync(string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses/"+ (expense_id==null? "" : Uri.EscapeDataString(expense_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show expense
		/// ExpensesGetByExpense_id expenses/{expense_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpensesGetByExpense_idAsync(string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses/"+ (expense_id==null? "" : Uri.EscapeDataString(expense_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit expense
		/// ExpensesPutByExpense_id expenses/{expense_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ExpensesPutByExpense_idAsync(string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses/"+ (expense_id==null? "" : Uri.EscapeDataString(expense_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of all OIOUBL files for the expense
		/// Expense OIOUBL filesGetByExpense_id expenses/{expense_id}/original_files
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Expense OIOUBL filesGetByExpense_idAsync(string expense_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses/"+ (expense_id==null? "" : Uri.EscapeDataString(expense_id))+"/original_files";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show OIOUBL file
		/// Expense OIOUBL filesGetByExpense_idAndFile_id expenses/{expense_id}/original_files/{file_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Expense OIOUBL filesGetByExpense_idAndFile_idAsync(string expense_id, string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "expenses/"+ (expense_id==null? "" : Uri.EscapeDataString(expense_id))+"/original_files/"+ (file_id==null? "" : Uri.EscapeDataString(file_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of form field types
		/// FormFieldTypesGetByNameAndIdentifier form_field_types
		/// </summary>
		/// <param name="name">Used to filter on the `name` of the form_fields</param>
		/// <param name="identifier">Used to filter on the `identifier` of the form_fields</param>
		/// <returns>OK</returns>
		public async Task<string> FormFieldTypesGetByNameAndIdentifierAsync(string name, string identifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_field_types?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&identifier=" + (identifier==null? "" : Uri.EscapeDataString(identifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about single `FormField`
		/// FormFieldTypesGetByForm_field_type_id form_field_types/{form_field_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> FormFieldTypesGetByForm_field_type_idAsync(string form_field_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_field_types/"+ (form_field_type_id==null? "" : Uri.EscapeDataString(form_field_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new field to a `Form`
		/// FormFieldsPost form_fields
		/// </summary>
		public async Task FormFieldsPostAsync(FormFieldsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_fields";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details about single `FormField`
		/// FormFieldsGetByForm_field_id form_fields/{form_field_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> FormFieldsGetByForm_field_idAsync(string form_field_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_fields/"+ (form_field_id==null? "" : Uri.EscapeDataString(form_field_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get array of form_templates for your company
		/// FormTemplatesGetByNameAndIdentifierAndPdf_template_identifierAndDescription form_templates
		/// </summary>
		/// <param name="name">Used to filter on the `name` of the form_templates</param>
		/// <param name="identifier">Used to filter on the `identifier` of the form_templates</param>
		/// <param name="pdf_template_identifier">Used to filter on the `pdf_template_identifier` of the form_templates</param>
		/// <param name="description">Used to filter on the `description` of the form_templates</param>
		/// <returns>OK</returns>
		public async Task<string> FormTemplatesGetByNameAndIdentifierAndPdf_template_identifierAndDescriptionAsync(string name, string identifier, string pdf_template_identifier, string description, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_templates?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&identifier=" + (identifier==null? "" : Uri.EscapeDataString(identifier))+"&pdf_template_identifier=" + (pdf_template_identifier==null? "" : Uri.EscapeDataString(pdf_template_identifier))+"&description=" + (description==null? "" : Uri.EscapeDataString(description));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View one form template
		/// FormTemplatesGetByForm_template_id form_templates/{form_template_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> FormTemplatesGetByForm_template_idAsync(string form_template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "form_templates/"+ (form_template_id==null? "" : Uri.EscapeDataString(form_template_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve array of forms
		/// FormsGetByExtendedAndDate_fromAndDate_toAndProject_idAndCreated_by_idAndForm_template_id forms
		/// </summary>
		/// <param name="extended">Used to have extended details from the forms from the `Form`'s `FormFields`</param>
		/// <param name="date_from">Used in conjunction with `date_to` to only show forms within these dates - format like `2016-28-05`</param>
		/// <param name="date_to">Used in conjunction with `date_from` to only show forms within these dates - format like `2016-28-30`</param>
		/// <param name="project_id">Used to filter on the `project_id` of the forms</param>
		/// <param name="created_by_id">Used to filter on the `created_by_id` of the forms</param>
		/// <param name="form_template_id">Used to filter on the `form_template_id` of the forms</param>
		/// <returns>OK</returns>
		public async Task<string> FormsGetByExtendedAndDate_fromAndDate_toAndProject_idAndCreated_by_idAndForm_template_idAsync(string extended, string date_from, string date_to, string project_id, string created_by_id, string form_template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms?extended=" + (extended==null? "" : Uri.EscapeDataString(extended))+"&date_from=" + (date_from==null? "" : Uri.EscapeDataString(date_from))+"&date_to=" + (date_to==null? "" : Uri.EscapeDataString(date_to))+"&project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&created_by_id=" + (created_by_id==null? "" : Uri.EscapeDataString(created_by_id))+"&form_template_id=" + (form_template_id==null? "" : Uri.EscapeDataString(form_template_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new form
		/// Used to add a form into the system
		/// FormsPost forms
		/// </summary>
		public async Task FormsPostAsync(FormsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a form
		/// You can only delete the forms that you've submitted yourself
		/// FormsDeleteByForm_id forms/{form_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task FormsDeleteByForm_idAsync(string form_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms/"+ (form_id==null? "" : Uri.EscapeDataString(form_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View form
		/// FormsGetByForm_id forms/{form_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> FormsGetByForm_idAsync(string form_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms/"+ (form_id==null? "" : Uri.EscapeDataString(form_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a form
		/// FormsPutByForm_id forms/{form_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task FormsPutByForm_idAsync(string form_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "forms/"+ (form_id==null? "" : Uri.EscapeDataString(form_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View list of invoice lines
		/// InvoiceLinesGetByInvoice_idAndProduct_idAndUser_idAndNameAndDiscount_text invoice_lines
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoiceLinesGetByInvoice_idAndProduct_idAndUser_idAndNameAndDiscount_textAsync(string invoice_id, string product_id, string user_id, string name, string discount_text, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoice_lines?invoice_id=" + (invoice_id==null? "" : Uri.EscapeDataString(invoice_id))+"&product_id=" + (product_id==null? "" : Uri.EscapeDataString(product_id))+"&user_id=" + (user_id==null? "" : Uri.EscapeDataString(user_id))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&discount_text=" + (discount_text==null? "" : Uri.EscapeDataString(discount_text));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add invoice
		/// InvoiceLinesPost invoice_lines
		/// </summary>
		public async Task InvoiceLinesPostAsync(InvoiceLinesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoice_lines";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete invoice line
		/// InvoiceLinesDeleteByInvoice_line_id invoice_lines/{invoice_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoiceLinesDeleteByInvoice_line_idAsync(string invoice_line_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoice_lines/"+ (invoice_line_id==null? "" : Uri.EscapeDataString(invoice_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View invoice line
		/// InvoiceLinesGetByInvoice_line_id invoice_lines/{invoice_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoiceLinesGetByInvoice_line_idAsync(string invoice_line_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoice_lines/"+ (invoice_line_id==null? "" : Uri.EscapeDataString(invoice_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit invoice line
		/// InvoiceLinesPutByInvoice_line_id invoice_lines/{invoice_line_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoiceLinesPutByInvoice_line_idAsync(string invoice_line_id, InvoiceLinesPutByInvoice_line_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoice_lines/"+ (invoice_line_id==null? "" : Uri.EscapeDataString(invoice_line_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View list of invoices
		/// InvoicesGetByContact_idAndProject_idAndInvoice_numberAndOffer_numberAndIs_draftAndIs_offerAndIs_lockedAndDate_fromAndDate_toAndIssued_date invoices
		/// </summary>
		/// <param name="contact_id">Used to filter on the `contact_id` of the invoices</param>
		/// <param name="project_id">Used to filter on the `project_id` of the invoices</param>
		/// <param name="invoice_number">Used to filter on the `invoice_number` of the invoices</param>
		/// <returns>OK</returns>
		public async Task<string> InvoicesGetByContact_idAndProject_idAndInvoice_numberAndOffer_numberAndIs_draftAndIs_offerAndIs_lockedAndDate_fromAndDate_toAndIssued_dateAsync(string contact_id, string project_id, string invoice_number, string offer_number, int is_draft, int is_offer, int is_locked, System.DateTimeOffset date_from, System.DateTimeOffset date_to, System.DateTimeOffset issued_date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoices?contact_id=" + (contact_id==null? "" : Uri.EscapeDataString(contact_id))+"&project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&invoice_number=" + (invoice_number==null? "" : Uri.EscapeDataString(invoice_number))+"&offer_number=" + (offer_number==null? "" : Uri.EscapeDataString(offer_number))+"&is_draft="+is_draft+"&is_offer="+is_offer+"&is_locked="+is_locked+"&date_from=" + date_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&date_to=" + date_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&issued_date=" + issued_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add invoice
		/// InvoicesPost invoices
		/// </summary>
		public async Task InvoicesPostAsync(InvoicesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoices";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete invoice
		/// InvoicesDeleteByInvoice_id invoices/{invoice_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoicesDeleteByInvoice_idAsync(string invoice_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoices/"+ (invoice_id==null? "" : Uri.EscapeDataString(invoice_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View invoice
		/// InvoicesGetByInvoice_id invoices/{invoice_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoicesGetByInvoice_idAsync(string invoice_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoices/"+ (invoice_id==null? "" : Uri.EscapeDataString(invoice_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit invoice
		/// InvoicesPutByInvoice_id invoices/{invoice_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> InvoicesPutByInvoice_idAsync(string invoice_id, InvoicesPutByInvoice_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "invoices/"+ (invoice_id==null? "" : Uri.EscapeDataString(invoice_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View list of mass messages for specific user
		/// MassMessagesUsersGetByIs_read mass_messages_users
		/// </summary>
		/// <param name="is_read">Used to filter on the `is_read` of the mass messages</param>
		/// <returns>OK</returns>
		public async Task<string> MassMessagesUsersGetByIs_readAsync(bool is_read, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mass_messages_users?is_read="+is_read;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View mass message
		/// MassMessagesUsersGetByMass_messages_user_id mass_messages_users/{mass_messages_user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MassMessagesUsersGetByMass_messages_user_idAsync(string mass_messages_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mass_messages_users/"+ (mass_messages_user_id==null? "" : Uri.EscapeDataString(mass_messages_user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit mass message
		/// MassMessagesUsersPutByMass_messages_user_id mass_messages_users/{mass_messages_user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MassMessagesUsersPutByMass_messages_user_idAsync(string mass_messages_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mass_messages_users/"+ (mass_messages_user_id==null? "" : Uri.EscapeDataString(mass_messages_user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View list of all materials
		/// MaterialsGetByBarcodeAndNameAndProject_idAndCurrently_rented materials
		/// </summary>
		/// <param name="barcode">Used to filter on the `barcode` of the materials</param>
		/// <param name="name">Used to filter on the `name` of the materials</param>
		/// <param name="project_id">Used to find materials used in specific project by `project_id`</param>
		/// <param name="currently_rented">Used to find currently rented materials</param>
		/// <returns>OK</returns>
		public async Task<string> MaterialsGetByBarcodeAndNameAndProject_idAndCurrently_rentedAsync(string barcode, string name, string project_id, bool currently_rented, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials?barcode=" + (barcode==null? "" : Uri.EscapeDataString(barcode))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&currently_rented="+currently_rented;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete material
		/// MaterialsDeleteByMaterial_id materials/{material_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialsDeleteByMaterial_idAsync(string material_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View material
		/// MaterialsGetByMaterial_id materials/{material_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialsGetByMaterial_idAsync(string material_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit material
		/// MaterialsPutByMaterial_id materials/{material_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialsPutByMaterial_idAsync(string material_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of rentals for specific material
		/// MaterialRentalsGetByMaterial_id materials/{material_id}/rentals/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialRentalsGetByMaterial_idAsync(string material_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add material rental
		/// MaterialRentalsPostByMaterial_id materials/{material_id}/rentals/
		/// </summary>
		public async Task MaterialRentalsPostByMaterial_idAsync(string material_id, MaterialRentalsPostByMaterial_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checkout material rental
		/// MaterialRentalsPostByMaterial_id materials/{material_id}/rentals/checkout/
		/// </summary>
		public async Task MaterialRentalsPostByMaterial_idAsync(string material_id, MaterialRentalsPostByMaterial_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/checkout/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete material rental
		/// Delete rental for material
		/// MaterialRentalsDeleteByMaterial_idAndMaterial_rental_id materials/{material_id}/rentals/{material_rental_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialRentalsDeleteByMaterial_idAndMaterial_rental_idAsync(string material_id, string material_rental_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/"+ (material_rental_id==null? "" : Uri.EscapeDataString(material_rental_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show rental foor materi
		/// MaterialRentalsGetByMaterial_idAndMaterial_rental_id materials/{material_id}/rentals/{material_rental_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialRentalsGetByMaterial_idAndMaterial_rental_idAsync(string material_id, string material_rental_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/"+ (material_rental_id==null? "" : Uri.EscapeDataString(material_rental_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add material
		/// MaterialsPostByMaterial_idAndMaterial_rental_id materials/{material_id}/rentals/{material_rental_id}/
		/// </summary>
		public async Task MaterialsPostByMaterial_idAndMaterial_rental_idAsync(string material_id, string material_rental_id, MaterialsPostByMaterial_idAndMaterial_rental_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/"+ (material_rental_id==null? "" : Uri.EscapeDataString(material_rental_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Edit material rental
		/// Edit material rental
		/// MaterialRentalsPutByMaterial_idAndMaterial_rental_id materials/{material_id}/rentals/{material_rental_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> MaterialRentalsPutByMaterial_idAndMaterial_rental_idAsync(string material_id, string material_rental_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "materials/"+ (material_id==null? "" : Uri.EscapeDataString(material_id))+"/rentals/"+ (material_rental_id==null? "" : Uri.EscapeDataString(material_rental_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of payment term types
		/// PaymentTermTypesGet payment_term_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PaymentTermTypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_term_types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of 1 payment term type
		/// PaymentTermTypesGetByPayment_term_type_id payment_term_types/{payment_term_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PaymentTermTypesGetByPayment_term_type_idAsync(string payment_term_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_term_types/"+ (payment_term_type_id==null? "" : Uri.EscapeDataString(payment_term_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of payment terms
		/// PaymentTermsGet payment_terms
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PaymentTermsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_terms";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Details of 1 payment term
		/// PaymentTermsGetByPayment_term_id payment_terms/{payment_term_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PaymentTermsGetByPayment_term_idAsync(string payment_term_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payment_terms/"+ (payment_term_id==null? "" : Uri.EscapeDataString(payment_term_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if API is up and API key works
		/// PingGet ping
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> PingGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ping";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List products
		/// ProductsGetByNameAndProduct_numberAndBarcode products
		/// </summary>
		/// <param name="name">Used to filter on the `name` of the products</param>
		/// <param name="product_number">Used to filter on the `product_number` of the products</param>
		/// <param name="barcode">Used to filter on the `barcode` of the products</param>
		/// <returns>OK</returns>
		public async Task<string> ProductsGetByNameAndProduct_numberAndBarcodeAsync(string name, string product_number, string barcode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&product_number=" + (product_number==null? "" : Uri.EscapeDataString(product_number))+"&barcode=" + (barcode==null? "" : Uri.EscapeDataString(barcode));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new product
		/// ProductsPost products
		/// </summary>
		public async Task ProductsPostAsync(ProductsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a product
		/// ProductsDeleteByProduct_id products/{product_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProductsDeleteByProduct_idAsync(string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+ (product_id==null? "" : Uri.EscapeDataString(product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View single product
		/// ProductsGetByProduct_id products/{product_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProductsGetByProduct_idAsync(string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+ (product_id==null? "" : Uri.EscapeDataString(product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a product
		/// ProductsPutByProduct_id products/{product_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProductsPutByProduct_idAsync(string product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "products/"+ (product_id==null? "" : Uri.EscapeDataString(product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of project statuses
		/// ProjectStatusesGet project_statuses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectStatusesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_statuses";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about one contact type
		/// ProjectStatusesGetByProject_status_id project_statuses/{project_status_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectStatusesGetByProject_status_idAsync(string project_status_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "project_statuses/"+ (project_status_id==null? "" : Uri.EscapeDataString(project_status_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View list of projects
		/// ProjectsGetByShow_allAndContact_idAndProject_status_idAndProject_status_idsAndNameAndErp_project_idAndErp_task_idAndStart_time_gteAndStart_time_lteAndStart_time_eq projects
		/// </summary>
		/// <param name="show_all">Unless this is set to `true` only open projects will be shown</param>
		/// <param name="contact_id">Used to filter on the `contact_id` of the projects</param>
		/// <param name="project_status_id">Used to filter on the `project_status_id` of the projects</param>
		/// <param name="project_status_ids">Used to filter on the `project_status_id` of the projects (match any of the provided values)</param>
		/// <param name="name">Used to search on the `name` of the projects</param>
		/// <param name="erp_project_id">Used to search on the `erp_project_id` of the projects</param>
		/// <param name="erp_task_id">Used to search on the `erp_task_id` of the projects</param>
		/// <param name="start_time_gte">Show projects with start time after than this value</param>
		/// <param name="start_time_lte">Show projects with start time before this value</param>
		/// <param name="start_time_eq">Show only projects with start time on specific date</param>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByShow_allAndContact_idAndProject_status_idAndProject_status_idsAndNameAndErp_project_idAndErp_task_idAndStart_time_gteAndStart_time_lteAndStart_time_eqAsync(bool show_all, string contact_id, string project_status_id, string[] project_status_ids, string name, string erp_project_id, string erp_task_id, string start_time_gte, string start_time_lte, string start_time_eq, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects?show_all="+show_all+"&contact_id=" + (contact_id==null? "" : Uri.EscapeDataString(contact_id))+"&project_status_id=" + (project_status_id==null? "" : Uri.EscapeDataString(project_status_id))+"&"+String.Join("&", project_status_ids.Select(z => $"project_status_ids={Uri.EscapeDataString(z.ToString())}"))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&erp_project_id=" + (erp_project_id==null? "" : Uri.EscapeDataString(erp_project_id))+"&erp_task_id=" + (erp_task_id==null? "" : Uri.EscapeDataString(erp_task_id))+"&start_time_gte=" + (start_time_gte==null? "" : Uri.EscapeDataString(start_time_gte))+"&start_time_lte=" + (start_time_lte==null? "" : Uri.EscapeDataString(start_time_lte))+"&start_time_eq=" + (start_time_eq==null? "" : Uri.EscapeDataString(start_time_eq));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a project
		/// ProjectsPost projects
		/// </summary>
		public async Task ProjectsPostAsync(ProjectsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a project
		/// ProjectsDeleteByProject_id projects/{project_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsDeleteByProject_idAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View specific project
		/// ProjectsGetByProject_id projects/{project_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit a project
		/// ProjectsPutByProject_id projects/{project_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsPutByProject_idAsync(string project_id, ProjectsPutByProject_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Show list of files uploaded to project
		/// Used to show files uploaded to a project from wall post or form
		/// ProjectsGetByProject_id projects/{project_id}/files
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/files";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete file
		/// Delete file uploaded to a project from wall post or form
		/// ProjectsDeleteByProject_idAndFile_id projects/{project_id}/files/{file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsDeleteByProject_idAndFile_idAsync(string project_id, string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/files/"+ (file_id==null? "" : Uri.EscapeDataString(file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show file
		/// Show file uploaded to a project from wall post or form
		/// ProjectsGetByProject_idAndFile_id projects/{project_id}/files/{file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAndFile_idAsync(string project_id, string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/files/"+ (file_id==null? "" : Uri.EscapeDataString(file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit file
		/// Edit file uploaded to a project from wall post or form
		/// ProjectsPutByProject_idAndFile_id projects/{project_id}/files/{file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsPutByProject_idAndFile_idAsync(string project_id, string file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/files/"+ (file_id==null? "" : Uri.EscapeDataString(file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of project files uploaded to project
		/// Returns files belonging to the project, not uploaded from wall post or form
		/// ProjectsGetByProject_id projects/{project_id}/project_files
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/project_files";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete project file
		/// ProjectsDeleteByProject_file_idAndProject_id projects/{project_id}/project_files/{project_file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsDeleteByProject_file_idAndProject_idAsync(string project_file_id, string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/project_files/"+ (project_file_id==null? "" : Uri.EscapeDataString(project_file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show project file
		/// ProjectsGetByProject_idAndProject_file_id projects/{project_id}/project_files/{project_file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAndProject_file_idAsync(string project_id, string project_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/project_files/"+ (project_file_id==null? "" : Uri.EscapeDataString(project_file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit project file
		/// ProjectsPutByProject_idAndProject_file_id projects/{project_id}/project_files/{project_file_id}/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsPutByProject_idAndProject_file_idAsync(string project_id, string project_file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/project_files/"+ (project_file_id==null? "" : Uri.EscapeDataString(project_file_id))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of users added to project
		/// ProjectsGetByProject_id projects/{project_id}/users/
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByProject_idAsync(string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/users/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add user to project
		/// ProjectsPostByProject_id projects/{project_id}/users/
		/// </summary>
		public async Task ProjectsPostByProject_idAsync(string project_id, ProjectsPostByProject_idBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/users/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete user from project
		/// ProjectsDeleteByUser_idAndProject_id projects/{project_id}/users/{user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsDeleteByUser_idAndProject_idAsync(string user_id, string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/users/"+ (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View specific user assigned to project
		/// ProjectsGetByUser_idAndProject_id projects/{project_id}/users/{user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> ProjectsGetByUser_idAndProject_idAsync(string user_id, string project_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (project_id==null? "" : Uri.EscapeDataString(project_id))+"/users/"+ (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List stock_locations
		/// StockLocationsGetByName stock_locations
		/// </summary>
		/// <param name="name">Used to filter on the `name` of the stock_locations</param>
		/// <returns>OK</returns>
		public async Task<string> StockLocationsGetByNameAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stock_locations?name=" + (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new stock_locations
		/// StockLocationsPost stock_locations
		/// </summary>
		public async Task StockLocationsPostAsync(StockLocationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stock_locations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete location
		/// StockLocationsDeleteByLocation_id stock_locations/{location_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> StockLocationsDeleteByLocation_idAsync(string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stock_locations/"+ (location_id==null? "" : Uri.EscapeDataString(location_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View single location
		/// StockLocationsGetByLocation_id stock_locations/{location_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> StockLocationsGetByLocation_idAsync(string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stock_locations/"+ (location_id==null? "" : Uri.EscapeDataString(location_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit location
		/// StockLocationsPutByLocation_id stock_locations/{location_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> StockLocationsPutByLocation_idAsync(string location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stock_locations/"+ (location_id==null? "" : Uri.EscapeDataString(location_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List time entries
		/// TimeEntriesGetByUser_idAndForm_idAndProject_idAndGt_from_timeAndLt_from_timeAndGt_to_timeAndLt_to_timeAndLt_sumAndGt_sum time_entries
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntriesGetByUser_idAndForm_idAndProject_idAndGt_from_timeAndLt_from_timeAndGt_to_timeAndLt_to_timeAndLt_sumAndGt_sumAsync(string user_id, string form_id, string project_id, string gt_from_time, string lt_from_time, string gt_to_time, string lt_to_time, string lt_sum, string gt_sum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entries?user_id=" + (user_id==null? "" : Uri.EscapeDataString(user_id))+"&form_id=" + (form_id==null? "" : Uri.EscapeDataString(form_id))+"&project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&gt_from_time=" + (gt_from_time==null? "" : Uri.EscapeDataString(gt_from_time))+"&lt_from_time=" + (lt_from_time==null? "" : Uri.EscapeDataString(lt_from_time))+"&gt_to_time=" + (gt_to_time==null? "" : Uri.EscapeDataString(gt_to_time))+"&lt_to_time=" + (lt_to_time==null? "" : Uri.EscapeDataString(lt_to_time))+"&lt_sum=" + (lt_sum==null? "" : Uri.EscapeDataString(lt_sum))+"&gt_sum=" + (gt_sum==null? "" : Uri.EscapeDataString(gt_sum));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new time entry
		/// TimeEntriesPost time_entries
		/// </summary>
		public async Task TimeEntriesPostAsync(TimeEntriesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entries";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete time entry
		/// TimeEntriesDeleteByTime_entry_id time_entries/{time_entry_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntriesDeleteByTime_entry_idAsync(string time_entry_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entries/"+ (time_entry_id==null? "" : Uri.EscapeDataString(time_entry_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View time entry
		/// TimeEntriesGetByTime_entry_id time_entries/{time_entry_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntriesGetByTime_entry_idAsync(string time_entry_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entries/"+ (time_entry_id==null? "" : Uri.EscapeDataString(time_entry_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit time entry
		/// TimeEntriesPutByTime_entry_id time_entries/{time_entry_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntriesPutByTime_entry_idAsync(string time_entry_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entries/"+ (time_entry_id==null? "" : Uri.EscapeDataString(time_entry_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List possible time entry intervals
		/// TimeEntryIntervalsGet time_entry_intervals
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryIntervalsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_intervals";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View time entry interval
		/// TimeEntryIntervalsGetByTime_entry_interval_id time_entry_intervals/{time_entry_interval_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryIntervalsGetByTime_entry_interval_idAsync(string time_entry_interval_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_intervals/"+ (time_entry_interval_id==null? "" : Uri.EscapeDataString(time_entry_interval_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List time entries types
		/// TimeEntryTypesGet time_entry_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryTypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new time entry type
		/// TimeEntryTypesPost time_entry_types
		/// </summary>
		public async Task TimeEntryTypesPostAsync(TimeEntryTypesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_types";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete time entry type
		/// TimeEntryTypesDeleteByTime_entry_type_id time_entry_types/{time_entry_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryTypesDeleteByTime_entry_type_idAsync(string time_entry_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_types/"+ (time_entry_type_id==null? "" : Uri.EscapeDataString(time_entry_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View time entry type
		/// TimeEntryTypesGetByTime_entry_type_id time_entry_types/{time_entry_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryTypesGetByTime_entry_type_idAsync(string time_entry_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_types/"+ (time_entry_type_id==null? "" : Uri.EscapeDataString(time_entry_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit time entry type
		/// TimeEntryTypesPutByTime_entry_type_id time_entry_types/{time_entry_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryTypesPutByTime_entry_type_idAsync(string time_entry_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_types/"+ (time_entry_type_id==null? "" : Uri.EscapeDataString(time_entry_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List possible time entry unit types
		/// TimeEntryUnitTypesGet time_entry_unit_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryUnitTypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_unit_types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View time entry unit type
		/// TimeEntryUnitTypesGetByTime_entry_unit_type_id time_entry_unit_types/{time_entry_unit_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryUnitTypesGetByTime_entry_unit_type_idAsync(string time_entry_unit_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_unit_types/"+ (time_entry_unit_type_id==null? "" : Uri.EscapeDataString(time_entry_unit_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List possible time entry value types
		/// TimeEntryValueTypesGet time_entry_value_types
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryValueTypesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_value_types";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View time entry value type
		/// TimeEntryValueTypesGetByTime_entry_value_type_id time_entry_value_types/{time_entry_value_type_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> TimeEntryValueTypesGetByTime_entry_value_type_idAsync(string time_entry_value_type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_entry_value_types/"+ (time_entry_value_type_id==null? "" : Uri.EscapeDataString(time_entry_value_type_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of users in company
		/// UsersGetByFirst_nameAndLast_nameAndEmailAndStock_location_id users
		/// </summary>
		/// <param name="first_name">Used to filter on the `first_name` of the users</param>
		/// <param name="last_name">Used to filter on the `last_name` of the users</param>
		/// <param name="email">Used to filter on the `email` of the users</param>
		/// <param name="stock_location_id">Used to filter on the `stock_location_id` of the users</param>
		/// <returns>OK</returns>
		public async Task<string> UsersGetByFirst_nameAndLast_nameAndEmailAndStock_location_idAsync(string first_name, string last_name, string email, string stock_location_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?first_name=" + (first_name==null? "" : Uri.EscapeDataString(first_name))+"&last_name=" + (last_name==null? "" : Uri.EscapeDataString(last_name))+"&email=" + (email==null? "" : Uri.EscapeDataString(email))+"&stock_location_id=" + (stock_location_id==null? "" : Uri.EscapeDataString(stock_location_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add user to company
		/// UsersPost users
		/// </summary>
		public async Task UsersPostAsync(UsersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete user
		/// UsersDeleteByUser_id users/{user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> UsersDeleteByUser_idAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View user
		/// UsersGetByUser_id users/{user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> UsersGetByUser_idAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit user
		/// UsersPutByUser_id users/{user_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> UsersPutByUser_idAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vendor products
		/// VendorProductsGetByNameAndProduct_numberAndBarcodeAndVendor_id vendor_products
		/// </summary>
		/// <param name="name">Used to filter on the `name` of the vendor products</param>
		/// <param name="product_number">Used to filter on the `product_number` of the vendor products</param>
		/// <param name="barcode">Used to filter on the `barcode` of the vendor products</param>
		/// <param name="vendor_id">Used to filter on the `vendor_id` of the vendor products</param>
		/// <returns>OK</returns>
		public async Task<string> VendorProductsGetByNameAndProduct_numberAndBarcodeAndVendor_idAsync(string name, string product_number, string barcode, string vendor_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vendor_products?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&product_number=" + (product_number==null? "" : Uri.EscapeDataString(product_number))+"&barcode=" + (barcode==null? "" : Uri.EscapeDataString(barcode))+"&vendor_id=" + (vendor_id==null? "" : Uri.EscapeDataString(vendor_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View single vendor product
		/// VendorProductsGetByVendor_product_id vendor_products/{vendor_product_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> VendorProductsGetByVendor_product_idAsync(string vendor_product_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vendor_products/"+ (vendor_product_id==null? "" : Uri.EscapeDataString(vendor_product_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add wall comment
		/// WallCommentsPost wall_comments
		/// </summary>
		public async Task WallCommentsPostAsync(WallCommentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_comments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View wall comment
		/// WallCommentsGetByWall_comment_id wall_comments/{wall_comment_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> WallCommentsGetByWall_comment_idAsync(string wall_comment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_comments/"+ (wall_comment_id==null? "" : Uri.EscapeDataString(wall_comment_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View list of wall posts
		/// WallPostsGetByProject_idAndUser_id wall_posts
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> WallPostsGetByProject_idAndUser_idAsync(string project_id, string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_posts?project_id=" + (project_id==null? "" : Uri.EscapeDataString(project_id))+"&user_id=" + (user_id==null? "" : Uri.EscapeDataString(user_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a wall post
		/// WallPostsPost wall_posts
		/// </summary>
		public async Task WallPostsPostAsync(WallPostsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_posts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// View wall post
		/// WallPostsGetByWall_post_id wall_posts/{wall_post_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> WallPostsGetByWall_post_idAsync(string wall_post_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_posts/"+ (wall_post_id==null? "" : Uri.EscapeDataString(wall_post_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// See wall comments to a wall post
		/// WallPostsGetByWall_post_id wall_posts/{wall_post_id}/wall_comments
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> WallPostsGetByWall_post_idAsync(string wall_post_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "wall_posts/"+ (wall_post_id==null? "" : Uri.EscapeDataString(wall_post_id))+"/wall_comments";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClockingRecordsPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkin_latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkin_longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkout_latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Checkout_longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactsPostBody
	{
		
		/// <summary>
		/// Street address
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_types { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Cvr { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Format like eg. `28680133` or `046158971404`
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactsPutByContact_idBody
	{
		
		/// <summary>
		/// Street address
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_types { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Cvr { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// If company has integration to an ERP system, and the contacts are synchronized, this will be the ERP-systems ID of this contact
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Format like eg. `28680133` or `046158971404`
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpenseLinesPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Buying_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expense_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpensesPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Currency_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Delivery_date { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Short_text { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Supplier_invoice_number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FormFieldsPostBody
	{
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Comment { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Content_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string File_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_field_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_template_field_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Placement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FormsPostBody
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Form_template_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceLinesPostBody
	{
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Discount_percent { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Discount_text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Invoice_id { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoiceLinesPutByInvoice_line_idBody
	{
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Discount_percent { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Discount_text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Invoice_id { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Product_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoicesPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created_or_modified_gte { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_payment_term_id { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Invoice_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_draft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_locked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_offer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Issued_date { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Offer_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Payment_due_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Payment_term_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvoicesPutByInvoice_idBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_from { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_to { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_payment_term_id { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Invoice_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_draft { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_locked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_offer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Issued_date { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public System.Nullable<System.Int32> Offer_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Payment_due_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Payment_term_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaterialRentalsPostByMaterial_idBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Is_invoiced { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Material_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string To_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MaterialsPostByMaterial_idAndMaterial_rental_idBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Barcode { get; set; }
		
		public MaterialsPostByMaterial_idAndMaterial_rental_idBodyBilling_cysle Billing_cysle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Cost_price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_single_usage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Selling_price { get; set; }
	}
	
	public enum MaterialsPostByMaterial_idAndMaterial_rental_idBodyBilling_cysle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hourly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductsPostBody
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Barcode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Buying_price { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Product_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Selling_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectsPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_task_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_status_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start_time { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectsPutByProject_idBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Contact_id { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_project_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Erp_task_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_status_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Start_time { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectsPostByProject_idBody
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StockLocationsPostBody
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntriesPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Form_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_all_day { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
		
		/// <summary>
		/// Amount of seconds - should only be included when using is_all_day, otherwise will be calculated from from_time and to_time
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sum { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_type_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string To_time { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimeEntryTypesPostBody
	{
		
		/// <summary>
		/// Max length: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_interval_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time_entry_value_type_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UsersPostBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City_id { get; set; }
		
		/// <summary>
		/// Cost of salaries
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Cost_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Additional cost on this employee (pension, vacation etc.)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Extra_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Language_id { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Last_name { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Mobile { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string Mobile_countrycode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Password { get; set; }
		
		/// <summary>
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8)]
		public string Phone_countrycode { get; set; }
		
		/// <summary>
		/// If `true` the employee will receive an email receipt of every form submitted
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Receive_form_mails { get; set; }
		
		/// <summary>
		/// The price this employee costs per hour when working
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Sale_price { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string Street_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WallCommentsPostBody
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Wall_post_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WallPostsPostBody
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Project_id { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
