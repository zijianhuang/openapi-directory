//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstallStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeystoreChainItems
	{
		
		/// <summary>
		/// e.g. "CN=Admin"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		/// <summary>
		/// e.g. "Sun Jun 30 23:59:50 AEST 2019"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotAfter { get; set; }
		
		/// <summary>
		/// e.g. "Sun Jul 01 12:00:00 AEST 2018"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotBefore { get; set; }
		
		/// <summary>
		/// 18165099476682912368
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SerialNumber { get; set; }
		
		/// <summary>
		/// e.g. "CN=localhost"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeystoreInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeystoreItems[] Aliases { get; set; }
		
		/// <summary>
		/// False if truststore don't exist
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Exists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeystoreItems
	{
		
		/// <summary>
		/// e.g. "RSA"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// Keystore alias name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeystoreChainItems[] Chain { get; set; }
		
		/// <summary>
		/// e.g. "privateKey"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EntryType { get; set; }
		
		/// <summary>
		/// e.g. "PKCS#8"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationInfo
	{
		
		/// <summary>
		/// needed for configuration binding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bundle_location { get; set; }
		
		/// <summary>
		/// Title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Persistent Identity (PID)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Properties { get; set; }
		
		/// <summary>
		/// needed for configuraiton binding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Service_location { get; set; }
		
		/// <summary>
		/// Title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationProperties
	{
		
		/// <summary>
		/// Whether or not a user should be automatically added to CRX groups after successful authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsBoolean[] AddGroupMemberships { get; set; }
		
		/// <summary>
		/// The (optional) AssertionConsumerServiceURL attribute of an Authn request specifies the location to which a <Response> message MUST be sent to the requester.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] AssertionConsumerServiceURL { get; set; }
		
		/// <summary>
		/// Time tolerance in seconds to compensate clock skew between IDP and SP when validating Assertions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsLong[] ClockTolerance { get; set; }
		
		/// <summary>
		/// Whether or not to autocreate nonexisting users in the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsBoolean[] CreateUser { get; set; }
		
		/// <summary>
		/// A list of default CRX groups users are added to after successful authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsArray[] DefaultGroups { get; set; }
		
		/// <summary>
		/// The default location to redirect to after successful authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] DefaultRedirectUrl { get; set; }
		
		/// <summary>
		/// The digest algorithm to use when signing a SAML message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] DigestMethod { get; set; }
		
		/// <summary>
		/// The name of the attribute containing a list of CRX groups this user should be added to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] GroupMembershipAttribute { get; set; }
		
		/// <summary>
		/// Whether or not logout (dropCredentials) requests will be processed by this handler.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsBoolean[] HandleLogout { get; set; }
		
		/// <summary>
		/// The alias of the IdP's certificate in the global truststore. If this property is empty the authentication handler is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] IdpCertAlias { get; set; }
		
		/// <summary>
		/// Use an HTTP Redirect to the IDP URL instead of sending an AuthnRequest-message to request credentials. Use this for IDP initiated authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsBoolean[] IdpHttpRedirect { get; set; }
		
		/// <summary>
		/// URL of the IDP where the SAML Authentication Request should be sent to. If this property is empty the authentication handler is disabled. (idpUrl)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] IdpUrl { get; set; }
		
		/// <summary>
		/// The password of the key-store of the 'authentication-service' system user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] KeyStorePassword { get; set; }
		
		/// <summary>
		/// URL of the IDP where the SAML Logout Request should be sent to. If this property is empty the authentication handler won't handle logouts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] LogoutUrl { get; set; }
		
		/// <summary>
		/// The value of the NameIDPolicy format parameter to send in the AuthnRequest message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] NameIdFormat { get; set; }
		
		/// <summary>
		/// Repository path for which this authentication handler should be used by Sling. If this is empty, the authentication handler will be disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsArray[] Path { get; set; }
		
		/// <summary>
		/// OSGi Framework Service Ranking value to indicate the order in which to call this service. This is an int value where higher values designate higher precedence. Default value is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsLong[] Service.ranking { get; set; }
		
		/// <summary>
		/// ID which uniquely identifies this service provider with the identity provider. If this property is empty the authentication handler is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] ServiceProviderEntityId { get; set; }
		
		/// <summary>
		/// The signature algorithm to use when signing a SAML message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] SignatureMethod { get; set; }
		
		/// <summary>
		/// The alias of the SP's private key in the key-store of the 'authentication-service' system user. If this property is empty the handler will not be able to sign or decrypt messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] SpPrivateKeyAlias { get; set; }
		
		/// <summary>
		/// A list of attribute mappings (in the format \attributename=path/relative/to/user/node\) which should be stored in the repository on user-synchronization.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsArray[] SynchronizeAttributes { get; set; }
		
		/// <summary>
		/// Whether or not this authentication handler expects encrypted SAML assertions. If this is enabled the SP's private key must be provided in the key-store of the 'authentication-service' system user (see SP Private Key Alias above).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsBoolean[] UseEncryption { get; set; }
		
		/// <summary>
		/// The name of the attribute containing the user ID used to authenticate and create the user in the CRX repository. Leave empty to use the Subject:NameId.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] UserIDAttribute { get; set; }
		
		/// <summary>
		/// User intermediate path to store created users.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SamlConfigurationPropertyItemsString[] UserIntermediatePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationPropertyItemsArray
	{
		
		/// <summary>
		/// Property description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// True if property is set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_set { get; set; }
		
		/// <summary>
		/// property name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// True if optional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// Property type, 1=String, 3=long, 11=boolean, 12=Password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Type { get; set; }
		
		/// <summary>
		/// Property value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationPropertyItemsBoolean
	{
		
		/// <summary>
		/// Property description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// True if property is set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_set { get; set; }
		
		/// <summary>
		/// property name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// True if optional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// Property type, 1=String, 3=long, 11=boolean, 12=Password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Type { get; set; }
		
		/// <summary>
		/// Property value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationPropertyItemsLong
	{
		
		/// <summary>
		/// Property description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// True if property is set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_set { get; set; }
		
		/// <summary>
		/// property name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// True if optional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// Property type, 1=String, 3=long, 11=boolean, 12=Password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Type { get; set; }
		
		/// <summary>
		/// Property value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SamlConfigurationPropertyItemsString
	{
		
		/// <summary>
		/// Property description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// True if property is set
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_set { get; set; }
		
		/// <summary>
		/// property name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// True if optional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Optional { get; set; }
		
		/// <summary>
		/// Property type, 1=String, 3=long, 11=boolean, 12=Password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Type { get; set; }
		
		/// <summary>
		/// Property value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TruststoreInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TruststoreItems[] Aliases { get; set; }
		
		/// <summary>
		/// False if truststore don't exist
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Exists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TruststoreItems
	{
		
		/// <summary>
		/// Truststore alias name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntryType { get; set; }
		
		/// <summary>
		/// e.g. "CN=Admin"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		/// <summary>
		/// e.g. "Sun Jun 30 23:59:50 AEST 2019"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotAfter { get; set; }
		
		/// <summary>
		/// e.g. "Sun Jul 01 12:00:00 AEST 2018"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotBefore { get; set; }
		
		/// <summary>
		/// 18165099476682912368
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SerialNumber { get; set; }
		
		/// <summary>
		/// e.g. "CN=localhost"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// PostCqActions .cqactions.html
		/// </summary>
		public async Task PostCqActionsAsync(string authorizableId, string changelog, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ".cqactions.html?authorizableId=" + (authorizableId==null? "" : Uri.EscapeDataString(authorizableId))+"&changelog=" + (changelog==null? "" : Uri.EscapeDataString(changelog));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigAdobeGraniteSamlAuthenticationHandler apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config
		/// </summary>
		public async Task PostConfigAdobeGraniteSamlAuthenticationHandlerAsync(
					string keyStorePassword, 
					string keyStorePassword@TypeHint, 
					int service.ranking, 
					string service.ranking@TypeHint, 
					bool idpHttpRedirect, 
					string idpHttpRedirect@TypeHint, 
					bool createUser, 
					string createUser@TypeHint, 
					string defaultRedirectUrl, 
					string defaultRedirectUrl@TypeHint, 
					string userIDAttribute, 
					string userIDAttribute@TypeHint, 
					string defaultGroups, 
					string defaultGroups@TypeHint, 
					string idpCertAlias, 
					string idpCertAlias@TypeHint, 
					bool addGroupMemberships, 
					string addGroupMemberships@TypeHint, 
					string path, 
					string path@TypeHint, 
					string synchronizeAttributes, 
					string synchronizeAttributes@TypeHint, 
					int clockTolerance, 
					string clockTolerance@TypeHint, 
					string groupMembershipAttribute, 
					string groupMembershipAttribute@TypeHint, 
					string idpUrl, 
					string idpUrl@TypeHint, 
					string logoutUrl, 
					string logoutUrl@TypeHint, 
					string serviceProviderEntityId, 
					string serviceProviderEntityId@TypeHint, 
					string assertionConsumerServiceURL, 
					string assertionConsumerServiceURL@TypeHint, 
					bool handleLogout, 
					string handleLogout@TypeHint, 
					string spPrivateKeyAlias, 
					string spPrivateKeyAlias@TypeHint, 
					bool useEncryption, 
					string useEncryption@TypeHint, 
					string nameIdFormat, 
					string nameIdFormat@TypeHint, 
					string digestMethod, 
					string digestMethod@TypeHint, 
					string signatureMethod, 
					string signatureMethod@TypeHint, 
					string userIntermediatePath, 
					string userIntermediatePath@TypeHint, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config?keyStorePassword=" + (keyStorePassword==null? "" : Uri.EscapeDataString(keyStorePassword))+"&keyStorePassword@TypeHint=" + (keyStorePassword@TypeHint==null? "" : Uri.EscapeDataString(keyStorePassword@TypeHint))+"&service.ranking="+service.ranking+"&service.ranking@TypeHint=" + (service.ranking@TypeHint==null? "" : Uri.EscapeDataString(service.ranking@TypeHint))+"&idpHttpRedirect="+idpHttpRedirect+"&idpHttpRedirect@TypeHint=" + (idpHttpRedirect@TypeHint==null? "" : Uri.EscapeDataString(idpHttpRedirect@TypeHint))+"&createUser="+createUser+"&createUser@TypeHint=" + (createUser@TypeHint==null? "" : Uri.EscapeDataString(createUser@TypeHint))+"&defaultRedirectUrl=" + (defaultRedirectUrl==null? "" : Uri.EscapeDataString(defaultRedirectUrl))+"&defaultRedirectUrl@TypeHint=" + (defaultRedirectUrl@TypeHint==null? "" : Uri.EscapeDataString(defaultRedirectUrl@TypeHint))+"&userIDAttribute=" + (userIDAttribute==null? "" : Uri.EscapeDataString(userIDAttribute))+"&userIDAttribute@TypeHint=" + (userIDAttribute@TypeHint==null? "" : Uri.EscapeDataString(userIDAttribute@TypeHint))+"&"+String.Join("&", defaultGroups.Select(z => $"defaultGroups={Uri.EscapeDataString(z.ToString())}"))+"&defaultGroups@TypeHint=" + (defaultGroups@TypeHint==null? "" : Uri.EscapeDataString(defaultGroups@TypeHint))+"&idpCertAlias=" + (idpCertAlias==null? "" : Uri.EscapeDataString(idpCertAlias))+"&idpCertAlias@TypeHint=" + (idpCertAlias@TypeHint==null? "" : Uri.EscapeDataString(idpCertAlias@TypeHint))+"&addGroupMemberships="+addGroupMemberships+"&addGroupMemberships@TypeHint=" + (addGroupMemberships@TypeHint==null? "" : Uri.EscapeDataString(addGroupMemberships@TypeHint))+"&"+String.Join("&", path.Select(z => $"path={Uri.EscapeDataString(z.ToString())}"))+"&path@TypeHint=" + (path@TypeHint==null? "" : Uri.EscapeDataString(path@TypeHint))+"&"+String.Join("&", synchronizeAttributes.Select(z => $"synchronizeAttributes={Uri.EscapeDataString(z.ToString())}"))+"&synchronizeAttributes@TypeHint=" + (synchronizeAttributes@TypeHint==null? "" : Uri.EscapeDataString(synchronizeAttributes@TypeHint))+"&clockTolerance="+clockTolerance+"&clockTolerance@TypeHint=" + (clockTolerance@TypeHint==null? "" : Uri.EscapeDataString(clockTolerance@TypeHint))+"&groupMembershipAttribute=" + (groupMembershipAttribute==null? "" : Uri.EscapeDataString(groupMembershipAttribute))+"&groupMembershipAttribute@TypeHint=" + (groupMembershipAttribute@TypeHint==null? "" : Uri.EscapeDataString(groupMembershipAttribute@TypeHint))+"&idpUrl=" + (idpUrl==null? "" : Uri.EscapeDataString(idpUrl))+"&idpUrl@TypeHint=" + (idpUrl@TypeHint==null? "" : Uri.EscapeDataString(idpUrl@TypeHint))+"&logoutUrl=" + (logoutUrl==null? "" : Uri.EscapeDataString(logoutUrl))+"&logoutUrl@TypeHint=" + (logoutUrl@TypeHint==null? "" : Uri.EscapeDataString(logoutUrl@TypeHint))+"&serviceProviderEntityId=" + (serviceProviderEntityId==null? "" : Uri.EscapeDataString(serviceProviderEntityId))+"&serviceProviderEntityId@TypeHint=" + (serviceProviderEntityId@TypeHint==null? "" : Uri.EscapeDataString(serviceProviderEntityId@TypeHint))+"&assertionConsumerServiceURL=" + (assertionConsumerServiceURL==null? "" : Uri.EscapeDataString(assertionConsumerServiceURL))+"&assertionConsumerServiceURL@TypeHint=" + (assertionConsumerServiceURL@TypeHint==null? "" : Uri.EscapeDataString(assertionConsumerServiceURL@TypeHint))+"&handleLogout="+handleLogout+"&handleLogout@TypeHint=" + (handleLogout@TypeHint==null? "" : Uri.EscapeDataString(handleLogout@TypeHint))+"&spPrivateKeyAlias=" + (spPrivateKeyAlias==null? "" : Uri.EscapeDataString(spPrivateKeyAlias))+"&spPrivateKeyAlias@TypeHint=" + (spPrivateKeyAlias@TypeHint==null? "" : Uri.EscapeDataString(spPrivateKeyAlias@TypeHint))+"&useEncryption="+useEncryption+"&useEncryption@TypeHint=" + (useEncryption@TypeHint==null? "" : Uri.EscapeDataString(useEncryption@TypeHint))+"&nameIdFormat=" + (nameIdFormat==null? "" : Uri.EscapeDataString(nameIdFormat))+"&nameIdFormat@TypeHint=" + (nameIdFormat@TypeHint==null? "" : Uri.EscapeDataString(nameIdFormat@TypeHint))+"&digestMethod=" + (digestMethod==null? "" : Uri.EscapeDataString(digestMethod))+"&digestMethod@TypeHint=" + (digestMethod@TypeHint==null? "" : Uri.EscapeDataString(digestMethod@TypeHint))+"&signatureMethod=" + (signatureMethod==null? "" : Uri.EscapeDataString(signatureMethod))+"&signatureMethod@TypeHint=" + (signatureMethod@TypeHint==null? "" : Uri.EscapeDataString(signatureMethod@TypeHint))+"&userIntermediatePath=" + (userIntermediatePath==null? "" : Uri.EscapeDataString(userIntermediatePath))+"&userIntermediatePath@TypeHint=" + (userIntermediatePath@TypeHint==null? "" : Uri.EscapeDataString(userIntermediatePath@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigAemPasswordReset apps/system/config/com.shinesolutions.aem.passwordreset.Activator
		/// </summary>
		public async Task PostConfigAemPasswordResetAsync(string pwdreset.authorizables, string pwdreset.authorizables@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/com.shinesolutions.aem.passwordreset.Activator?"+String.Join("&", pwdreset.authorizables.Select(z => $"pwdreset.authorizables={Uri.EscapeDataString(z.ToString())}"))+"&pwdreset.authorizables@TypeHint=" + (pwdreset.authorizables@TypeHint==null? "" : Uri.EscapeDataString(pwdreset.authorizables@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigAemHealthCheckServlet apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck
		/// </summary>
		public async Task PostConfigAemHealthCheckServletAsync(string bundles.ignored, string bundles.ignored@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck?"+String.Join("&", bundles.ignored.Select(z => $"bundles.ignored={Uri.EscapeDataString(z.ToString())}"))+"&bundles.ignored@TypeHint=" + (bundles.ignored@TypeHint==null? "" : Uri.EscapeDataString(bundles.ignored@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigApacheFelixJettyBasedHttpService apps/system/config/org.apache.felix.http
		/// </summary>
		public async Task PostConfigApacheFelixJettyBasedHttpServiceAsync(
					bool org.apache.felix.https.nio, 
					string org.apache.felix.https.nio@TypeHint, 
					string org.apache.felix.https.keystore, 
					string org.apache.felix.https.keystore@TypeHint, 
					string org.apache.felix.https.keystore.password, 
					string org.apache.felix.https.keystore.password@TypeHint, 
					string org.apache.felix.https.keystore.key, 
					string org.apache.felix.https.keystore.key@TypeHint, 
					string org.apache.felix.https.keystore.key.password, 
					string org.apache.felix.https.keystore.key.password@TypeHint, 
					string org.apache.felix.https.truststore, 
					string org.apache.felix.https.truststore@TypeHint, 
					string org.apache.felix.https.truststore.password, 
					string org.apache.felix.https.truststore.password@TypeHint, 
					string org.apache.felix.https.clientcertificate, 
					string org.apache.felix.https.clientcertificate@TypeHint, 
					bool org.apache.felix.https.enable, 
					string org.apache.felix.https.enable@TypeHint, 
					string org.osgi.service.http.port.secure, 
					string org.osgi.service.http.port.secure@TypeHint, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/org.apache.felix.http?org.apache.felix.https.nio="+org.apache.felix.https.nio+"&org.apache.felix.https.nio@TypeHint=" + (org.apache.felix.https.nio@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.nio@TypeHint))+"&org.apache.felix.https.keystore=" + (org.apache.felix.https.keystore==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore))+"&org.apache.felix.https.keystore@TypeHint=" + (org.apache.felix.https.keystore@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore@TypeHint))+"&org.apache.felix.https.keystore.password=" + (org.apache.felix.https.keystore.password==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.password))+"&org.apache.felix.https.keystore.password@TypeHint=" + (org.apache.felix.https.keystore.password@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.password@TypeHint))+"&org.apache.felix.https.keystore.key=" + (org.apache.felix.https.keystore.key==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.key))+"&org.apache.felix.https.keystore.key@TypeHint=" + (org.apache.felix.https.keystore.key@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.key@TypeHint))+"&org.apache.felix.https.keystore.key.password=" + (org.apache.felix.https.keystore.key.password==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.key.password))+"&org.apache.felix.https.keystore.key.password@TypeHint=" + (org.apache.felix.https.keystore.key.password@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.keystore.key.password@TypeHint))+"&org.apache.felix.https.truststore=" + (org.apache.felix.https.truststore==null? "" : Uri.EscapeDataString(org.apache.felix.https.truststore))+"&org.apache.felix.https.truststore@TypeHint=" + (org.apache.felix.https.truststore@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.truststore@TypeHint))+"&org.apache.felix.https.truststore.password=" + (org.apache.felix.https.truststore.password==null? "" : Uri.EscapeDataString(org.apache.felix.https.truststore.password))+"&org.apache.felix.https.truststore.password@TypeHint=" + (org.apache.felix.https.truststore.password@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.truststore.password@TypeHint))+"&org.apache.felix.https.clientcertificate=" + (org.apache.felix.https.clientcertificate==null? "" : Uri.EscapeDataString(org.apache.felix.https.clientcertificate))+"&org.apache.felix.https.clientcertificate@TypeHint=" + (org.apache.felix.https.clientcertificate@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.clientcertificate@TypeHint))+"&org.apache.felix.https.enable="+org.apache.felix.https.enable+"&org.apache.felix.https.enable@TypeHint=" + (org.apache.felix.https.enable@TypeHint==null? "" : Uri.EscapeDataString(org.apache.felix.https.enable@TypeHint))+"&org.osgi.service.http.port.secure=" + (org.osgi.service.http.port.secure==null? "" : Uri.EscapeDataString(org.osgi.service.http.port.secure))+"&org.osgi.service.http.port.secure@TypeHint=" + (org.osgi.service.http.port.secure@TypeHint==null? "" : Uri.EscapeDataString(org.osgi.service.http.port.secure@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigApacheHttpComponentsProxyConfiguration apps/system/config/org.apache.http.proxyconfigurator.config
		/// </summary>
		public async Task PostConfigApacheHttpComponentsProxyConfigurationAsync(string proxy.host, string proxy.host@TypeHint, int proxy.port, string proxy.port@TypeHint, string proxy.exceptions, string proxy.exceptions@TypeHint, bool proxy.enabled, string proxy.enabled@TypeHint, string proxy.user, string proxy.user@TypeHint, string proxy.password, string proxy.password@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/org.apache.http.proxyconfigurator.config?proxy.host=" + (proxy.host==null? "" : Uri.EscapeDataString(proxy.host))+"&proxy.host@TypeHint=" + (proxy.host@TypeHint==null? "" : Uri.EscapeDataString(proxy.host@TypeHint))+"&proxy.port="+proxy.port+"&proxy.port@TypeHint=" + (proxy.port@TypeHint==null? "" : Uri.EscapeDataString(proxy.port@TypeHint))+"&"+String.Join("&", proxy.exceptions.Select(z => $"proxy.exceptions={Uri.EscapeDataString(z.ToString())}"))+"&proxy.exceptions@TypeHint=" + (proxy.exceptions@TypeHint==null? "" : Uri.EscapeDataString(proxy.exceptions@TypeHint))+"&proxy.enabled="+proxy.enabled+"&proxy.enabled@TypeHint=" + (proxy.enabled@TypeHint==null? "" : Uri.EscapeDataString(proxy.enabled@TypeHint))+"&proxy.user=" + (proxy.user==null? "" : Uri.EscapeDataString(proxy.user))+"&proxy.user@TypeHint=" + (proxy.user@TypeHint==null? "" : Uri.EscapeDataString(proxy.user@TypeHint))+"&proxy.password=" + (proxy.password==null? "" : Uri.EscapeDataString(proxy.password))+"&proxy.password@TypeHint=" + (proxy.password@TypeHint==null? "" : Uri.EscapeDataString(proxy.password@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigApacheSlingDavExServlet apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
		/// </summary>
		public async Task PostConfigApacheSlingDavExServletAsync(string alias, string alias@TypeHint, bool dav.create-absolute-uri, string dav.create-absolute-uri@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet?alias=" + (alias==null? "" : Uri.EscapeDataString(alias))+"&alias@TypeHint=" + (alias@TypeHint==null? "" : Uri.EscapeDataString(alias@TypeHint))+"&dav.create-absolute-uri="+dav.create-absolute-uri+"&dav.create-absolute-uri@TypeHint=" + (dav.create-absolute-uri@TypeHint==null? "" : Uri.EscapeDataString(dav.create-absolute-uri@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigApacheSlingReferrerFilter apps/system/config/org.apache.sling.security.impl.ReferrerFilter
		/// </summary>
		public async Task PostConfigApacheSlingReferrerFilterAsync(bool allow.empty, string allow.empty@TypeHint, string allow.hosts, string allow.hosts@TypeHint, string allow.hosts.regexp, string allow.hosts.regexp@TypeHint, string filter.methods, string filter.methods@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/org.apache.sling.security.impl.ReferrerFilter?allow.empty="+allow.empty+"&allow.empty@TypeHint=" + (allow.empty@TypeHint==null? "" : Uri.EscapeDataString(allow.empty@TypeHint))+"&allow.hosts=" + (allow.hosts==null? "" : Uri.EscapeDataString(allow.hosts))+"&allow.hosts@TypeHint=" + (allow.hosts@TypeHint==null? "" : Uri.EscapeDataString(allow.hosts@TypeHint))+"&allow.hosts.regexp=" + (allow.hosts.regexp==null? "" : Uri.EscapeDataString(allow.hosts.regexp))+"&allow.hosts.regexp@TypeHint=" + (allow.hosts.regexp@TypeHint==null? "" : Uri.EscapeDataString(allow.hosts.regexp@TypeHint))+"&filter.methods=" + (filter.methods==null? "" : Uri.EscapeDataString(filter.methods))+"&filter.methods@TypeHint=" + (filter.methods@TypeHint==null? "" : Uri.EscapeDataString(filter.methods@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostConfigApacheSlingGetServlet apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet
		/// </summary>
		public async Task PostConfigApacheSlingGetServletAsync(string json.maximumresults, string json.maximumresults@TypeHint, bool enable.html, string enable.html@TypeHint, bool enable.txt, string enable.txt@TypeHint, bool enable.xml, string enable.xml@TypeHint, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet?json.maximumresults=" + (json.maximumresults==null? "" : Uri.EscapeDataString(json.maximumresults))+"&json.maximumresults@TypeHint=" + (json.maximumresults@TypeHint==null? "" : Uri.EscapeDataString(json.maximumresults@TypeHint))+"&enable.html="+enable.html+"&enable.html@TypeHint=" + (enable.html@TypeHint==null? "" : Uri.EscapeDataString(enable.html@TypeHint))+"&enable.txt="+enable.txt+"&enable.txt@TypeHint=" + (enable.txt@TypeHint==null? "" : Uri.EscapeDataString(enable.txt@TypeHint))+"&enable.xml="+enable.xml+"&enable.xml@TypeHint=" + (enable.xml@TypeHint==null? "" : Uri.EscapeDataString(enable.xml@TypeHint));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetQuery bin/querybuilder.json
		/// </summary>
		public async Task GetQueryAsync(string path, float p.limit, string 1_property, string 1_property.value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bin/querybuilder.json?path=" + (path==null? "" : Uri.EscapeDataString(path))+"&p.limit="+p.limit+"&1_property=" + (1_property==null? "" : Uri.EscapeDataString(1_property))+"&1_property.value=" + (1_property.value==null? "" : Uri.EscapeDataString(1_property.value));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostQuery bin/querybuilder.json
		/// </summary>
		public async Task PostQueryAsync(string path, float p.limit, string 1_property, string 1_property.value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bin/querybuilder.json?path=" + (path==null? "" : Uri.EscapeDataString(path))+"&p.limit="+p.limit+"&1_property=" + (1_property==null? "" : Uri.EscapeDataString(1_property))+"&1_property.value=" + (1_property.value==null? "" : Uri.EscapeDataString(1_property.value));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostSetPassword crx/explorer/ui/setpassword.jsp
		/// </summary>
		public async Task PostSetPasswordAsync(string old, string plain, string verify, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/explorer/ui/setpassword.jsp?old=" + (old==null? "" : Uri.EscapeDataString(old))+"&plain=" + (plain==null? "" : Uri.EscapeDataString(plain))+"&verify=" + (verify==null? "" : Uri.EscapeDataString(verify));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetInstallStatus crx/packmgr/installstatus.jsp
		/// </summary>
		/// <returns>Retrieved CRX package manager install status</returns>
		public async Task<InstallStatus> GetInstallStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/packmgr/installstatus.jsp";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InstallStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostPackageService crx/packmgr/service.jsp
		/// </summary>
		public async Task PostPackageServiceAsync(string cmd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/packmgr/service.jsp?cmd=" + (cmd==null? "" : Uri.EscapeDataString(cmd));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetPackageManagerServlet crx/packmgr/service/script.html
		/// </summary>
		public async Task GetPackageManagerServletAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/packmgr/service/script.html";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostPackageUpdate crx/packmgr/update.jsp
		/// </summary>
		public async Task PostPackageUpdateAsync(string groupName, string packageName, string version, string path, string filter, string _charset_, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/packmgr/update.jsp?groupName=" + (groupName==null? "" : Uri.EscapeDataString(groupName))+"&packageName=" + (packageName==null? "" : Uri.EscapeDataString(packageName))+"&version=" + (version==null? "" : Uri.EscapeDataString(version))+"&path=" + (path==null? "" : Uri.EscapeDataString(path))+"&filter=" + (filter==null? "" : Uri.EscapeDataString(filter))+"&_charset_=" + (_charset_==null? "" : Uri.EscapeDataString(_charset_));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetCrxdeStatus crx/server/crx.default/jcr:root/.1.json
		/// </summary>
		/// <returns>CRXDE is enabled</returns>
		public async Task GetCrxdeStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "crx/server/crx.default/jcr:root/.1.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetPackage etc/packages/{group}/{name}-{version}.zip
		/// </summary>
		public async Task GetPackageAsync(string group, string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/packages/"+ (group==null? "" : Uri.EscapeDataString(group))+"/"+ (name==null? "" : Uri.EscapeDataString(name))+"-"+ (version==null? "" : Uri.EscapeDataString(version))+".zip";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetPackageFilter etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
		/// </summary>
		public async Task GetPackageFilterAsync(string group, string name, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/packages/"+ (group==null? "" : Uri.EscapeDataString(group))+"/"+ (name==null? "" : Uri.EscapeDataString(name))+"-"+ (version==null? "" : Uri.EscapeDataString(version))+".zip/jcr:content/vlt:definition/filter.tidy.2.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAgents etc/replication/agents.{runmode}.-1.json
		/// </summary>
		public async Task GetAgentsAsync(string runmode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/replication/agents."+ (runmode==null? "" : Uri.EscapeDataString(runmode))+".-1.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteAgent etc/replication/agents.{runmode}/{name}
		/// </summary>
		public async Task DeleteAgentAsync(string runmode, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/replication/agents."+ (runmode==null? "" : Uri.EscapeDataString(runmode))+"/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAgent etc/replication/agents.{runmode}/{name}
		/// </summary>
		public async Task GetAgentAsync(string runmode, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/replication/agents."+ (runmode==null? "" : Uri.EscapeDataString(runmode))+"/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostAgent etc/replication/agents.{runmode}/{name}
		/// </summary>
		public async Task PostAgentAsync(
					string runmode, 
					string name, 
					bool jcr:content/cq:distribute, 
					string jcr:content/cq:distribute@TypeHint, 
					string jcr:content/cq:name, 
					string jcr:content/cq:template, 
					bool jcr:content/enabled, 
					string jcr:content/jcr:description, 
					string jcr:content/jcr:lastModified, 
					string jcr:content/jcr:lastModifiedBy, 
					string jcr:content/jcr:mixinTypes, 
					string jcr:content/jcr:title, 
					string jcr:content/logLevel, 
					bool jcr:content/noStatusUpdate, 
					bool jcr:content/noVersioning, 
					float jcr:content/protocolConnectTimeout, 
					bool jcr:content/protocolHTTPConnectionClosed, 
					string jcr:content/protocolHTTPExpired, 
					string jcr:content/protocolHTTPHeaders, 
					string jcr:content/protocolHTTPHeaders@TypeHint, 
					string jcr:content/protocolHTTPMethod, 
					bool jcr:content/protocolHTTPSRelaxed, 
					string jcr:content/protocolInterface, 
					float jcr:content/protocolSocketTimeout, 
					string jcr:content/protocolVersion, 
					string jcr:content/proxyNTLMDomain, 
					string jcr:content/proxyNTLMHost, 
					string jcr:content/proxyHost, 
					string jcr:content/proxyPassword, 
					float jcr:content/proxyPort, 
					string jcr:content/proxyUser, 
					float jcr:content/queueBatchMaxSize, 
					string jcr:content/queueBatchMode, 
					float jcr:content/queueBatchWaitTime, 
					string jcr:content/retryDelay, 
					bool jcr:content/reverseReplication, 
					string jcr:content/serializationType, 
					string jcr:content/sling:resourceType, 
					string jcr:content/ssl, 
					string jcr:content/transportNTLMDomain, 
					string jcr:content/transportNTLMHost, 
					string jcr:content/transportPassword, 
					string jcr:content/transportUri, 
					string jcr:content/transportUser, 
					bool jcr:content/triggerDistribute, 
					bool jcr:content/triggerModified, 
					bool jcr:content/triggerOnOffTime, 
					bool jcr:content/triggerReceive, 
					bool jcr:content/triggerSpecific, 
					string jcr:content/userId, 
					string jcr:primaryType, 
					string :operation, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/replication/agents."+ (runmode==null? "" : Uri.EscapeDataString(runmode))+"/"+ (name==null? "" : Uri.EscapeDataString(name))+"&jcr:content/cq:distribute="+jcr:content/cq:distribute+"&jcr:content/cq:distribute@TypeHint=" + (jcr:content/cq:distribute@TypeHint==null? "" : Uri.EscapeDataString(jcr:content/cq:distribute@TypeHint))+"&jcr:content/cq:name=" + (jcr:content/cq:name==null? "" : Uri.EscapeDataString(jcr:content/cq:name))+"&jcr:content/cq:template=" + (jcr:content/cq:template==null? "" : Uri.EscapeDataString(jcr:content/cq:template))+"&jcr:content/enabled="+jcr:content/enabled+"&jcr:content/jcr:description=" + (jcr:content/jcr:description==null? "" : Uri.EscapeDataString(jcr:content/jcr:description))+"&jcr:content/jcr:lastModified=" + (jcr:content/jcr:lastModified==null? "" : Uri.EscapeDataString(jcr:content/jcr:lastModified))+"&jcr:content/jcr:lastModifiedBy=" + (jcr:content/jcr:lastModifiedBy==null? "" : Uri.EscapeDataString(jcr:content/jcr:lastModifiedBy))+"&jcr:content/jcr:mixinTypes=" + (jcr:content/jcr:mixinTypes==null? "" : Uri.EscapeDataString(jcr:content/jcr:mixinTypes))+"&jcr:content/jcr:title=" + (jcr:content/jcr:title==null? "" : Uri.EscapeDataString(jcr:content/jcr:title))+"&jcr:content/logLevel=" + (jcr:content/logLevel==null? "" : Uri.EscapeDataString(jcr:content/logLevel))+"&jcr:content/noStatusUpdate="+jcr:content/noStatusUpdate+"&jcr:content/noVersioning="+jcr:content/noVersioning+"&jcr:content/protocolConnectTimeout="+jcr:content/protocolConnectTimeout+"&jcr:content/protocolHTTPConnectionClosed="+jcr:content/protocolHTTPConnectionClosed+"&jcr:content/protocolHTTPExpired=" + (jcr:content/protocolHTTPExpired==null? "" : Uri.EscapeDataString(jcr:content/protocolHTTPExpired))+"&"+String.Join("&", jcr:content/protocolHTTPHeaders.Select(z => $"jcr:content/protocolHTTPHeaders={Uri.EscapeDataString(z.ToString())}"))+"&jcr:content/protocolHTTPHeaders@TypeHint=" + (jcr:content/protocolHTTPHeaders@TypeHint==null? "" : Uri.EscapeDataString(jcr:content/protocolHTTPHeaders@TypeHint))+"&jcr:content/protocolHTTPMethod=" + (jcr:content/protocolHTTPMethod==null? "" : Uri.EscapeDataString(jcr:content/protocolHTTPMethod))+"&jcr:content/protocolHTTPSRelaxed="+jcr:content/protocolHTTPSRelaxed+"&jcr:content/protocolInterface=" + (jcr:content/protocolInterface==null? "" : Uri.EscapeDataString(jcr:content/protocolInterface))+"&jcr:content/protocolSocketTimeout="+jcr:content/protocolSocketTimeout+"&jcr:content/protocolVersion=" + (jcr:content/protocolVersion==null? "" : Uri.EscapeDataString(jcr:content/protocolVersion))+"&jcr:content/proxyNTLMDomain=" + (jcr:content/proxyNTLMDomain==null? "" : Uri.EscapeDataString(jcr:content/proxyNTLMDomain))+"&jcr:content/proxyNTLMHost=" + (jcr:content/proxyNTLMHost==null? "" : Uri.EscapeDataString(jcr:content/proxyNTLMHost))+"&jcr:content/proxyHost=" + (jcr:content/proxyHost==null? "" : Uri.EscapeDataString(jcr:content/proxyHost))+"&jcr:content/proxyPassword=" + (jcr:content/proxyPassword==null? "" : Uri.EscapeDataString(jcr:content/proxyPassword))+"&jcr:content/proxyPort="+jcr:content/proxyPort+"&jcr:content/proxyUser=" + (jcr:content/proxyUser==null? "" : Uri.EscapeDataString(jcr:content/proxyUser))+"&jcr:content/queueBatchMaxSize="+jcr:content/queueBatchMaxSize+"&jcr:content/queueBatchMode=" + (jcr:content/queueBatchMode==null? "" : Uri.EscapeDataString(jcr:content/queueBatchMode))+"&jcr:content/queueBatchWaitTime="+jcr:content/queueBatchWaitTime+"&jcr:content/retryDelay=" + (jcr:content/retryDelay==null? "" : Uri.EscapeDataString(jcr:content/retryDelay))+"&jcr:content/reverseReplication="+jcr:content/reverseReplication+"&jcr:content/serializationType=" + (jcr:content/serializationType==null? "" : Uri.EscapeDataString(jcr:content/serializationType))+"&jcr:content/sling:resourceType=" + (jcr:content/sling:resourceType==null? "" : Uri.EscapeDataString(jcr:content/sling:resourceType))+"&jcr:content/ssl=" + (jcr:content/ssl==null? "" : Uri.EscapeDataString(jcr:content/ssl))+"&jcr:content/transportNTLMDomain=" + (jcr:content/transportNTLMDomain==null? "" : Uri.EscapeDataString(jcr:content/transportNTLMDomain))+"&jcr:content/transportNTLMHost=" + (jcr:content/transportNTLMHost==null? "" : Uri.EscapeDataString(jcr:content/transportNTLMHost))+"&jcr:content/transportPassword=" + (jcr:content/transportPassword==null? "" : Uri.EscapeDataString(jcr:content/transportPassword))+"&jcr:content/transportUri=" + (jcr:content/transportUri==null? "" : Uri.EscapeDataString(jcr:content/transportUri))+"&jcr:content/transportUser=" + (jcr:content/transportUser==null? "" : Uri.EscapeDataString(jcr:content/transportUser))+"&jcr:content/triggerDistribute="+jcr:content/triggerDistribute+"&jcr:content/triggerModified="+jcr:content/triggerModified+"&jcr:content/triggerOnOffTime="+jcr:content/triggerOnOffTime+"&jcr:content/triggerReceive="+jcr:content/triggerReceive+"&jcr:content/triggerSpecific="+jcr:content/triggerSpecific+"&jcr:content/userId=" + (jcr:content/userId==null? "" : Uri.EscapeDataString(jcr:content/userId))+"&jcr:primaryType=" + (jcr:primaryType==null? "" : Uri.EscapeDataString(jcr:primaryType))+"&:operation=" + (:operation==null? "" : Uri.EscapeDataString(:operation));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostTreeActivation etc/replication/treeactivation.html
		/// </summary>
		public async Task PostTreeActivationAsync(bool ignoredeactivated, bool onlymodified, string path, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/replication/treeactivation.html?ignoredeactivated="+ignoredeactivated+"&onlymodified="+onlymodified+"&path=" + (path==null? "" : Uri.EscapeDataString(path));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetTruststore etc/truststore/truststore.p12
		/// </summary>
		public async Task GetTruststoreAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "etc/truststore/truststore.p12";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetLoginPage libs/granite/core/content/login.html
		/// </summary>
		public async Task GetLoginPageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "libs/granite/core/content/login.html";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostAuthorizables libs/granite/security/post/authorizables
		/// </summary>
		public async Task PostAuthorizablesAsync(string authorizableId, string intermediatePath, string createUser, string createGroup, string rep:password, string profile/givenName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "libs/granite/security/post/authorizables?authorizableId=" + (authorizableId==null? "" : Uri.EscapeDataString(authorizableId))+"&intermediatePath=" + (intermediatePath==null? "" : Uri.EscapeDataString(intermediatePath))+"&createUser=" + (createUser==null? "" : Uri.EscapeDataString(createUser))+"&createGroup=" + (createGroup==null? "" : Uri.EscapeDataString(createGroup))+"&rep:password=" + (rep:password==null? "" : Uri.EscapeDataString(rep:password))+"&profile/givenName=" + (profile/givenName==null? "" : Uri.EscapeDataString(profile/givenName));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetTruststoreInfo libs/granite/security/truststore.json
		/// </summary>
		/// <returns>Retrieved AEM Truststore info</returns>
		public async Task<TruststoreInfo> GetTruststoreInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "libs/granite/security/truststore.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TruststoreInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostBundle system/console/bundles/{name}
		/// </summary>
		public async Task PostBundleAsync(string name, string action, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "system/console/bundles/"+ (name==null? "" : Uri.EscapeDataString(name))+"&action=" + (action==null? "" : Uri.EscapeDataString(action));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostSamlConfiguration system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
		/// </summary>
		/// <returns>Retrieved AEM SAML Configuration</returns>
		public async Task<string> PostSamlConfigurationAsync(
					bool post, 
					bool apply, 
					bool delete, 
					string action, 
					string $location, 
					string path, 
					int service.ranking, 
					string idpUrl, 
					string idpCertAlias, 
					bool idpHttpRedirect, 
					string serviceProviderEntityId, 
					string assertionConsumerServiceURL, 
					string spPrivateKeyAlias, 
					string keyStorePassword, 
					string defaultRedirectUrl, 
					string userIDAttribute, 
					bool useEncryption, 
					bool createUser, 
					bool addGroupMemberships, 
					string groupMembershipAttribute, 
					string defaultGroups, 
					string nameIdFormat, 
					string synchronizeAttributes, 
					bool handleLogout, 
					string logoutUrl, 
					int clockTolerance, 
					string digestMethod, 
					string signatureMethod, 
					string userIntermediatePath, 
					string propertylist, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler?post="+post+"&apply="+apply+"&delete="+delete+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&$location=" + ($location==null? "" : Uri.EscapeDataString($location))+"&"+String.Join("&", path.Select(z => $"path={Uri.EscapeDataString(z.ToString())}"))+"&service.ranking="+service.ranking+"&idpUrl=" + (idpUrl==null? "" : Uri.EscapeDataString(idpUrl))+"&idpCertAlias=" + (idpCertAlias==null? "" : Uri.EscapeDataString(idpCertAlias))+"&idpHttpRedirect="+idpHttpRedirect+"&serviceProviderEntityId=" + (serviceProviderEntityId==null? "" : Uri.EscapeDataString(serviceProviderEntityId))+"&assertionConsumerServiceURL=" + (assertionConsumerServiceURL==null? "" : Uri.EscapeDataString(assertionConsumerServiceURL))+"&spPrivateKeyAlias=" + (spPrivateKeyAlias==null? "" : Uri.EscapeDataString(spPrivateKeyAlias))+"&keyStorePassword=" + (keyStorePassword==null? "" : Uri.EscapeDataString(keyStorePassword))+"&defaultRedirectUrl=" + (defaultRedirectUrl==null? "" : Uri.EscapeDataString(defaultRedirectUrl))+"&userIDAttribute=" + (userIDAttribute==null? "" : Uri.EscapeDataString(userIDAttribute))+"&useEncryption="+useEncryption+"&createUser="+createUser+"&addGroupMemberships="+addGroupMemberships+"&groupMembershipAttribute=" + (groupMembershipAttribute==null? "" : Uri.EscapeDataString(groupMembershipAttribute))+"&"+String.Join("&", defaultGroups.Select(z => $"defaultGroups={Uri.EscapeDataString(z.ToString())}"))+"&nameIdFormat=" + (nameIdFormat==null? "" : Uri.EscapeDataString(nameIdFormat))+"&"+String.Join("&", synchronizeAttributes.Select(z => $"synchronizeAttributes={Uri.EscapeDataString(z.ToString())}"))+"&handleLogout="+handleLogout+"&logoutUrl=" + (logoutUrl==null? "" : Uri.EscapeDataString(logoutUrl))+"&clockTolerance="+clockTolerance+"&digestMethod=" + (digestMethod==null? "" : Uri.EscapeDataString(digestMethod))+"&signatureMethod=" + (signatureMethod==null? "" : Uri.EscapeDataString(signatureMethod))+"&userIntermediatePath=" + (userIntermediatePath==null? "" : Uri.EscapeDataString(userIntermediatePath))+"&"+String.Join("&", propertylist.Select(z => $"propertylist={Uri.EscapeDataString(z.ToString())}"));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostJmxRepository system/console/jmx/com.adobe.granite:type=Repository/op/{action}
		/// </summary>
		public async Task PostJmxRepositoryAsync(string action, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "system/console/jmx/com.adobe.granite:type=Repository/op/"+ (action==null? "" : Uri.EscapeDataString(action));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAemProductInfo system/console/status-productinfo.json
		/// </summary>
		public async Task GetAemProductInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "system/console/status-productinfo.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAemHealthCheck system/health
		/// </summary>
		public async Task GetAemHealthCheckAsync(string tags, bool combineTagsOr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "system/health?tags=" + (tags==null? "" : Uri.EscapeDataString(tags))+"&combineTagsOr="+combineTagsOr;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetAuthorizableKeystore {intermediatePath}/{authorizableId}.ks.json
		/// </summary>
		/// <returns>Retrieved Authorizable Keystore info</returns>
		public async Task<string> GetAuthorizableKeystoreAsync(string intermediatePath, string authorizableId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (intermediatePath==null? "" : Uri.EscapeDataString(intermediatePath))+"/"+ (authorizableId==null? "" : Uri.EscapeDataString(authorizableId))+".ks.json";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetKeystore {intermediatePath}/{authorizableId}/keystore/store.p12
		/// </summary>
		public async Task GetKeystoreAsync(string intermediatePath, string authorizableId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (intermediatePath==null? "" : Uri.EscapeDataString(intermediatePath))+"/"+ (authorizableId==null? "" : Uri.EscapeDataString(authorizableId))+"/keystore/store.p12";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostPath {path}/
		/// </summary>
		public async Task PostPathAsync(string path, string jcr:primaryType, string :name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (path==null? "" : Uri.EscapeDataString(path))+"/&jcr:primaryType=" + (jcr:primaryType==null? "" : Uri.EscapeDataString(jcr:primaryType))+"&:name=" + (:name==null? "" : Uri.EscapeDataString(:name));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteNode {path}/{name}
		/// </summary>
		public async Task DeleteNodeAsync(string path, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (path==null? "" : Uri.EscapeDataString(path))+"/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetNode {path}/{name}
		/// </summary>
		public async Task GetNodeAsync(string path, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (path==null? "" : Uri.EscapeDataString(path))+"/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PostNodeRw {path}/{name}.rw.html
		/// </summary>
		public async Task PostNodeRwAsync(string path, string name, string addMembers, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (path==null? "" : Uri.EscapeDataString(path))+"/"+ (name==null? "" : Uri.EscapeDataString(name))+".rw.html&addMembers=" + (addMembers==null? "" : Uri.EscapeDataString(addMembers));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
