//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Fault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Accurate_programme_time
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Accurate_time : dateRange
	{
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Affected_by
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilter[] Affected_byFilter { get; set; }
	}
	
	public class Affected_byFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilterFilter[] Affected_byFilterFilter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class Affected_byFilterFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Alternate_images_mixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Alternate_images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ancestor_titles
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Brand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Episode { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Ancestor_titlesSeries[] Ancestor_titlesSeries { get; set; }
	}
	
	public class Ancestor_titlesSeries
	{
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ancestors : referenceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Href_deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Result_type_deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ancestors_titles
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Brand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Episode { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Ancestors_titlesSeries[] Ancestors_titlesSeries { get; set; }
	}
	
	public class Ancestors_titlesSeries
	{
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Availability
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DateRange Accurate_programme_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Actual_start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Availability-debug Availability-debug { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public availability_of[] Availability_of { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Availability_type Availability_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DateRange Media_availability_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Media_set { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Revocation_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled_time Scheduled_time { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Availability_debug
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PidReference Availability_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Media_profile_groups Media_profile_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceReference Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Territory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PidReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Media_profile_groups
	{
		
		[System.Runtime.Serialization.DataMember()]
		public media_profile_group[] Media_profile_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Media_profile_group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Territory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Transport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceReference
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Availability_of
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scheduled_time
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Availability_debug
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PidReference Availability_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Media_profile_groups Media_profile_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceReference Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Territory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Availability_mixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Availability_mixinAvailability[] Availability_mixinAvailability { get; set; }
	}
	
	public class Availability_mixinAvailability
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Availability_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ondemand = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		simulcast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webcast = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_media_sets
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Media_sets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_mixins
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Availabilities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_simulcasts
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Available_versions_element Available_versions_element { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_versions_element
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Available_versions_elementVersion[] Available_versions_elementVersion { get; set; }
	}
	
	public class Available_versions_elementVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Available_mixins Available_mixins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Competition_warning { get; set; }
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Guidance_warnings Guidance_warnings { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Available_versions_elementVersionTypes[] Available_versions_elementVersionTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Available_versions_elementVersionVersion[] Available_versions_elementVersionVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Guidance_warnings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Warnings { get; set; }
	}
	
	public class Available_versions_elementVersionTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Type { get; set; }
	}
	
	public class Available_versions_elementVersionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Available_mixins Available_mixins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Competition_warning { get; set; }
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Guidance_warnings Guidance_warnings { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Available_versions_elementVersionVersionTypes[] Available_versions_elementVersionVersionTypes { get; set; }
	}
	
	public class Available_versions_elementVersionVersionTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_versions
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Available_versions_element Available_versions_element { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_versions_media_sets
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Media_sets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Available_webcasts
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Available_versions_element Available_versions_element { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Brand
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Availability_mixin Availability_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Expected_child_count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Franchises { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupingsType Genre_groupings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_embeddable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Items_for { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Previous_next_mixin Previous_next_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_formats Programme_formats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_type Programme_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_date_group Release_date_group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributions_mixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Contributions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenreGroupingsType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public genre_group[] Genre_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_group
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Genres { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Identifiers
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public identifier[] Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Identifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Image_link
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Images_mixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Master_brand_link
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Master_brand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Previous_next_mixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Previous_next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Programme_formats
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public format[] Format { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Format
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Programme_type
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Related_links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public related_link[] Related_link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Related_link
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_external { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Synopses
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Long { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Medium { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Release_date_group
	{
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Release_date { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]{4}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Release_year { get; set; }
		
		/// <summary>
		/// Pattern: [0-9]{4}-[0-9]{2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Release_year_month { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Broadcast
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestor_titles Ancestor_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestors_titles Ancestors_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public pidReference[] Broadcast_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_audio_described { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_blanked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_critical { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_simulcast { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BroadcastTime Published_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceReference Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tx_time Tx_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PidReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ids
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public id[] Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Id
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Authority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tx_time
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Credits_showing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BroadcastTime : dateRange
	{
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Broadcast_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Broadcaster
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
		
		/// <summary>
		/// Pattern: [a-z0-9A-Z_\.\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Chapter
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Offsets
	{
		
		[System.Runtime.Serialization.DataMember()]
		public offset_in[] Offset_in { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Offset_in
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Position { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Programme { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Play_events
	{
		
		[System.Runtime.Serialization.DataMember()]
		public play_event[] Play_event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Play_event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public played_in_links[] Played_in_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Played_in_links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Played_in { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Clip
	{
		
		/// <summary>
		/// Pattern: [a-z0-9_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Advertising_allowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestor_titles Ancestor_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Ancestors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestors_titles Ancestors_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Availability_mixin Availability_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PidReference Clip_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupingsType Genre_groupings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupsType Genre_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_embeddable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Items_for { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Media_type Media_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Original_version_duration Original_version_duration { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Previous_next_mixin Previous_next_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_formats Programme_formats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_date_group Release_date_group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Versions_mixin Versions_mixin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Original_version_duration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Versions_mixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Available_simulcasts Available_simulcasts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Available_versions Available_versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Available_webcasts Available_webcasts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public versions[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Versions
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Version_availability_mixin Version_availability_mixin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_availability_mixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Version_availability_mixinVersion[] Version_availability_mixinVersion { get; set; }
	}
	
	public class Version_availability_mixinVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Version_availability_mixinVersionAvailabilities[] Version_availability_mixinVersionAvailabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Competition_warning { get; set; }
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Guidance_warnings Guidance_warnings { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Version_availability_mixinVersionTypes[] Version_availability_mixinVersionTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Version_availability_mixinVersionVersion[] Version_availability_mixinVersionVersion { get; set; }
	}
	
	public class Version_availability_mixinVersionAvailabilities
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public version_availability[] Version_availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_availability
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Availability { get; set; }
	}
	
	public class Version_availability_mixinVersionTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Type { get; set; }
	}
	
	public class Version_availability_mixinVersionVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Version_availability_mixinVersionVersionAvailabilities[] Version_availability_mixinVersionVersionAvailabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Competition_warning { get; set; }
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Guidance_warnings Guidance_warnings { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Version_availability_mixinVersionVersionTypes[] Version_availability_mixinVersionVersionTypes { get; set; }
	}
	
	public class Version_availability_mixinVersionVersionAvailabilities
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public version_availability[] Version_availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_availability
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Availability { get; set; }
	}
	
	public class Version_availability_mixinVersionVersionTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Clip_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Collection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class For_programmes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public for_programme[] For_programme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class For_programme
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scheduled
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Context
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Cascades_to_descendants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributions_mixin_contribution
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Contribution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributions_mixin_contributor
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Contributor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributions_mixin_contributor_name
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributor
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Contributor_name Contributor_name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public contributor_to[] Contributor_to { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Disambiguation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributor_name
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contributor_to
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Credits_time
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Squeeze_end { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Squeeze_start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Datum { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Date_range
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dependency_on
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deprecated
	{
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replacement_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecatedReferenceElement : referenceAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprecationAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deprecations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public deprecated[] Deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deprecated
	{
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replacement_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dimensions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Embargoed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@false = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Episode
	{
		
		/// <summary>
		/// Pattern: [a-z0-9_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Advertising_allowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestor_titles Ancestor_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Ancestors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestors_titles Ancestors_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Availability_mixin Availability_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PidReference Episode_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupingsType Genre_groupings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupsType Genre_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Has_guidance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_embeddable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_stacked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Items_for { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Media_type Media_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Original_version_duration Original_version_duration { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Presentation_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Previous_next_mixin Previous_next_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_formats Programme_formats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_type Programme_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_date_group Release_date_group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Versions_mixin Versions_mixin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Episode_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Data Data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Error-name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expr { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Format-string { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Retryable { get; set; }
		
		/// <summary>
		/// The XQuery language version.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Xquery-version Xquery-version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Errors
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Error Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Feed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Deprecations Deprecations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filters Filters { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mixins Mixins { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sorts Sorts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public filter[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Unstable_filters Unstable_filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Default { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Depends_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Multiple_values { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public option[] Option { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public prohibits[] Prohibits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Prohibits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsFilter[] ProhibitsFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixin[] ProhibitsMixin { get; set; }
	}
	
	public class ProhibitsFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinFilter[] ProhibitsMixinFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinMixin[] ProhibitsMixinMixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinMixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Unstable_filters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public filter[] Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Default { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Depends_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Min_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Multiple_values { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public option[] Option { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public prohibits[] Prohibits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Option
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Prohibits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsFilter[] ProhibitsFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixin[] ProhibitsMixin { get; set; }
	}
	
	public class ProhibitsFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinFilter[] ProhibitsMixinFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinMixin[] ProhibitsMixinMixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinMixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mixins
	{
		
		[System.Runtime.Serialization.DataMember()]
		public mixin[] Mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Unstable_mixins Unstable_mixins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public affected_by[] Affected_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public dependency_on[] Dependency_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Depends_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public prohibits[] Prohibits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Affected_by
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilter[] Affected_byFilter { get; set; }
	}
	
	public class Affected_byFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilterFilter[] Affected_byFilterFilter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class Affected_byFilterFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dependency_on
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Prohibits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsFilter[] ProhibitsFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixin[] ProhibitsMixin { get; set; }
	}
	
	public class ProhibitsFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinFilter[] ProhibitsMixinFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinMixin[] ProhibitsMixinMixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinMixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Unstable_mixins
	{
		
		[System.Runtime.Serialization.DataMember()]
		public mixin[] Mixin { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public affected_by[] Affected_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public dependency_on[] Dependency_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Depends_on { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public prohibits[] Prohibits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Affected_by
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilter[] Affected_byFilter { get; set; }
	}
	
	public class Affected_byFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Affected_byFilterFilter[] Affected_byFilterFilter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class Affected_byFilterFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dependency_on
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Prohibits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsFilter[] ProhibitsFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixin[] ProhibitsMixin { get; set; }
	}
	
	public class ProhibitsFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixin
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinFilter[] ProhibitsMixinFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProhibitsMixinMixin[] ProhibitsMixinMixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	public class ProhibitsMixinMixin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sorts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public sort[] Sort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Unstable_sorts Unstable_sorts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sort
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Is_default { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public sort_direction[] Sort_direction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sort_direction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Is_default { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Unstable_sorts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public sort[] Sort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sort
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deprecated_since { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Guaranteed_until { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Is_default { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replaced_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public sort_direction[] Sort_direction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sort_direction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Is_default { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Feeds
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Deployment_root { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Deprecations Deprecations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public feed[] Feed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Feed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Deprecations Deprecations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filters Filters { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mixins Mixins { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Rel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_status_type Release_status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sorts Sorts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Focus_point
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> X { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Franchise
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Franchises : referenceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Href_deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Result_type_deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Gallery
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenreGroupsType : deprecatedReferenceElement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public genre_group[] Genre_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_group
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Genres { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_groupings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public genre_group[] Genre_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_group
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Genres { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_groups : deprecatedReferenceElement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public genre_group[] Genre_group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Genre_group
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Genres { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group_body
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Highlight
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Image
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Author { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Shoot_date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Source_asset Source_asset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Template_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Source_asset
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Dimensions Dimensions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Focus_point Focus_point { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mime_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Size Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Size
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Item
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Item_of : referenceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Href_deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Result_type_deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Items_for : referenceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Href_deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Result_type_deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Master_brand
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Colour { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Competition_warning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Master_brand_date_range { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Mid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Media_availability_time
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Media_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Video = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Audio = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Music
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Next
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Nitro
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Deprecations Deprecations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Mixins Mixins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Pagination Pagination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Results Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Sorts Sorts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Pagination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Next Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Previous Previous { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Previous
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Results
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Availability Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Brand Brand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Broadcast Broadcast { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item Chapter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Clip Clip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group-body Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributor Contributor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Episode Episode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group-body Franchise { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group-body Gallery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item Highlight { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand Master_brand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> More_than { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item Music { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item Other { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Page { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Promotion Promotion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group-body Season { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Series Series { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Service Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Item Speech { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Version_group Version_group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Window Window { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group_body
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group_body
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group_body
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Promotion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Context Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Promoted_by { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Promoted_for { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PidReference Promotion_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group_body
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Series
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestor_titles Ancestor_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Ancestors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestors_titles Ancestors_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Availability_mixin Availability_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Expected_child_count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GenreGroupingsType Genre_groupings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_embeddable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Items_for { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Previous_next_mixin Previous_next_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_formats Programme_formats { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Programme_type Programme_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Release_date_group Release_date_group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PidReference Series_of { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Service
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DateRange Date_range { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_concrete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_downloadable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_streamable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Media_type Media_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Pattern: [a-z0-9A-Z_\.\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_group
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Window
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DateRange Accurate_programme_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestor_titles Ancestor_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ancestors_titles Ancestors_titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Image_link Image_link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DateRange Media_availability_time { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled_publication_rights Scheduled_publication_rights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled_time Scheduled_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceReference Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public pidReference[] Window_of { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scheduled_publication_rights
	{
		
		[System.Runtime.Serialization.DataMember()]
		public publication_rights[] Publication_rights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Publication_rights
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Territory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Transport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PidReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Other
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Promotion_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Published_time : dateRange
	{
		
		/// <summary>
		/// Pattern: ^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Reference : referenceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Href_deprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Result_type_deprecated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceAttributes
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Release_status_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alpha = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		beta = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supported = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deprecated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Season
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alternate_images_mixin Alternate_images_mixin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Embargoed Embargoed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public For_programmes For_programmes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Master_brand_link Master_brand_link { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Related_links Related_links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Scheduled Scheduled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Updated_time { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Series_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Speech
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=1)]
		public string Catalogue_number { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Contributions_mixin Contributions_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Identifiers Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ids Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Images_mixin Images_mixin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Reference Item_of { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Music_code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Offsets Offsets { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Play_events Play_events { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Publisher { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Record_label { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength=4)]
		public string Recording_date { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Release_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Snippet_url { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Source_media { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Synopses Synopses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_number { get; set; }
		
		/// <summary>
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8, MinimumLength=1)]
		public string Track_side { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Types_with_id
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Version_types_with_id
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_types { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warning_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning_items
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Warning_itemsWarning[] Warning_itemsWarning { get; set; }
	}
	
	public class Warning_itemsWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning_itemsWarningWarning[] Warning_itemsWarningWarning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warning_code { get; set; }
	}
	
	public class Warning_itemsWarningWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warning_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning_text
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning_texts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Warning_textsWarning_text[] Warning_textsWarning_text { get; set; }
	}
	
	public class Warning_textsWarning_text
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Length { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Warning_textsWarning_textWarning_text[] Warning_textsWarning_textWarning_text { get; set; }
	}
	
	public class Warning_textsWarning_textWarning_text
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warnings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public warning[] Warning { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public warning_text[] Warning_text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Short_description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Warning_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Warning_text
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string #text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Window_of
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		/// <summary>
		/// Pattern: ([a-z0-9\.\-]+|.*PID.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Result_type { get; set; }
	}
	
	/// <summary>
	/// The XQuery language version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Xquery_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.0-ml")]
		1_0_ml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0.9-ml")]
		0_9_ml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1.0")]
		1_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XSLT = 3,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get API definition
		/// Get API definition
		/// GetAPI 
		/// </summary>
		/// <returns>Metadata response</returns>
		public async Task GetAPIAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Discover details of on-demand availability for programmes and their versions
		/// Discover details of on-demand availability for programmes and their versions
		/// ListAvailability availabilities
		/// </summary>
		/// <param name="sort">Sorts:
		///* scheduled_start: sort chronologically by scheduled start time/date, ascending
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="availability">filter for subset of availabilities</param>
		/// <param name="descendants_of">filter for subset of availabilities that have PID as ancestor</param>
		/// <param name="media_set">filter for subset of availabilities with media set</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="territory">filter for availabilities in given territory</param>
		/// <param name="debug">Turn on debug information (undocumented)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListAvailabilityAsync(string sort, string sort_direction, string availability, string descendants_of, string media_set, int page, int page_size, string territory, bool debug, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "availabilities?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", availability.Select(z => $"availability={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", descendants_of.Select(z => $"descendants_of={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", media_set.Select(z => $"media_set={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", territory.Select(z => $"territory={Uri.EscapeDataString(z.ToString())}"))+"&debug="+debug;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Build schedules and find metadata for TV and radio broadcasts
		/// Fetch metadata about linear Broadcasts and Services, allowing the generation of Television and Radio schedules and other datasets for broadcast items. Use /schedules instead of this feed as it is more efficient. Broadcasts will be deprecated in the future.
		/// ListBroadcasts broadcasts
		/// </summary>
		/// <param name="sort">Sorts:
		///* start_date: sort chronologically by scheduled start time/date, ascending
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* titles: return ancestor programme titles
		///</param>
		/// <param name="authority">filter for subset of broadcasts that have given authority</param>
		/// <param name="descendants_of">filter for subset of broadcasts that are descendants of the given programme PID</param>
		/// <param name="end_from">filter for subset of broadcasts that end on or later than the specified datetime</param>
		/// <param name="end_to">filter for subset of broadcasts that end on or earlier than the specified datetime</param>
		/// <param name="format">filter for subset of broadcasts that are classified in the given format ID</param>
		/// <param name="genre">filter for subset of broadcasts that are classified in the given genre ID</param>
		/// <param name="id">filter for subset of broadcasts that have given identifier</param>
		/// <param name="item">filter for subset of broadcasts with the given item performed on it</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="people">filter for subset of broadcasts that have given contributor</param>
		/// <param name="pid">filter for subset of broadcasts having given PID</param>
		/// <param name="q">filter for subset of broadcasts matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="schedule_day">filter for subset of broadcasts that start on the specified day (BBC time)</param>
		/// <param name="schedule_day_from">filter for subset of broadcasts that start on or after the specified day (BBC time)</param>
		/// <param name="schedule_day_to">filter for subset of broadcasts that start on or before the specified day (BBC time)</param>
		/// <param name="service_master_brand">filter for subset of broadcasts with given service master brand</param>
		/// <param name="sid">filter for subset of broadcasts that are on the specified linear service</param>
		/// <param name="start_from">filter for subset of broadcasts that start on or later than the specified datetime</param>
		/// <param name="start_to">filter for subset of broadcasts that start on or earlier than the specified datetime</param>
		/// <param name="version">filter for subset of broadcasts with given PID as their parent version</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListBroadcastsAsync(
					string sort, 
					string sort_direction, 
					string mixin, 
					string authority, 
					string descendants_of, 
					System.DateTimeOffset end_from, 
					System.DateTimeOffset end_to, 
					string format, 
					string genre, 
					string id, 
					string item, 
					int page, 
					int page_size, 
					string people, 
					string pid, 
					string q, 
					System.DateTimeOffset schedule_day, 
					System.DateTimeOffset schedule_day_from, 
					System.DateTimeOffset schedule_day_to, 
					string service_master_brand, 
					string sid, 
					System.DateTimeOffset start_from, 
					System.DateTimeOffset start_to, 
					string version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "broadcasts?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", authority.Select(z => $"authority={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", descendants_of.Select(z => $"descendants_of={Uri.EscapeDataString(z.ToString())}"))+"&end_from=" + end_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_to=" + end_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", format.Select(z => $"format={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", genre.Select(z => $"genre={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", id.Select(z => $"id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", item.Select(z => $"item={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&people=" + (people==null? "" : Uri.EscapeDataString(people))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&schedule_day=" + schedule_day.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&schedule_day_from=" + schedule_day_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&schedule_day_to=" + schedule_day_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", service_master_brand.Select(z => $"service_master_brand={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", sid.Select(z => $"sid={Uri.EscapeDataString(z.ToString())}"))+"&start_from=" + start_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&start_to=" + start_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", version.Select(z => $"version={Uri.EscapeDataString(z.ToString())}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find metadata for curated groups: seasons, collections, galleries or franchises
		/// Long-lived curated collections of programmes and more, including Collections, Seasons, Franchises and Galleries
		/// ListGroups groups
		/// </summary>
		/// <param name="sort">Sorts:
		///* pid: sort alphabetically by PID
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* alternate_images: mixin to return the alternate images for a group
		///* group_for: mixin to return links to programme entities that group belongs to
		///* images: mixin to add image information for a group
		///* related_links: mixin to return related links for the group
		///</param>
		/// <param name="for_descendants_of">filter for groups related to given programme or its descendants</param>
		/// <param name="for_programme">filter for subset of groups directly related to a given programme</param>
		/// <param name="group">filter for subset of groups which belong to the given group pid</param>
		/// <param name="group_type">filter for subset of groups that have the given group type</param>
		/// <param name="member">filter for subset of groups which contain an entity with the given pid as a member</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for groups by partner ID</param>
		/// <param name="partner_pid">filter for groups by partner PID</param>
		/// <param name="pid">filter for subset of seasons, collections, galleries or franchises having given PID</param>
		/// <param name="q">filter for subset of groups matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="embargoed">Control return of embargoed items (undocumented)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListGroupsAsync(
					string sort, 
					string sort_direction, 
					string mixin, 
					string for_descendants_of, 
					string for_programme, 
					string group, 
					string group_type, 
					string member, 
					int page, 
					int page_size, 
					string partner_id, 
					string partner_pid, 
					string pid, 
					string q, 
					string embargoed, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&for_descendants_of=" + (for_descendants_of==null? "" : Uri.EscapeDataString(for_descendants_of))+"&for_programme=" + (for_programme==null? "" : Uri.EscapeDataString(for_programme))+"&group=" + (group==null? "" : Uri.EscapeDataString(group))+"&"+String.Join("&", group_type.Select(z => $"group_type={Uri.EscapeDataString(z.ToString())}"))+"&member=" + (member==null? "" : Uri.EscapeDataString(member))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&embargoed=" + (embargoed==null? "" : Uri.EscapeDataString(embargoed));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find metadata for images
		/// Find metadata for images, particularly those in galleries
		/// ListImages images
		/// </summary>
		/// <param name="sort">Sorts:
		///* group_position: sort numerically by position, ascending only
		///* pid: sort alphabetically by PID
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="group">filter for images belonging to the given group (i.e. Gallery)</param>
		/// <param name="image_type">filter for images by type</param>
		/// <param name="is_alternate_image_for">filter for alternate images by entity PID</param>
		/// <param name="is_image_for">filter for images by entity PID</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for images by partner ID</param>
		/// <param name="partner_pid">filter for images by partner PID</param>
		/// <param name="pid">filter for subset of images having given PID</param>
		/// <param name="q">filter for subset of images matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="embargoed">Control return of embargoed items (undocumented)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListImagesAsync(string sort, string sort_direction, string group, string image_type, string is_alternate_image_for, string is_image_for, int page, int page_size, string partner_id, string partner_pid, string pid, string q, string embargoed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "images?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&group=" + (group==null? "" : Uri.EscapeDataString(group))+"&"+String.Join("&", image_type.Select(z => $"image_type={Uri.EscapeDataString(z.ToString())}"))+"&is_alternate_image_for=" + (is_alternate_image_for==null? "" : Uri.EscapeDataString(is_alternate_image_for))+"&is_image_for=" + (is_image_for==null? "" : Uri.EscapeDataString(is_image_for))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&embargoed=" + (embargoed==null? "" : Uri.EscapeDataString(embargoed));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Look inside programmes to find segments: chapters, tracks and more
		/// Look inside programmes to find segments: chapters, tracks and more
		/// ListItems items
		/// </summary>
		/// <param name="sort">Sorts:
		///* pid: sort by pid, descending
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* contributions: mixin to return information about contributors to items
		///* images: mixin to add image information for an item
		///* offset: mixin to return programme segment offsets, works in conjunction with programme filter
		///* play_event: mixin to return programme segment events, works in conjunction with programme or segment_event filters
		///</param>
		/// <param name="authority">filter for subset of items that have an ID issued by the given authority</param>
		/// <param name="id">filter for subset of items having given ID</param>
		/// <param name="id_type">filter for subset of items that have given an ID of the given type</param>
		/// <param name="item_type">filter for specific type(s) of items</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for items by partner ID</param>
		/// <param name="partner_pid">filter for items by partner PID</param>
		/// <param name="people">filter for subset of items that have specified person involved</param>
		/// <param name="pid">filter for subset of items matching one of the given PIDs</param>
		/// <param name="programme">filter for subset of items that are part of the given programme</param>
		/// <param name="q">filter for subset of items matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="segment_event">filter for item with the given segment_event</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListItemsAsync(
					string sort, 
					string sort_direction, 
					string mixin, 
					string authority, 
					string id, 
					string id_type, 
					string item_type, 
					int page, 
					int page_size, 
					string partner_id, 
					string partner_pid, 
					string people, 
					string pid, 
					string programme, 
					string q, 
					string segment_event, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "items?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&authority=" + (authority==null? "" : Uri.EscapeDataString(authority))+"&"+String.Join("&", id.Select(z => $"id={Uri.EscapeDataString(z.ToString())}"))+"&id_type=" + (id_type==null? "" : Uri.EscapeDataString(id_type))+"&"+String.Join("&", item_type.Select(z => $"item_type={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&people=" + (people==null? "" : Uri.EscapeDataString(people))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&programme=" + (programme==null? "" : Uri.EscapeDataString(programme))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&segment_event=" + (segment_event==null? "" : Uri.EscapeDataString(segment_event));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Master Brands
		/// List all Master Brands
		/// ListMasterbrands master_brands
		/// </summary>
		/// <param name="sort">Sorts:
		///* mid: sort by mid, ascending
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* images: mixin to add image information for a masterbrand
		///</param>
		/// <param name="mid">filter for subset of masterbrands that have given identifier</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for masterbrands by partner ID</param>
		/// <param name="partner_pid">filter for masterbrands by partner PID</param>
		/// <param name="q">filter for subset of masterbrands matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListMasterbrandsAsync(string sort, string sort_direction, string mixin, string mid, int page, int page_size, string partner_id, string partner_pid, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "master_brands?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", mid.Select(z => $"mid={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find the people behind and in programmes: cast, crew, guests and more
		/// The People feed allows you to search for the people and groups that contribute to programmes. This is the starting point for cast and crew credits, as well as finding contributors using external IDs (such as Wikipedia URLs)
		/// ListPeople people
		/// </summary>
		/// <param name="authority">filter for subset of people that have an ID issued by the given authority</param>
		/// <param name="has_external_id">filter for people who have an external identifier</param>
		/// <param name="id">filter for subset of people having given ID</param>
		/// <param name="id_type">filter for subset of people that have given an ID of the given type</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for people by partner ID</param>
		/// <param name="partner_pid">filter for people by partner PID</param>
		/// <param name="pid">filter for subset of people having given PID</param>
		/// <param name="programme">filter for subset of people that have contributed to the given programme pid</param>
		/// <param name="q">filter for subset of people matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListPeopleAsync(string authority, string has_external_id, string id, string id_type, int page, int page_size, string partner_id, string partner_pid, string pid, string programme, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "people?authority=" + (authority==null? "" : Uri.EscapeDataString(authority))+"&"+String.Join("&", has_external_id.Select(z => $"has_external_id={z}"))+"&"+String.Join("&", id.Select(z => $"id={Uri.EscapeDataString(z.ToString())}"))+"&id_type=" + (id_type==null? "" : Uri.EscapeDataString(id_type))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&programme=" + (programme==null? "" : Uri.EscapeDataString(programme))+"&q=" + (q==null? "" : Uri.EscapeDataString(q));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Look inside pips entities
		/// Look inside pips entities
		/// ListPips pips
		/// </summary>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="q">filter for subset of programmes matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListPipsAsync(int page, int page_size, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pips?page="+page+"&page_size="+page_size+"&q=" + (q==null? "" : Uri.EscapeDataString(q));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exposes programme information for a single pid
		/// Exposes programme information for a single pid
		/// ListProgrammeDetails programme_details
		/// </summary>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_pid">Filter for programme information by partner PID</param>
		/// <param name="pid">Filter for programme information for the provided PID</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListProgrammeDetailsAsync(int page, int page_size, string partner_pid, string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programme_details?page="+page+"&page_size="+page_size+"&partner_pid=" + (partner_pid==null? "" : Uri.EscapeDataString(partner_pid))+"&pid=" + (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start here for programmes metadata: Brands, Series, Episodes and Clips
		/// Fetch metadata about Programmes (brands, series, episodes, clips). By applying different filter restrictions this feed can be used in many ways, for example to retrieve all series belonging to a brand, all the episodes and/or clips for a specific series, or any TLEO objects for a masterbrand. Other filters permit restricting to specific formats and/or genres, and you can request specific versions (for example Signed or Audio-Described). Parameters may be combined in any way suitable for your application.
		/// ListProgrammes programmes
		/// </summary>
		/// <param name="sort">Sorts:
		///* group_position: sort numerically by position in group, ascending
		///* pid: sort alphabetically by PID, descending
		///* position: sort numerically by position, ascending
		///* promotion: sort by promotion rank, ascending
		///* release_date: sort chronologically by release date, descending
		///* relevance: sort by weighting of search term (use with q parameter)
		///* scheduled_start: sort chronologically by scheduled start time/date, ascending
		///* strict_title: sort alphabetically by title, ascending
		///* title: sort by title librarian style (ignoring leading 'The', 'A', etc), ascending
		///* tree: sort by root pid and then preorder tree sort. Requires entities to have release date.
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* alternate_images: mixin to return the alternate images for a programme
		///* ancestor_titles: mixin to return ancestor programme titles
		///* availability: mixin to return programme availability information
		///* available_simulcasts: mixin to return information about programmes that are currently available as simulcasts
		///* available_versions: mixin to return information about programmes that are currently available on demand
		///* available_webcasts: mixin to return information about programmes that are currently available as webcasts
		///* contributions: mixin to return information about contributors to a programme
		///* duration: mixin to return original version duration in programme concept entities
		///* genre_groupings: mixin to return list of genre groupings
		///* genre_groups: mixin to return list of genre groups
		///* images: mixin to add image information for a programme
		///* is_embeddable: mixin to add embeddable information for a programme
		///* previous_next: mixin to return the programmes which appear before and after a programme (as determined by the sort applied in the request)
		///* programme_type: mixin to return the programme type
		///* related_links: mixin to return information about related links to a programme
		///* titles: mixin to return ancestor programme titles
		///* versions_availability: mixin to return information about programmes that are currently available
		///</param>
		/// <param name="audio_described">filter for subset of programmes that are audio-described</param>
		/// <param name="availability">filter for subset of programmes that have availability</param>
		/// <param name="availability_entity_type">additional filter when availability=available</param>
		/// <param name="availability_from">filter for subset of programmes that are available after or at the specified datetime</param>
		/// <param name="availability_type">filter for a subset of programmes that are available for a given type</param>
		/// <param name="children_of">filter for subset of programmes that have PID as immediate parent</param>
		/// <param name="descendants_of">filter for subset of programmes that have PID as ancestor</param>
		/// <param name="duration">filter for subset of programmes that have given duration</param>
		/// <param name="entity_type">filter for subset of programmes that have given entity type</param>
		/// <param name="format">filter for subset of programmes with format</param>
		/// <param name="genre">filter for subset of programmes with genre</param>
		/// <param name="group">filter for subset of programmes which belong to the given group pid</param>
		/// <param name="initial_letter">filter for subset of programmes with title beginning with initial letter librarian style (ignoring leading 'The', 'An' (Welsh), etc) 0-9 a-z</param>
		/// <param name="initial_letter_end">Programmes with (librarian) titles whose initial letter is equal/before given letter. Use with initial_letter_start for a range</param>
		/// <param name="initial_letter_start">Programmes with (librarian) titles whose initial letter is equal/after given letter. Use with initial_letter_end for range.</param>
		/// <param name="initial_letter_strict">filter for subset of programmes with title beginning with initial letter</param>
		/// <param name="item">filter for subset of programmes with linked to versions which have the given item pids</param>
		/// <param name="master_brand">filter for subset of programmes with master_brand</param>
		/// <param name="media_set">filter for subset of programmes with media set</param>
		/// <param name="media_type">filter for subset of programmes with media type</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for programmes by partner ID</param>
		/// <param name="partner_pid">filter for programmes by partner PID</param>
		/// <param name="payment_type">filter for a subset of programmes that are of the given payment_type</param>
		/// <param name="people">filter for subset of programmes with contributions by given people PID</param>
		/// <param name="pid">filter for subset of programmes having given PID</param>
		/// <param name="promoted_for">filter for subset of programmes which are promoted for given service</param>
		/// <param name="q">filter for subset of programmes matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="signed">filter for subset of programmes that are signed</param>
		/// <param name="tag_name">filter for subset of programmes with tag</param>
		/// <param name="tag_scheme">filter for subset of programmes with a tag</param>
		/// <param name="tleo">filter for subset of programmes that are TLEOs</param>
		/// <param name="version">filter for subset of programmes with given PID as one of their versions</param>
		/// <param name="embargoed">Control return of embargoed items (undocumented)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListProgrammesAsync(
					string sort, 
					string sort_direction, 
					string mixin, 
					string audio_described, 
					string availability, 
					string availability_entity_type, 
					System.DateTimeOffset availability_from, 
					string availability_type, 
					string children_of, 
					string descendants_of, 
					string duration, 
					string entity_type, 
					string format, 
					string genre, 
					string group, 
					string initial_letter, 
					string initial_letter_end, 
					string initial_letter_start, 
					string initial_letter_strict, 
					string item, 
					string master_brand, 
					string media_set, 
					string media_type, 
					int page, 
					int page_size, 
					string partner_id, 
					string partner_pid, 
					string payment_type, 
					string people, 
					string pid, 
					string promoted_for, 
					string q, 
					string signed, 
					string tag_name, 
					string tag_scheme, 
					string tleo, 
					string version, 
					string embargoed, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "programmes?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", audio_described.Select(z => $"audio_described={z}"))+"&"+String.Join("&", availability.Select(z => $"availability={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", availability_entity_type.Select(z => $"availability_entity_type={Uri.EscapeDataString(z.ToString())}"))+"&availability_from=" + availability_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", availability_type.Select(z => $"availability_type={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", children_of.Select(z => $"children_of={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", descendants_of.Select(z => $"descendants_of={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", duration.Select(z => $"duration={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", entity_type.Select(z => $"entity_type={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", format.Select(z => $"format={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", genre.Select(z => $"genre={Uri.EscapeDataString(z.ToString())}"))+"&group=" + (group==null? "" : Uri.EscapeDataString(group))+"&initial_letter=" + (initial_letter==null? "" : Uri.EscapeDataString(initial_letter))+"&initial_letter_end=" + (initial_letter_end==null? "" : Uri.EscapeDataString(initial_letter_end))+"&initial_letter_start=" + (initial_letter_start==null? "" : Uri.EscapeDataString(initial_letter_start))+"&"+String.Join("&", initial_letter_strict.Select(z => $"initial_letter_strict={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", item.Select(z => $"item={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", master_brand.Select(z => $"master_brand={Uri.EscapeDataString(z.ToString())}"))+"&media_set=" + (media_set==null? "" : Uri.EscapeDataString(media_set))+"&"+String.Join("&", media_type.Select(z => $"media_type={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", payment_type.Select(z => $"payment_type={Uri.EscapeDataString(z.ToString())}"))+"&people=" + (people==null? "" : Uri.EscapeDataString(people))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&promoted_for=" + (promoted_for==null? "" : Uri.EscapeDataString(promoted_for))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&"+String.Join("&", signed.Select(z => $"signed={Uri.EscapeDataString(z.ToString())}"))+"&tag_name=" + (tag_name==null? "" : Uri.EscapeDataString(tag_name))+"&tag_scheme=" + (tag_scheme==null? "" : Uri.EscapeDataString(tag_scheme))+"&"+String.Join("&", tleo.Select(z => $"tleo={z}"))+"&"+String.Join("&", version.Select(z => $"version={Uri.EscapeDataString(z.ToString())}"))+"&embargoed=" + (embargoed==null? "" : Uri.EscapeDataString(embargoed));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Discover metadata for content promotions
		/// Details of short-term editorially curated "promotions", for instance those programmes featured on iPlayer today
		/// ListPromotions promotions
		/// </summary>
		/// <param name="mixin">Mixins:
		///* related_links: mixin to return information about related links to a promotion
		///</param>
		/// <param name="context">filter for subset of promotions belonging to a given context</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for promotions by partner ID</param>
		/// <param name="partner_pid">filter for promotions by partner PID</param>
		/// <param name="pid">filter for subset of promotions having given PID</param>
		/// <param name="promoted_by">filter for subset of promotions having given promoted by</param>
		/// <param name="promoted_for">filter for subset of promotions having given promoted for</param>
		/// <param name="q">filter for subset of promotions matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="status">filter for subset of promotions with status</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListPromotionsAsync(string mixin, string context, int page, int page_size, string partner_id, string partner_pid, string pid, string promoted_by, string promoted_for, string q, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "promotions?"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&context=" + (context==null? "" : Uri.EscapeDataString(context))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", promoted_by.Select(z => $"promoted_by={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", promoted_for.Select(z => $"promoted_for={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&"+String.Join("&", status.Select(z => $"status={Uri.EscapeDataString(z.ToString())}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Build schedules and find metadata for TV and radio broadcasts and webcasts
		/// Dates, Times, Schedules: when and where are programmes being shown?
		/// ListSchedules schedules
		/// </summary>
		/// <param name="sort">Sorts:
		///* start_date: sort chronologically by scheduled start time/date, ascending
		///</param>
		/// <param name="sort_direction">Sort direction</param>
		/// <param name="mixin">Mixins:
		///* ancestor_titles: return ancestor programme titles
		///* images: mixin to add image information for broadcasts and webcasts
		///* titles: return ancestor programme titles
		///</param>
		/// <param name="authority">filter for subset of broadcasts and webcasts that have given authority</param>
		/// <param name="descendants_of">filter for subset of broadcasts and webcasts that are descendants of the given programme PID</param>
		/// <param name="end_from">filter for subset of broadcasts and webcasts that end on or later than the specified datetime</param>
		/// <param name="end_to">filter for subset of broadcasts and webcasts that end on or earlier than the specified datetime</param>
		/// <param name="format">filter for subset of broadcasts and webcasts that are classified in the given format ID</param>
		/// <param name="genre">filter for subset of broadcasts and webcasts that are classified in the given genre ID</param>
		/// <param name="group">filter for subset of broadcasts and webcasts that have programmes in the given group</param>
		/// <param name="id">filter for subset of broadcasts and webcasts that have given identifier</param>
		/// <param name="id_type">filter for subset of broadcasts and webcasts that have given id type</param>
		/// <param name="item">filter for subset of broadcasts and webcasts with the given item performed on it</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for broadcasts and webcasts by partner ID</param>
		/// <param name="partner_pid">filter for broadcasts and webcasts by partner PID</param>
		/// <param name="people">filter for subset of broadcasts and webcasts that have given contributor</param>
		/// <param name="pid">filter for subset of broadcasts and webcasts having given PID</param>
		/// <param name="q">filter for subset of broadcasts and webcasts matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="repeat">filter to show either only repeats or non-repeats</param>
		/// <param name="schedule_day">filter for subset of broadcasts and webcasts that start on the specified day (BBC time)</param>
		/// <param name="schedule_day_from">filter for subset of broadcasts and webcasts that start on or after the specified day (BBC time)</param>
		/// <param name="schedule_day_to">filter for subset of broadcasts and webcasts that start on or before the specified day (BBC time)</param>
		/// <param name="service_master_brand">filter for subset of broadcasts and webcasts with given service master brand</param>
		/// <param name="sid">filter for subset of broadcasts and webcasts that are on the specified linear service</param>
		/// <param name="start_from">filter for subset of broadcasts and webcasts that start on or later than the specified datetime</param>
		/// <param name="start_to">filter for subset of broadcasts and webcasts that start on or earlier than the specified datetime</param>
		/// <param name="version">filter for subset of broadcasts and webcasts with given PID as their parent version</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListSchedulesAsync(
					string sort, 
					string sort_direction, 
					string mixin, 
					string authority, 
					string descendants_of, 
					System.DateTimeOffset end_from, 
					System.DateTimeOffset end_to, 
					string format, 
					string genre, 
					string group, 
					string id, 
					string id_type, 
					string item, 
					int page, 
					int page_size, 
					string partner_id, 
					string partner_pid, 
					string people, 
					string pid, 
					string q, 
					bool repeat, 
					System.DateTimeOffset schedule_day, 
					System.DateTimeOffset schedule_day_from, 
					System.DateTimeOffset schedule_day_to, 
					string service_master_brand, 
					string sid, 
					System.DateTimeOffset start_from, 
					System.DateTimeOffset start_to, 
					string version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schedules?sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&sort_direction=" + (sort_direction==null? "" : Uri.EscapeDataString(sort_direction))+"&"+String.Join("&", mixin.Select(z => $"mixin={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", authority.Select(z => $"authority={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", descendants_of.Select(z => $"descendants_of={Uri.EscapeDataString(z.ToString())}"))+"&end_from=" + end_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_to=" + end_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", format.Select(z => $"format={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", genre.Select(z => $"genre={Uri.EscapeDataString(z.ToString())}"))+"&group=" + (group==null? "" : Uri.EscapeDataString(group))+"&"+String.Join("&", id.Select(z => $"id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", id_type.Select(z => $"id_type={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", item.Select(z => $"item={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&people=" + (people==null? "" : Uri.EscapeDataString(people))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&repeat="+repeat+"&schedule_day=" + schedule_day.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&schedule_day_from=" + schedule_day_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&schedule_day_to=" + schedule_day_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", service_master_brand.Select(z => $"service_master_brand={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", sid.Select(z => $"sid={Uri.EscapeDataString(z.ToString())}"))+"&start_from=" + start_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&start_to=" + start_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", version.Select(z => $"version={Uri.EscapeDataString(z.ToString())}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Schema definition
		/// Get Schema definition
		/// GetXSD schema
		/// </summary>
		/// <returns>Metadata response</returns>
		public async Task GetXSDAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "schema";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information about the linear services used for broadcast transmissions
		/// The services feed exposes the linear broadcast "services" from PIPs. These are the actual services which broadcast programmes (eg bbc_one_oxford is the service for BBC One in Oxford).
		/// ListServices services
		/// </summary>
		/// <param name="end_from">Return services that end on or later than the specified datetime</param>
		/// <param name="end_to">filter for subset of broadcasts that end on or earlier than the specified datetime</param>
		/// <param name="mid">filter for services by masterbrand MID</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for services by partner ID</param>
		/// <param name="partner_pid">filter for services by partner PID</param>
		/// <param name="q">filter for subset of services matching supplied keyword/phrase (boolean operators permitted)</param>
		/// <param name="service_type">filter for specified type of linear services</param>
		/// <param name="sid">filter for specified linear service</param>
		/// <param name="start_from">Return services that start on or later than the specified datetime</param>
		/// <param name="start_to">Return services that start earlier than the specified datetime</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListServicesAsync(System.DateTimeOffset end_from, System.DateTimeOffset end_to, string mid, int page, int page_size, string partner_id, string partner_pid, string q, string service_type, string sid, System.DateTimeOffset start_from, System.DateTimeOffset start_to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services?end_from=" + end_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_to=" + end_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", mid.Select(z => $"mid={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&"+String.Join("&", service_type.Select(z => $"service_type={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", sid.Select(z => $"sid={Uri.EscapeDataString(z.ToString())}"))+"&start_from=" + start_from.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&start_to=" + start_to.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw brand
		/// Get raw brand
		/// Get_Raw_brand v1/brands/{pid}
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_brandAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brands/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw brand franchise
		/// Get raw brand franchises
		/// Get_Raw_brand_franchises v1/brands/{pid}/franchises/
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_brand_franchisesAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/brands/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/franchises/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw episode
		/// Get raw episode
		/// Get_Raw_episode v1/episodes/{pid}
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_episodeAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/episodes/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw ancestors
		/// Get raw ancestors
		/// Get_Raw_ancestors v1/episodes/{pid}/ancestors/
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_ancestorsAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/episodes/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/ancestors/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw formats
		/// Get raw formats
		/// Get_Raw_formats v1/episodes/{pid}/formats/
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_formatsAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/episodes/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/formats/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw genre groups
		/// Get raw genre groups
		/// Get_Raw_genre_groups v1/episodes/{pid}/genre_groups/
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_genre_groupsAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/episodes/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/genre_groups/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw image
		/// Get raw image
		/// Get_Raw_image v1/images/{pid}
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_imageAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/images/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw masterbrand
		/// Get raw masterbrand
		/// Get_Raw_masterbrand v1/master_brands/{mbid}
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_masterbrandAsync(string mbid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/master_brands/"+ (mbid==null? "" : Uri.EscapeDataString(mbid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get raw promotion
		/// Get raw promotion
		/// Get_Raw_promotion v1/promotions/{pid}
		/// </summary>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> Get_Raw_promotionAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/promotions/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Metadata on editorial programme versions: original, signed, audio-described, etc
		/// The versions feed exposes editorial "Versions" of programmes. These are concepts used to capture different presentations of an overall programme: for example, versions of a programme may include one with sign language, one with audio description, one edited for content and more. Versions are also important to understand for broadcasts: a linear broadcast or an ondemand is always of a specific version, not merely of a programme.
		/// ListVersions versions
		/// </summary>
		/// <param name="availability">filter for subset of versions that have availability</param>
		/// <param name="descendants_of">filter for subset of versions having given programme PID</param>
		/// <param name="media_set">filter for subset of versions with availability in the given media set</param>
		/// <param name="page">which page of results to return</param>
		/// <param name="page_size">number of results in each page</param>
		/// <param name="partner_id">filter for versions by partner ID</param>
		/// <param name="partner_pid">filter for versions by partner PID</param>
		/// <param name="payment_type">filter for a subset of versions that are of the given payment_type</param>
		/// <param name="pid">filter for subset of versions having given PID</param>
		/// <param name="embargoed">Control return of embargoed items (undocumented)</param>
		/// <returns>Nitro response</returns>
		public async Task<Nitro> ListVersionsAsync(string availability, string descendants_of, string media_set, int page, int page_size, string partner_id, string partner_pid, string payment_type, string pid, string embargoed, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "versions?"+String.Join("&", availability.Select(z => $"availability={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", descendants_of.Select(z => $"descendants_of={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", media_set.Select(z => $"media_set={Uri.EscapeDataString(z.ToString())}"))+"&page="+page+"&page_size="+page_size+"&"+String.Join("&", partner_id.Select(z => $"partner_id={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", partner_pid.Select(z => $"partner_pid={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", payment_type.Select(z => $"payment_type={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", pid.Select(z => $"pid={Uri.EscapeDataString(z.ToString())}"))+"&embargoed=" + (embargoed==null? "" : Uri.EscapeDataString(embargoed));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Nitro>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
