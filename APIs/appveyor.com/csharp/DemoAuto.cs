//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccessRightName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunBuild = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Update = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		View = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AceAccessRight
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Allowed { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public AccessRightName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AceAccessRightDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public AccessRightName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Artifact
	{
		
		/// <summary>
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Path glob of artifact files.
		///Note that updateProject does not require path, but omitting path
		///results in post-build error "Collecting artifacts... Value cannot
		///be null.  Parameter name: input"
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Possible values from `Push-AppveyorArtifact` cmdlet `-Type` parameter.
		///
		///The web UI only allows selection of `Auto`, `WebDeployPackage`, and
		///unspecified (which it sends as the empty string but functions like
		///omitting the property) for `updateProject`.
		///
		///Any string can be sent and will be saved/returned, but only these
		///values have a function (as far as I am aware).
		/// </summary>
		public ArtifactType Type { get; set; }
	}
	
	/// <summary>
	/// Possible values from `Push-AppveyorArtifact` cmdlet `-Type` parameter.
	///
	///The web UI only allows selection of `Auto`, `WebDeployPackage`, and
	///unspecified (which it sends as the empty string but functions like
	///omitting the property) for `updateProject`.
	///
	///Any string can be sent and will be saved/returned, but only these
	///values have a function (as far as I am aware).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureCloudService = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureCloudServiceConfig = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElasticBeanstalkPackage = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		File = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NuGetPackage = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OctopusPackage = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SsdtPackage = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebDeployPackage = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Zip = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArtifactModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Size { get; set; }
		
		/// <summary>
		/// Possible values from `Push-AppveyorArtifact` cmdlet `-Type` parameter.
		///
		///The web UI only allows selection of `Auto`, `WebDeployPackage`, and
		///unspecified (which it sends as the empty string but functions like
		///omitting the property) for `updateProject`.
		///
		///Any string can be sent and will be saved/returned, but only these
		///values have a function (as far as I am aware).
		/// </summary>
		public ArtifactType Type { get; set; }
		
		/// <summary>
		/// This property has not been observed in JSON responses, but is
		///present and nil in XML responses.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Build : BuildLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildCloudName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		azure_westus = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gce = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_ubuntu = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_ubuntu18 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_vs2013 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_win2016 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro_vs2017 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ubuntu = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildJob : Job
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowFailure { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ArtifactsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CompilationErrorsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CompilationMessagesCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CompilationWarningsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FailedTestsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MessagesCount { get; set; }
		
		public OSType OsType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PassedTestsCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TestsCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OSType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ubuntu = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Branch { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BuildId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildMessage
	{
		
		public BuildMessageCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildMessageCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		information = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warning = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		msbuild = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		script = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildNotificationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		myCommits = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildStartRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectSlug { get; set; }
		
		/// <summary>
		/// Can not be used with `branch` or `commitId`
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PullRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildWorkerImage
	{
		
		public BuildCloudName BuildCloudName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int BuildWorkerImageId { get; set; }
		
		/// <summary>
		/// Defines the available build worker image templates used to provision a virtual machine for a build.  Images are updated regularly.  "Previous" selects the previous version of an image, for use as a temporary workaround for regressions.
		///`Ubuntu` is the same as `Ubuntu1604`. `Previous Ubuntu` is the same as `Previous Ubuntu1604`.
		///See https://www.appveyor.com/docs/build-environment/#build-worker-images for details.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BuildWorkerImageName Name { get; set; }
		
		public OSType OsType { get; set; }
	}
	
	/// <summary>
	/// Defines the available build worker image templates used to provision a virtual machine for a build.  Images are updated regularly.  "Previous" selects the previous version of an image, for use as a temporary workaround for regressions.
	///`Ubuntu` is the same as `Ubuntu1604`. `Previous Ubuntu` is the same as `Previous Ubuntu1604`.
	///See https://www.appveyor.com/docs/build-environment/#build-worker-images for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildWorkerImageName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Ubuntu = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Ubuntu1604 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Ubuntu1804 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Visual_Studio_2013 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Visual_Studio_2015 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Previous_Visual_Studio_2017 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ubuntu = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ubuntu1604 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ubuntu1804 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2013 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2015 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2015_2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2017 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2017_Preview = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Visual_Studio_2019_Preview = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WMF_5 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_Server_2019 = 16,
	}
	
	/// <summary>
	/// Technically `roleId` has default value 0 and is not required, but
	///since role 0 never exists it would always cause a 404 response.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CollaboratorAddition
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int RoleId { get; set; }
	}
	
	/// <summary>
	/// Technically `userId` and `roleId` have default value 0 and are not
	///required, but since user 0 and role 0 never exist it would always cause
	///a 404 response.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CollaboratorUpdate
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int RoleId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeployMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		providers = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		script = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deployment : DeploymentLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentCancellation
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int DeploymentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironment : DeploymentEnvironmentLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentAddition
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DeploymentProviderType Provider { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironmentSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureBlob = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureCS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AzureWebJob = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BinTray = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FTP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NuGet = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SqlDatabase = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WebDeploy = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Webhook = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationProviderSettings[] Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] ProviderSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StoredNameValue
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StoredValue Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StoredValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		/// <summary>
		/// Encrypted values can be created using the encryptValue operation.
		///
		///Empty environment variables are represented by missing (null) value
		///rather than an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationProviderSettings
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public NotificationProviderType Provider { get; set; }
		
		/// <summary>
		/// This type is the union of the settings types for each of the various
		///notification types supported by the API.  The properties correspond to
		///the following notification types:
		///
		///#### All Types
		///- onBuildSuccess
		///- onBuildFailure
		///- onBuildStatusChanged
		///
		///#### Campfire
		///- account
		///- authToken
		///- room
		///- template
		///
		///#### Email
		///- subjectTemplate
		///- bodyTemplate
		///- recipients
		///- recipientsValue
		///
		///#### GitHubPullRequest
		///- authToken
		///- template
		///
		///#### HipChat
		///- authToken
		///- from
		///- room
		///- template
		///- serverUrl
		///
		///#### Slack
		///- incomingWebhookUrl
		///- authToken
		///- channel
		///- template
		///
		///#### Webhook
		///- method
		///- url
		///- headers
		///- headersValue
		///- addCustomRequestBody
		///- customRequestBodyContentType
		///- customRequestBody
		///
		///#### VSOTeamRoom
		///- vsoAccount
		///- username
		///- password
		///- room
		///- template
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Campfire = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHubPullRequest = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HipChat = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slack = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Webhook = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VSOTeamRoom = 6,
	}
	
	/// <summary>
	/// This type is the union of the settings types for each of the various
	///notification types supported by the API.  The properties correspond to
	///the following notification types:
	///
	///#### All Types
	///- onBuildSuccess
	///- onBuildFailure
	///- onBuildStatusChanged
	///
	///#### Campfire
	///- account
	///- authToken
	///- room
	///- template
	///
	///#### Email
	///- subjectTemplate
	///- bodyTemplate
	///- recipients
	///- recipientsValue
	///
	///#### GitHubPullRequest
	///- authToken
	///- template
	///
	///#### HipChat
	///- authToken
	///- from
	///- room
	///- template
	///- serverUrl
	///
	///#### Slack
	///- incomingWebhookUrl
	///- authToken
	///- channel
	///- template
	///
	///#### Webhook
	///- method
	///- url
	///- headers
	///- headersValue
	///- addCustomRequestBody
	///- customRequestBodyContentType
	///- customRequestBody
	///
	///#### VSOTeamRoom
	///- vsoAccount
	///- username
	///- password
	///- room
	///- template
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationSettings
	{
		
		public NotificationSettingsType $type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AddCustomRequestBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredValue AuthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BodyTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomRequestBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomRequestBodyContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HeadersValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IncomingWebhookUrl { get; set; }
		
		public HttpMethodRestricted Method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OnBuildFailure { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OnBuildStatusChanged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OnBuildSuccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredValue Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] Recipients { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecipientsValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Room { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubjectTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Template { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VsoAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NotificationSettingsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_CampfireNotificationSettings,_Appveyor_Models = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_EmailNotificationSettings,_Appveyor_Models = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_GitHubPullRequestNotificationSettings,_Appveyor_Models = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_HipChatNotificationSettings,_Appveyor_Models = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_SlackNotificationSettings,_Appveyor_Models = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_WebhookNotificationSettings,_Appveyor_Models = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Appveyor_Models_VSOTeamRoomNotificationSettings,_Appveyor_Models = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpMethodRestricted
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StringValueObject
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentDeploymentsResults
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentDeploymentModel[] Deployments { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironment Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentDeploymentModel : DeploymentLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectLookupModel Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Slug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentLookupModel
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> DeploymentEnvironmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		public DeploymentProviderType Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentProject
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsSelected { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int ProjectId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentSettingsResults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironmentWithSettings Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentEnvironmentWithSettings : DeploymentEnvironment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentAccessKey { get; set; }
		
		/// <summary>
		/// Projects available for selection in UI.
		///Only present in response from getEnvironmentSettings.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironmentProject[] Projects { get; set; }
		
		/// <summary>
		/// Project IDs of selected projects
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public int[] SelectedProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironmentSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentJob : Job
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MessagesCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BuildLookupModel Build { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> DeploymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Finished { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		starting = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentNotificationFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentProvider
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] OnBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] OnEnvironmentVariables { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DeploymentProviderType Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] ProviderSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeploymentStartRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Optional job id with artifacts if build contains multiple jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BuildJobId { get; set; }
		
		/// <summary>
		/// Build to deploy
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string BuildVersion { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectSlug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlainValue { get; set; } = "";
	}
	
	/// <summary>
	/// Schema of object returned in 4XX and 5XX responses.
	///Note:  The name is unfortunate, since it conflicts with `java.lang.Error`
	///and other generic error classes.  It is the name used in XML responses,
	///so it is used for consistency and possible future XML deserialization
	///support.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// When present, this property is a map of property names in the format
		///`request.<capitalized name>` to an `Array` of validation error
		///message strings for the property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ModelState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GroupName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BuildEnvironment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Environments = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Projects = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Roles = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Users = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupPermissions
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public GroupName Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PermissionState[] Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PermissionState
	{
		
		/// <summary>
		/// State of the named permission.  `true` to allow, `false` to deny,
		///missing to inherit.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Allowed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Available permission names.  The names correspond to the following groups:
		///#### AccountPermission
		///- ManageApplicationAuthorizations
		///- UpdateAccountDetails
		///- UpdateBillingDetails
		///#### BuildEnvironmentPermission
		///- ConfigureBuildEnvironment
		///#### DenyPermission
		///- DenyAllProjectsEnvironments
		///#### EnvironmentsPermission
		///- DeployToEnvironment
		///- ManageEnvironments
		///- UpdateEnvironmentSettings
		///#### ProjectsPermission
		///- ManageProjects
		///- RunProjectBuild
		///- UpdateProjectSettings
		///#### RolesPermission
		///- AddRole
		///- DeleteRole
		///- UpdateRoleDetails
		///#### UserPermission
		///- ConfigureApiKeys
		///#### UsersPermission
		///- AddUser
		///- DeleteUser
		///- UpdateUserDetails
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public PermissionName Name { get; set; }
	}
	
	/// <summary>
	/// Available permission names.  The names correspond to the following groups:
	///#### AccountPermission
	///- ManageApplicationAuthorizations
	///- UpdateAccountDetails
	///- UpdateBillingDetails
	///#### BuildEnvironmentPermission
	///- ConfigureBuildEnvironment
	///#### DenyPermission
	///- DenyAllProjectsEnvironments
	///#### EnvironmentsPermission
	///- DeployToEnvironment
	///- ManageEnvironments
	///- UpdateEnvironmentSettings
	///#### ProjectsPermission
	///- ManageProjects
	///- RunProjectBuild
	///- UpdateProjectSettings
	///#### RolesPermission
	///- AddRole
	///- DeleteRole
	///- UpdateRoleDetails
	///#### UserPermission
	///- ConfigureApiKeys
	///#### UsersPermission
	///- AddUser
	///- DeleteUser
	///- UpdateUserDetails
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PermissionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManageApplicationAuthorizations = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAccountDetails = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateBillingDetails = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigureBuildEnvironment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DenyAllProjectsEnvironments = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeployToEnvironment = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManageEnvironments = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateEnvironmentSettings = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManageProjects = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RunProjectBuild = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateProjectSettings = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddRole = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRole = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRoleDetails = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigureApiKeys = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddUser = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteUser = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateUserDetails = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostEntry
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Host { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Ip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job : Timestamped
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Finished { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MSBuildVerbosity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quiet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		normal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detailed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NuGetFeed : Timestamped
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivateProject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NuGetFeedId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ProjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PublishingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OSServiceName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iis = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mongodb = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		msmq = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2008r2sp2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2008r2sp2rs = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2012sp1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2012sp1rs = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2014 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2014rs = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mssql2016 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mysql = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		postgresql = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any_CPU = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x64 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Project : ProjectLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	/// <summary>
	/// `repositoryAuthentication` is only used for git, mercurial, subversion `repositoryProvider`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectAddition
	{
		
		public RepositoryAuthenticationType RepositoryAuthentication { get; set; }
		
		/// <summary>
		/// URL when repositoryProvider is git, mercurial, subversion username/project when repositoryProvider is gitHub
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Required if repositoryAuthentication is credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryPassword { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public RepositoryProvider RepositoryProvider { get; set; }
		
		/// <summary>
		/// Required if repositoryAuthentication is credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		credentials = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssh = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bitBucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		git = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitHub = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gitLab = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kiln = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mercurial = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stash = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subversion = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vso = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectBranchesMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exclude = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		include = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectBuildNumberUpdate
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int NextBuildNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectBuildResults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Build Build { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] AfterBuildScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] AfterDeployScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] AfterTestScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Artifact[] Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssemblyFileVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssemblyInfoFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssemblyInformationalVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssemblyVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] BeforeBuildScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] BeforeDeployScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] BeforePackageScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] BeforeTestScripts { get; set; }
		
		public ProjectBranchesMode BranchesMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] BuildCloud { get; set; }
		
		public BuildMode BuildMode { get; set; }
		
		/// <summary>
		/// Only set/used when `buildMode` is `script`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Script[] BuildScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] CacheEntries { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CloneDepth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloneFolder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] CloneScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConfigureNuGetAccountSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConfigureNuGetProjectSource { get; set; }
		
		public DeployMode DeployMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] DeployScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentProvider[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableNuGetPublishForOctopusPackages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableNuGetPublishOnPullRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DoNotIncrementBuildNumberOnPullRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojAssemblyVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojFile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojFileVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojInformationalVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojPackageVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DotnetCsprojVersionFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue[] EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValueMatrix[] EnvironmentVariablesMatrix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] ExcludeBranches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceHttpsClone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostEntry[] HostsEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] HotFixScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] IncludeBranches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeNuGetReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] InitScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] InstallScripts { get; set; }
		
		/// <summary>
		/// Although the names and values are not enforced, the combinations which are meaningful are documented at https://www.appveyor.com/docs/build-configuration/#allow-failing-jobs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValueMatrix[] MatrixAllowFailures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValueMatrix[] MatrixExcept { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValueMatrix[] MatrixExclude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MatrixFastFinish { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValueMatrix[] MatrixOnly { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MsBuildInParallel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MsBuildProjectFileName { get; set; }
		
		public MSBuildVerbosity MsBuildVerbosity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationProviderSettings[] Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] OnBuildErrorScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] OnBuildFinishScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Script[] OnBuildSuccessScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] OnlyCommitsFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectConfigurationOperatingSystem[] ProjectConfigurationOperatingSystem { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageAspNetCoreProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageAzureCloudServiceProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageDotnetConsoleProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageNuGetProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageNuGetSymbols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageWebApplicationProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageWebApplicationProjectsBeanstalk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageWebApplicationProjectsOctopus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageWebApplicationProjectsXCopy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PatchAssemblyInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PatchDotnetCsproj { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectConfigurationPlatform[] ProjectConfigurationPlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectConfigurationServices[] ProjectConfigurationServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShallowClone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipBranchWithPullRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] SkipCommitsFiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipNonTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipTags { get; set; }
		
		/// <summary>
		/// Maximum items: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(0)]
		public UnknownType[] Stacks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] TestAssemblies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] TestCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectConfigurationTestCategoriesMatrix[] ProjectConfigurationTestCategoriesMatrix { get; set; }
		
		public ProjectConfigurationTestCategoriesMode TestCategoriesMode { get; set; }
		
		public TestMode TestMode { get; set; }
		
		/// <summary>
		/// Only set/used when `testMode` is `script`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Script[] TestScripts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> XamarinRegisterAndroidProduct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> XamarinRegisterIosProduct { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Script
	{
		
		public ScriptLanguage Language { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="Script")]
		public string Script1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScriptLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cmd = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ps = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pwsh = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sh = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StoredNameValueMatrix
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StoredNameValue Variables { get; set; }
	}
	
	public class ProjectConfigurationOperatingSystem
	{
		
		/// <summary>
		/// Defines the available build worker image templates used to provision a virtual machine for a build.  Images are updated regularly.  "Previous" selects the previous version of an image, for use as a temporary workaround for regressions.
		///`Ubuntu` is the same as `Ubuntu1604`. `Previous Ubuntu` is the same as `Previous Ubuntu1604`.
		///See https://www.appveyor.com/docs/build-environment/#build-worker-images for details.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		public BuildWorkerImageName Value { get; set; }
	}
	
	public class ProjectConfigurationPlatform
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public PlatformName Value { get; set; }
	}
	
	public class ProjectConfigurationServices
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public OSServiceName Value { get; set; }
	}
	
	/// <summary>
	/// A schema for values which have an undocumented/unknown type.
	///
	///Although the type of such values could be left unspecified according to
	///JSON Schema (and by extension OpenAPI 2.0), such unspecified types cause
	///tool failures (e.g. swagger-codegen).  So this type can be used as a
	///placeholder to prevent errors and document the behavior.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnknownType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 0,
	}
	
	public class ProjectConfigurationTestCategoriesMatrix
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] Categories { get; set; }
	}
	
	public enum ProjectConfigurationTestCategoriesMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		exclude = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		include = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		script = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDeployment
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Deployment Deployment { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDeploymentModel : DeploymentLookupModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentEnvironmentLookupModel Environment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectDeploymentsResults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectDeploymentModel[] Deployments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectHistory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Build[] Builds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectSettingsResults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StringValueObject[] BuildClouds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildWorkerImage[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectWithConfiguration Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectWithConfiguration
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReRunBuildRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int BuildId { get; set; }
		
		/// <summary>
		/// Set `reRunIncomplete` set to `false` (default value) for full build re-run. Set it set to `true` to rerun only failed or cancelled jobs in multijob build.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReRunIncomplete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryScm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		git = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mercurial = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subversion = 2,
	}
	
	/// <summary>
	/// Technically `roleId` has default value 0 and is not required, but
	///since role 0 never exists it would always cause a 404 response.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Role : Timestamped
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSystem { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int RoleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleAce
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AceAccessRight[] AccessRights { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAdmin { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RoleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleAddition
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoleWithGroups : Role
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupPermissions[] Groups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityDescriptor
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AceAccessRightDefinition[] AccessRightDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleAce[] RoleAces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Timestamped
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserAccount : Timestamped
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCollaborator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsOwner { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Password { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RoleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TwoFactorAuthEnabled { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> UserId { get; set; }
	}
	
	/// <summary>
	/// The roles property contains all roles, not only the role for which the user is a member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserAccountRolesResults
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserAccount User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserAccountSettings
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public BuildNotificationFrequency FailedBuildNotification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DeploymentNotificationFrequency FailedDeploymentNotification { get; set; }
		
		/// <summary>
		/// Note that this value is `true` on user creation, but behaves as
		///`false` when not specified on update.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotifyWhenBuildStatusChangedOnly { get; set; }
		
		/// <summary>
		/// Note that this value is `true` on user creation, but behaves as
		///`false` when not specified on update.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotifyWhenDeploymentStatusChangedOnly { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public BuildNotificationFrequency SuccessfulBuildNotification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DeploymentNotificationFrequency SuccessfulDeploymentNotification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserAddition
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ConfirmPassword { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GeneratePassword { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Password { get; set; }
		
		/// <summary>
		/// Technically `roleId` has default value 0 and is not required, but
		///since role 0 never exists it would always cause a 404 response.
		///
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int RoleId { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Encrypt a value for use in StoredValue.
		/// EncryptValue account/encrypt
		/// </summary>
		/// <returns>Success</returns>
		public async Task<string> EncryptValueAsync(EncryptRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/encrypt";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get build artifacts
		/// GetBuildArtifacts buildjobs/{jobId}/artifacts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ArtifactModel[]> GetBuildArtifactsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buildjobs/{jobId}/artifacts";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ArtifactModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download build artifact
		/// GetBuildArtifact buildjobs/{jobId}/artifacts/{artifactFileName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task GetBuildArtifactAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buildjobs/{jobId}/artifacts/{artifactFileName}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download build log
		/// GetBuildLog buildjobs/{jobId}/log
		/// </summary>
		/// <returns>Success</returns>
		public async Task GetBuildLogAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buildjobs/{jobId}/log";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start build of branch most recent commit
		/// StartBuild builds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Build> StartBuildAsync(BuildStartRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builds";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Build>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Re-run build
		/// If `reRunIncomplete` is `true` and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message "No failed or cancelled jobs in build with ID {buildId}".
		/// ReRunBuild builds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Build> ReRunBuildAsync(ReRunBuildRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builds";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Build>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel build
		/// CancelBuild builds/{accountName}/{projectSlug}/{buildVersion}
		/// </summary>
		public async Task CancelBuildAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "builds/{accountName}/{projectSlug}/{buildVersion}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get collaborators
		/// GetCollaborators collaborators
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserAccount[]> GetCollaboratorsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UserAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add collaborator
		/// AddCollaborator collaborators
		/// </summary>
		public async Task AddCollaboratorAsync(CollaboratorAddition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update collaborator
		/// UpdateCollaborator collaborators
		/// </summary>
		public async Task UpdateCollaboratorAsync(CollaboratorUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete collaborator
		/// DeleteCollaborator collaborators/{userId}
		/// </summary>
		public async Task DeleteCollaboratorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators/{userId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get collaborator
		/// GetCollaborator collaborators/{userId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserAccountRolesResults> GetCollaboratorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collaborators/{userId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UserAccountRolesResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start deployment
		/// StartDeployment deployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Deployment> StartDeploymentAsync(DeploymentStartRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deployments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Deployment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel deployment
		/// CancelDeployment deployments/stop
		/// </summary>
		public async Task CancelDeploymentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deployments/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get deployment
		/// GetDeployment deployments/{deploymentId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectDeployment> GetDeploymentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deployments/{deploymentId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectDeployment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get environments
		/// GetEnvironments environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeploymentEnvironmentLookupModel[]> GetEnvironmentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentEnvironmentLookupModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add environment
		/// AddEnvironment environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeploymentEnvironmentWithSettings> AddEnvironmentAsync(DeploymentEnvironmentAddition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentEnvironmentWithSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update environment
		/// UpdateEnvironment environments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeploymentEnvironmentWithSettings> UpdateEnvironmentAsync(DeploymentEnvironmentWithSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentEnvironmentWithSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete environment
		/// DeleteEnvironment environments/{deploymentEnvironmentId}
		/// </summary>
		public async Task DeleteEnvironmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{deploymentEnvironmentId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get environment deployments
		/// GetEnvironmentDeployments environments/{deploymentEnvironmentId}/deployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeploymentEnvironmentDeploymentsResults> GetEnvironmentDeploymentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{deploymentEnvironmentId}/deployments";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentEnvironmentDeploymentsResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get environment settings
		/// GetEnvironmentSettings environments/{deploymentEnvironmentId}/settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeploymentEnvironmentSettingsResults> GetEnvironmentSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{deploymentEnvironmentId}/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeploymentEnvironmentSettingsResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get projects
		/// GetProjects projects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Project[]> GetProjectsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Project[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add project
		/// AddProject projects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Project> AddProjectAsync(ProjectAddition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Project>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update project
		/// UpdateProject projects
		/// </summary>
		public async Task UpdateProjectAsync(ProjectWithConfiguration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get status badge image for a project with a public repository
		/// GetPublicProjectStatusBadge projects/status/{badgeRepoProvider}/{repoAccountName}/{repoSlug}
		/// </summary>
		/// <param name="branch">Repository Branch</param>
		/// <param name="svg">Return an SVG image instead of PNG?  Exclusive with `retina`.</param>
		/// <param name="retina">Return a larger image suitable for retina displays?  Exclusive with `svg`.</param>
		/// <param name="passingText">Text to show in badge when build is passing.</param>
		/// <param name="failingText">Text to show in badge when build is failing.</param>
		/// <param name="pendingText">Text to show in badge when build is pending.</param>
		/// <returns>Success</returns>
		public async Task GetPublicProjectStatusBadgeAsync(string branch, bool svg, bool retina, string passingText, string failingText, string pendingText, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/status/{badgeRepoProvider}/{repoAccountName}/{repoSlug}?branch=" + (branch==null? "" : Uri.EscapeDataString(branch))+"&svg="+svg+"&retina="+retina+"&passingText=" + (passingText==null? "" : Uri.EscapeDataString(passingText))+"&failingText=" + (failingText==null? "" : Uri.EscapeDataString(failingText))+"&pendingText=" + (pendingText==null? "" : Uri.EscapeDataString(pendingText));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project status badge image
		/// GetProjectStatusBadge projects/status/{statusBadgeId}
		/// </summary>
		/// <param name="svg">Return an SVG image instead of PNG?  Exclusive with `retina`.</param>
		/// <param name="retina">Return a larger image suitable for retina displays?  Exclusive with `svg`.</param>
		/// <param name="passingText">Text to show in badge when build is passing.</param>
		/// <param name="failingText">Text to show in badge when build is failing.</param>
		/// <param name="pendingText">Text to show in badge when build is pending.</param>
		/// <returns>Success</returns>
		public async Task GetProjectStatusBadgeAsync(bool svg, bool retina, string passingText, string failingText, string pendingText, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/status/{statusBadgeId}?svg="+svg+"&retina="+retina+"&passingText=" + (passingText==null? "" : Uri.EscapeDataString(passingText))+"&failingText=" + (failingText==null? "" : Uri.EscapeDataString(failingText))+"&pendingText=" + (pendingText==null? "" : Uri.EscapeDataString(pendingText));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project branch status badge image
		/// GetProjectBranchStatusBadge projects/status/{statusBadgeId}/branch/{buildBranch}
		/// </summary>
		/// <param name="svg">Return an SVG image instead of PNG?  Exclusive with `retina`.</param>
		/// <param name="retina">Return a larger image suitable for retina displays?  Exclusive with `svg`.</param>
		/// <param name="passingText">Text to show in badge when build is passing.</param>
		/// <param name="failingText">Text to show in badge when build is failing.</param>
		/// <param name="pendingText">Text to show in badge when build is pending.</param>
		/// <returns>Success</returns>
		public async Task GetProjectBranchStatusBadgeAsync(bool svg, bool retina, string passingText, string failingText, string pendingText, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/status/{statusBadgeId}/branch/{buildBranch}?svg="+svg+"&retina="+retina+"&passingText=" + (passingText==null? "" : Uri.EscapeDataString(passingText))+"&failingText=" + (failingText==null? "" : Uri.EscapeDataString(failingText))+"&pendingText=" + (pendingText==null? "" : Uri.EscapeDataString(pendingText));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete project
		/// DeleteProject projects/{accountName}/{projectSlug}
		/// </summary>
		public async Task DeleteProjectAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project last build
		/// GetProjectLastBuild projects/{accountName}/{projectSlug}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectBuildResults> GetProjectLastBuildAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectBuildResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get last successful build artifact
		/// The `job` parameter is mandatory if the build contains multiple jobs.
		/// GetProjectArtifact projects/{accountName}/{projectSlug}/artifacts/{artifactFileName}
		/// </summary>
		/// <returns>Success</returns>
		public async Task GetProjectArtifactAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/artifacts/{artifactFileName}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project last branch build
		/// GetProjectLastBuildBranch projects/{accountName}/{projectSlug}/branch/{buildBranch}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectBuildResults> GetProjectLastBuildBranchAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/branch/{buildBranch}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectBuildResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project build by version
		/// GetProjectBuildByVersion projects/{accountName}/{projectSlug}/build/{buildVersion}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectBuildResults> GetProjectBuildByVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/build/{buildVersion}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectBuildResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete project build cache
		/// DeleteProjectBuildCache projects/{accountName}/{projectSlug}/buildcache
		/// </summary>
		public async Task DeleteProjectBuildCacheAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/buildcache";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project deployments
		/// GetProjectDeployments projects/{accountName}/{projectSlug}/deployments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectDeploymentsResults> GetProjectDeploymentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/deployments";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectDeploymentsResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project history
		/// GetProjectHistory projects/{accountName}/{projectSlug}/history
		/// </summary>
		/// <param name="recordsNumber">Number of results to include in the response. getProjectDeployments is documented to have a maximum of 20. It currently returns 500 Internal Server Error for recordsNumber <= 5. In the past it has returned 500 Internal Server Error for many different values which did not match the value used by the ci.appveyor.com web interface at the time.  As of 2018-09-08, the value used by the web interface is 10.</param>
		/// <param name="startBuildId">Maximum `buildId` to include in the results (exclusive).</param>
		/// <param name="branch">Repository Branch</param>
		/// <returns>Success</returns>
		public async Task<ProjectHistory> GetProjectHistoryAsync(int recordsNumber, int startBuildId, string branch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/history?recordsNumber="+recordsNumber+"&startBuildId="+startBuildId+"&branch=" + (branch==null? "" : Uri.EscapeDataString(branch));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectHistory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get project settings
		/// GetProjectSettings projects/{accountName}/{projectSlug}/settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProjectSettingsResults> GetProjectSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/settings";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProjectSettingsResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project build number
		/// UpdateProjectBuildNumber projects/{accountName}/{projectSlug}/settings/build-number
		/// </summary>
		public async Task UpdateProjectBuildNumberAsync(ProjectBuildNumberUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/settings/build-number";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project environment variables
		/// GetProjectEnvironmentVariables projects/{accountName}/{projectSlug}/settings/environment-variables
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StoredNameValue[]> GetProjectEnvironmentVariablesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/settings/environment-variables";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StoredNameValue[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update project environment variables
		/// UpdateProjectEnvironmentVariables projects/{accountName}/{projectSlug}/settings/environment-variables
		/// </summary>
		public async Task UpdateProjectEnvironmentVariablesAsync(StoredNameValue[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/settings/environment-variables";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get project settings in YAML
		/// GetProjectSettingsYaml projects/{accountName}/{projectSlug}/settings/yaml
		/// </summary>
		/// <returns>Success
		///
		///The schema type of this response could be specified as `file` to
		///denote opaque binary data.  The generated Java code for `file`
		///saves the response as a temporary file, making it a little more
		///difficult to use and less efficient for common cases.  If `string`
		///causes problems for other generators, can switch to `file` type.
		///</returns>
		public async Task<string> GetProjectSettingsYamlAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/{accountName}/{projectSlug}/settings/yaml";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(stream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get roles
		/// GetRoles roles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Role[]> GetRolesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roles";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Role[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add role
		/// AddRole roles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleWithGroups> AddRoleAsync(RoleAddition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RoleWithGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update role
		/// UpdateRole roles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleWithGroups> UpdateRoleAsync(RoleWithGroups requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roles";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RoleWithGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete role
		/// DeleteRole roles/{roleId}
		/// </summary>
		public async Task DeleteRoleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get role
		/// GetRole roles/{roleId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RoleWithGroups> GetRoleAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "roles/{roleId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RoleWithGroups>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users
		/// GetUsers users
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserAccount[]> GetUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UserAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add user
		/// AddUser users
		/// </summary>
		public async Task AddUserAsync(UserAddition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update user
		/// UpdateUser users
		/// </summary>
		public async Task UpdateUserAsync(UserAccount requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete user
		/// DeleteUser users/{userId}
		/// </summary>
		public async Task DeleteUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{userId}";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user
		/// GetUser users/{userId}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserAccountRolesResults> GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/{userId}";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UserAccountRolesResults>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
