//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Asset
	{
		
		/// <summary>
		/// Codes of the asset categories in which the asset is classified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Asset code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Description of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Date on which the asset expire
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string End_of_use { get; set; }
		
		/// <summary>
		/// Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Localizable { get; set; }
		
		/// <summary>
		/// Reference files of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssetReference_files[] AssetReference_files { get; set; }
		
		/// <summary>
		/// Tags of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Variations of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssetVariation_files[] AssetVariation_files { get; set; }
	}
	
	public class AssetReference_files
	{
		
		/// <summary>
		/// Links to get and download the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale code of the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
	}
	
	public class AssetVariation_files
	{
		
		/// <summary>
		/// Links to get and download the variation file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// Channel code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetCategory
	{
		
		/// <summary>
		/// Asset category code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Asset category labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Asset category code of the parent's asset category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetCategoryList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetReferenceFile
	{
		
		/// <summary>
		/// Links to get and download the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the asset reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale of the asset reference file, equal to `null` if the asset is not localizable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetReferenceFileUploadWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssetReferenceFileUploadWarningErrors[] AssetReferenceFileUploadWarningErrors { get; set; }
		
		/// <summary>
		/// Message explaining the warning
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	public class AssetReferenceFileUploadWarningErrors
	{
		
		/// <summary>
		/// Channel for which the variation file generation failed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Channel { get; set; }
		
		/// <summary>
		/// Locale for which the variation file generation failed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// Message explaining why the variation file generation failed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetTag
	{
		
		/// <summary>
		/// Asset tag code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetTagList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssetVariationFile
	{
		
		/// <summary>
		/// Links to get and download the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the asset variation file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale of the asset variation file, equal to `null` if the asset is not localizable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// Channel of the asset variation file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationType
	{
		
		/// <summary>
		/// Association type code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Association type labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationTypeList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Attribute
	{
		
		/// <summary>
		/// Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Allowed_extensions { get; set; }
		
		/// <summary>
		/// To make the attribute locale specfic, specify here for which locales it is specific
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Available_locales { get; set; }
		
		/// <summary>
		/// Attribute code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Maximum date allowed when the attribute type is `pim_catalog_date`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_max { get; set; }
		
		/// <summary>
		/// Minimum date allowed when the attribute type is `pim_catalog_date`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_min { get; set; }
		
		/// <summary>
		/// Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Decimals_allowed { get; set; }
		
		/// <summary>
		/// Default metric unit when the attribute type is `pim_catalog_metric`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Default_metric_unit { get; set; }
		
		/// <summary>
		/// Attribute group
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		/// <summary>
		/// Attribute labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Whether the attribute is localizable, i.e. can have one value by locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Localizable { get; set; }
		
		/// <summary>
		/// Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max_characters { get; set; }
		
		/// <summary>
		/// Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Max_file_size { get; set; }
		
		/// <summary>
		/// Metric family when the attribute type is `pim_catalog_metric`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metric_family { get; set; }
		
		/// <summary>
		/// Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Negative_allowed { get; set; }
		
		/// <summary>
		/// Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number_max { get; set; }
		
		/// <summary>
		/// Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number_min { get; set; }
		
		/// <summary>
		/// Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference_data_name { get; set; }
		
		/// <summary>
		/// Whether the attribute is scopable, i.e. can have one value by channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Scopable { get; set; }
		
		/// <summary>
		/// Order of the attribute in its group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		/// <summary>
		/// Attribute type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Required()]
		public AttributeType Type { get; set; }
		
		/// <summary>
		/// Whether two values for the attribute cannot be the same
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Unique { get; set; }
		
		/// <summary>
		/// Whether the attribute can be used as a filter for the product grid in the PIM user interface
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Useable_as_grid_filter { get; set; }
		
		/// <summary>
		/// Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Validation_regexp { get; set; }
		
		/// <summary>
		/// Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Validation_rule { get; set; }
		
		/// <summary>
		/// Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Wysiwyg_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_identifier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_reference_data_multi_select = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_reference_data_simple_select = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_simpleselect = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_multiselect = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_date = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_textarea = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_text = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_file = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_image = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_price_collection = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_boolean = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		akeneo_reference_entity = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		akeneo_reference_entity_collection = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeGroup
	{
		
		/// <summary>
		/// Attribute codes that compose the attribute group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Attribute group code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Attribute group labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Attribute group order among other attribute groups
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeGroupList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeOption
	{
		
		/// <summary>
		/// Code of attribute related to the attribute option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Code of option
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Attribute option labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Order of attribute option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeOptionList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Category
	{
		
		/// <summary>
		/// Category code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Category labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Category code of the parent's category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategoryList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Channel
	{
		
		/// <summary>
		/// Code of the category tree linked to the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_tree { get; set; }
		
		/// <summary>
		/// Channel code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Units to which the given metric attributes should be converted when exporting products
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Conversion_units { get; set; }
		
		/// <summary>
		/// Codes of activated currencies for the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Currencies { get; set; }
		
		/// <summary>
		/// Channel labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Codes of activated locales for the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Locales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Currency
	{
		
		/// <summary>
		/// Currency code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Whether the currency is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrencyList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		/// <summary>
		/// HTTP status code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Message explaining the error
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorByLine
	{
		
		/// <summary>
		/// Resource code, only filled when the resource is not a product
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Resource identifier, only filled when the resource is a product
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Line number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Line { get; set; }
		
		/// <summary>
		/// Message explaining the error
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status_code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Family
	{
		
		/// <summary>
		/// Attribute code used as the main picture in the user interface (only since v2.0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_as_image { get; set; } = "null";
		
		/// <summary>
		/// Attribute code used as label
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_as_label { get; set; }
		
		/// <summary>
		/// Attributes codes of the family that are required for the completeness calculation for each channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_requirements { get; set; }
		
		/// <summary>
		/// Attributes codes that compose the family
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Family code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Family labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FamilyList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FamilyVariant
	{
		
		/// <summary>
		/// Family variant code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Family variant labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Attributes distribution according to the enrichment level
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FamilyVariantVariant_attribute_sets[] FamilyVariantVariant_attribute_sets { get; set; }
	}
	
	public class FamilyVariantVariant_attribute_sets
	{
		
		/// <summary>
		/// Codes of attributes bind to this enrichment level
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Codes of attributes used as variant axes
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Axes { get; set; }
		
		/// <summary>
		/// Enrichment level
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FamilyVariantList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ItemList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Locale
	{
		
		/// <summary>
		/// Locale code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Whether the locale is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocaleList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeasureFamily
	{
		
		/// <summary>
		/// Measure family code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Measure family standard
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Standard { get; set; }
		
		/// <summary>
		/// Family units
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MeasureFamilyUnits[] MeasureFamilyUnits { get; set; }
	}
	
	public class MeasureFamilyUnits
	{
		
		/// <summary>
		/// Measure code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Mathematic operation to convert the unit into the standard unit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Convert { get; set; }
		
		/// <summary>
		/// Measure symbol
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MeasureFamilyList
	{
	}
	
	public class MediaFile
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaFileItemList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaFileList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Pagination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
		
		/// <summary>
		/// Current page number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Current_page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Product
	{
		
		/// <summary>
		/// Several associations related to groups and/or other products, grouped by association types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Associations { get; set; }
		
		/// <summary>
		/// Codes of the categories in which the product is classified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Date of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Whether the product is enable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Family code from which the product inherits its attributes and attributes requirements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; } = "null only in the case of a non variant product";
		
		/// <summary>
		/// Codes of the groups to which the product belong
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// More information around the product (only available since the v2.0 in the Enterprise Edition)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
		
		/// <summary>
		/// Date of the last update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		/// <summary>
		/// Product attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductModel
	{
		
		/// <summary>
		/// Codes of the categories in which the product model is categorized
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Product model code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Date of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Family code  from which the product inherits its attributes and attributes requirements (since the 3.2)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; }
		
		/// <summary>
		/// Family variant code from which the product model inherits its attributes and variant attributes
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Family_variant { get; set; }
		
		/// <summary>
		/// More information around the product model (only available since the v2.3 in the Enterprise Edition)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Code of the parent product model. This parent can be modified since the 2.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
		
		/// <summary>
		/// Date of the last update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		/// <summary>
		/// Product model attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductModelList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishedProduct
	{
		
		/// <summary>
		/// Several associations related to groups and/or other published products, grouped by association types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Associations { get; set; }
		
		/// <summary>
		/// Codes of the categories in which the published product is classified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Date of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Whether the published product is enable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Family code from which the published product inherits its attributes and attributes requirements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; } = "null";
		
		/// <summary>
		/// Codes of the groups to which the published product belong
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Date of the last update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		/// <summary>
		/// Published product attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishedProductList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntity
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityAttribute
	{
		
		/// <summary>
		/// Extensions allowed when the attribute type is `image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Allowed_extensions { get; set; }
		
		/// <summary>
		/// Attribute code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Whether decimals are allowed when the attribute type is `number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Decimals_allowed { get; set; }
		
		/// <summary>
		/// Whether the attribute should be part of the record's completeness calculation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_required_for_completeness { get; set; }
		
		/// <summary>
		/// Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_rich_text_editor { get; set; }
		
		/// <summary>
		/// Whether the UI should display a text area instead of a simple field when the attribute type is `text`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Is_textarea { get; set; }
		
		/// <summary>
		/// Attribute labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max_characters { get; set; }
		
		/// <summary>
		/// Max file size in MB when the attribute type is `image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Max_file_size { get; set; }
		
		/// <summary>
		/// Maximum value allowed when the attribute type is `number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Max_value { get; set; }
		
		/// <summary>
		/// Minimum value allowed when the attribute type is `number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Min_value { get; set; }
		
		/// <summary>
		/// Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference_entity_code { get; set; }
		
		/// <summary>
		/// Attribute type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Required()]
		public ReferenceEntityAttributeType Type { get; set; }
		
		/// <summary>
		/// Regexp expression used to validate the attribute value when the attribute type is `text`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Validation_regexp { get; set; }
		
		/// <summary>
		/// Validation rule type used to validate the attribute value when the attribute type is `text`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReferenceEntityAttributeValidation_rule Validation_rule { get; set; } = ReferenceEntityAttributeValidation_rule.none;
		
		/// <summary>
		/// Whether the attribute is scopable, i.e. can have one value by channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Value_per_channel { get; set; }
		
		/// <summary>
		/// Whether the attribute is localizable, i.e. can have one value by locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Value_per_locale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReferenceEntityAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single_option = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multiple_options = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reference_entity_single_link = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reference_entity_multiple_links = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReferenceEntityAttributeValidation_rule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regexp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityAttributeOption
	{
		
		/// <summary>
		/// Attribute's option code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Attribute labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityItemList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityRecord
	{
		
		/// <summary>
		/// Code of the record
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Record attributes values, see <a href='/documentation/resources.html#reference-entity-record-values'>Reference entity record values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityRecordItemList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReferenceEntityRecordList
	{
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchAfterPagination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _links { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get authentication token
		/// This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
		/// Post_token api/oauth/v1/token
		/// </summary>
		/// <returns>Return an authentication token</returns>
		public async Task<string> Post_tokenAsync(Post_tokenBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/oauth/v1/token";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of all endpoints
		/// This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
		/// Get_endpoints api/rest/v1
		/// </summary>
		/// <returns>Return the list of all available endpoints</returns>
		public async Task<string> Get_endpointsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of asset categories
		/// This endpoint allows you to get a list of asset categories. Asset categories are paginated and sorted by `root/left`.
		/// Get_asset_categories api/rest/v1/asset-categories
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Returns asset categories paginated</returns>
		public async Task<string> Get_asset_categoriesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/asset-categories?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new asset category
		/// This endpoint allows you to create a new asset category.
		/// Post_asset_categories api/rest/v1/asset-categories
		/// </summary>
		public async Task Post_asset_categoriesAsync(Post_asset_categoriesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/asset-categories";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an asset category
		/// This endpoint allows you to get the information about a given asset category.
		/// Get_asset_categories__code_ api/rest/v1/asset-categories/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_asset_categories__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/asset-categories/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of asset tags
		/// This endpoint allows you to get a list of asset tags. Asset tags are paginated.
		/// Get_asset_tags api/rest/v1/asset-tags
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Returns asset tags paginated</returns>
		public async Task<string> Get_asset_tagsAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/asset-tags?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an asset tag
		/// This endpoint allows you to get the information about a given asset tag.
		/// Get_asset_tags__code_ api/rest/v1/asset-tags/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_asset_tags__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/asset-tags/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of assets
		/// This endpoint allows you to get a list of assets. Assets are paginated.
		/// Get_assets api/rest/v1/assets
		/// </summary>
		/// <param name="pagination_type">Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Returns assets paginated</returns>
		public async Task<string> Get_assetsAsync(string pagination_type, int page, string search_after, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets?pagination_type=" + (pagination_type==null? "" : Uri.EscapeDataString(pagination_type))+"&page="+page+"&search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after))+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new asset
		/// This endpoint allows you to create a new asset.
		/// Post_assets api/rest/v1/assets
		/// </summary>
		public async Task Post_assetsAsync(Post_assetsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a reference file
		/// This endpoint allows you to get the information about a reference file of a given asset.
		/// Get_reference_files__locale_code_ api/rest/v1/assets/{asset_code}/reference-files/{locale_code}
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		/// <returns>OK</returns>
		public async Task<string> Get_reference_files__locale_code_Async(string asset_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/reference-files/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a new reference file
		/// This endpoint allows you to upload a new reference file for a given asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
		/// Post_reference_files__locale_code_ api/rest/v1/assets/{asset_code}/reference-files/{locale_code}
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		public async Task Post_reference_files__locale_code_Async(string asset_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/reference-files/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a reference file
		/// This endpoint allows you to download a given reference file.
		/// Get_reference_files__channel_code__locale_code__download api/rest/v1/assets/{asset_code}/reference-files/{locale_code}/download
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		/// <returns>OK</returns>
		public async Task Get_reference_files__channel_code__locale_code__downloadAsync(string asset_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/reference-files/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code))+"/download";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a variation file
		/// This endpoint allows you to get the information about a variation file of a given asset.
		/// Get_variation_files__channel_code__locale_code api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="channel_code">Code of the channel</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		/// <returns>OK</returns>
		public async Task<string> Get_variation_files__channel_code__locale_codeAsync(string asset_code, string channel_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/variation-files/"+ (channel_code==null? "" : Uri.EscapeDataString(channel_code))+"/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a new variation file
		/// This endpoint allows you to upload a new variation file for a given asset, channel and locale.
		/// Post_variation_files__channel_code__locale_code_ api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="channel_code">Code of the channel</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		public async Task Post_variation_files__channel_code__locale_code_Async(string asset_code, string channel_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/variation-files/"+ (channel_code==null? "" : Uri.EscapeDataString(channel_code))+"/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a variation file
		/// This endpoint allows you to download a given variation file.
		/// Get_variation_files__channel_code__locale_code__download api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download
		/// </summary>
		/// <param name="asset_code">Code of the asset</param>
		/// <param name="channel_code">Code of the channel</param>
		/// <param name="locale_code">Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable</param>
		/// <returns>OK</returns>
		public async Task Get_variation_files__channel_code__locale_code__downloadAsync(string asset_code, string channel_code, string locale_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (asset_code==null? "" : Uri.EscapeDataString(asset_code))+"/variation-files/"+ (channel_code==null? "" : Uri.EscapeDataString(channel_code))+"/"+ (locale_code==null? "" : Uri.EscapeDataString(locale_code))+"/download";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an asset
		/// This endpoint allows you to get the information about a given asset.
		/// Get_assets__code_ api/rest/v1/assets/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_assets__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/assets/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of association types
		/// This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
		/// Association_types_get_list api/rest/v1/association-types
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return association types paginated</returns>
		public async Task<string> Association_types_get_listAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/association-types?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new association type
		/// This endpoint allows you to create a new association type.
		/// Association_types_post api/rest/v1/association-types
		/// </summary>
		public async Task Association_types_postAsync(Association_types_postBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/association-types";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an association type
		/// This endpoint allows you to get the information about a given association type.
		/// Association_types_get api/rest/v1/association-types/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Association_types_getAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/association-types/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of attribute groups
		/// This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
		/// Attribute_groups_get_list api/rest/v1/attribute-groups
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return attribute groups paginated</returns>
		public async Task<string> Attribute_groups_get_listAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attribute-groups?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new attribute group
		/// This endpoint allows you to create a new attribute group.
		/// Attribute_groups_post api/rest/v1/attribute-groups
		/// </summary>
		public async Task Attribute_groups_postAsync(Attribute_groups_postBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attribute-groups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an attribute group
		/// This endpoint allows you to get the information about a given attribute group.
		/// Attribute_groups_get api/rest/v1/attribute-groups/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Attribute_groups_getAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attribute-groups/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of attributes
		/// This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
		/// Get_attributes api/rest/v1/attributes
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return attributes paginated</returns>
		public async Task<string> Get_attributesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new attribute
		/// This endpoint allows you to create a new attribute.
		/// Post_attributes api/rest/v1/attributes
		/// </summary>
		public async Task Post_attributesAsync(Post_attributesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of attribute options
		/// This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
		/// Get_attributes__attribute_code__options api/rest/v1/attributes/{attribute_code}/options
		/// </summary>
		/// <param name="attribute_code">Code of the attribute</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return attribute options paginated</returns>
		public async Task<string> Get_attributes__attribute_code__optionsAsync(string attribute_code, int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes/"+ (attribute_code==null? "" : Uri.EscapeDataString(attribute_code))+"/options&page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new attribute option
		/// This endpoint allows you to create a new attribute option.
		/// Post_attributes__attribute_code__options api/rest/v1/attributes/{attribute_code}/options
		/// </summary>
		/// <param name="attribute_code">Code of the attribute</param>
		public async Task Post_attributes__attribute_code__optionsAsync(string attribute_code, Post_attributes__attribute_code__optionsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes/"+ (attribute_code==null? "" : Uri.EscapeDataString(attribute_code))+"/options";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an attribute option
		/// This endpoint allows you to get the information about a given attribute option.
		/// Get_attributes__attribute_code__options__code_ api/rest/v1/attributes/{attribute_code}/options/{code}
		/// </summary>
		/// <param name="attribute_code">Code of the attribute</param>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_attributes__attribute_code__options__code_Async(string attribute_code, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes/"+ (attribute_code==null? "" : Uri.EscapeDataString(attribute_code))+"/options/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an attribute
		/// This endpoint allows you to get the information about a given attribute.
		/// Get_attributes__code_ api/rest/v1/attributes/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_attributes__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/attributes/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of categories
		/// This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
		/// Get_categories api/rest/v1/categories
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return categories paginated</returns>
		public async Task<string> Get_categoriesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/categories?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new category
		/// This endpoint allows you to create a new category.
		/// Post_categories api/rest/v1/categories
		/// </summary>
		public async Task Post_categoriesAsync(Post_categoriesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/categories";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a category
		/// This endpoint allows you to get the information about a given category.
		/// Get_categories__code_ api/rest/v1/categories/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_categories__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/categories/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of channels
		/// This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
		/// Get_channels api/rest/v1/channels
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return channels paginated</returns>
		public async Task<string> Get_channelsAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/channels?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new channel
		/// This endpoint allows you to create a new channel.
		/// Channels_post api/rest/v1/channels
		/// </summary>
		public async Task Channels_postAsync(Channels_postBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/channels";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a channel
		/// This endpoint allows you to get the information about a given channel.
		/// Get_channels__code_ api/rest/v1/channels/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_channels__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/channels/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of currencies
		/// This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
		/// Currencies_get_list api/rest/v1/currencies
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return currencies paginated</returns>
		public async Task<string> Currencies_get_listAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/currencies?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a currency
		/// This endpoint allows you to get the information about a given currency.
		/// Currencies_get api/rest/v1/currencies/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Currencies_getAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/currencies/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of families
		/// This endpoint allows you to get a list of families. Families are paginated and sorted by code.
		/// Get_families api/rest/v1/families
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return families paginated</returns>
		public async Task<string> Get_familiesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new family
		/// This endpoint allows you to create a new family.
		/// Post_families api/rest/v1/families
		/// </summary>
		public async Task Post_familiesAsync(Post_familiesBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a family
		/// This endpoint allows you to get the information about a given family.
		/// Get_families__code_ api/rest/v1/families/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_families__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of family variants
		/// This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
		/// Get_families__family_code__variants api/rest/v1/families/{family_code}/variants
		/// </summary>
		/// <param name="family_code">Code of the family</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return family variants paginated</returns>
		public async Task<string> Get_families__family_code__variantsAsync(string family_code, int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families/"+ (family_code==null? "" : Uri.EscapeDataString(family_code))+"/variants&page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new family variant
		/// This endpoint allows you to create a family variant.
		/// Post_families__family_code__variants api/rest/v1/families/{family_code}/variants
		/// </summary>
		/// <param name="family_code">Code of the family</param>
		public async Task Post_families__family_code__variantsAsync(string family_code, Post_families__family_code__variantsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families/"+ (family_code==null? "" : Uri.EscapeDataString(family_code))+"/variants";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a family variant
		/// This endpoint allows you to get the information about a given family variant.
		/// Get_families__family_code__variants__code__ api/rest/v1/families/{family_code}/variants/{code}
		/// </summary>
		/// <param name="family_code">Code of the family</param>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_families__family_code__variants__code__Async(string family_code, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/families/"+ (family_code==null? "" : Uri.EscapeDataString(family_code))+"/variants/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of locales
		/// This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
		/// Get_locales api/rest/v1/locales
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return locales paginated</returns>
		public async Task<string> Get_localesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/locales?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a locale
		/// This endpoint allows you to get the information about a given locale.
		/// Get_locales__code_ api/rest/v1/locales/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_locales__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/locales/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of measure familiy
		/// This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
		/// Measure_families_get_list api/rest/v1/measure-families
		/// </summary>
		/// <returns>Return measure families paginated</returns>
		public async Task<string> Measure_families_get_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/measure-families";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a measure family
		/// This endpoint allows you to get the information about a given measure family.
		/// Measure_families_get api/rest/v1/measure-families/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Measure_families_getAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/measure-families/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of product media files
		/// This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
		/// Get_media_files api/rest/v1/media-files
		/// </summary>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return media files paginated</returns>
		public async Task<string> Get_media_filesAsync(int page, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/media-files?page="+page+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new product media file
		/// This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
		/// Post_media_files api/rest/v1/media-files
		/// </summary>
		public async Task Post_media_filesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/media-files";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a product media file
		/// This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
		/// Get_media_files__code_ api/rest/v1/media-files/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task Get_media_files__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/media-files/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a product media file
		/// This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
		/// Get_media_files__code__download api/rest/v1/media-files/{code}/download
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task Get_media_files__code__downloadAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/media-files/"+ (code==null? "" : Uri.EscapeDataString(code))+"/download";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of product models
		/// This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
		/// Get_product_models api/rest/v1/product-models
		/// </summary>
		/// <param name="search">Filter product models, for more details see the <a href="/documentation/filter.html">Filters</a> section</param>
		/// <param name="scope">Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="locales">Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="attributes">Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="pagination_type">Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return product models paginated</returns>
		public async Task<string> Get_product_modelsAsync(string search, string scope, string locales, string attributes, string pagination_type, int page, string search_after, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/product-models?search=" + (search==null? "" : Uri.EscapeDataString(search))+"&scope=" + (scope==null? "" : Uri.EscapeDataString(scope))+"&locales=" + (locales==null? "" : Uri.EscapeDataString(locales))+"&attributes=" + (attributes==null? "" : Uri.EscapeDataString(attributes))+"&pagination_type=" + (pagination_type==null? "" : Uri.EscapeDataString(pagination_type))+"&page="+page+"&search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after))+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new product model
		/// This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
		/// Post_product_models api/rest/v1/product-models
		/// </summary>
		public async Task Post_product_modelsAsync(Post_product_modelsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/product-models";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a product model
		/// This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
		/// Get_product_models__code_ api/rest/v1/product-models/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_product_models__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/product-models/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a draft
		/// This endpoint allows you to get the information about a given product model draft.
		/// Get_product_model_draft__code_ api/rest/v1/product-models/{code}/draft
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_product_model_draft__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/product-models/"+ (code==null? "" : Uri.EscapeDataString(code))+"/draft";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a draft for approval
		/// This endpoint allows you to submit a product model draft for approval.
		/// Post_product_model_proposal api/rest/v1/product-models/{code}/proposal
		/// </summary>
		/// <param name="code">Code of the resource</param>
		public async Task Post_product_model_proposalAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/product-models/"+ (code==null? "" : Uri.EscapeDataString(code))+"/proposal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of products
		/// This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
		/// Get_products api/rest/v1/products
		/// </summary>
		/// <param name="search">Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section</param>
		/// <param name="scope">Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="locales">Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="attributes">Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="pagination_type">Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return products paginated</returns>
		public async Task<string> Get_productsAsync(string search, string scope, string locales, string attributes, string pagination_type, int page, string search_after, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products?search=" + (search==null? "" : Uri.EscapeDataString(search))+"&scope=" + (scope==null? "" : Uri.EscapeDataString(scope))+"&locales=" + (locales==null? "" : Uri.EscapeDataString(locales))+"&attributes=" + (attributes==null? "" : Uri.EscapeDataString(attributes))+"&pagination_type=" + (pagination_type==null? "" : Uri.EscapeDataString(pagination_type))+"&page="+page+"&search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after))+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new product
		/// This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
		/// Post_products api/rest/v1/products
		/// </summary>
		public async Task Post_productsAsync(Post_productsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a product
		/// This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
		/// Delete_products__code_ api/rest/v1/products/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		public async Task Delete_products__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a product
		/// This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
		/// Get_products__code_ api/rest/v1/products/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_products__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a draft
		/// This endpoint allows you to get the information about a given draft.
		/// Get_draft__code_ api/rest/v1/products/{code}/draft
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_draft__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products/"+ (code==null? "" : Uri.EscapeDataString(code))+"/draft";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a draft for approval
		/// This endpoint allows you to submit a draft for approval.
		/// Post_proposal api/rest/v1/products/{code}/proposal
		/// </summary>
		/// <param name="code">Code of the resource</param>
		public async Task Post_proposalAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/products/"+ (code==null? "" : Uri.EscapeDataString(code))+"/proposal";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of published products
		/// This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
		/// Get_published_products api/rest/v1/published-products
		/// </summary>
		/// <param name="search">Filter published products, for more details see the <a href="/documentation/filter.html">Filters</a> section</param>
		/// <param name="scope">Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on published product values</a> section</param>
		/// <param name="locales">Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on published product values</a> section</param>
		/// <param name="attributes">Filter published product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section</param>
		/// <param name="pagination_type">Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="page">Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section</param>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="limit">Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <param name="with_count">Return the count of products in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way</param>
		/// <returns>Return published products paginated</returns>
		public async Task<string> Get_published_productsAsync(string search, string scope, string locales, string attributes, string pagination_type, int page, string search_after, int limit, bool with_count, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/published-products?search=" + (search==null? "" : Uri.EscapeDataString(search))+"&scope=" + (scope==null? "" : Uri.EscapeDataString(scope))+"&locales=" + (locales==null? "" : Uri.EscapeDataString(locales))+"&attributes=" + (attributes==null? "" : Uri.EscapeDataString(attributes))+"&pagination_type=" + (pagination_type==null? "" : Uri.EscapeDataString(pagination_type))+"&page="+page+"&search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after))+"&limit="+limit+"&with_count="+with_count;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a published product
		/// This endpoint allows you to get the information about a given published product.
		/// Get_published_products__code_ api/rest/v1/published-products/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_published_products__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/published-products/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of reference entities
		/// This endpoint allows you to get a list of reference entities. Reference entities are paginated.
		/// Get_reference_entities api/rest/v1/reference-entities
		/// </summary>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <returns>Return reference entities paginated</returns>
		public async Task<string> Get_reference_entitiesAsync(string search_after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities?search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new media file for a reference entity or a record
		/// This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
		/// Post_reference_entity_media_files api/rest/v1/reference-entities-media-files
		/// </summary>
		public async Task Post_reference_entity_media_filesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities-media-files";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the media file associated to a reference entity or a record
		/// This endpoint allows you to download a given media file that is associated with a reference entity or a record.
		/// Get_reference_entity_media_files__code api/rest/v1/reference-entities-media-files/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task Get_reference_entity_media_files__codeAsync(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities-media-files/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a reference entity
		/// This endpoint allows you to get the information about a given reference entity.
		/// Get_reference_entities__code_ api/rest/v1/reference-entities/{code}
		/// </summary>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_reference_entities__code_Async(string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of attributes of a given reference entity
		/// This endpoint allows you to get the list of attributes of a given reference entity.
		/// Get_reference_entities__code__attributes api/rest/v1/reference-entities/{reference_entity_code}/attributes
		/// </summary>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <returns>Return the attributes of the given reference entity</returns>
		public async Task<string[]> Get_reference_entities__code__attributesAsync(string reference_entity_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/attributes";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of attribute options of a given attribute for a given reference entity
		/// This endpoint allows you to get a list of attribute options for a given reference entity.
		/// Get_reference_entity_attributes__attribute_code__options api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options
		/// </summary>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <param name="attribute_code">Code of the attribute</param>
		/// <returns>Return the options of the given attributes of the given reference entity</returns>
		public async Task<string[]> Get_reference_entity_attributes__attribute_code__optionsAsync(string reference_entity_code, string attribute_code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/attributes/"+ (attribute_code==null? "" : Uri.EscapeDataString(attribute_code))+"/options";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an attribute option for a given attribute of a given reference entity
		/// This endpoint allows you to get the information about a given attribute option.
		/// Get_reference_entity_attributes__attribute_code__options__code_ api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}
		/// </summary>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <param name="attribute_code">Code of the attribute</param>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_reference_entity_attributes__attribute_code__options__code_Async(string reference_entity_code, string attribute_code, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/attributes/"+ (attribute_code==null? "" : Uri.EscapeDataString(attribute_code))+"/options/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an attribute of a given reference entity
		/// This endpoint allows you to get the information about a given attribute for a given reference entity.
		/// Get_reference_entity_attributes__code_ api/rest/v1/reference-entities/{reference_entity_code}/attributes/{code}
		/// </summary>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_reference_entity_attributes__code_Async(string reference_entity_code, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/attributes/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of the records of a reference entity
		/// This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
		/// Get_reference_entity_records api/rest/v1/reference-entities/{reference_entity_code}/records
		/// </summary>
		/// <param name="search">Filter records of the reference entity, for more details see the <a href="/documentation/filter.html#filter-reference-entity-records">Filters</a> section</param>
		/// <param name="channel">Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-attribute-values-by-channel">Filter attribute values by channel</a> section</param>
		/// <param name="locales">Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href=/documentation/filter.html#filter-attribute-values-by-locale">Filter attribute values by locale</a> section</param>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <param name="search_after">Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section</param>
		/// <returns>Return the records of the given reference entity paginated</returns>
		public async Task<string> Get_reference_entity_recordsAsync(string search, string channel, string locales, string reference_entity_code, string search_after, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/records?search=" + (search==null? "" : Uri.EscapeDataString(search))+"&channel=" + (channel==null? "" : Uri.EscapeDataString(channel))+"&locales=" + (locales==null? "" : Uri.EscapeDataString(locales))+"&search_after=" + (search_after==null? "" : Uri.EscapeDataString(search_after));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a record of a given reference entity
		/// This endpoint allows you to get the information about a given record for a given reference entity.
		/// Get_reference_entity_records__code_ api/rest/v1/reference-entities/{reference_entity_code}/records/{code}
		/// </summary>
		/// <param name="reference_entity_code">Code of the reference entity</param>
		/// <param name="code">Code of the resource</param>
		/// <returns>OK</returns>
		public async Task<string> Get_reference_entity_records__code_Async(string reference_entity_code, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/rest/v1/reference-entities/"+ (reference_entity_code==null? "" : Uri.EscapeDataString(reference_entity_code))+"/records/"+ (code==null? "" : Uri.EscapeDataString(code));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_tokenBody
	{
		
		/// <summary>
		/// Always equal to "password"
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Grant_type { get; set; }
		
		/// <summary>
		/// Your PIM password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// Your PIM username
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_asset_categoriesBody
	{
		
		/// <summary>
		/// Asset category code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Asset category labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Asset category code of the parent's asset category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_assetsBody
	{
		
		/// <summary>
		/// Codes of the asset categories in which the asset is classified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Asset code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Description of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Date on which the asset expire
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string End_of_use { get; set; }
		
		/// <summary>
		/// Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Localizable { get; set; }
		
		/// <summary>
		/// Reference files of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Post_assetsBodyReference_files[] Post_assetsBodyReference_files { get; set; }
		
		/// <summary>
		/// Tags of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Variations of the asset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Post_assetsBodyVariation_files[] Post_assetsBodyVariation_files { get; set; }
	}
	
	public class Post_assetsBodyReference_files
	{
		
		/// <summary>
		/// Links to get and download the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale code of the reference file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
	}
	
	public class Post_assetsBodyVariation_files
	{
		
		/// <summary>
		/// Links to get and download the variation file
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _link { get; set; }
		
		/// <summary>
		/// Code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Locale code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// Channel code of the variation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Association_types_postBody
	{
		
		/// <summary>
		/// Association type code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Association type labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Attribute_groups_postBody
	{
		
		/// <summary>
		/// Attribute codes that compose the attribute group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Attribute group code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Attribute group labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Attribute group order among other attribute groups
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_attributesBody
	{
		
		/// <summary>
		/// Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Allowed_extensions { get; set; }
		
		/// <summary>
		/// To make the attribute locale specfic, specify here for which locales it is specific
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Available_locales { get; set; }
		
		/// <summary>
		/// Attribute code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Maximum date allowed when the attribute type is `pim_catalog_date`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_max { get; set; }
		
		/// <summary>
		/// Minimum date allowed when the attribute type is `pim_catalog_date`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date_min { get; set; }
		
		/// <summary>
		/// Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Decimals_allowed { get; set; }
		
		/// <summary>
		/// Default metric unit when the attribute type is `pim_catalog_metric`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Default_metric_unit { get; set; }
		
		/// <summary>
		/// Attribute group
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		/// <summary>
		/// Attribute labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Whether the attribute is localizable, i.e. can have one value by locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Localizable { get; set; }
		
		/// <summary>
		/// Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Max_characters { get; set; }
		
		/// <summary>
		/// Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Max_file_size { get; set; }
		
		/// <summary>
		/// Metric family when the attribute type is `pim_catalog_metric`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metric_family { get; set; }
		
		/// <summary>
		/// Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Negative_allowed { get; set; }
		
		/// <summary>
		/// Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number_max { get; set; }
		
		/// <summary>
		/// Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Number_min { get; set; }
		
		/// <summary>
		/// Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference_data_name { get; set; }
		
		/// <summary>
		/// Whether the attribute is scopable, i.e. can have one value by channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Scopable { get; set; }
		
		/// <summary>
		/// Order of the attribute in its group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
		
		/// <summary>
		/// Attribute type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Required()]
		public Post_attributesBodyType Type { get; set; }
		
		/// <summary>
		/// Whether two values for the attribute cannot be the same
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Unique { get; set; }
		
		/// <summary>
		/// Whether the attribute can be used as a filter for the product grid in the PIM user interface
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Useable_as_grid_filter { get; set; }
		
		/// <summary>
		/// Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Validation_regexp { get; set; }
		
		/// <summary>
		/// Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Validation_rule { get; set; }
		
		/// <summary>
		/// Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Wysiwyg_enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Post_attributesBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_identifier = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_metric = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_number = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_reference_data_multi_select = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_reference_data_simple_select = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_simpleselect = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_multiselect = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_date = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_textarea = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_text = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_file = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_image = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_price_collection = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pim_catalog_boolean = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		akeneo_reference_entity = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		akeneo_reference_entity_collection = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_attributes__attribute_code__optionsBody
	{
		
		/// <summary>
		/// Code of attribute related to the attribute option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Code of option
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Attribute option labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Order of attribute option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sort_order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_categoriesBody
	{
		
		/// <summary>
		/// Category code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Category labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Category code of the parent's category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Channels_postBody
	{
		
		/// <summary>
		/// Code of the category tree linked to the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_tree { get; set; }
		
		/// <summary>
		/// Channel code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Units to which the given metric attributes should be converted when exporting products
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Conversion_units { get; set; }
		
		/// <summary>
		/// Codes of activated currencies for the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Currencies { get; set; }
		
		/// <summary>
		/// Channel labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Codes of activated locales for the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Locales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_familiesBody
	{
		
		/// <summary>
		/// Attribute code used as the main picture in the user interface (only since v2.0)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_as_image { get; set; } = "null";
		
		/// <summary>
		/// Attribute code used as label
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_as_label { get; set; }
		
		/// <summary>
		/// Attributes codes of the family that are required for the completeness calculation for each channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute_requirements { get; set; }
		
		/// <summary>
		/// Attributes codes that compose the family
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Family code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Family labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_families__family_code__variantsBody
	{
		
		/// <summary>
		/// Family variant code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Family variant labels for each locale
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Labels { get; set; }
		
		/// <summary>
		/// Attributes distribution according to the enrichment level
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Post_families__family_code__variantsBodyVariant_attribute_sets[] Post_families__family_code__variantsBodyVariant_attribute_sets { get; set; }
	}
	
	public class Post_families__family_code__variantsBodyVariant_attribute_sets
	{
		
		/// <summary>
		/// Codes of attributes bind to this enrichment level
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		/// <summary>
		/// Codes of attributes used as variant axes
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Axes { get; set; }
		
		/// <summary>
		/// Enrichment level
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_product_modelsBody
	{
		
		/// <summary>
		/// Codes of the categories in which the product model is categorized
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Product model code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// Date of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Family code  from which the product inherits its attributes and attributes requirements (since the 3.2)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; }
		
		/// <summary>
		/// Family variant code from which the product model inherits its attributes and variant attributes
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Family_variant { get; set; }
		
		/// <summary>
		/// More information around the product model (only available since the v2.3 in the Enterprise Edition)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Code of the parent product model. This parent can be modified since the 2.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
		
		/// <summary>
		/// Date of the last update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		/// <summary>
		/// Product model attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Post_productsBody
	{
		
		/// <summary>
		/// Several associations related to groups and/or other products, grouped by association types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Associations { get; set; }
		
		/// <summary>
		/// Codes of the categories in which the product is classified
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		/// <summary>
		/// Date of creation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		/// <summary>
		/// Whether the product is enable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Family code from which the product inherits its attributes and attributes requirements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; } = "null only in the case of a non variant product";
		
		/// <summary>
		/// Codes of the groups to which the product belong
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		/// <summary>
		/// More information around the product (only available since the v2.0 in the Enterprise Edition)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Code of the parent product model when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Parent { get; set; } = "null";
		
		/// <summary>
		/// Date of the last update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Updated { get; set; }
		
		/// <summary>
		/// Product attributes values, see <a href='/documentation/resources.html#product-values'>Product values</a> section for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Values { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
