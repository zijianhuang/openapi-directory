//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountInfo
	{
		
		/// <summary>
		/// Indicator for the length of time since this shopper account was created in the merchant's environment.
		///Allowed values:
		///* notApplicable
		///* thisTransaction
		///* lessThan30Days
		///* from30To60Days
		///* moreThan60Days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountInfoAccountAgeIndicator AccountAgeIndicator { get; set; }
		
		/// <summary>
		/// Date when the shopper's account was last changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AccountChangeDate { get; set; }
		
		/// <summary>
		/// Indicator for the length of time since the shopper's account was last updated.
		///Allowed values:
		///* thisTransaction
		///* lessThan30Days
		///* from30To60Days
		///* moreThan60Days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountInfoAccountChangeIndicator AccountChangeIndicator { get; set; }
		
		/// <summary>
		/// Date when the shopper's account was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AccountCreationDate { get; set; }
		
		/// <summary>
		/// Number of attempts the shopper tried to add a card to their account in the last day.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AddCardAttemptsDay { get; set; }
		
		/// <summary>
		/// Date the selected delivery address was last used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeliveryAddressUsageDate { get; set; }
		
		/// <summary>
		/// Indicator for the length of time since this delivery address was last used.
		///Allowed values:
		///* thisTransaction
		///* lessThan30Days
		///* from30To60Days
		///* moreThan60Days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountInfoDeliveryAddressUsageIndicator DeliveryAddressUsageIndicator { get; set; }
		
		/// <summary>
		/// Shopper's home phone number (including the country code).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HomePhone { get; set; }
		
		/// <summary>
		/// Shopper's mobile phone number (including the country code).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MobilePhone { get; set; }
		
		/// <summary>
		/// Date when the shopper last changed their password.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PasswordChangeDate { get; set; }
		
		/// <summary>
		/// Indicator when the shopper has changed their password.
		///Allowed values:
		///* notApplicable
		///* thisTransaction
		///* lessThan30Days
		///* from30To60Days
		///* moreThan60Days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountInfoPasswordChangeIndicator PasswordChangeIndicator { get; set; }
		
		/// <summary>
		/// Number of all transactions (successful and abandoned) from this shopper in the past 24 hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PastTransactionsDay { get; set; }
		
		/// <summary>
		/// Number of all transactions (successful and abandoned) from this shopper in the past year.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PastTransactionsYear { get; set; }
		
		/// <summary>
		/// Date this payment method was added to the shopper's account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PaymentAccountAge { get; set; }
		
		/// <summary>
		/// Indicator for the length of time since this payment method was added to this shopper's account.
		///Allowed values:
		///* notApplicable
		///* thisTransaction
		///* lessThan30Days
		///* from30To60Days
		///* moreThan60Days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountInfoPaymentAccountIndicator PaymentAccountIndicator { get; set; }
		
		/// <summary>
		/// Number of successful purchases in the last six months.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PurchasesLast6Months { get; set; }
		
		/// <summary>
		/// Whether suspicious activity was recorded on this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SuspiciousActivity { get; set; }
		
		/// <summary>
		/// Shopper's work phone number (including the country code).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkPhone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountInfoAccountAgeIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notApplicable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thisTransaction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessThan30Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		from30To60Days = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moreThan60Days = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountInfoAccountChangeIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thisTransaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessThan30Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		from30To60Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moreThan60Days = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountInfoDeliveryAddressUsageIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thisTransaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessThan30Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		from30To60Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moreThan60Days = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountInfoPasswordChangeIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notApplicable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thisTransaction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessThan30Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		from30To60Days = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moreThan60Days = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountInfoPaymentAccountIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notApplicable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thisTransaction = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lessThan30Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		from30To60Days = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moreThan60Days = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Address
	{
		
		/// <summary>
		/// The name of the city.
		///>Required if either houseNumberOrName, street, postalCode, or stateOrProvince are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// The two-character country code of the address. The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///> If you don't know the country or are not collecting the country from the shopper, provide `countryCode` as `ZZ`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The number or name of the house.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HouseNumberOrName { get; set; }
		
		/// <summary>
		/// The postal code.
		///>A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The abbreviation of the state or province.
		///>Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.
		///>Required for an address in the USA or Canada if either houseNumberOrName, street, city, or postalCode are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// The name of the street.
		///>The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
		///>Required if either houseNumberOrName, city, postalCode, or stateOrProvince are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Street { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Amount
	{
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The payable amount that can be charged for the transaction.
		///
		///The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BankAccount
	{
		
		/// <summary>
		/// The bank account number (without separators).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountNumber { get; set; }
		
		/// <summary>
		/// The bank city.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCity { get; set; }
		
		/// <summary>
		/// The location id of the bank. The field value is `nil` in most cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankLocationId { get; set; }
		
		/// <summary>
		/// The name of the bank.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankName { get; set; }
		
		/// <summary>
		/// The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Bic { get; set; }
		
		/// <summary>
		/// Country code where the bank is located.
		///
		///A valid value is an ISO two-character country code (e.g. 'NL').
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Iban { get; set; }
		
		/// <summary>
		/// The name of the bank account holder.
		///If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
		///* χ12 is converted to ch12.
		///* üA is converted to euA.
		///* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
		///After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
		///* John17 - allowed.
		///* J17 - allowed.
		///* 171 - not allowed.
		///* John-7 - allowed.
		///> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The bank account holder's tax ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrowserInfo
	{
		
		/// <summary>
		/// The accept header value of the shopper's browser.
		/// Max length: 50
		/// Min length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=10)]
		public string AcceptHeader { get; set; }
		
		/// <summary>
		/// The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 32 or 48 bit color depth.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ColorDepth { get; set; }
		
		/// <summary>
		/// Boolean value indicating if the shopper's browser is able to execute Java.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool JavaEnabled { get; set; }
		
		/// <summary>
		/// Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> JavaScriptEnabled { get; set; }
		
		/// <summary>
		/// The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Language { get; set; }
		
		/// <summary>
		/// The total height of the shopper's device screen in pixels.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScreenHeight { get; set; }
		
		/// <summary>
		/// The total width of the shopper's device screen in pixels.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScreenWidth { get; set; }
		
		/// <summary>
		/// Time difference between UTC time and the shopper's browser local time, in minutes.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TimeZoneOffset { get; set; }
		
		/// <summary>
		/// The user agent value of the shopper's browser.
		/// Max length: 50
		/// Min length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=10)]
		public string UserAgent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Card
	{
		
		/// <summary>
		/// The [card verification code](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_) (1-20 characters). Depending on the card brand, it is known also as:
		///* CVV2/CVC2 – length: 3 digits
		///* CID – length: 4 digits
		///> If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.
		///> This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).
		///> When this value is returned in a response, it is always empty because it is not stored.
		/// Max length: 20
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength=1)]
		public string Cvc { get; set; }
		
		/// <summary>
		/// The card expiry month.
		///Format: 2 digits, zero-padded for single digits. For example:
		///* 03 = March
		///* 11 = November
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string ExpiryMonth { get; set; }
		
		/// <summary>
		/// The card expiry year.
		///Format: 4 digits. For example: 2020
		/// Max length: 4
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength=4)]
		public string ExpiryYear { get; set; }
		
		/// <summary>
		/// The name of the cardholder, as printed on the card.
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength=1)]
		public string HolderName { get; set; }
		
		/// <summary>
		/// The issue number of the card (for some UK debit cards only).
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string IssueNumber { get; set; }
		
		/// <summary>
		/// The card number (4-19 characters). Do not use any separators.
		///When this value is returned in a response, only the last 4 digits of the card number are returned.
		/// Max length: 19
		/// Min length: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=4)]
		public string Number { get; set; }
		
		/// <summary>
		/// The month component of the start date (for some UK debit cards only).
		/// Max length: 2
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=1)]
		public string StartMonth { get; set; }
		
		/// <summary>
		/// The year component of the start date (for some UK debit cards only).
		/// Max length: 4
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength=4)]
		public string StartYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceRenderOptions
	{
		
		/// <summary>
		/// Supported SDK interface types.
		///Allowed values:
		///* Native
		///* Html
		///* both
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceRenderOptionsSdkInterface SdkInterface { get; set; }
		
		/// <summary>
		/// UI types supported for displaying specific challenges.
		///Allowed values:
		///* text
		///* singleSelect
		///* outOfBand
		///* otherHtml
		///* multiSelect
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SdkUiType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceRenderOptionsSdkInterface
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Html = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Native = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForexQuote
	{
		
		/// <summary>
		/// The account name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		/// <summary>
		/// The account type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount BaseAmount { get; set; }
		
		/// <summary>
		/// The base points.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BasePoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Buy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Interbank { get; set; }
		
		/// <summary>
		/// The reference assigned to the forex quote request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Sell { get; set; }
		
		/// <summary>
		/// The signature to validate the integrity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Signature { get; set; }
		
		/// <summary>
		/// The source of the forex quote.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		/// <summary>
		/// The type of forex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// The date until which the forex quote is valid.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ValidTill { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FraudCheckResult
	{
		
		/// <summary>
		/// The fraud score generated by the risk check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AccountScore { get; set; }
		
		/// <summary>
		/// The ID of the risk check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int CheckId { get; set; }
		
		/// <summary>
		/// The name of the risk check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FraudResult
	{
		
		/// <summary>
		/// The total fraud score generated by the risk checks.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int AccountScore { get; set; }
		
		/// <summary>
		/// The result of the individual risk checks.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FraudCheckResult[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Installments
	{
		
		/// <summary>
		/// Defines the number of installments. Its value needs to be greater than zero.
		///
		///Usually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MerchantRiskIndicator
	{
		
		/// <summary>
		/// Whether the chosen delivery address is identical to the billing address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AddressMatch { get; set; }
		
		/// <summary>
		/// Indicator regarding the delivery address.
		///Allowed values:
		///* `shipToBillingAddress`
		///* `shipToVerifiedAddress`
		///* `shipToNewAddress`
		///* `shipToStore`
		///* `digitalGoods`
		///* `goodsNotShipped`
		///* `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MerchantRiskIndicatorDeliveryAddressIndicator DeliveryAddressIndicator { get; set; }
		
		/// <summary>
		/// The delivery email address (for digital goods).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeliveryEmail { get; set; }
		
		/// <summary>
		/// The estimated delivery time for the shopper to receive the goods.
		///Allowed values:
		///* `electronicDelivery`
		///* `sameDayShipping`
		///* `overnightShipping`
		///* `twoOrMoreDaysShipping`
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MerchantRiskIndicatorDeliveryTimeframe DeliveryTimeframe { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount GiftCardAmount { get; set; }
		
		/// <summary>
		/// Number of individual prepaid or gift cards used for this purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GiftCardCount { get; set; }
		
		/// <summary>
		/// For pre-order purchases, the expected date this product will be available to the shopper.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PreOrderDate { get; set; }
		
		/// <summary>
		/// Indicator for whether this transaction is for pre-ordering a product.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PreOrderPurchase { get; set; }
		
		/// <summary>
		/// Indicator for whether the shopper has already purchased the same items in the past.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReorderItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MerchantRiskIndicatorDeliveryAddressIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipToBillingAddress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipToVerifiedAddress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipToNewAddress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shipToStore = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		digitalGoods = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		goodsNotShipped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MerchantRiskIndicatorDeliveryTimeframe
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		electronicDelivery = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sameDayShipping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overnightShipping = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		twoOrMoreDaysShipping = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModificationRequest
	{
		
		/// <summary>
		/// This field contains additional data, which may be required for a particular modification request.
		///
		///The additionalData object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [ModificationRequest.additionalData](https://docs.adyen.com/api-reference/payments-api/modificationrequest/modificationrequest-additionaldata) section.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		/// <summary>
		/// The merchant account that is used to process the payment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount ModificationAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDSecureData MpiData { get; set; }
		
		/// <summary>
		/// The original merchant reference to cancel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OriginalMerchantReference { get; set; }
		
		/// <summary>
		/// The original pspReference of the payment to modify.
		///This reference is returned in:
		///* authorisation response
		///* authorisation notification
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginalReference { get; set; }
		
		/// <summary>
		/// Optionally, you can specify your reference for the payment modification. This reference is visible in Customer Area and in reports.
		///Maximum length: 80 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The details of how the payment should be split when distributing a payment to a Marketpay Marketplace and its Accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Split[] Splits { get; set; }
		
		/// <summary>
		/// The transaction reference provided by the PED. For point-of-sale integrations only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TenderReference { get; set; }
		
		/// <summary>
		/// Unique terminal ID for the PED that originally processed the request. For point-of-sale integrations only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UniqueTerminalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModificationResult
	{
		
		/// <summary>
		/// This field contains additional data, which may be returned in a particular modification response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		/// <summary>
		/// Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// Indicates if the modification request has been received for processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModificationResultResponse Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModificationResultResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[capture-received] = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[cancel-received] = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[refund-received] = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		[cancelOrRefund-received] = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Name
	{
		
		/// <summary>
		/// The first name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The gender.
		///>The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NameGender Gender { get; set; }
		
		/// <summary>
		/// The name's infix, if applicable.
		///>A maximum length of twenty (20) characters is imposed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Infix { get; set; }
		
		/// <summary>
		/// The last name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NameGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountInfo AccountInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount AdditionalAmount { get; set; }
		
		/// <summary>
		/// This field contains additional data, which may be required for a particular payment request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BankAccount BankAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrowserInfo BrowserInfo { get; set; }
		
		/// <summary>
		/// The delay between the authorisation and scheduled auto-capture, specified in hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CaptureDelayHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Card Card { get; set; }
		
		/// <summary>
		/// The shopper's date of birth.
		///
		///Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForexQuote DccQuote { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address DeliveryAddress { get; set; }
		
		/// <summary>
		/// The date and time the purchased goods should be delivered.
		///
		///Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
		///
		///Example: 2017-07-17T13:42:40.428+01:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeliveryDate { get; set; }
		
		/// <summary>
		/// A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFingerprint { get; set; }
		
		/// <summary>
		/// The type of the entity the payment is processed for.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequestEntityType EntityType { get; set; }
		
		/// <summary>
		/// An integer value that is added to the normal fraud score. The value can be either positive or negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FraudOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Installments Installments { get; set; }
		
		/// <summary>
		/// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The merchant account identifier, with which you want to process the transaction.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		/// <summary>
		/// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.
		///The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.
		///> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantOrderReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
		
		/// <summary>
		/// Metadata consists of entries, each of which includes a key and a value.
		///Limitations: Error "177", "Metadata size exceeds limit"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDSecureData MpiData { get; set; }
		
		/// <summary>
		/// The two-character country code of the shopper's nationality.
		/// Max length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2)]
		public string Nationality { get; set; }
		
		/// <summary>
		/// When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Recurring Recurring { get; set; }
		
		/// <summary>
		/// Defines a recurring payment type.
		///Allowed values:
		///* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
		///* `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
		///* `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequestRecurringProcessingModel RecurringProcessingModel { get; set; }
		
		/// <summary>
		/// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
		///If you need to provide multiple references for a transaction, separate them with hyphens ("-").
		///Maximum length: 80 characters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Some payment methods require defining a value for this field to specify how to process the transaction.
		///
		///For the Bancontact payment method, it can be set to:
		///* `maestro` (default), to be processed like a Maestro card, or
		///* `bcmc`, to be processed like a Bancontact card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedBrand { get; set; }
		
		/// <summary>
		/// The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedRecurringDetailReference { get; set; }
		
		/// <summary>
		/// A session ID used to identify a payment session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
		///> For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperEmail { get; set; }
		
		/// <summary>
		/// The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
		///> This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperIP { get; set; }
		
		/// <summary>
		/// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
		///For the web service API, Adyen assumes Ecommerce shopper interaction by default.
		///
		///This field has the following possible values:
		///* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
		///* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
		///* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
		///* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequestShopperInteraction ShopperInteraction { get; set; }
		
		/// <summary>
		/// The combination of a language code and a country code to specify the language to be used in the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Name ShopperName { get; set; }
		
		/// <summary>
		/// The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
		///> This field is required for recurring payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperReference { get; set; }
		
		/// <summary>
		/// The text to appear on the shopper's bank statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperStatement { get; set; }
		
		/// <summary>
		/// The shopper's social security number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SocialSecurityNumber { get; set; }
		
		/// <summary>
		/// The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Split[] Splits { get; set; }
		
		/// <summary>
		/// The physical store, for which this payment is processed.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string Store { get; set; }
		
		/// <summary>
		/// The shopper's telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TelephoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
		
		/// <summary>
		/// The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string TotalsGroup { get; set; }
		
		/// <summary>
		/// Set to true if the payment should be routed to a trusted MID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TrustedShopper { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequestEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NaturalPerson = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompanyName = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequestRecurringProcessingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CardOnFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnscheduledCardOnFile = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequestShopperInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ecommerce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContAuth = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moto = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentRequest3d
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountInfo AccountInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount AdditionalAmount { get; set; }
		
		/// <summary>
		/// This field contains additional data, which may be required for a particular payment request.
		///
		///The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/api-reference/payments-api#paymentrequestadditionaldata).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrowserInfo BrowserInfo { get; set; }
		
		/// <summary>
		/// The delay between the authorisation and scheduled auto-capture, specified in hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CaptureDelayHours { get; set; }
		
		/// <summary>
		/// The shopper's date of birth.
		///
		///Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForexQuote DccQuote { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address DeliveryAddress { get; set; }
		
		/// <summary>
		/// The date and time the purchased goods should be delivered.
		///
		///Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
		///
		///Example: 2017-07-17T13:42:40.428+01:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeliveryDate { get; set; }
		
		/// <summary>
		/// A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFingerprint { get; set; }
		
		/// <summary>
		/// An integer value that is added to the normal fraud score. The value can be either positive or negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FraudOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Installments Installments { get; set; }
		
		/// <summary>
		/// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The payment session identifier returned by the card issuer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Md { get; set; }
		
		/// <summary>
		/// The merchant account identifier, with which you want to process the transaction.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		/// <summary>
		/// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.
		///The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.
		///> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantOrderReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
		
		/// <summary>
		/// Metadata consists of entries, each of which includes a key and a value.
		///Limitations: Error "177", "Metadata size exceeds limit"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderReference { get; set; }
		
		/// <summary>
		/// Payment authorisation response returned by the card issuer. The `paResponse` field holds the PaRes value received from the card issuer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PaResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Recurring Recurring { get; set; }
		
		/// <summary>
		/// Defines a recurring payment type.
		///Allowed values:
		///* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
		///* `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
		///* `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequest3dRecurringProcessingModel RecurringProcessingModel { get; set; }
		
		/// <summary>
		/// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
		///If you need to provide multiple references for a transaction, separate them with hyphens ("-").
		///Maximum length: 80 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Some payment methods require defining a value for this field to specify how to process the transaction.
		///
		///For the Bancontact payment method, it can be set to:
		///* `maestro` (default), to be processed like a Maestro card, or
		///* `bcmc`, to be processed like a Bancontact card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedBrand { get; set; }
		
		/// <summary>
		/// The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedRecurringDetailReference { get; set; }
		
		/// <summary>
		/// A session ID used to identify a payment session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
		///> For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperEmail { get; set; }
		
		/// <summary>
		/// The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
		///> This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperIP { get; set; }
		
		/// <summary>
		/// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
		///For the web service API, Adyen assumes Ecommerce shopper interaction by default.
		///
		///This field has the following possible values:
		///* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
		///* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
		///* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
		///* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequest3dShopperInteraction ShopperInteraction { get; set; }
		
		/// <summary>
		/// The combination of a language code and a country code to specify the language to be used in the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Name ShopperName { get; set; }
		
		/// <summary>
		/// The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
		///> This field is required for recurring payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperReference { get; set; }
		
		/// <summary>
		/// The text to appear on the shopper's bank statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperStatement { get; set; }
		
		/// <summary>
		/// The shopper's social security number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SocialSecurityNumber { get; set; }
		
		/// <summary>
		/// The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Split[] Splits { get; set; }
		
		/// <summary>
		/// The physical store, for which this payment is processed.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string Store { get; set; }
		
		/// <summary>
		/// The shopper's telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TelephoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
		
		/// <summary>
		/// The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string TotalsGroup { get; set; }
		
		/// <summary>
		/// Set to true if the payment should be routed to a trusted MID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TrustedShopper { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequest3dRecurringProcessingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CardOnFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnscheduledCardOnFile = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequest3dShopperInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ecommerce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContAuth = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moto = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentRequest3ds2
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountInfo AccountInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount AdditionalAmount { get; set; }
		
		/// <summary>
		/// This field contains additional data, which may be required for a particular payment request.
		///
		///The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/api-reference/payments-api#paymentrequestadditionaldata).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrowserInfo BrowserInfo { get; set; }
		
		/// <summary>
		/// The delay between the authorisation and scheduled auto-capture, specified in hours.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CaptureDelayHours { get; set; }
		
		/// <summary>
		/// The shopper's date of birth.
		///
		///Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateOfBirth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForexQuote DccQuote { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address DeliveryAddress { get; set; }
		
		/// <summary>
		/// The date and time the purchased goods should be delivered.
		///
		///Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD
		///
		///Example: 2017-07-17T13:42:40.428+01:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeliveryDate { get; set; }
		
		/// <summary>
		/// A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeviceFingerprint { get; set; }
		
		/// <summary>
		/// An integer value that is added to the normal fraud score. The value can be either positive or negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FraudOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Installments Installments { get; set; }
		
		/// <summary>
		/// The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Mcc { get; set; }
		
		/// <summary>
		/// The merchant account identifier, with which you want to process the transaction.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		/// <summary>
		/// This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.
		///The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.
		///> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantOrderReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MerchantRiskIndicator MerchantRiskIndicator { get; set; }
		
		/// <summary>
		/// Metadata consists of entries, each of which includes a key and a value.
		///Limitations: Error "177", "Metadata size exceeds limit"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Recurring Recurring { get; set; }
		
		/// <summary>
		/// Defines a recurring payment type.
		///Allowed values:
		///* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.
		///* `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
		///* `UnscheduledCardOnFile` – A transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequest3ds2RecurringProcessingModel RecurringProcessingModel { get; set; }
		
		/// <summary>
		/// The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.
		///If you need to provide multiple references for a transaction, separate them with hyphens ("-").
		///Maximum length: 80 characters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// Some payment methods require defining a value for this field to specify how to process the transaction.
		///
		///For the Bancontact payment method, it can be set to:
		///* `maestro` (default), to be processed like a Maestro card, or
		///* `bcmc`, to be processed like a Bancontact card.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedBrand { get; set; }
		
		/// <summary>
		/// The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SelectedRecurringDetailReference { get; set; }
		
		/// <summary>
		/// A session ID used to identify a payment session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SessionId { get; set; }
		
		/// <summary>
		/// The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
		///> For 3D Secure 2 transactions, schemes require the `shopperEmail` for both `deviceChannel` **browser** and **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperEmail { get; set; }
		
		/// <summary>
		/// The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).
		///> This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperIP { get; set; }
		
		/// <summary>
		/// Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.
		///For the web service API, Adyen assumes Ecommerce shopper interaction by default.
		///
		///This field has the following possible values:
		///* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.
		///* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).
		///* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.
		///* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentRequest3ds2ShopperInteraction ShopperInteraction { get; set; }
		
		/// <summary>
		/// The combination of a language code and a country code to specify the language to be used in the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperLocale { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Name ShopperName { get; set; }
		
		/// <summary>
		/// The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).
		///> This field is required for recurring payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperReference { get; set; }
		
		/// <summary>
		/// The text to appear on the shopper's bank statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShopperStatement { get; set; }
		
		/// <summary>
		/// The shopper's social security number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SocialSecurityNumber { get; set; }
		
		/// <summary>
		/// The details of how the payment should be split when distributing a payment to a MarketPay Marketplace and its Accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Split[] Splits { get; set; }
		
		/// <summary>
		/// The physical store, for which this payment is processed.
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string Store { get; set; }
		
		/// <summary>
		/// The shopper's telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TelephoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2RequestData ThreeDS2RequestData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2Result ThreeDS2Result { get; set; }
		
		/// <summary>
		/// The ThreeDS2Token that was returned in the /authorise call.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDS2Token { get; set; }
		
		/// <summary>
		/// The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
		/// Max length: 16
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=1)]
		public string TotalsGroup { get; set; }
		
		/// <summary>
		/// Set to true if the payment should be routed to a trusted MID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TrustedShopper { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequest3ds2RecurringProcessingModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CardOnFile = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnscheduledCardOnFile = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentRequest3ds2ShopperInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ecommerce = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContAuth = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Moto = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentResult
	{
		
		/// <summary>
		/// This field contains additional data, which may be required to return in a particular payment response. To choose data fields to be returned, go to **Customer Area** > **Account** > **API URLs**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalData { get; set; }
		
		/// <summary>
		/// Authorisation code:
		///* When the payment is authorised successfully, this field holds the authorisation code for the payment.
		///* When the payment is not authorised, this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount DccAmount { get; set; }
		
		/// <summary>
		/// Cryptographic signature used to verify `dccQuote`.
		///> This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DccSignature { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FraudResult FraudResult { get; set; }
		
		/// <summary>
		/// The URL to direct the shopper to.
		///> In case of SecurePlus, do not redirect a shopper to this URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssuerUrl { get; set; }
		
		/// <summary>
		/// The payment session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Md { get; set; }
		
		/// <summary>
		/// The 3D request data for the issuer.
		///
		///If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaRequest { get; set; }
		
		/// <summary>
		/// Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
		///
		///> `pspReference` is returned only for non-redirect payment methods.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error.
		///
		///When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RefusalReason { get; set; }
		
		/// <summary>
		/// The result of the payment. Possible values:
		///
		///* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.
		///* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.
		///* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.
		///* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.
		///* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.
		///* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.
		///* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
		///* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/development-resources/payments-with-pending-status).
		///* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.
		///* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentResultResultCode ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentResultResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AuthenticationFinished = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Authorised = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChallengeShopper = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Error = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IdentifyShopper = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Received = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RedirectShopper = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Refused = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Recurring
	{
		
		/// <summary>
		/// The type of recurring contract to be used.
		///Possible values:
		///* `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_).
		///* `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payment-glossary#cardnotpresentcnp).
		///* `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
		///* `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/features/third-party-payouts).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecurringContract Contract { get; set; }
		
		/// <summary>
		/// A descriptive name for this detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecurringDetailName { get; set; }
		
		/// <summary>
		/// Date after which no further authorisations shall be performed. Only for 3D Secure 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecurringExpiry { get; set; }
		
		/// <summary>
		/// Minimum number of days between authorisations. Only for 3D Secure 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RecurringFrequency { get; set; }
		
		/// <summary>
		/// The name of the token service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecurringTokenService TokenService { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecurringContract
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONECLICK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYOUT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecurringTokenService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISATOKENSERVICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MCTOKENSERVICE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SDKEphemPubKey
	{
		
		/// <summary>
		/// The `crv` value as received from the 3D Secure 2 SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Crv { get; set; }
		
		/// <summary>
		/// The `kty` value as received from the 3D Secure 2 SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Kty { get; set; }
		
		/// <summary>
		/// The `x` value as received from the 3D Secure 2 SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string X { get; set; }
		
		/// <summary>
		/// The `y` value as received from the 3D Secure 2 SDK.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Y { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Split
	{
		
		/// <summary>
		/// The account to which this split applies.
		///
		///>Required if the type is `MarketPlace`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SplitAmount Amount { get; set; }
		
		/// <summary>
		/// A description of this split.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The reference of this split. Used to link other operations (e.g. captures and refunds) to this split.
		///
		///>Required if the type is `MarketPlace`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The type of this split.
		///
		///>Permitted values: `Default`, `PaymentFee`, `VAT`, `Commission`, `MarketPlace`, `Verification`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SplitType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SplitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commission = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarketPlace = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaymentFee = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verification = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SplitAmount
	{
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
		///
		///If this value is not provided, the currency in which the payment is made will be used.
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The payable amount that can be charged for the transaction.
		///
		///The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreeDS2RequestData
	{
		
		/// <summary>
		/// If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration), and not the payment authorisation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthenticationOnly { get; set; }
		
		/// <summary>
		/// Possibility to specify a preference for receiving a challenge from the issuer.
		///Allowed values:
		///* `noPreference`
		///* `requestNoChallenge`
		///* `requestChallenge`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2RequestDataChallengeIndicator ChallengeIndicator { get; set; }
		
		/// <summary>
		/// The environment of the shopper.
		///Allowed values:
		///* `app`
		///* `browser`
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceRenderOptions DeviceRenderOptions { get; set; }
		
		/// <summary>
		/// The `messageVersion` value indicating the 3D Secure 2 protocol version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MessageVersion { get; set; }
		
		/// <summary>
		/// URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NotificationURL { get; set; }
		
		/// <summary>
		/// The `sdkAppID` value as received from the 3D Secure 2 SDK.
		///Required for `deviceChannel` set to **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SdkAppID { get; set; }
		
		/// <summary>
		/// The `sdkEncData` value as received from the 3D Secure 2 SDK.
		///Required for `deviceChannel` set to **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SdkEncData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SDKEphemPubKey SdkEphemPubKey { get; set; }
		
		/// <summary>
		/// The maximum amount of time in minutes for the 3D Secure 2 authentication process.
		///Only for `deviceChannel` set to **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SdkMaxTimeout { get; set; }
		
		/// <summary>
		/// The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.
		///Only for `deviceChannel` set to **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SdkReferenceNumber { get; set; }
		
		/// <summary>
		/// The `sdkTransID` value as received from the 3D Secure 2 SDK.
		///Only for `deviceChannel` set to **app**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SdkTransID { get; set; }
		
		/// <summary>
		/// Completion indicator for the device fingerprinting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSCompInd { get; set; }
		
		/// <summary>
		/// Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSRequestorID { get; set; }
		
		/// <summary>
		/// Required for [authentication-only integration](https://docs.adyen.com/checkout/3d-secure-2/3ds2-checkout-authentication-only-integration) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSRequestorName { get; set; }
		
		/// <summary>
		/// URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSRequestorURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThreeDS2RequestDataChallengeIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noPreference = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requestNoChallenge = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requestChallenge = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreeDS2Result
	{
		
		/// <summary>
		/// The `authenticationValue` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationValue { get; set; }
		
		/// <summary>
		/// The `dsTransID` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DsTransID { get; set; }
		
		/// <summary>
		/// The `eci` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Eci { get; set; }
		
		/// <summary>
		/// The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSServerTransID { get; set; }
		
		/// <summary>
		/// The `timestamp` value of the 3D Secure 2 authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The `transStatus` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransStatus { get; set; }
		
		/// <summary>
		/// The `transStatusReason` value as defined in the 3D Secure 2 specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransStatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreeDS2ResultRequest
	{
		
		/// <summary>
		/// The merchant account identifier, with which you want to process the transaction.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		/// <summary>
		/// The pspReference returned in the /authorise call.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreeDS2ResultResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ThreeDS2Result ThreeDS2Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThreeDSecureData
	{
		
		/// <summary>
		/// In 3D Secure 1, the authentication response if the shopper was redirected.
		///
		///In 3D Secure 2, this is the `transStatus` from challenge flow. If the transaction was frictionless, set this value to **Y**.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThreeDSecureDataAuthenticationResponse AuthenticationResponse { get; set; }
		
		/// <summary>
		/// The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Cavv { get; set; }
		
		/// <summary>
		/// The CAVV algorithm used. Include this only for 3D Secure 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CavvAlgorithm { get; set; }
		
		/// <summary>
		/// In 3D Secure 1, this is the enrollment response from the 3D directory server.
		///
		///In 3D Secure 2, this is the `transStatus` from 3D Secure device fingerprinting result.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThreeDSecureDataDirectoryResponse DirectoryResponse { get; set; }
		
		/// <summary>
		/// Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DsTransID { get; set; }
		
		/// <summary>
		/// The electronic commerce indicator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Eci { get; set; }
		
		/// <summary>
		/// The version of the 3D Secure protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ThreeDSVersion { get; set; }
		
		/// <summary>
		/// Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Xid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThreeDSecureDataAuthenticationResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Y = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ThreeDSecureDataDirectoryResponse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Y = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		U = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		C = 4,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Increases or decreases the authorised amount.
		/// Allows you to increase or decrease the authorised amount after the initial authorisation has taken place. This functionality enables tipping, improving the chances your authorisation will be valid, charging the shopper when they have already left the merchant premises, etc.
		/// 
		/// For more information, refer to [Adjust Authorisation](https://docs.adyen.com/development-resources/payment-modifications/adjust-authorisation).
		/// AdjustAuthorisationPost adjustAuthorisation
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> AdjustAuthorisationPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adjustAuthorisation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a payment authorisation.
		/// Creates a payment with a unique reference (`pspReference`) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don't support this and will automatically capture as part of the authorisation.
		/// 
		/// For more information, refer to [Classic integration](https://docs.adyen.com/classic-integration).
		/// AuthorisePost authorise
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<PaymentResult> AuthorisePostAsync(PaymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorise";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Completes a 3D Secure payment authorisation.
		/// For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the `md` and `paResponse` parameters that you get from the card issuer after a shopper pays via 3D Secure.
		/// 
		/// For more information, refer to [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).
		/// Authorise3dPost authorise3d
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<PaymentResult> Authorise3dPostAsync(PaymentRequest3d requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorise3d";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Completes a 3D Secure 2 payment authorisation.
		/// For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the `threeDS2Token` and `threeDS2Result` parameters.
		/// 
		/// For more information, refer to [3D Secure 2](https://docs.adyen.com/checkout/3d-secure-2).
		/// Authorise3ds2Post authorise3ds2
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<PaymentResult> Authorise3ds2PostAsync(PaymentRequest3ds2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorise3ds2";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PaymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels an authorised payment.
		/// Cancels the authorisation hold on a payment, returning a unique reference for this request. You can cancel payments after authorisation only for payment methods that support distinct authorisations and captures.
		/// 
		/// For more information, refer to [Cancel](https://docs.adyen.com/development-resources/payment-modifications/cancel).
		/// CancelPost cancel
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> CancelPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cancel";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels or refunds a payment.
		/// Cancels a payment if it has not been captured yet, or refunds it if it has already been captured. This is useful when it is not certain if the payment has been captured or not (for example, when using auto-capture).
		/// 
		/// > Do not use this request for payments that involve (multiple) partial captures.
		/// 
		/// For more information, refer to [Cancel or refund](https://docs.adyen.com/development-resources/payment-modifications/cancel-or-refund).
		/// CancelOrRefundPost cancelOrRefund
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> CancelOrRefundPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cancelOrRefund";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Captures an authorised payment.
		/// Captures the authorisation hold on a payment, returning a unique reference for this request. Usually the full authorisation amount is captured, however it's also possible to capture a smaller amount, which results in cancelling the remaining authorisation balance.
		/// 
		/// Payment methods, which automatically capture as part of authorisation, don't need to be captured, but submitting a capture request on these transactions will not result in double charges. If immediate or delayed auto-capture is enabled, calling the capture method is not neccessary.
		/// 
		/// For more information, refer to [Capture](https://docs.adyen.com/development-resources/payment-modifications/capture).
		/// CapturePost capture
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> CapturePostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "capture";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Refunds a captured payment.
		/// Refunds a payment that has previously been captured, returning a unique reference for this request. Refunding can be done on the full captured amount or a partial amount. Multiple (partial) refunds will be accepted as long as their sum doesn't exceed the captured amount. Payments which have been authorised, but not captured, cannot be refunded, use the /cancel method instead.
		/// 
		/// > Some payment methods/gateways do not support partial/multiple refunds.
		/// > A margin above the captured limit can be configured to cover shipping/handling costs.
		/// 
		/// For more information, refer to [Refund](https://docs.adyen.com/development-resources/payment-modifications/refund).
		/// RefundPost refund
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> RefundPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "refund";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.
		/// Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.
		/// Retrieve3ds2ResultPost retrieve3ds2Result
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ThreeDS2ResultResponse> Retrieve3ds2ResultPostAsync(ThreeDS2ResultRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "retrieve3ds2Result";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ThreeDS2ResultResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels a payment using your custom reference.
		/// This endpoint allows you to cancel a payment if you do not have the PSP reference of the original payment request available.
		/// 
		/// In your call, refer to the original payment by using the `reference` that you specified in your payment request.
		/// 
		/// For more information, see [Technical cancel](https://docs.adyen.com/development-resources/payment-modifications/cancel#technical-cancel).
		/// TechnicalCancelPost technicalCancel
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> TechnicalCancelPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "technicalCancel";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels a POS refund request before it has been completed.
		/// This endpoint allows you to cancel the refund request before it has been completed.
		/// 
		/// In your call, you can refer to the original refund request either by using the `tenderReference`, or the `pspReference`. We recommend implementing based on the `tenderReference`, as this is generated for both offline and online transactions.
		/// 
		/// For more information, refer to [Cancel a refund](https://docs.adyen.com/point-of-sale/build-your-integration/cancel-a-pos-refund-request).
		/// VoidPendingRefundPost voidPendingRefund
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<ModificationResult> VoidPendingRefundPostAsync(ModificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voidPendingRefund";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
