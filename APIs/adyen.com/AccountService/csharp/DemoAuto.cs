//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Account
	{
		
		/// <summary>
		/// The code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The beneficiary of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BeneficiaryAccount { get; set; }
		
		/// <summary>
		/// The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BeneficiaryMerchantReference { get; set; }
		
		/// <summary>
		/// A description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A set of key and value pairs for general use by the merchant.
		///The keys do not have specific names and may be used for storing miscellaneous data as desired.
		///> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponse PayoutSchedule { get; set; }
		
		/// <summary>
		/// The status of the account. Possible values: `Active`, `Inactive`, `Suspended`, `Closed`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountEvent
	{
		
		/// <summary>
		/// The event.
		///>Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`.
		///For more information, refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountEventEvent Event { get; set; }
		
		/// <summary>
		/// The date on which the event will take place.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExecutionDate { get; set; }
		
		/// <summary>
		/// The reason why this event has been created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountEventEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InactivateAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RefundNotPaidOutTransfers = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasAddress Address { get; set; }
		
		/// <summary>
		/// Each of the bank accounts associated with the account holder.
		///> Each array entry should represent one bank account.
		///> For comprehensive detail regarding the required `BankAccountDetail` fields, please refer to the [KYC Verification documentation](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankAccountDetail[] BankAccountDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessDetails BusinessDetails { get; set; }
		
		/// <summary>
		/// The email address of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The phone number of the account holder provided as a single string. It will be handled as a landline phone.
		///**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FullPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IndividualDetails IndividualDetails { get; set; }
		
		/// <summary>
		/// The Merchant Category Code of the account holder.
		///> If not specified in the request, this will be derived from the platform account (which is configured by Adyen).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantCategoryCode { get; set; }
		
		/// <summary>
		/// A set of key and value pairs for general use by the account holder or merchant.
		///The keys do not have specific names and may be used for storing miscellaneous data as desired.
		///> The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary.
		///> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Each of the card tokens associated with the account holder.
		///> Each array entry should represent one card token.
		///> For comprehensive detail regarding the required `CardToken` fields, please refer to the [KYC Verification documentation](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayoutInstrumentToken[] PayoutInstrumentTokens { get; set; }
		
		/// <summary>
		/// The URL of the website of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderStatus
	{
		
		/// <summary>
		/// A list of events scheduled for the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountEvent[] Events { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountPayoutState PayoutState { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountProcessingState ProcessingState { get; set; }
		
		/// <summary>
		/// The status of the account holder.
		///>Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatusStatus Status { get; set; }
		
		/// <summary>
		/// The reason why the status was assigned to the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountHolderStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountPayoutState
	{
		
		/// <summary>
		/// Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AllowPayout { get; set; }
		
		/// <summary>
		/// The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisableReason { get; set; }
		
		/// <summary>
		/// Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disabled { get; set; }
		
		/// <summary>
		/// The reason why payouts (to all of the account holder's accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotAllowedReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount PayoutLimit { get; set; }
		
		/// <summary>
		/// The payout tier that the account holder occupies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TierNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountProcessingState
	{
		
		/// <summary>
		/// The reason why processing has been disabled.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisableReason { get; set; }
		
		/// <summary>
		/// Indicates whether the processing of payments is allowed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disabled { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount ProcessedFrom { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount ProcessedTo { get; set; }
		
		/// <summary>
		/// The processing tier that the account holder occupies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TierNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Amount
	{
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes).
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The payable amount that can be charged for the transaction.
		///
		///The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/development-resources/currency-codes).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BankAccountDetail
	{
		
		/// <summary>
		/// The bank account number (without separators).
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The type of bank account.
		///Only applicable to bank accounts held in the USA.
		///The permitted values are: `checking`, `savings`.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountType { get; set; }
		
		/// <summary>
		/// The name of the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountName { get; set; }
		
		/// <summary>
		/// Merchant reference to the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountReference { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the Bank Account.
		///>If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
		///
		///>If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
		///
		///>If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
		///
		///>If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// The bank identifier code.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankBicSwift { get; set; }
		
		/// <summary>
		/// The city in which the bank branch is located.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCity { get; set; }
		
		/// <summary>
		/// The bank code of the banking institution with which the bank account is registered.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCode { get; set; }
		
		/// <summary>
		/// The name of the banking institution with which the bank account is held.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankName { get; set; }
		
		/// <summary>
		/// The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
		///* United States - Routing number
		///* United Kingdom - Sort code
		///* Germany - Bankleitzahl
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchCode { get; set; }
		
		/// <summary>
		/// The check code of the bank account.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckCode { get; set; }
		
		/// <summary>
		/// The two-letter country code in which the bank account is registered.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The currency in which the bank account deals.
		///>The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The international bank account number.
		///>The IBAN standard is defined in ISO-13616.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Iban { get; set; }
		
		/// <summary>
		/// The city of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCity { get; set; }
		
		/// <summary>
		/// The country code of the country of residence of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCountryCode { get; set; }
		
		/// <summary>
		/// The date of birth of the bank account owner.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerDateOfBirth { get; set; }
		
		/// <summary>
		/// The house name or number of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerHouseNumberOrName { get; set; }
		
		/// <summary>
		/// The name of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The country code of the country of nationality of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerNationality { get; set; }
		
		/// <summary>
		/// The postal code of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerPostalCode { get; set; }
		
		/// <summary>
		/// The state of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerState { get; set; }
		
		/// <summary>
		/// The street name of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerStreet { get; set; }
		
		/// <summary>
		/// If set to true, the bank account is a primary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrimaryAccount { get; set; }
		
		/// <summary>
		/// The tax ID number.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
		
		/// <summary>
		/// The URL to be used for bank account verification.
		///This may be generated on bank account creation.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UrlForVerification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BusinessDetails
	{
		
		/// <summary>
		/// The registered name of the company (if it differs from the legal name of the company).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DoingBusinessAs { get; set; }
		
		/// <summary>
		/// The legal name of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LegalBusinessName { get; set; }
		
		/// <summary>
		/// The registration number of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationNumber { get; set; }
		
		/// <summary>
		/// Each of the shareholders associated with the company.
		///Each array entry should represent one shareholder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShareholderContact[] Shareholders { get; set; }
		
		/// <summary>
		/// The tax ID of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the Account Holder to be closed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseAccountHolderResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseAccountRequest
	{
		
		/// <summary>
		/// The code of account to be closed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseAccountResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		/// <summary>
		/// The new status of the account.
		///>Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloseAccountResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloseAccountResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountHolderRequest
	{
		
		/// <summary>
		/// The desired code of the prospective account holder.
		///> Must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are permitted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		/// <summary>
		/// If set to true, an account with the default options is created for this account holder.
		///**Default Value:** true
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CreateDefaultAccount { get; set; }
		
		/// <summary>
		/// A description of the prospective account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The entity type.
		///Permitted values: `Business`, `Individual`
		///
		///If an account holder is 'Business', then `accountHolderDetails.businessDetails` must be provided, as well as at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.
		///
		///If an account holder is 'Individual', then `accountHolderDetails.individualDetails` must be provided.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountHolderRequestLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The starting [processing tier](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks#tiers) for the prospective account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProcessingTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountHolderRequestLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountHolderResponse
	{
		
		/// <summary>
		/// The code of a new account created for the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the new account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// The description of the new account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/createAccountHolder` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The type of legal entity of the new account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountHolderResponseLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCVerificationResult Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountHolderResponseLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountRequest
	{
		
		/// <summary>
		/// The code of Account Holder under which to create the account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// A description of the account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A set of key and value pairs for general use by the merchant.
		///The keys do not have specific names and may be used for storing miscellaneous data as desired.
		///> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// The payout schedule of the prospective account.
		///>Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountRequestPayoutSchedule PayoutSchedule { get; set; }
		
		/// <summary>
		/// The reason for the payout schedule choice.
		///>Required if the payoutSchedule is `HOLD`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PayoutScheduleReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountRequestPayoutSchedule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_NOON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY_6PM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_6_HOURS_FROM_MIDNIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY_ON_TUE_FRI_MIDNIGHT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountResponse
	{
		
		/// <summary>
		/// The code of the new account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/createAccount` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponse PayoutSchedule { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		/// <summary>
		/// The status of the account.
		///>Permitted values: `Active`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBankAccountRequest
	{
		
		/// <summary>
		/// The code of the Account Holder from which to delete the Bank Account(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The code(s) of the Bank Accounts to be deleted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] BankAccountUUIDs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePayoutInstrumentTokenRequest
	{
		
		/// <summary>
		/// The code of the account holder, from which to delete the payout instrument tokens.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The codes of the payout instrument tokens to be deleted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PayoutInstrumentTokenCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteShareholderRequest
	{
		
		/// <summary>
		/// The code of the Account Holder from which to delete the Shareholders.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The code(s) of the Shareholders to be deleted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ShareholderCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentDetail
	{
		
		/// <summary>
		/// The code of account holder, to which the document applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The unique ID of the Bank Account to which the document applies.
		///>Required if the documentType is `BANK_STATEMENT` (i.e., a document is being submitted in order to verify a bank account).
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on when a document should be submitted in order to verify a bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// Description of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of a document. Permitted values:
		///* `BANK_STATEMENT` denotes an image containing a bank statement or other document proving ownership of a specific bank account.
		///* `PASSPORT` denotes an image containing the identity page(s) of a passport.
		///* `ID_CARD` denotes an image containing both the front and back of the ID card.
		///* `ID_CARD_FRONT` denotes an image containing only the front of the ID card. In order for a document to be usable, both the `ID_CARD_FRONT` and `ID_CARD_BACK` must be submitted.
		///* `ID_CARD_BACK` denotes an image containing only the back of the ID card. In order for a document to be usable, both the `ID_CARD_FRONT` and `ID_CARD_BACK` must be submitted.
		///* `DRIVING_LICENCE_FRONT` denotes an image containing only the front of the driving licence. In order for a document to be usable, both the `DRIVING_LICENCE_FRONT` and `DRIVING_LICENCE_BACK` must be submitted.
		///* `DRIVING_LICENCE_BACK` denotes an image containing only the back of the driving licence. In order for a document to be usable, both the `DRIVING_LICENCE_FRONT` and `DRIVING_LICENCE_FRONT` must be submitted.
		///
		///>Please refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks) for details on when each document type should be submitted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentDetailDocumentType DocumentType { get; set; }
		
		/// <summary>
		/// Filename of the document.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Filename { get; set; }
		
		/// <summary>
		/// The code of the shareholder, to which the document applies.
		///>Required if the account holder referred to by the `accountHolderCode` has a `legalEntity` of type `Business` and the `documentType` is either `PASSPORT`, `ID_CARD`, `ID_CARD_FRONT`, `ID_CARD_BACK`, `DRIVING_LICENCE_FRONT`, `DRIVING_LICENCE_BACK` (i.e. a document is being submitted in order to verify a shareholder).
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on when a document should be submitted in order to verify a shareholder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentDetailDocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_STATEMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BSN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVING_LICENCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVING_LICENCE_BACK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVING_LICENCE_FRONT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_CARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_CARD_BACK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_CARD_FRONT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NHIS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSN = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorFieldType
	{
		
		/// <summary>
		/// The validation error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the validation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldType FieldType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FieldType
	{
		
		/// <summary>
		/// The full name of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Field { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FieldTypeFieldName FieldName { get; set; }
		
		/// <summary>
		/// The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FieldTypeFieldName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountCode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderCode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderDetails = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountNumber = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStateType = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStatus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		address = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountCode = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountName = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankBicSwift = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCity = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCode = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankName = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankStatement = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		branchCode = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		businessContact = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cardToken = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checkCode = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		city = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		country = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		countryCode = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currencyCode = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateOfBirth = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		destinationAccountCode = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		document = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentExpirationDate = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerCountry = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerState = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentName = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentNumber = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentType = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		doingBusinessAs = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicence = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicenceBack = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicense = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstName = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fullPhoneNumber = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gender = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		houseNumberOrName = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iban = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCard = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardBack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardFront = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idNumber = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		identityDocument = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		individualDetails = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastName = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalBusinessName = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntity = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntityType = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantCategoryCode = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantReference = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microDeposit = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nationality = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCity = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCountryCode = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerHouseNumberOrName = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerName = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerPostalCode = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerState = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerStreet = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passport = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passportNumber = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalData = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneCountryCode = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneNumber = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		postalCode = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primaryCurrency = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reason = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registrationNumber = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schedule = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholder = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholderCode = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		socialSecurityNumber = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceAccountCode = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stateOrProvince = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		street = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taxId = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tierNumber = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transferCode = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		value = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualAccount = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		visaNumber = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webAddress = 90,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GenericResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the account of which to retrieve the details.
		///> Required if no `accountHolderCode` is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the account holder of which to retrieve the details.
		///> Required if no `accountCode` is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// True if the request should return the account holder details
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountHolderResponse
	{
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// A list of the accounts under the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Account[] Accounts { get; set; }
		
		/// <summary>
		/// The description of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The legal entity of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetAccountHolderResponseLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCVerificationResult Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAccountHolderResponseLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountHolderStatusResponse
	{
		
		/// <summary>
		/// The code of the Account Holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUploadedDocumentsRequest
	{
		
		/// <summary>
		/// The code of the Account Holder for which to retrieve the documents.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The code of the Bank Account for which to retrieve the documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// The code of the Shareholder for which to retrieve the documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUploadedDocumentsResponse
	{
		
		/// <summary>
		/// A list of the documents and their details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentDetail[] DocumentDetails { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndividualDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPersonalData PersonalData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCBankAccountCheckResult
	{
		
		/// <summary>
		/// The unique ID of the bank account to which the check applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckResult
	{
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckStatusData
	{
		
		/// <summary>
		/// A list of the fields required for execution of the check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RequiredFields { get; set; }
		
		/// <summary>
		/// The status of the check.
		///>Permitted Values: `UNCHECKED`, `DATA_PROVIDED`, `PASSED`, `PENDING`, `AWAITING_DATA`, `RETRY_LIMIT_REACHED`, `INVALID_DATA`, `FAILED`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusDataStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckSummary Summary { get; set; }
		
		/// <summary>
		/// The type of check.
		///>Permitted Values: `COMPANY_VERIFICATION`, `IDENTITY_VERIFICATION`, `PASSPORT_VERIFICATION`, `BANK_ACCOUNT_VERIFICATION`, `NONPROFIT_VERIFICATION`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusDataType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KYCCheckStatusDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_PROVIDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_LIMIT_REACHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCHECKED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KYCCheckStatusDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ACCOUNT_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_VERIFICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY_VERIFICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONPROFIT_VERIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT_VERIFICATION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckSummary
	{
		
		/// <summary>
		/// The code of the check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KycCheckCode { get; set; }
		
		/// <summary>
		/// A description of the check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KycCheckDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCShareholderCheckResult
	{
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
		
		/// <summary>
		/// The code of the shareholder to which the check applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCVerificationResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckResult AccountHolder { get; set; }
		
		/// <summary>
		/// The result(s) of the checks on the bank account(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCBankAccountCheckResult[] BankAccounts { get; set; }
		
		/// <summary>
		/// The result(s) of the checks on the shareholder(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCShareholderCheckResult[] Shareholders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutInstrumentToken
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayoutInstrumentTokenCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PayoutInstrumentTokenPayoutInstrumentTokenType PayoutInstrumentTokenType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecurringDetailReference { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShopperReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PayoutInstrumentTokenPayoutInstrumentTokenType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CardToken = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutScheduleResponse
	{
		
		/// <summary>
		/// The date of the next scheduled payout.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NextScheduledPayout { get; set; }
		
		/// <summary>
		/// The payout schedule of the account.
		///>Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponseSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PayoutScheduleResponseSchedule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_NOON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY_6PM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_6_HOURS_FROM_MIDNIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY_ON_TUE_FRI_MIDNIGHT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PerformVerificationRequest
	{
		
		/// <summary>
		/// The code of the account holder to verify.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The state required for the account holder.
		///> Permitted values: `Processing`, `Payout`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PerformVerificationRequestAccountStateType AccountStateType { get; set; }
		
		/// <summary>
		/// The tier required for the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PerformVerificationRequestAccountStateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitedPayout = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitedProcessing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitlessPayout = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitlessProcessing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalDocumentData
	{
		
		/// <summary>
		/// The expiration date of the document.
		///The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// The two-character country code of the issuer.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string IssuerCountry { get; set; }
		
		/// <summary>
		/// The state issued the document (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssuerState { get; set; }
		
		/// <summary>
		/// The number of the document. Delete the given type if the value empty.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// The type of the document. More then one item pert type does not allowed.
		///Valid values: ID, PASSPORT, VISA, DRIVINGLICENSE
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalDocumentDataType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PersonalDocumentDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVINGLICENSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOCIALSECURITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ShareholderContact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasAddress Address { get; set; }
		
		/// <summary>
		/// The e-mail address of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The phone number of the contact provided as a single string.  It will be handled as a landline phone.
		///**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FullPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPersonalData PersonalData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPhoneNumber PhoneNumber { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the Shareholder.
		///>**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Shareholder will be created with a procedurally-generated UUID.**
		///
		///>**If, during an Account Holder create request, a UUID is provided, the creation of the Shareholder will fail while the creation of the Account Holder will continue.**
		///
		///>**If, during an Account Holder update request, a UUID that is not correlated with an existing Shareholder is provided, the update of the Shareholder will fail.**
		///
		///>**If, during an Account Holder update request, a UUID that is correlated with an existing Shareholder is provided, the existing Bank Account will be updated.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderReference { get; set; }
		
		/// <summary>
		/// The URL of the website of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuspendAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the account holder to be suspended.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuspendAccountHolderResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnSuspendAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the account holder to be reinstated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnSuspendAccountHolderResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the Account Holder to be updated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		/// <summary>
		/// The description to which the Account Holder should be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The entity type.
		///Permitted values: `Business`, `Individual`
		///
		///If an account holder is 'Business', then `accountHolderDetails.businessDetails` must be provided, as well as at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.
		///
		///If an account holder is 'Individual', then `accountHolderDetails.individualDetails` must be provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountHolderRequestLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The primary three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes), to which the account holder should be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The processing tier to which the Account Holder should be updated.
		///>The processing tier can not be lowered through this request.
		///
		///>Required if accountHolderDetails are not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProcessingTier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAccountHolderRequestLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountHolderResponse
	{
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// The description of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The legal entity of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountHolderResponseLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCVerificationResult Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAccountHolderResponseLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountHolderStateRequest
	{
		
		/// <summary>
		/// The code of the Account Holder on which to update the state.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// If true, disable the requested state.  If false, enable the requested state.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disable { get; set; }
		
		/// <summary>
		/// The reason that the state is being updated.
		///>Required if the state is being disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		/// <summary>
		/// The state to be updated.
		///>Permitted values are: `Processing`, `Payout`
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountHolderStateRequestStateType StateType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAccountHolderStateRequestStateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitedPayout = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitedProcessing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitlessPayout = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LimitlessProcessing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountRequest
	{
		
		/// <summary>
		/// The code of the account to update.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// A description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A set of key and value pairs for general use by the merchant.
		///The keys do not have specific names and may be used for storing miscellaneous data as desired.
		///> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdatePayoutScheduleRequest PayoutSchedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountResponse
	{
		
		/// <summary>
		/// The code of the account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/updateAccount` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponse PayoutSchedule { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePayoutScheduleRequest
	{
		
		/// <summary>
		/// Direction on how to handle any payouts that have already been scheduled.
		///Permitted values:
		///* `CLOSE` will close the existing batch of payouts.
		///* `UPDATE` will reschedule the existing batch to the new schedule.
		///* `NOTHING` (**default**) will allow the payout to proceed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdatePayoutScheduleRequestAction Action { get; set; }
		
		/// <summary>
		/// The reason for the payout schedule update.
		///> This field is required when the `schedule` parameter is set to `HOLD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		/// <summary>
		/// The payout schedule to which the account is to be updated.
		///Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.
		///`HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePayoutScheduleRequestSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePayoutScheduleRequestAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdatePayoutScheduleRequestSchedule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_NOON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY_6PM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_6_HOURS_FROM_MIDNIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY_ON_TUE_FRI_MIDNIGHT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UploadDocumentRequest
	{
		
		/// <summary>
		/// The content of the document as represented by a Base64-encoded string.
		///
		///To learn about requirements, see [Bank account check](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks/bank-account-check#requirements) and [Photo ID check](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks/photo-id-check#requirements).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentContent { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentDetail DocumentDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasAddress
	{
		
		/// <summary>
		/// The name of the city.
		///>Required if either houseNumberOrName, street, postalCode, or stateOrProvince are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// The two-character country code of the address
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The number or name of the house.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HouseNumberOrName { get; set; }
		
		/// <summary>
		/// The postal code.
		///>A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.
		///>Required if either houseNumberOrName, street, city, or stateOrProvince are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The abbreviation of the state or province.
		///>Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.
		///>Required for an address in the USA or Canada if either houseNumberOrName, street, city, or postalCode are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// The name of the street.
		///>The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
		///>Required if either houseNumberOrName, city, postalCode, or stateOrProvince are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Street { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasName
	{
		
		/// <summary>
		/// The first name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The gender.
		///>The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ViasNameGender Gender { get; set; }
		
		/// <summary>
		/// The name's infix, if applicable.
		///>A maximum length of twenty (20) characters is imposed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Infix { get; set; }
		
		/// <summary>
		/// The last name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViasNameGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasPersonalData
	{
		
		/// <summary>
		/// The date of birth of the person.
		///The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Key value pairs of document type and identify numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PersonalDocumentData[] DocumentData { get; set; }
		
		/// <summary>
		/// The nationality of the person represented by a two-character country code.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Nationality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasPhoneNumber
	{
		
		/// <summary>
		/// The two-character country code of the phone number.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneCountryCode { get; set; }
		
		/// <summary>
		/// The phone number.
		///>The inclusion of the phone number country code is not necessary.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The type of the phone number.
		///>The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ViasPhoneNumberPhoneType PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViasPhoneNumberPhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fax = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Landline = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIP = 3,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Close an existing account under an account holder.
		/// This endpoint is used to close an existing account under an account holder. If an account is closed, it may not process transactions or have its funds paid out,and it may not be reopened. Any payments made to a closed account will be directed to the merchant's liable account.
		/// CloseAccountPost closeAccount
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<CloseAccountResponse> CloseAccountPostAsync(CloseAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "closeAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloseAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Close an existing account holder.
		/// This endpoint is used to close an existing account holder and its accounts. If an account holder is closed, it may not process transactions or pay out funds, and it may not be reopened. Any payments made to a closed account will be directed to the merchant's liable account.
		/// CloseAccountHolderPost closeAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<CloseAccountHolderResponse> CloseAccountHolderPostAsync(CloseAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "closeAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloseAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new account under an existing account holder.
		/// This endpoint is used to create an account under an existing account holder. An account holder may have multiple accounts.
		/// CreateAccountPost createAccount
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<CreateAccountResponse> CreateAccountPostAsync(CreateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new account holder.
		/// This endpoint is used to create an account holder. Each account holder represents a single sub-merchant, and each sub-merchant must be represented by an account holder. Depending on the legal entity type, different details are required to be provided in the call to this endpoint.
		/// CreateAccountHolderPost createAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<CreateAccountHolderResponse> CreateAccountHolderPostAsync(CreateAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "createAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete bank accounts of an existing account holder.
		/// This endpoint is used to delete existing bank accounts from an account holder. For this, pass the `accountHolderCode` you got on the account holder creation, and one or more `bankAccountUUIDs` specifying bank accounts to delete.
		/// DeleteBankAccountsPost deleteBankAccounts
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GenericResponse> DeleteBankAccountsPostAsync(DeleteBankAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteBankAccounts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenericResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete payout instrument tokens of an existing account holder.
		/// This endpoint is used to delete existing payout instrument tokens from an account holder. For this, pass the `accountHolderCode` you got on the account holder creation, and one or more `payoutInstrumentTokenCodes` specifying payout instrument tokens to delete.
		/// DeletePayoutInstrumentTokensPost deletePayoutInstrumentTokens
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GenericResponse> DeletePayoutInstrumentTokensPostAsync(DeletePayoutInstrumentTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deletePayoutInstrumentTokens";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenericResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete shareholders of an existing account holder.
		/// This endpoint is used to delete existing shareholders from an account holder.
		/// DeleteShareholdersPost deleteShareholders
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GenericResponse> DeleteShareholdersPostAsync(DeleteShareholderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "deleteShareholders";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenericResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the details of an account holder.
		/// This endpoint is used to retrieve the details of an account holder.
		/// GetAccountHolderPost getAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GetAccountHolderResponse> GetAccountHolderPostAsync(GetAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the uploaded documents of an existing account holder.
		/// This endpoint is used to retrieve documents previously uploaded for use in the KYC Verification of an account holder.
		/// 
		/// For further information regarding KYC Verification, please refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).
		/// GetUploadedDocumentsPost getUploadedDocuments
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GetUploadedDocumentsResponse> GetUploadedDocumentsPostAsync(GetUploadedDocumentsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "getUploadedDocuments";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUploadedDocumentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Suspend an existing account holder.
		/// This endpoint is used to suspend an existing account holder. If an account holder is suspended, it may not process transactions or pay out funds. Any payments made to a suspended account holder will be directed to the merchant's liable account.
		/// SuspendAccountHolderPost suspendAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<SuspendAccountHolderResponse> SuspendAccountHolderPostAsync(SuspendAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "suspendAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SuspendAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reinstate a disabled account holder.
		/// This endpoint is used to reinstate an existing account holder, which has been suspended through the `/suspendAccountHolder` endpoint. An account holder which has been suspended due to KYC verification issues cannot be reinstated through this endpoint.
		/// UnSuspendAccountHolderPost unSuspendAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<UnSuspendAccountHolderResponse> UnSuspendAccountHolderPostAsync(UnSuspendAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "unSuspendAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UnSuspendAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing account under an account holder.
		/// This endpoint is used to update the description or payout schedule of an existing account.
		/// UpdateAccountPost updateAccount
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<UpdateAccountResponse> UpdateAccountPostAsync(UpdateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateAccount";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing account holder.
		/// This endpoint is used to update the `accountHolderDetails` or `processingTier` of an account holder.
		/// 
		/// If updating the `accountHolderDetails`, only the details which have been provided will be updated. Other details will be left as-is with the exception of the following fields:
		/// * `accountHolderDetails.address`
		/// * `accountHolderDetails.phoneNumber`
		/// * `accountHolderDetails.bankAccountDetails.BankAccountDetail`
		/// * `accountHolderDetails.businessDetails.shareholders.ShareholderContact`, which requires all fields necessary for validation (i.e. in order to update only the `accountHolderDetails.address.postalCode`, the fields `accountHolderDetails.address.country`, `.city`, `.street`, `.postalCode`, and possibly `.stateOrProvince` must be provided as well, so that the address can be properly validated).
		/// 
		/// Note that this endpoint can also be used to create new bank accounts. For this, provide details of a bank account without providing a `bankAccountUUID`.
		/// 
		/// Similarly, it can also be used to create new shareholders by providing details of a shareholder without providing a `shareholderCode`.
		/// > The updating of the `metadata` field will overwite all of the existing account holder metadata. In order to update an existing metadata key-value pair, all otherkey-value pairs should be provided in order to not delete them.
		/// UpdateAccountHolderPost updateAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<UpdateAccountHolderResponse> UpdateAccountHolderPostAsync(UpdateAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the state of an existing account holder.
		/// This endpoint is used to disable or enable the processing or payout state of an account holder. It cannot be used to enable an account holder whose processing or payout state has not been disabled through this endpoint.
		/// 
		/// For further information regarding processing and payout states of an account holder, please refer to the [MarketPay documentation](https://docs.adyen.com/developers/marketpay).
		/// UpdateAccountHolderStatePost updateAccountHolderState
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GetAccountHolderStatusResponse> UpdateAccountHolderStatePostAsync(UpdateAccountHolderStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "updateAccountHolderState";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountHolderStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upload a document for an existing account holder.
		/// This endpoint is used to upload a document for use in the KYC verification of an account holder.
		/// 
		/// For further information regarding KYC Verification, please refer to [Verification checks](https://docs.adyen.com/developers/marketpay/onboarding-and-verification/verification-checks).
		/// UploadDocumentPost uploadDocument
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<UpdateAccountHolderResponse> UploadDocumentPostAsync(UploadDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "uploadDocument";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Request to perform verification for an account holder.
		/// This endpoint allows to trigger the verification of the account holder earlier than it's required by the currently processed volume.
		/// VerificationPost verification
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<GenericResponse> VerificationPostAsync(PerformVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GenericResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
