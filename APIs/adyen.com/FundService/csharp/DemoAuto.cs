//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountDetailBalance
	{
		
		/// <summary>
		/// The code of the account that holds the balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetailBalance DetailBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderBalanceRequest
	{
		
		/// <summary>
		/// The code of the Account Holder of which to retrieve the balance.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderBalanceResponse
	{
		
		/// <summary>
		/// A list of each account and their balances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountDetailBalance[] BalancePerAccount { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DetailBalance TotalBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderTransactionListRequest
	{
		
		/// <summary>
		/// The code of the account holder that owns the account(s) of which retrieve the transaction list.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransactionListForAccount[] TransactionListsPerAccount { get; set; }
		
		/// <summary>
		/// A list of statuses to include in the transaction list. If left blank, all transactions will be included.
		///>Permitted values:
		///>* `PendingCredit` - a pending balance credit.
		///>* `CreditFailed` - a pending credit failure; the balance will not be credited.
		///>* `Credited` - a credited balance.
		///>* `PendingDebit` - a pending balance debit (e.g., a refund).
		///>* `DebitFailed` - a pending debit failure; the balance will not be debited.
		///>* `Debited` - a debited balance (e.g., a refund).
		///>* `DebitReversedReceived` - a pending refund reversal.
		///>* `DebitedReversed` - a reversed refund.
		///>* `ChargebackReceived` - a received chargeback request.
		///>* `Chargeback` - a processed chargeback.
		///>* `ChargebackReversedReceived` - a pending chargeback reversal.
		///>* `ChargebackReversed` - a reversed chargeback.
		///>* `Converted` - converted.
		///>* `ManualCorrected` - manual booking/adjustment by Adyen.
		///>* `Payout` - a payout.
		///>* `PayoutReversed` - a reversed payout.
		///>* `PendingFundTransfer` - a pending transfer of funds from one account to another.
		///>* `FundTransfer` - a transfer of funds from one account to another.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] TransactionStatuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderTransactionListResponse
	{
		
		/// <summary>
		/// A list of the transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountTransactionList[] AccountTransactionLists { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountTransactionList
	{
		
		/// <summary>
		/// The code of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// Indicates whether there is a next page of transactions available.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasNextPage { get; set; }
		
		/// <summary>
		/// The list of transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Transaction[] Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Amount
	{
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/developers/development-resources/currency-codes).
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The payable amount that can be charged for the transaction.
		///
		///The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/developers/development-resources/currency-codes).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BankAccountDetail
	{
		
		/// <summary>
		/// The bank account number (without separators).
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The type of bank account.
		///Only applicable to bank accounts held in the USA.
		///The permitted values are: `checking`, `savings`.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountType { get; set; }
		
		/// <summary>
		/// The name of the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountName { get; set; }
		
		/// <summary>
		/// Merchant reference to the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountReference { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the Bank Account.
		///>If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
		///
		///>If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
		///
		///>If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
		///
		///>If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// The bank identifier code.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankBicSwift { get; set; }
		
		/// <summary>
		/// The city in which the bank branch is located.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCity { get; set; }
		
		/// <summary>
		/// The bank code of the banking institution with which the bank account is registered.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCode { get; set; }
		
		/// <summary>
		/// The name of the banking institution with which the bank account is held.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankName { get; set; }
		
		/// <summary>
		/// The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
		///* United States - Routing number
		///* United Kingdom - Sort code
		///* Germany - Bankleitzahl
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchCode { get; set; }
		
		/// <summary>
		/// The check code of the bank account.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckCode { get; set; }
		
		/// <summary>
		/// The two-letter country code in which the bank account is registered.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The currency in which the bank account deals.
		///>The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The international bank account number.
		///>The IBAN standard is defined in ISO-13616.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Iban { get; set; }
		
		/// <summary>
		/// The city of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCity { get; set; }
		
		/// <summary>
		/// The country code of the country of residence of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCountryCode { get; set; }
		
		/// <summary>
		/// The date of birth of the bank account owner.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerDateOfBirth { get; set; }
		
		/// <summary>
		/// The house name or number of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerHouseNumberOrName { get; set; }
		
		/// <summary>
		/// The name of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The country code of the country of nationality of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerNationality { get; set; }
		
		/// <summary>
		/// The postal code of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerPostalCode { get; set; }
		
		/// <summary>
		/// The state of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerState { get; set; }
		
		/// <summary>
		/// The street name of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerStreet { get; set; }
		
		/// <summary>
		/// If set to true, the bank account is a primary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrimaryAccount { get; set; }
		
		/// <summary>
		/// The tax ID number.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
		
		/// <summary>
		/// The URL to be used for bank account verification.
		///This may be generated on bank account creation.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/developers/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UrlForVerification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetailBalance
	{
		
		/// <summary>
		/// The list of balances held by the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount[] Balance { get; set; }
		
		/// <summary>
		/// The list of on hold balances held by the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount[] OnHoldBalance { get; set; }
		
		/// <summary>
		/// The list of pending balances held by the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount[] PendingBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorFieldType
	{
		
		/// <summary>
		/// The validation error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the validation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldType FieldType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FieldType
	{
		
		/// <summary>
		/// The full name of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Field { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FieldTypeFieldName FieldName { get; set; }
		
		/// <summary>
		/// The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FieldTypeFieldName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountCode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderCode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderDetails = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountNumber = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStateType = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStatus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		address = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountCode = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountName = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankBicSwift = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCity = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCode = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankName = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankStatement = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		branchCode = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		businessContact = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cardToken = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checkCode = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		city = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		country = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		countryCode = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currencyCode = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateOfBirth = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		destinationAccountCode = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		document = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentExpirationDate = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerCountry = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerState = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentName = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentNumber = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentType = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		doingBusinessAs = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicence = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicenceBack = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicense = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstName = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fullPhoneNumber = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gender = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		houseNumberOrName = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iban = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCard = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardBack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardFront = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idNumber = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		identityDocument = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		individualDetails = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastName = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalBusinessName = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntity = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntityType = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantCategoryCode = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantReference = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microDeposit = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nationality = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCity = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCountryCode = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerHouseNumberOrName = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerName = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerPostalCode = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerState = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerStreet = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passport = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passportNumber = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalData = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneCountryCode = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneNumber = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		postalCode = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primaryCurrency = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reason = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registrationNumber = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schedule = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholder = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholderCode = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		socialSecurityNumber = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceAccountCode = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stateOrProvince = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		street = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taxId = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tierNumber = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transferCode = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		value = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualAccount = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		visaNumber = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webAddress = 90,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutAccountHolderRequest
	{
		
		/// <summary>
		/// The code of the account from which the payout is to be made.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the Account Holder who owns the account from which the payout is to be made.
		///The Account Holder is the party to which the payout will be made.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The unique ID of the Bank Account held by the Account Holder to which the payout is to be made.
		///If left blank, a bank account is automatically selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// A description of the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The unique ID of the payout instrument token held by the Account Holder to which the payout is to be made.
		///If left blank, a payout instrument is automatically selected.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayoutInstrumentTokenCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutAccountHolderResponse
	{
		
		/// <summary>
		/// The unique ID of the Bank Account to which the payout was made.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RefundNotPaidOutTransfersRequest
	{
		
		/// <summary>
		/// The code of the account from which to perform the refund(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the Account Holder which owns the account from which to perform the refund(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RefundNotPaidOutTransfersResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetupBeneficiaryRequest
	{
		
		/// <summary>
		/// The destination account code.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// A value that can be supplied at the discretion of the executing user.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The benefactor account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetupBeneficiaryResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Transaction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BankAccountDetail BankAccountDetail { get; set; }
		
		/// <summary>
		/// The merchant reference of a related capture.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CaptureMerchantReference { get; set; }
		
		/// <summary>
		/// The psp reference of a related capture.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CapturePspReference { get; set; }
		
		/// <summary>
		/// The date on which the transaction was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// A description of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The code of the account to which funds were credited during an outgoing fund transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// The psp reference of the related dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisputePspReference { get; set; }
		
		/// <summary>
		/// The reason code of a dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisputeReasonCode { get; set; }
		
		/// <summary>
		/// The merchant reference of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The psp reference of the related authorisation or transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentPspReference { get; set; }
		
		/// <summary>
		/// The psp reference of the related payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayoutPspReference { get; set; }
		
		/// <summary>
		/// The psp reference of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The code of the account from which funds were debited during an incoming fund transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
		
		/// <summary>
		/// The status of the transaction.
		///>Permitted values: `PendingCredit`, `CreditFailed`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransactionTransactionStatus TransactionStatus { get; set; }
		
		/// <summary>
		/// The transfer code of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransactionTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chargeback = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReceived = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReversed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReversedReceived = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Converted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credited = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitReversedReceived = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debited = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitedReversed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FundTransfer = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManualCorrected = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payout = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PayoutReversed = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingCredit = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingDebit = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingFundTransfer = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondChargeback = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondChargebackReceived = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransactionListForAccount
	{
		
		/// <summary>
		/// The account for which to retrieve the transactions.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The page of transactions to retrieve.
		///Each page lists fifty (50) transactions.  The most recent transactions are included on page 1.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferFundsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The code of the account to which the funds are to be credited.
		///>The state of the Account Holder of this account must be Active.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The code of the account from which the funds are to be debited.
		///>The state of the Account Holder of this account must be Active and allow payouts.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
		
		/// <summary>
		/// The code related to the type of transfer being performed.
		///>The permitted codes differ for each platform account and are defined in their service level agreement.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferFundsResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve the balance(s) of an account holder.
		/// This endpoint is used to retrieve the balance(s) of the accounts of an account holder. An account's balances are on a per-currency basis (i.e., an account may have multiple balances: one per currency).
		/// AccountHolderBalancePost accountHolderBalance
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<AccountHolderBalanceResponse> AccountHolderBalancePostAsync(AccountHolderBalanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accountHolderBalance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AccountHolderBalanceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of transactions.
		/// This endpoint is used to retrieve a list of Transactions for an account holder's accounts. The accounts and Transaction Statuses to be included on the list can be specified. Each call will return a maximum of fifty (50) Transactions per account; in order to retrieve the following set of Transactions another call should be made with the 'page' value incremented. Note that Transactions are ordered with most recent first.
		/// AccountHolderTransactionListPost accountHolderTransactionList
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<AccountHolderTransactionListResponse> AccountHolderTransactionListPostAsync(AccountHolderTransactionListRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accountHolderTransactionList";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AccountHolderTransactionListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disburse a specified amount from an account to the account holder.
		/// This endpoint is used to pay out a specified amount from an account to the bank account of the account's account holder.
		/// PayoutAccountHolderPost payoutAccountHolder
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<PayoutAccountHolderResponse> PayoutAccountHolderPostAsync(PayoutAccountHolderRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payoutAccountHolder";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PayoutAccountHolderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Refund all transactions of an account since the most recent payout.
		/// This endpoint is used to refund all the transactions of an account which have taken place since the most recent payout. This request is on a per-account basis (as opposed to a per-payment basis), so only the portion of the payment which was made to the specified account will be refunded. The commission(s), fee(s), and payment(s) to other account(s), will remain in the accounts to which they were sent as designated by the original payment's split details.
		/// RefundNotPaidOutTransfersPost refundNotPaidOutTransfers
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<RefundNotPaidOutTransfersResponse> RefundNotPaidOutTransfersPostAsync(RefundNotPaidOutTransfersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "refundNotPaidOutTransfers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RefundNotPaidOutTransfersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Designate an account to be the beneficiary of a separate account and transfer the benefactor's current balance to the beneficiary.
		/// This endpoint is used to define a benefactor and a beneficiary relationship between two accounts. At the time of benefactor/beneficiary setup, the funds in the benefactor account are transferred to the beneficiary account, and any further payments to the benefactor account are automatically sent to the beneficiary account. Note that a series of benefactor/beneficiaries may not exceed four (4) beneficiaries and may not have a cycle in it.
		/// SetupBeneficiaryPost setupBeneficiary
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<SetupBeneficiaryResponse> SetupBeneficiaryPostAsync(SetupBeneficiaryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setupBeneficiary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SetupBeneficiaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Transfer funds from one platform account to another.
		/// This endpoint is used to transfer funds from one account to another account. Both accounts must be in the same marketplace, but can have different account holders. The transfer must include a transfer code, which should be determined by the marketplace, in compliance with local regulations.
		/// TransferFundsPost transferFunds
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<TransferFundsResponse> TransferFundsPostAsync(TransferFundsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transferFunds";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TransferFundsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
