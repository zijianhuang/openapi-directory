//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountCloseNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloseAccountResponse Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountCreateNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountResponse Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountEvent
	{
		
		/// <summary>
		/// The event.
		///>Permitted values: `InactivateAccount`, `RefundNotPaidOutTransfers`.
		///For more information, refer to [Verification checks](https://docs.adyen.com/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountEventEvent Event { get; set; }
		
		/// <summary>
		/// The date on which the event will take place.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExecutionDate { get; set; }
		
		/// <summary>
		/// The reason why this event has been created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountEventEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InactivateAccount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RefundNotPaidOutTransfers = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderCreateNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountHolderResponse Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasAddress Address { get; set; }
		
		/// <summary>
		/// Each of the bank accounts associated with the account holder.
		///> Each array entry should represent one bank account.
		///> For comprehensive detail regarding the required `BankAccountDetail` fields, please refer to the [KYC Verification documentation](https://docs.adyen.com/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BankAccountDetail[] BankAccountDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BusinessDetails BusinessDetails { get; set; }
		
		/// <summary>
		/// The email address of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The phone number of the account holder provided as a single string. It will be handled as a landline phone.
		///**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FullPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IndividualDetails IndividualDetails { get; set; }
		
		/// <summary>
		/// The Merchant Category Code of the account holder.
		///> If not specified in the request, this will be derived from the platform account (which is configured by Adyen).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantCategoryCode { get; set; }
		
		/// <summary>
		/// A set of key and value pairs for general use by the account holder or merchant.
		///The keys do not have specific names and may be used for storing miscellaneous data as desired.
		///> The values being stored have a maximum length of eighty (80) characters and will be truncated if necessary.
		///> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Each of the card tokens associated with the account holder.
		///> Each array entry should represent one card token.
		///> For comprehensive detail regarding the required `CardToken` fields, please refer to the [KYC Verification documentation](https://docs.adyen.com/marketpay/onboarding-and-verification/verification-checks).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayoutMethod[] PayoutMethods { get; set; }
		
		/// <summary>
		/// The URL of the website of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderPayoutNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderPayoutNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderPayoutNotificationContent
	{
		
		/// <summary>
		/// The code of the account from which the payout was made.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the Account Holder to which the payout was made.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// payout amounts (per currency)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Amount[] Amounts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BankAccountDetail BankAccountDetail { get; set; }
		
		/// <summary>
		/// A description of the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Invalid fields list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// merchant reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderStatus
	{
		
		/// <summary>
		/// A list of events scheduled for the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountEvent[] Events { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountPayoutState PayoutState { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountProcessingState ProcessingState { get; set; }
		
		/// <summary>
		/// The status of the account holder.
		///>Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatusStatus Status { get; set; }
		
		/// <summary>
		/// The reason why the status was assigned to the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountHolderStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderStatusChangeNotification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatusChangeNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderStatusChangeNotificationContent
	{
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus NewStatus { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus OldStatus { get; set; }
		
		/// <summary>
		/// The reason for the status change.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderUpdateNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountHolderResponse Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderVerificationNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderVerificationNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountHolderVerificationNotificationContent
	{
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The unique ID of the bank account that has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData KycCheckStatusData { get; set; }
		
		/// <summary>
		/// The code of the shareholder that has been verified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountPayoutState
	{
		
		/// <summary>
		/// Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool AllowPayout { get; set; }
		
		/// <summary>
		/// The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisableReason { get; set; }
		
		/// <summary>
		/// Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disabled { get; set; }
		
		/// <summary>
		/// The reason why payouts (to all of the account holder's accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotAllowedReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount PayoutLimit { get; set; }
		
		/// <summary>
		/// The payout tier that the account holder occupies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TierNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountProcessingState
	{
		
		/// <summary>
		/// The reason why processing has been disabled.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisableReason { get; set; }
		
		/// <summary>
		/// Indicates whether the processing of payments is allowed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disabled { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount ProcessedFrom { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount ProcessedTo { get; set; }
		
		/// <summary>
		/// The processing tier that the account holder occupies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TierNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountUpdateNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountResponse Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Amount
	{
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The payable amount that can be charged for the transaction.
		///
		///The transaction amount needs to be represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public long Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BankAccountDetail
	{
		
		/// <summary>
		/// The bank account number (without separators).
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The type of bank account.
		///Only applicable to bank accounts held in the USA.
		///The permitted values are: `checking`, `savings`.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountType { get; set; }
		
		/// <summary>
		/// The name of the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountName { get; set; }
		
		/// <summary>
		/// Merchant reference to the bank account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountReference { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the Bank Account.
		///>If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
		///
		///>If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
		///
		///>If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
		///
		///>If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// The bank identifier code.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankBicSwift { get; set; }
		
		/// <summary>
		/// The city in which the bank branch is located.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCity { get; set; }
		
		/// <summary>
		/// The bank code of the banking institution with which the bank account is registered.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankCode { get; set; }
		
		/// <summary>
		/// The name of the banking institution with which the bank account is held.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BankName { get; set; }
		
		/// <summary>
		/// The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
		///* United States - Routing number
		///* United Kingdom - Sort code
		///* Germany - Bankleitzahl
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchCode { get; set; }
		
		/// <summary>
		/// The check code of the bank account.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CheckCode { get; set; }
		
		/// <summary>
		/// The two-letter country code in which the bank account is registered.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The currency in which the bank account deals.
		///>The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The international bank account number.
		///>The IBAN standard is defined in ISO-13616.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Iban { get; set; }
		
		/// <summary>
		/// The city of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCity { get; set; }
		
		/// <summary>
		/// The country code of the country of residence of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerCountryCode { get; set; }
		
		/// <summary>
		/// The date of birth of the bank account owner.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerDateOfBirth { get; set; }
		
		/// <summary>
		/// The house name or number of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerHouseNumberOrName { get; set; }
		
		/// <summary>
		/// The name of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerName { get; set; }
		
		/// <summary>
		/// The country code of the country of nationality of the bank account owner.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerNationality { get; set; }
		
		/// <summary>
		/// The postal code of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerPostalCode { get; set; }
		
		/// <summary>
		/// The state of residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerState { get; set; }
		
		/// <summary>
		/// The street name of the residence of the bank account owner.
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OwnerStreet { get; set; }
		
		/// <summary>
		/// If set to true, the bank account is a primary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrimaryAccount { get; set; }
		
		/// <summary>
		/// The tax ID number.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
		
		/// <summary>
		/// The URL to be used for bank account verification.
		///This may be generated on bank account creation.
		///
		///>Refer to the [Onboarding and verification](https://docs.adyen.com/marketpay/onboarding-and-verification) section for details on field requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UrlForVerification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BeneficiarySetupNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BeneficiarySetupNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BeneficiarySetupNotificationContent
	{
		
		/// <summary>
		/// The code of the beneficiary account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// The code of the beneficiary Account Holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountHolderCode { get; set; }
		
		/// <summary>
		/// A listing of the invalid fields which have caused the Setup Beneficiary request to fail. If this is empty, the Setup Beneficiary request has succeeded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference provided by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The code of the benefactor account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
		
		/// <summary>
		/// The code of the benefactor Account Holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountHolderCode { get; set; }
		
		/// <summary>
		/// The date on which the beneficiary was set up and funds transferred from benefactor to beneficiary.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransferDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BusinessDetails
	{
		
		/// <summary>
		/// The registered name of the company (if it differs from the legal name of the company).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DoingBusinessAs { get; set; }
		
		/// <summary>
		/// The legal name of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LegalBusinessName { get; set; }
		
		/// <summary>
		/// The registration number of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RegistrationNumber { get; set; }
		
		/// <summary>
		/// Each of the shareholders associated with the company.
		///Each array entry should represent one shareholder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShareholderContact[] Shareholders { get; set; }
		
		/// <summary>
		/// The tax ID of the company.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseAccountResponse
	{
		
		/// <summary>
		/// Contains field validation errors that would prevent requests from being processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		/// <summary>
		/// The new status of the account.
		///>Permitted values: `Active`, `Inactive`, `Suspended`, `Closed`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloseAccountResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloseAccountResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompensateNegativeBalanceNotification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompensateNegativeBalanceNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompensateNegativeBalanceNotificationContent
	{
		
		/// <summary>
		/// A list of the negative balances compensated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CompensateNegativeBalanceNotificationRecord[] Records { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompensateNegativeBalanceNotificationRecord
	{
		
		/// <summary>
		/// The code of the account whose negative balance has been compensated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The date on which the compensation took place.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TransferDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountHolderResponse
	{
		
		/// <summary>
		/// The code of a new account created for the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the new account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// The description of the new account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/createAccountHolder` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The type of legal entity of the new account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountHolderResponseLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCVerificationResult Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountHolderResponseLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAccountResponse
	{
		
		/// <summary>
		/// The code of the new account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// The description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/createAccount` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponse PayoutSchedule { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		/// <summary>
		/// The status of the account.
		///>Permitted values: `Active`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateAccountResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateAccountResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorFieldType
	{
		
		/// <summary>
		/// The validation error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the validation error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldType FieldType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FieldType
	{
		
		/// <summary>
		/// The full name of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Field { get; set; }
		
		/// <summary>
		/// The type of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FieldTypeFieldName FieldName { get; set; }
		
		/// <summary>
		/// The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FieldTypeFieldName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountCode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderCode = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountHolderDetails = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountNumber = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStateType = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountStatus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accountType = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		address = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountCode = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankAccountName = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankBicSwift = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCity = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankCode = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankName = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bankStatement = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		branchCode = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		businessContact = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cardToken = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checkCode = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		city = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		country = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		countryCode = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currencyCode = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateOfBirth = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		destinationAccountCode = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		document = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentExpirationDate = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerCountry = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentIssuerState = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentName = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentNumber = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documentType = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		doingBusinessAs = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicence = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicenceBack = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		drivingLicense = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		email = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		firstName = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fullPhoneNumber = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gender = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		houseNumberOrName = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iban = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCard = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardBack = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idCardFront = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		idNumber = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		identityDocument = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		individualDetails = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lastName = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalBusinessName = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntity = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		legalEntityType = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantCategoryCode = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantCode = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		merchantReference = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microDeposit = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nationality = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCity = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerCountryCode = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerHouseNumberOrName = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerName = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerPostalCode = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerState = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ownerStreet = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passport = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passportNumber = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		personalData = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneCountryCode = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneNumber = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		postalCode = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		primaryCurrency = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reason = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		registrationNumber = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		schedule = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholder = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shareholderCode = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		socialSecurityNumber = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceAccountCode = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stateOrProvince = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		status = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storeCode = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storeDetail = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storeReference = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		street = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taxId = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tierNumber = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transferCode = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		value = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtualAccount = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		visaNumber = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		webAddress = 95,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndividualDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPersonalData PersonalData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCBankAccountCheckResult
	{
		
		/// <summary>
		/// The unique ID of the bank account to which the check applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BankAccountUUID { get; set; }
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckResult
	{
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckStatusData
	{
		
		/// <summary>
		/// A list of the fields required for execution of the check.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RequiredFields { get; set; }
		
		/// <summary>
		/// The status of the check.
		///>Permitted Values: `UNCHECKED`, `DATA_PROVIDED`, `PASSED`, `PENDING`, `AWAITING_DATA`, `RETRY_LIMIT_REACHED`, `INVALID_DATA`, `FAILED`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusDataStatus Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckSummary Summary { get; set; }
		
		/// <summary>
		/// The type of check.
		///>Permitted Values: `COMPANY_VERIFICATION`, `IDENTITY_VERIFICATION`, `PASSPORT_VERIFICATION`, `BANK_ACCOUNT_VERIFICATION`, `NONPROFIT_VERIFICATION`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusDataType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KYCCheckStatusDataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_PROVIDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_REVIEW = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETRY_LIMIT_REACHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCHECKED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KYCCheckStatusDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ACCOUNT_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_VERIFICATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDENTITY_VERIFICATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONPROFIT_VERIFICATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT_VERIFICATION = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCCheckSummary
	{
		
		/// <summary>
		/// The code of the check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KycCheckCode { get; set; }
		
		/// <summary>
		/// A description of the check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KycCheckDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCShareholderCheckResult
	{
		
		/// <summary>
		/// A list of the checks and their statuses.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckStatusData[] Checks { get; set; }
		
		/// <summary>
		/// The code of the shareholder to which the check applies.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KYCVerificationResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCCheckResult AccountHolder { get; set; }
		
		/// <summary>
		/// The result(s) of the checks on the bank account(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCBankAccountCheckResult[] BankAccounts { get; set; }
		
		/// <summary>
		/// The result(s) of the checks on the shareholder(s).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCShareholderCheckResult[] Shareholders { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Message
	{
		
		/// <summary>
		/// The message code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The message text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationErrorContainer
	{
		
		/// <summary>
		/// The Adyen code that is mapped to the error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// A short explanation of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationResponse
	{
		
		/// <summary>
		/// Set this property to **[accepted]** to acknowledge that you received a notification from Adyen.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NotificationResponse1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OperationStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Message Message { get; set; }
		
		/// <summary>
		/// The status code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentFailureNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PaymentFailureNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PaymentFailureNotificationContent
	{
		
		/// <summary>
		/// Missing or invalid fields that caused the payment error.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] ErrorFields { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Message ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutMethod
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MerchantAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PayoutMethodCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PayoutMethodPayoutMethodType PayoutMethodType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecurringDetailReference { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShopperReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PayoutMethodPayoutMethodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CardToken = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PayoutScheduleResponse
	{
		
		/// <summary>
		/// The date of the next scheduled payout.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NextScheduledPayout { get; set; }
		
		/// <summary>
		/// The payout schedule of the account.
		///>Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponseSchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PayoutScheduleResponseSchedule
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIWEEKLY_ON_1ST_AND_15TH_AT_NOON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY_6PM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_6_HOURS_FROM_MIDNIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY_ON_TUE_FRI_MIDNIGHT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalDocumentData
	{
		
		/// <summary>
		/// The expiration date of the document.
		///The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// The two-character country code of the issuer.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string IssuerCountry { get; set; }
		
		/// <summary>
		/// The state issued the document (if applicable)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IssuerState { get; set; }
		
		/// <summary>
		/// The number of the document. Delete the given type if the value empty.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Number { get; set; }
		
		/// <summary>
		/// The type of the document. More then one item pert type does not allowed.
		///Valid values: ID, PASSPORT, VISA, DRIVINGLICENSE
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalDocumentDataType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PersonalDocumentDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVINGLICENSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOCIALSECURITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISA = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RefundResult
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Transaction OriginalTransaction { get; set; }
		
		/// <summary>
		/// The reference of the refund.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The response indicating if the refund has been received for processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Response { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportAvailableNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportAvailableNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportAvailableNotificationContent
	{
		
		/// <summary>
		/// The code of the Account to which the report applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The type of Account to which the report applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountType { get; set; }
		
		/// <summary>
		/// The date of the event to which the report applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EventDate { get; set; }
		
		/// <summary>
		/// The URL at which the report can be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RemoteAccessUrl { get; set; }
		
		/// <summary>
		/// Indicates whether the event resulted in a success.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledRefundsNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledRefundsNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledRefundsNotificationContent
	{
		
		/// <summary>
		/// The code of the account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The code of the Account Holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		/// <summary>
		/// Invalid fields list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Transaction LastPayout { get; set; }
		
		/// <summary>
		/// A list of the refunds that have been scheduled and their results.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RefundResult[] RefundResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ShareholderContact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ViasAddress Address { get; set; }
		
		/// <summary>
		/// The e-mail address of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The phone number of the contact provided as a single string.  It will be handled as a landline phone.
		///**Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FullPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPersonalData PersonalData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ViasPhoneNumber PhoneNumber { get; set; }
		
		/// <summary>
		/// The unique identifier (UUID) of the Shareholder.
		///>**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Shareholder will be created with a procedurally-generated UUID.**
		///
		///>**If, during an Account Holder create request, a UUID is provided, the creation of the Shareholder will fail while the creation of the Account Holder will continue.**
		///
		///>**If, during an Account Holder update request, a UUID that is not correlated with an existing Shareholder is provided, the update of the Shareholder will fail.**
		///
		///>**If, during an Account Holder update request, a UUID that is correlated with an existing Shareholder is provided, the existing Bank Account will be updated.**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareholderReference { get; set; }
		
		/// <summary>
		/// The URL of the website of the contact.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WebAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Transaction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BankAccountDetail BankAccountDetail { get; set; }
		
		/// <summary>
		/// The merchant reference of a related capture.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CaptureMerchantReference { get; set; }
		
		/// <summary>
		/// The psp reference of a related capture.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CapturePspReference { get; set; }
		
		/// <summary>
		/// The date on which the transaction was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// A description of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The code of the account to which funds were credited during an outgoing fund transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// The psp reference of the related dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisputePspReference { get; set; }
		
		/// <summary>
		/// The reason code of a dispute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DisputeReasonCode { get; set; }
		
		/// <summary>
		/// The merchant reference of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The psp reference of the related authorisation or transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PaymentPspReference { get; set; }
		
		/// <summary>
		/// The psp reference of the related payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayoutPspReference { get; set; }
		
		/// <summary>
		/// The psp reference of a transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The code of the account from which funds were debited during an incoming fund transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
		
		/// <summary>
		/// The status of the transaction.
		///>Permitted values: `PendingCredit`, `CreditFailed`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransactionTransactionStatus TransactionStatus { get; set; }
		
		/// <summary>
		/// The transfer code of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransactionTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chargeback = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReceived = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReversed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChargebackReversedReceived = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Converted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreditFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credited = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitFailed = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitReversedReceived = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debited = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DebitedReversed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FundTransfer = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ManualCorrected = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payout = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PayoutReversed = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingCredit = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingDebit = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingFundTransfer = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondChargeback = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecondChargebackReceived = 19,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferFundsNotification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransferFundsNotificationContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationErrorContainer Error { get; set; }
		
		/// <summary>
		/// The date and time when an event has been completed.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventDate { get; set; }
		
		/// <summary>
		/// The event type of the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		/// <summary>
		/// The user or process that has triggered the notification.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecutingUserKey { get; set; }
		
		/// <summary>
		/// Indicates whether the notification originated from the live environment or the test environment. If true, the notification originated from the live environment. If false, the notification originated from the test environment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Live { get; set; }
		
		/// <summary>
		/// The PSP reference of the request from which the notification originates.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransferFundsNotificationContent
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Amount Amount { get; set; }
		
		/// <summary>
		/// The code of the Account to which funds were credited.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationAccountCode { get; set; }
		
		/// <summary>
		/// Invalid fields list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The reference provided by the merchant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MerchantReference { get; set; }
		
		/// <summary>
		/// The code of the Account from which funds were debited.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccountCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus Status { get; set; }
		
		/// <summary>
		/// The transfer code.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountHolderResponse
	{
		
		/// <summary>
		/// The code of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountHolderCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderDetails AccountHolderDetails { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccountHolderStatus AccountHolderStatus { get; set; }
		
		/// <summary>
		/// The description of the account holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// in case the account holder has not been updated, contains account holder fields, that did not pass the validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		/// <summary>
		/// The legal entity of the account holder.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateAccountHolderResponseLegalEntity LegalEntity { get; set; }
		
		/// <summary>
		/// The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryCurrency { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KYCVerificationResult Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateAccountHolderResponseLegalEntity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonProfit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PublicCompany = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAccountResponse
	{
		
		/// <summary>
		/// The code of the account.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountCode { get; set; }
		
		/// <summary>
		/// The description of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of fields that caused the `/updateAccount` request to fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorFieldType[] InvalidFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Metadata { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PayoutScheduleResponse PayoutSchedule { get; set; }
		
		/// <summary>
		/// The reference of a request.  Can be used to uniquely identify the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PspReference { get; set; }
		
		/// <summary>
		/// The result code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResultCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasAddress
	{
		
		/// <summary>
		/// The name of the city.
		///>Required if either `houseNumberOrName`, `street`, `postalCode`, or `stateOrProvince` are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// The two-character country code of the address. The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		///> If you don't know the country or are not collecting the country from the shopper, provide `countryCode` as `ZZ`.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The number or name of the house.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HouseNumberOrName { get; set; }
		
		/// <summary>
		/// The postal code.
		///>A maximum of five (5) digits for an address in the USA, or a maximum of ten (10) characters for an address in all other countries.
		///>Required if either `houseNumberOrName`, `street`, `city`, or `stateOrProvince` are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The abbreviation of the state or province.
		///>Two (2) characters for an address in the USA or Canada, or a maximum of three (3) characters for an address in all other countries.
		///>Required for an address in the USA or Canada if either `houseNumberOrName`, `street`, `city`, or `postalCode` are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// The name of the street.
		///>The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
		///>Required if either `houseNumberOrName`, `city`, `postalCode`, or `stateOrProvince` are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Street { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasName
	{
		
		/// <summary>
		/// The first name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The gender.
		///>The following values are permitted: `MALE`, `FEMALE`, `UNKNOWN`.
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ViasNameGender Gender { get; set; }
		
		/// <summary>
		/// The name's infix, if applicable.
		///>A maximum length of twenty (20) characters is imposed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Infix { get; set; }
		
		/// <summary>
		/// The last name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViasNameGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasPersonalData
	{
		
		/// <summary>
		/// The date of birth of the person.
		///The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Key value pairs of document type and identify numbers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PersonalDocumentData[] DocumentData { get; set; }
		
		/// <summary>
		/// The nationality of the person represented by a two-character country code.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength=2)]
		public string Nationality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ViasPhoneNumber
	{
		
		/// <summary>
		/// The two-character country code of the phone number.
		///>The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneCountryCode { get; set; }
		
		/// <summary>
		/// The phone number.
		///>The inclusion of the phone number country code is not necessary.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		/// <summary>
		/// The type of the phone number.
		///>The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ViasPhoneNumberPhoneType PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ViasPhoneNumberPhoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fax = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Landline = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mobile = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIP = 3,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Triggered upon the closure of an account.
		/// This notification is sent when an account has been closed.
		/// ACCOUNT_CLOSEDPost ACCOUNT_CLOSED
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_CLOSEDPostAsync(AccountCloseNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_CLOSED";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the creation of an account.
		/// This notification is sent when an account has been created.
		/// ACCOUNT_CREATEDPost ACCOUNT_CREATED
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_CREATEDPostAsync(AccountCreateNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_CREATED";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the creation of an account holder.
		/// This notification is sent when an account holder has been created.
		/// ACCOUNT_HOLDER_CREATEDPost ACCOUNT_HOLDER_CREATED
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_HOLDER_CREATEDPostAsync(AccountHolderCreateNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_HOLDER_CREATED";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon a payout to an account holder.
		/// This notification is sent when a payout request to an account holder has been processed and the payout has been scheduled.
		/// ACCOUNT_HOLDER_PAYOUTPost ACCOUNT_HOLDER_PAYOUT
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_HOLDER_PAYOUTPostAsync(AccountHolderPayoutNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_HOLDER_PAYOUT";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the status change of an account holder.
		/// This notification is sent when the status of an account holder has been changed.
		/// ACCOUNT_HOLDER_STATUS_CHANGEPost ACCOUNT_HOLDER_STATUS_CHANGE
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_HOLDER_STATUS_CHANGEPostAsync(AccountHolderStatusChangeNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_HOLDER_STATUS_CHANGE";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the update of an account holder.
		/// This notification is sent when an account holder has been updated.
		/// ACCOUNT_HOLDER_UPDATEDPost ACCOUNT_HOLDER_UPDATED
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_HOLDER_UPDATEDPostAsync(AccountHolderUpdateNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_HOLDER_UPDATED";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the receipt of KYC Verification results.
		/// This notification is sent when KYC Verification results are made available.
		/// ACCOUNT_HOLDER_VERIFICATIONPost ACCOUNT_HOLDER_VERIFICATION
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_HOLDER_VERIFICATIONPostAsync(AccountHolderVerificationNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_HOLDER_VERIFICATION";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the update of an account.
		/// This notification is sent when an account has been updated.
		/// ACCOUNT_UPDATEDPost ACCOUNT_UPDATED
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> ACCOUNT_UPDATEDPostAsync(AccountUpdateNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ACCOUNT_UPDATED";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the setup of a beneficiary.
		/// This notification is sent when a benefactor/beneficiary relationship between accounts has been set up.
		/// BENEFICIARY_SETUPPost BENEFICIARY_SETUP
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> BENEFICIARY_SETUPPostAsync(BeneficiarySetupNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BENEFICIARY_SETUP";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the compensation of negative account balances.
		/// This notification is sent when funds have been transferred from the Marketplace's liable account to an overdrawn account in order to compensate for the overdraft.
		/// COMPENSATE_NEGATIVE_BALANCEPost COMPENSATE_NEGATIVE_BALANCE
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> COMPENSATE_NEGATIVE_BALANCEPostAsync(CompensateNegativeBalanceNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "COMPENSATE_NEGATIVE_BALANCE";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon an account payment failure.
		/// This notification is sent when a payment to an account has failed. In these cases, the funds which were meant for the account are redirected to the Marketplace's liable account.
		/// PAYMENT_FAILUREPost PAYMENT_FAILURE
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> PAYMENT_FAILUREPostAsync(PaymentFailureNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "PAYMENT_FAILURE";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered when a report is made available.
		/// This notification is sent when a report has been made available.
		/// REPORT_AVAILABLEPost REPORT_AVAILABLE
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> REPORT_AVAILABLEPostAsync(ReportAvailableNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "REPORT_AVAILABLE";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the scheduling of refunds requested by a 'Refund Transfers Not Paid Out' call.
		/// This notification is sent when a 'Refund Transfers Not Paid Out' call has been processed and the associated refunds have been scheduled.
		/// SCHEDULED_REFUNDSPost SCHEDULED_REFUNDS
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> SCHEDULED_REFUNDSPostAsync(ScheduledRefundsNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SCHEDULED_REFUNDS";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Triggered upon the transfer of funds between accounts.
		/// This notification is sent when the funds from an account have been transferred to another account.
		/// TRANSFER_FUNDSPost TRANSFER_FUNDS
		/// </summary>
		/// <returns>OK - the request has succeeded.</returns>
		public async Task<NotificationResponse> TRANSFER_FUNDSPostAsync(TransferFundsNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "TRANSFER_FUNDS";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NotificationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
