//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AncestorSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ancestor_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AncestorTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Image
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Image_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Template_url { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AncestorTitles
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailableVersions
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Available_from_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Available_to_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Has_guidance { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Media_set { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public BodyPlatform Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BodyPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsiveweb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body_1
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public Body_1Platform Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Body_1Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsiveweb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body_2
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public Body_2Platform Platform { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Service_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Body_2Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsiveweb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body_3
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public Body_3Platform Platform { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Service_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Body_3Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		responsiveweb = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Body_4
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public Body_4Action Action { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Elapsed_time { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public Body_4Resource_type Resource_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_pid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Body_4Action
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ended = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heartbeat = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Body_4Resource_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clip = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrandSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailableVersions[] Available_versions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EpisodeSummary[] Latest_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public BrandSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EpisodeSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AncestorSummary[] Ancestors { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AvailableVersions[] Available_versions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Media_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Release_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public EpisodeSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Active { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkTitles
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Long_title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProgrammeTitles
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Display_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Entity_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Primary_title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Secondary_title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EpisodeSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode_summary = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrandSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand_summary = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Broadcast
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Duration { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_audio_described { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_blanked { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_critical { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_live { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_repeat { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Is_webcast { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeSummary Programme { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Service_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Version_pid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProgrammeSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ProgrammeSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProgrammeSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand_summary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series_summary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode_summary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clip_summary = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BroadcastsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Broadcast[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategoriesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Category[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Category
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChildCategory[] Child_categories { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Depth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pip_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChildCategory
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChildCategory[] Child_categories { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Depth { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pip_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url_key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategoryError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategoryErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CategoryError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategorySummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClipSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AncestorSummary[] Ancestors { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AvailableVersions[] Available_versions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Media_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Release_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ClipSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClipSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clip_summary = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Contact
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Handle { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateRange
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisplayModule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExperienceResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DisplayModule[] Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExternalPartner
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetaData
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Miscellaneous Miscellaneous { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Origin Origin { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Programme_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Miscellaneous
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Origin
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MusicExportError[] Errors { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportJob
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Job_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportPreferences
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Access_expires_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Access_token { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Add_plus_export { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Authorization_code { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Last_export { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Legacy_state { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Partner_id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Refresh_token { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Terms { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportPreferencesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MusicExportPreferences[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicExportSuccess
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityArtist
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Gid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImagePid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Score { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SortName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityArtists
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepliedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MusicPopularityArtist[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityPlaylist
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Categories { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool CommentsEnabled { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExternalPartner[] ExternalPartners { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Genre { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImagePid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageUrl { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Kind { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Mood { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool OneOff { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlaylistPlaybackType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Score { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Visibility { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WideImagePid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WideImageUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityPlaylists
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepliedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MusicPopularityPlaylist[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityTrack
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Album { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtistGid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtistName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MusicTrackArtist[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Classical { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MergedIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MusicRecordAudio PreferredMultiplayRecordAudio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MusicRecordAudio PreferredRecordAudio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RadioEdit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MusicRecordAudio[] RecordAudio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordImageHref { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordImagePid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicTrackArtist
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Gid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImagePid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SortName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicRecordAudio
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AudioType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Duration { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MusicPopularityTracks
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RepliedAt { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MusicPopularityTrack[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Network
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Active { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Contact[] Contacts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateRange[] Date_ranges { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool International { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Preset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CategorySummary[] Promoted_category_summaries { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Service[] Services { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Sort { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Service
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Active { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Coverage { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateRange[] Date_ranges { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Default { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Default_language { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworksResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Network[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedCategories
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedCategoriesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicActivity
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Activity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicData[] Data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicMetaData Meta_data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Urn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicArtist Artist { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicClip Clip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicGenre Genre { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicPlaylist Playlist { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicService Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrack Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicArtist
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicImage[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicClip
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Contributors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterbrandMid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicClipParentProgramme ParentProgramme { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Synopsis { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicVersion Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicClipParentProgramme
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Classical { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Radio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vpid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicGenre
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicPlaylist
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicImage[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Playback_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Service_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrack Tracks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicPlaylistVersion Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicTrack
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrackContribution[] Contributions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrackImage[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrackMedia[] Media { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicVersion Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicTrackContribution
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicTrackImage[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicTrackImage
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicTrackMedia
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Duration { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Scope { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicPlaylistVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expires_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Starts_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Warnings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicService
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicMetaData
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicBatchRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicMetaData Meta_data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicError[] Errors { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicMetaData Meta_data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedMusicActivity[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedMusicSuccess
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedNetworks
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Created { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedNetworksResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedNetworks[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioActivity
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Activity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeSummary Data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Domain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetaData Metadata { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uas_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Urn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioBatchRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedRadioMetaData Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioMetaData
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedRadioErrorResponse_errors[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioErrorResponse_errors
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Detail { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Timestamp { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Added_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedRadioMetaData Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PersonalisedRadioActivity[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PersonalisedRadioSuccessResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Method { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlayableItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version_pid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlayspaceContainer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PlayableItem[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Podcast
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CategorySummary[] Category_summaries { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Days_available { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Entity_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string First_published_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PodcastEpisodeSummary[] Latest_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Rss_url { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PodcastSynopses Synopses { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Territory { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastEpisodeSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Asset_url { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AvailableVersions[] Available_versions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Media_type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Release_date { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastSynopses
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Long { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Medium { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastEpisodesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PodcastEpisodeSummary[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PodcastError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastsFeatured
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Podcast[] Featured_podcasts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastsFeaturedResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PodcastsFeatured[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public float Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PodcastsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Podcast[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PopularError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Replied_at { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PopularErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PopularError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PopularItemSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeSummary Data { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Score { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PopularResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PopularItemSummary[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Programme
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EpisodeSummary[] Latest_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Total_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ProgrammeType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProgrammeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		brand_summary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series_summary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode_summary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		clip_summary = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProgrammesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeSummary[] Results { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RadioError
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Detail { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Href { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Status { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Timestamp { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RadioErrorResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Schema { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RadioError[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SeriesSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AncestorSummary[] Ancestors { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EpisodeSummary[] Latest_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkSummary Network_summary { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pid { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Short_synopsis { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProgrammeTitles Titles { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total_available_episodes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public SeriesSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SeriesSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		series_summary = 0,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Broadcasts
		/// All broadcasts
		/// 
		/// BroadcastsGetByOffsetAndLimitAndService_idAndDateAndSort broadcasts
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="service_id">Filter by Service ID. E.g. bbc_radio_fourfm</param>
		/// <param name="date">Filter by date. E.g. 2016-06-17</param>
		/// <param name="sort">Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order</param>
		/// <returns>OK</returns>
		public async Task<BroadcastsResponse> BroadcastsGetByOffsetAndLimitAndService_idAndDateAndSortAsync(int offset, int limit, string service_id, string date, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "broadcasts?offset="+offset+"&limit="+limit+"&service_id=" + (service_id==null? "" : Uri.EscapeDataString(service_id))+"&date=" + (date==null? "" : Uri.EscapeDataString(date))+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BroadcastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Latest Broadcasts
		/// Broadcasts for the current day
		/// 
		/// BroadcastsGetByOffsetAndLimitAndService_idAndOn_airAndNextAndPreviousAndSort broadcasts/latest
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="service_id">Filter by Service ID. E.g. bbc_radio_fourfm</param>
		/// <param name="on_air">Filter what is on air. E.g. 'now' returns current programme being broadcasted.</param>
		/// <param name="next">Filter what will be on air next in minutes. E.g. '240' returns programmes broadcasted in the next four hurs</param>
		/// <param name="previous">Filter what was on air previously in minutes. E.g. '240' returns programmes broadcasted in the previous four hurs</param>
		/// <param name="sort">Sort by provided query. E.g. 'start_at' sorts in ascending order, and '-start_at' sorts in descending order</param>
		/// <returns>OK</returns>
		public async Task<BroadcastsResponse> BroadcastsGetByOffsetAndLimitAndService_idAndOn_airAndNextAndPreviousAndSortAsync(int offset, int limit, string service_id, string on_air, string next, string previous, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "broadcasts/latest?offset="+offset+"&limit="+limit+"&service_id=" + (service_id==null? "" : Uri.EscapeDataString(service_id))+"&on_air=" + (on_air==null? "" : Uri.EscapeDataString(on_air))+"&next=" + (next==null? "" : Uri.EscapeDataString(next))+"&previous=" + (previous==null? "" : Uri.EscapeDataString(previous))+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BroadcastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Broadcasts by PID
		/// Find broadcast by PID
		/// 
		/// GetBroadcastByPid broadcasts/{pid}
		/// </summary>
		/// <param name="pid">pid</param>
		/// <returns>OK</returns>
		public async Task<BroadcastsResponse> GetBroadcastByPidAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "broadcasts/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BroadcastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of categories
		/// Retrieve Categories
		/// 
		/// CategoriesGetByKind categories
		/// </summary>
		/// <param name="kind">Filter by provided query. E.g. 'promoted' returns promoted categories</param>
		/// <returns>OK</returns>
		public async Task<CategoriesResponse> CategoriesGetByKindAsync(string kind, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories?kind=" + (kind==null? "" : Uri.EscapeDataString(kind));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Category by ID
		/// Retrieve Categories by ID
		/// 
		/// CategoriesGetById categories/{id}
		/// </summary>
		/// <param name="id">Retrieve information about the category. E.g. 'sport-football-europeanchampionship'</param>
		/// <returns>OK</returns>
		public async Task<CategoriesResponse> CategoriesGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Collection Members
		/// Episodes and Clips from Collection
		/// 
		/// GetCollectionMembers collections/{pid}/members
		/// </summary>
		/// <param name="pid">pid</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<ProgrammesResponse> GetCollectionMembersAsync(string pid, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/members&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProgrammesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Homepage Experience
		/// Homepage Experience
		/// 
		/// GetExperienceHomepage experience/homepage
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ExperienceResponse> GetExperienceHomepageAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experience/homepage";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExperienceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Popular Artists
		/// List of Most Popular artists from BBC Music.
		/// 
		/// GetMusicPopularArtists music/popular/artists
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityArtists> GetMusicPopularArtistsAsync(string since, string until, bool decomposed, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/artists?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&decomposed="+decomposed+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityArtists>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single Artist Popularity
		/// Popularity Artist By Id
		/// 
		/// GetMusicPopularArtistById music/popular/artists/{id}
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="id">MusicBrainz Id - Used to get single resource score</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityArtists> GetMusicPopularArtistByIdAsync(string since, string until, bool decomposed, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/artists/"+ (id==null? "" : Uri.EscapeDataString(id))+"?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&decomposed="+decomposed;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityArtists>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Popular Playlists
		/// List of Most Popular playlists from BBC Music.
		/// 
		/// GetMusicPopularPlaylists music/popular/playlists
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityPlaylists> GetMusicPopularPlaylistsAsync(string since, string until, bool decomposed, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/playlists?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&decomposed="+decomposed+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityPlaylists>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single Playlist Popularity
		/// Popular playlist by Id
		/// 
		/// GetMusicPopularPlaylistById music/popular/playlists/{id}
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="id">BBC Music Playlist Id - Used to get single resource score</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityPlaylists> GetMusicPopularPlaylistByIdAsync(string since, string until, bool decomposed, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/playlists/"+ (id==null? "" : Uri.EscapeDataString(id))+"?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&decomposed="+decomposed;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityPlaylists>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Popular Tracks
		/// List of popular tracks for BBC Music. Filter by time, network, artist, playlist or programme.
		/// 
		/// GetMusicPopularTracks music/popular/tracks
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="network">Return items with given Network ID</param>
		/// <param name="programme">Items with given Programme Pid</param>
		/// <param name="artist">MusicBrainz artist ID</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityTracks> GetMusicPopularTracksAsync(string since, string until, string network, string programme, string artist, bool decomposed, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/tracks?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&network=" + (network==null? "" : Uri.EscapeDataString(network))+"&programme=" + (programme==null? "" : Uri.EscapeDataString(programme))+"&artist=" + (artist==null? "" : Uri.EscapeDataString(artist))+"&decomposed="+decomposed+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityTracks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single Track Popularity
		/// Popular Track for BBC Music
		/// 
		/// GetMusicPopularTrackById music/popular/tracks/{id}
		/// </summary>
		/// <param name="since">ISO 8601 Date yyyy-mm-dd.  Returns items between given time period and now</param>
		/// <param name="until">ISO 8601 Date yyyy-mm-dd.  Returns items between given 'since' and 'until' date params</param>
		/// <param name="network">Return items with given Network ID</param>
		/// <param name="programme">Items with given Programme Pid</param>
		/// <param name="artist">MusicBrainz artist ID</param>
		/// <param name="decomposed">In addition to the overall score, return a list of scores broken down by day N.B Must be used in conjunction with since and/or until and since is >= 31 days</param>
		/// <param name="id">BBC Music Track Id - Used to get single resource score</param>
		/// <returns>OK</returns>
		public async Task<MusicPopularityTracks> GetMusicPopularTrackByIdAsync(string since, string until, string network, string programme, string artist, bool decomposed, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "music/popular/tracks/"+ (id==null? "" : Uri.EscapeDataString(id))+"?since=" + (since==null? "" : Uri.EscapeDataString(since))+"&until=" + (until==null? "" : Uri.EscapeDataString(until))+"&network=" + (network==null? "" : Uri.EscapeDataString(network))+"&programme=" + (programme==null? "" : Uri.EscapeDataString(programme))+"&artist=" + (artist==null? "" : Uri.EscapeDataString(artist))+"&decomposed="+decomposed;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicPopularityTracks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow category
		/// Personalised_CategoriesDelete my/categories/follows
		/// </summary>
		public async Task Personalised_CategoriesDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/categories/follows";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of followed categories
		/// List of followed categories for a given user.
		/// 
		/// Personalised_CategoriesGetByOffsetAndLimit my/categories/follows
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedCategoriesResponse> Personalised_CategoriesGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/categories/follows?offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedCategoriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow category
		/// Personalised_CategoriesPost my/categories/follows
		/// </summary>
		public async Task Personalised_CategoriesPostAsync(Body requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/categories/follows";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Music Exports
		/// Returns status of all previous third party export actions for a given BBC Music user.
		/// 
		/// GetMusicExport my/music/export
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<MusicExportJob> GetMusicExportAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/export?offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Jobs
		/// All items associated to a users export request
		/// 
		/// GetMusicExportJobs my/music/exports/jobs
		/// </summary>
		/// <param name="over16">Boolean age check</param>
		/// <param name="vendor">Specify Vendor Jobs</param>
		/// <returns>OK</returns>
		public async Task<MusicExportJob> GetMusicExportJobsAsync(bool over16, string vendor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/exports/jobs?over16="+over16+"&vendor=" + (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Jobs
		/// Create Export Job for a user
		/// 
		/// PostMusicExportJob my/music/exports/jobs
		/// </summary>
		/// <param name="over16">Boolean age check</param>
		/// <param name="vendor">Specify Vendor Jobs</param>
		/// <returns>OK</returns>
		public async Task<MusicExportSuccess> PostMusicExportJobAsync(bool over16, string vendor, MusicExportJob[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/exports/jobs?over16="+over16+"&vendor=" + (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Music Export Tracks
		/// Retrieves vendor and status specific tracks
		/// 
		/// GetMusicExportTracks my/music/exports/tracks
		/// </summary>
		/// <param name="over16">Boolean age check</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="vendor">Specify Vendor Tracks</param>
		/// <param name="status">Specify Track status</param>
		/// <returns>OK</returns>
		public async Task<MusicExportJob> GetMusicExportTracksAsync(bool over16, int offset, int limit, string vendor, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/exports/tracks?over16="+over16+"&offset="+offset+"&limit="+limit+"&vendor=" + (vendor==null? "" : Uri.EscapeDataString(vendor))+"&status=" + (status==null? "" : Uri.EscapeDataString(status));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportJob>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Tracks or Clips
		/// List of favourited tracks and clips for a given user for BBC Music.
		/// 
		/// GetPersonalisedMusicFavourites my/music/favourites
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFavouritesAsync(int offset, int limit, string action, bool music_data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites?offset="+offset+"&limit="+limit+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&music-data="+music_data;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Tracks or Clips
		/// Add multiple tracks and/or clips to a BBC Music user's favourites.
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedMusicFavouritesBatch my/music/favourites
		/// </summary>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> PostPersonalisedMusicFavouritesBatchAsync(PersonalisedMusicBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Tracks or Clips
		/// Update tracks or clips from a BBC Music user favourites.
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedMusicFavouritesBatch my/music/favourites
		/// </summary>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PutPersonalisedMusicFavouritesBatchAsync(PersonalisedMusicBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Tracks or Clips by Type
		/// List of favourited tracks or clips for a given user for BBC Music.
		/// 
		/// GetPersonalisedMusicFavouritesByType my/music/favourites/{type}
		/// </summary>
		/// <param name="type">Supported Music favourite types: Clips or Tracks</param>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFavouritesByTypeAsync(string type, string action, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Track or Clip
		/// Delete track or clip from a BBC Music user favourites.
		/// 
		/// DeletePersonalisedMusicFavouritesByTypeById my/music/favourites/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music favourite types: Clips or Tracks</param>
		/// <param name="id">Clip PID or Track ID</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> DeletePersonalisedMusicFavouritesByTypeByIdAsync(string type, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Track or Clip
		/// Check to see if a single track or clip entity is in a users favourites - determines UX of add button.
		/// 
		/// GetPersonalisedMusicFavouritesByTypeById my/music/favourites/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music favourite types: Clips or Tracks</param>
		/// <param name="id">Clip PID or Track ID</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFavouritesByTypeByIdAsync(string type, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Track or Clip
		/// Add track or clip to a BBC Music user favourites.
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedMusicFavouritesByTypeById my/music/favourites/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music favourite types: Clips or Tracks</param>
		/// <param name="id">Clip PID or Track ID</param>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> PostPersonalisedMusicFavouritesByTypeByIdAsync(string type, string id, PersonalisedMusicRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Track or Clip
		/// Update tracks or clips from a BBC Music user favourites.
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedMusicFavouritesByTypeById my/music/favourites/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music favourite types: Clips or Tracks</param>
		/// <param name="id">Clip PID or Track ID</param>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PutPersonalisedMusicFavouritesByTypeByIdAsync(string type, string id, PersonalisedMusicRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Networks, Categories, Artists, Playlists and Genres
		/// List of followed networks, categories, artists, playlists and genres for a given user for BBC Music.
		/// 
		/// GetPersonalisedMusicFollows my/music/follows
		/// </summary>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFollowsAsync(string action, bool music_data, string music_context, bool music_within_uk, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows?action=" + (action==null? "" : Uri.EscapeDataString(action))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Networks, Categories, Artists, Playlists and Genres
		/// Add networks, categories, artists, playlists, networks, genres or services in a users follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedMusicFollowsBatch my/music/follows
		/// </summary>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PostPersonalisedMusicFollowsBatchAsync(string action, bool music_data, string music_context, bool music_within_uk, PersonalisedMusicBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows?action=" + (action==null? "" : Uri.EscapeDataString(action))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Networks, Categories, Artists, Playlists and Genres
		/// Update networks, categories, artists, playlists, networks, genres or services in a users follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedMusicFollowsBatch my/music/follows
		/// </summary>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PutPersonalisedMusicFollowsBatchAsync(string action, bool music_data, string music_context, bool music_within_uk, PersonalisedMusicBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows?action=" + (action==null? "" : Uri.EscapeDataString(action))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Networks, Categories, Artists, Playlists and Genres by Type
		/// List of followed networks, categories, artists, playlists, networks, genres, categories or services for a given BBC Music user.
		/// 
		/// GetPersonalisedMusicFollowsByType my/music/follows/{type}
		/// </summary>
		/// <param name="type">Supported Music follows types: Playlists, Services, Genres & Artists</param>
		/// <param name="action">Filters activities based on the type of action</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFollowsByTypeAsync(string type, string action, bool music_data, string music_context, bool music_within_uk, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"&action=" + (action==null? "" : Uri.EscapeDataString(action))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Network, Category, Artist, Playlist and Genre
		/// Remove a single network, category, artist, playlist, network, genre or service entity is in a users follows
		/// 
		/// DeletePersonalisedMusicFollowsByTypeById my/music/follows/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music follows types: Playlists, Services, Genres & Artists</param>
		/// <param name="id">Playlists, Services, Networks, Genres, Categories or Artists ID</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> DeletePersonalisedMusicFollowsByTypeByIdAsync(string type, string id, bool music_data, string music_context, bool music_within_uk, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Network, Category, Artist, Playlist and Genre
		/// Check to see if a single network, category, artist, playlist, network, genre or service entity is in a users follows - determines UX of add button.
		/// 
		/// GetPersonalisedMusicFollowsByTypeById my/music/follows/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music follows types: Playlists, Services, Genres & Artists</param>
		/// <param name="id">Playlists, Services, Networks, Genres, Categories or Artists ID</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicResponse> GetPersonalisedMusicFollowsByTypeByIdAsync(string type, string id, bool music_data, string music_context, bool music_within_uk, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Network, Category, Artist, Playlist and Genre
		/// Add a single network, category, artist, playlist, network, genre or service entity is in a users follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedMusicFollowsByTypeById my/music/follows/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music follows types: Playlists, Services, Genres & Artists</param>
		/// <param name="id">Playlists, Services, Networks, Genres, Categories or Artists ID</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PostPersonalisedMusicFollowsByTypeByIdAsync(string type, string id, bool music_data, string music_context, bool music_within_uk, PersonalisedMusicRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Network, Category, Artist, Playlist and Genre
		/// Update a single network, category, artist, playlist, network, genre or service entity is in a users follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedMusicFollowsByTypeById my/music/follows/{type}/{id}
		/// </summary>
		/// <param name="type">Supported Music follows types: Playlists, Services, Genres & Artists</param>
		/// <param name="id">Playlists, Services, Networks, Genres, Categories or Artists ID</param>
		/// <param name="music_data">Omits music data from the response, defaults to true</param>
		/// <param name="music_context">Specify context to be passed to Music API</param>
		/// <param name="music_within_uk">Specify location to be passed to Music API</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedMusicSuccess> PutPersonalisedMusicFollowsByTypeByIdAsync(string type, string id, bool music_data, string music_context, bool music_within_uk, PersonalisedMusicRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (id==null? "" : Uri.EscapeDataString(id))+"&music-data="+music_data+"&music_context=" + (music_context==null? "" : Uri.EscapeDataString(music_context))+"&music_within_uk="+music_within_uk;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedMusicSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Music Export Preferences
		/// Remove export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.
		/// 
		/// DeleteMusicPreferencesExport my/music/preferences/export
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MusicExportSuccess> DeleteMusicPreferencesExportAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Preferences
		/// Returns export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.
		/// 
		/// GetMusicPreferencesExport my/music/preferences/export
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MusicExportPreferencesResponse> GetMusicPreferencesExportAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportPreferencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Preferences
		/// Create export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.
		/// 
		/// PostMusicPreferencesExport my/music/preferences/export
		/// </summary>
		/// <returns>OK</returns>
		public async Task<MusicExportSuccess> PostMusicPreferencesExportAsync(MusicExportPreferences requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportSuccess>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Music Export Vendor Preferences
		/// Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.
		/// 
		/// DeleteMusicPreferencesExportVendor my/music/preferences/export/{vendor}
		/// </summary>
		/// <param name="vendor">Supported 3rd Party Vendor</param>
		/// <returns>OK</returns>
		public async Task DeleteMusicPreferencesExportVendorAsync(string vendor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export/"+ (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Vendor Preferences
		/// Returns vendor specific export preferences for a given BBC Music user.
		/// 
		/// GetMusicPreferencesExportVendor my/music/preferences/export/{vendor}
		/// </summary>
		/// <param name="vendor">Supported 3rd Party Vendor</param>
		/// <returns>OK</returns>
		public async Task<MusicExportPreferencesResponse> GetMusicPreferencesExportVendorAsync(string vendor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export/"+ (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<MusicExportPreferencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Music Export Vendor Preferences
		/// Create Vendor specific export preferences (e.g. 3rd party vendors, partner id's) for a given BBC Music user.
		/// 
		/// PostMusicPreferencesExportVendor my/music/preferences/export/{vendor}
		/// </summary>
		/// <param name="vendor">Supported 3rd Party Vendor</param>
		/// <returns>OK</returns>
		public async Task PostMusicPreferencesExportVendorAsync(string vendor, MusicExportPreferences requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export/"+ (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Music Export Vendor Preferences
		/// Update vendor specific export preferences for a given BBC Music user.
		/// 
		/// PutMusicPreferencesExportVendor my/music/preferences/export/{vendor}
		/// </summary>
		/// <param name="vendor">Supported 3rd Party Vendor</param>
		/// <returns>OK</returns>
		public async Task PutMusicPreferencesExportVendorAsync(string vendor, MusicExportPreferences requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/music/preferences/export/"+ (vendor==null? "" : Uri.EscapeDataString(vendor));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unfollow network
		/// Personalised_NetworksDeleteByOffsetAndLimit my/networks/follows
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		public async Task Personalised_NetworksDeleteByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/networks/follows?offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of followed networks
		/// List of followed networks for a given user.
		/// 
		/// Personalised_NetworksGetByOffsetAndLimit my/networks/follows
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedNetworksResponse> Personalised_NetworksGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/networks/follows?offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow network
		/// Personalised_NetworksPostByOffsetAndLimit my/networks/follows
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		public async Task Personalised_NetworksPostByOffsetAndLimitAsync(int offset, int limit, Body_2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/networks/follows?offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Write Play Event
		/// Personalised_PlaysPost my/plays
		/// </summary>
		public async Task Personalised_PlaysPostAsync(Body_4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/plays";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Suggested Playspace Container
		/// Suggested Playspace Container
		/// 
		/// SuggestContainer my/playspace/containers/suggested
		/// </summary>
		/// <param name="previous_pid">Clip or Episode PID of the previous or first content item in the Playspace stream.</param>
		/// <param name="previous_container">Container ID of the previous container in the Playspace stream.</param>
		/// <returns>OK</returns>
		public async Task<PlayspaceContainer> SuggestContainerAsync(string previous_pid, string previous_container, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/playspace/containers/suggested?previous_pid=" + (previous_pid==null? "" : Uri.EscapeDataString(previous_pid))+"&previous_container=" + (previous_container==null? "" : Uri.EscapeDataString(previous_container));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PlayspaceContainer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Playspace Container by ID
		/// Playspace Container by ID
		/// 
		/// GetContainer my/playspace/containers/{id}
		/// </summary>
		/// <param name="id">Playspace Container ID</param>
		/// <returns>OK</returns>
		public async Task<PlayspaceContainer> GetContainerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/playspace/containers/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PlayspaceContainer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recommended Programmes
		/// Recommended Programmes from the Audience Platforms' Recomendations Service
		/// 
		/// GetRecommendations my/programmes/recommendations
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="rights">Only return available results for the web/mobile.</param>
		/// <returns>OK</returns>
		public async Task<ProgrammesResponse> GetRecommendationsAsync(int offset, int limit, string rights, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/programmes/recommendations?offset="+offset+"&limit="+limit+"&rights=" + (rights==null? "" : Uri.EscapeDataString(rights));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProgrammesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Episodes and Clips
		/// List of favourited episodes and clips for a given user for iPlayer Radio.
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioFavourites my/radio/favourites
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="sort">Sort order for Personalised Radio results</param>
		/// <param name="show_all_activity">Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioFavouritesAsync(int offset, int limit, string sort, bool show_all_activity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites?offset="+offset+"&limit="+limit+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&show_all_activity="+show_all_activity;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Episodes and Clips
		/// Add User favourites
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedRadioBatch my/radio/favourites
		/// </summary>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PostPersonalisedRadioBatchAsync(PersonalisedRadioBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Episodes and Clips
		/// Update user favourites
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedRadioBatch my/radio/favourites
		/// </summary>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PutPersonalisedRadioBatchAsync(PersonalisedRadioBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Episodes and Clips by Type
		/// List of followed 'clips' or 'episode' items for a given iPlayer Radio user
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioFavouritesByType my/radio/favourites/{type}
		/// </summary>
		/// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
		/// <param name="sort">Sort order for Personalised Radio results</param>
		/// <param name="show_all_activity">Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioFavouritesByTypeAsync(string type, string sort, bool show_all_activity, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&show_all_activity="+show_all_activity+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Episode or Clip
		/// Remove User favourite
		/// 
		/// DeletePersonalisedRadioByActivityTypeById my/radio/favourites/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
		/// <param name="pid">pid</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> DeletePersonalisedRadioByActivityTypeByIdAsync(string type, string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Episode or Clip
		/// Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioByActivityTypeById my/radio/favourites/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
		/// <param name="pid">pid</param>
		/// <param name="show_all_activity">Include items which have been 'soft' unfavourited in response. I.e items with UAS type of 'unfavourited'</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioByActivityTypeByIdAsync(string type, string pid, bool show_all_activity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"&show_all_activity="+show_all_activity;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Favourite Episode or Clip
		/// Add User favourite
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedRadioByActivityTypeById my/radio/favourites/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
		/// <param name="pid">pid</param>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PostPersonalisedRadioByActivityTypeByIdAsync(string type, string pid, PersonalisedRadioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Favourite Episode or Clip
		/// Update user favourite
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedRadioByActivityTypeById my/radio/favourites/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
		/// <param name="pid">pid</param>
		/// <param name="requestBody">Action favourited or unfavourited</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PutPersonalisedRadioByActivityTypeByIdAsync(string type, string pid, PersonalisedRadioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/favourites/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Brands and Series
		/// List of favourited brands and series for a given user for iPlayer Radio.
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioFollows my/radio/follows
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="sort">Sort order for Personalised Radio results</param>
		/// <param name="show_all_activity">Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioFollowsAsync(int offset, int limit, string sort, bool show_all_activity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows?offset="+offset+"&limit="+limit+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&show_all_activity="+show_all_activity;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Brands and Series
		/// Add 'brand' or 'series' items to a users iPlayer Radio follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedRadioFollowsBatch my/radio/follows
		/// </summary>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PostPersonalisedRadioFollowsBatchAsync(PersonalisedRadioBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Brands and Series
		/// Update 'brands' or 'series' items from a users iPlayer Radio follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedRadioFollowsBatch my/radio/follows
		/// </summary>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PutPersonalisedRadioFollowsBatchAsync(PersonalisedRadioBatchRequest[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Brands or Series by Type
		/// List of followed 'brand' or 'series' items for a given iPlayer Radio user
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioFollowsByType my/radio/follows/{type}
		/// </summary>
		/// <param name="type">Supported Radio follows types: Brands or Series</param>
		/// <param name="sort">Sort order for Personalised Radio results</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="show_all_activity">Include items which have been 'soft' unfollowed in response. I.e items with UAS type of 'unfollowed'</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioFollowsByTypeAsync(string type, string sort, int offset, int limit, bool show_all_activity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&offset="+offset+"&limit="+limit+"&show_all_activity="+show_all_activity;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Brand or Series
		/// Remove 'brand' or 'series' items from a users iPlayer Radio follows
		/// 
		/// DeletePersonalisedRadioFollowsByTypeById my/radio/follows/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio follows types: Brands or Series</param>
		/// <param name="pid">pid</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> DeletePersonalisedRadioFollowsByTypeByIdAsync(string type, string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Brand or Series
		/// Check to see if a single brand or series entity is in a users follows - determines UX of add button.
		/// 
		/// GetPersonalisedRadioFollowsByTypeById my/radio/follows/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio follows types: Brands or Series</param>
		/// <param name="pid">pid</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioFollowsByTypeByIdAsync(string type, string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followed Brand or Series
		/// Add 'brand' or 'series' items from a users iPlayer Radio follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PostPersonalisedRadioFollowsByTypeById my/radio/follows/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio follows types: Brands or Series</param>
		/// <param name="pid">pid</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PostPersonalisedRadioFollowsByTypeByIdAsync(string type, string pid, PersonalisedRadioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Followed Brand or Series
		/// Update 'brand' or 'series' items from a users iPlayer Radio follows
		/// 
		/// N.B. Any HTML tags submitted in metadata will be removed
		/// 
		/// PutPersonalisedRadioFollowsByTypeById my/radio/follows/{type}/{pid}
		/// </summary>
		/// <param name="type">Supported Radio follows types: Brands or Series</param>
		/// <param name="pid">pid</param>
		/// <param name="requestBody">Action followed or unfollowed</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioSuccessResponse> PutPersonalisedRadioFollowsByTypeByIdAsync(string type, string pid, PersonalisedRadioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/follows/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioSuccessResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Played Episode or Clip
		/// Returns mixed episode and clip plays for a given BBC iPlayer radio user.
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetPersonalisedRadioPlays my/radio/plays
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="sort">Sort order for Personalised Radio results</param>
		/// <param name="show_all_activity">Include expired/unavailable items</param>
		/// <returns>OK</returns>
		public async Task<PersonalisedRadioResponse> GetPersonalisedRadioPlaysAsync(int offset, int limit, string sort, bool show_all_activity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/radio/plays?offset="+offset+"&limit="+limit+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&show_all_activity="+show_all_activity;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PersonalisedRadioResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All Podcasts
		/// Retrieve all Podcasts
		/// 
		/// GetPodcasts podcasts
		/// </summary>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <param name="sort">Sort order for Podcasts results</param>
		/// <param name="network">Network Master Brand ID (mid)</param>
		/// <param name="network_url_key">Network URL key</param>
		/// <param name="category">Category ID</param>
		/// <param name="q">Search query String</param>
		/// <param name="coverage">Local, National or Regional Coverage</param>
		/// <returns>OK</returns>
		public async Task<PodcastsResponse> GetPodcastsAsync(int offset, int limit, string sort, string network, string network_url_key, string category, string q, string coverage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "podcasts?offset="+offset+"&limit="+limit+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&network=" + (network==null? "" : Uri.EscapeDataString(network))+"&network_url_key=" + (network_url_key==null? "" : Uri.EscapeDataString(network_url_key))+"&category=" + (category==null? "" : Uri.EscapeDataString(category))+"&q=" + (q==null? "" : Uri.EscapeDataString(q))+"&coverage=" + (coverage==null? "" : Uri.EscapeDataString(coverage));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PodcastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Featured Podcasts
		/// Retrieve featured podcasts
		/// 
		/// GetPodcastsFeatured podcasts/featured
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PodcastsFeaturedResponse> GetPodcastsFeaturedAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "podcasts/featured";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PodcastsFeaturedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Podcast
		/// Retrieve data about the podcast with the supplied PID
		/// 
		/// GetPodcastByPid podcasts/{pid}
		/// </summary>
		/// <param name="pid">pid</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PodcastsResponse> GetPodcastByPidAsync(string pid, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "podcasts/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PodcastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Podcast Episodes
		/// Retrieve all episodes for a specific podcast
		/// 
		/// GetPodcastEpisodes podcasts/{pid}/episodes
		/// </summary>
		/// <param name="pid">pid</param>
		/// <param name="offset">Paginated results offset</param>
		/// <param name="limit">Paginated results limit</param>
		/// <returns>OK</returns>
		public async Task<PodcastEpisodesResponse> GetPodcastEpisodesAsync(string pid, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "podcasts/"+ (pid==null? "" : Uri.EscapeDataString(pid))+"/episodes&offset="+offset+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PodcastEpisodesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Networks
		/// All iPlayer Radio networks - contains business logic for masterbrand and service relationships
		/// 
		/// GetRadioNetworks radio/networks.json
		/// </summary>
		/// <param name="preset">Returns all networks needed for iPlayer Radio responsive web navigation</param>
		/// <param name="international">Returns all networks available internationally</param>
		/// <returns>OK</returns>
		public async Task<NetworksResponse> GetRadioNetworksAsync(bool preset, bool international, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "radio/networks.json?preset="+preset+"&international="+international;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<NetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Popular Episodes & Clips
		/// Retrieve Popular Episodes & Clips
		/// 
		/// GetPopularEpisodesClips radio/popular
		/// </summary>
		/// <param name="type">Programme type required. Accepts comma separated values</param>
		/// <param name="distinct">Filter by deduplication rule. E.g. 'tleo' returns programmes with distinct top level episode objects</param>
		/// <param name="network">Filter by network master brand ID (mid). Accepts comma separated values</param>
		/// <param name="network_url_key">Filter by network URL key. Accepts comma separated values</param>
		/// <param name="category">Filter by category. Accepts comma separated values</param>
		/// <param name="format">Filter by format. Accepts comma separated values</param>
		/// <param name="group">Filter by group. Accepts comma separated values</param>
		/// <param name="media_type">Filter by programme media type. Accepts comma separated values</param>
		/// <param name="container">Filter by container. Accepts any pid e.g. brand,series,episode</param>
		/// <param name="media_set">Filter by media set name. Accepts comma separated combinations of the following: pc,mobile-download,android-download-high,apple-ios-download-high,mobile-cellular-main,mobile-phone-main,iptv-all</param>
		/// <param name="q">Search query String</param>
		/// <returns>OK</returns>
		public async Task<PopularResponse> GetPopularEpisodesClipsAsync(string type, string distinct, string network, string network_url_key, string category, string format, string group, string media_type, string container, string media_set, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "radio/popular?type=" + (type==null? "" : Uri.EscapeDataString(type))+"&distinct=" + (distinct==null? "" : Uri.EscapeDataString(distinct))+"&network=" + (network==null? "" : Uri.EscapeDataString(network))+"&network_url_key=" + (network_url_key==null? "" : Uri.EscapeDataString(network_url_key))+"&category=" + (category==null? "" : Uri.EscapeDataString(category))+"&format=" + (format==null? "" : Uri.EscapeDataString(format))+"&group=" + (group==null? "" : Uri.EscapeDataString(group))+"&media_type=" + (media_type==null? "" : Uri.EscapeDataString(media_type))+"&container=" + (container==null? "" : Uri.EscapeDataString(container))+"&"+String.Join("&", media_set.Select(z => $"media_set={Uri.EscapeDataString(z.ToString())}"))+"&q=" + (q==null? "" : Uri.EscapeDataString(q));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PopularResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Radio programmes
		/// Provides a paginated list of programmes by PID (brand, series, episode and clip). Accepts various filters and sorting methods.
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetRadioProgrammes radio/programmes
		/// </summary>
		/// <param name="kind">Filter by provided query. E.g. 'tleo' returns top level objects, ie. brands, orphaned series, and orphaned episodes</param>
		/// <param name="network">Filter by network master brand ID (mid). Accepts comma separated values</param>
		/// <param name="network_url_key">Filter by network URL key. Accepts comma separated values</param>
		/// <param name="category">Filter by category id. Accepts comma separated values. See /category endpoint below for the type of response provided</param>
		/// <param name="sort">Sort by provided query. E.g. 'title' sorts in ascending order, and -title sorts in descending order</param>
		/// <param name="container">Filter by container. Accepts any brand or series pid</param>
		/// <param name="type">Filter by programme type. Accepts comma separated values</param>
		/// <returns>OK</returns>
		public async Task<ProgrammesResponse> GetRadioProgrammesAsync(string kind, string network, string network_url_key, string category, string sort, string container, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "radio/programmes?kind=" + (kind==null? "" : Uri.EscapeDataString(kind))+"&network=" + (network==null? "" : Uri.EscapeDataString(network))+"&network_url_key=" + (network_url_key==null? "" : Uri.EscapeDataString(network_url_key))+"&category=" + (category==null? "" : Uri.EscapeDataString(category))+"&sort=" + (sort==null? "" : Uri.EscapeDataString(sort))+"&container=" + (container==null? "" : Uri.EscapeDataString(container))+"&type=" + (type==null? "" : Uri.EscapeDataString(type));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProgrammesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Available radio programme by Pid
		/// Find programmes by PID (brand, series, episode and clip)
		/// 
		/// N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode
		/// and Clip Summaries so we are defining results as an array of Programme Summary here.  This will be resolved in V3 with full support for
		/// anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification
		/// 
		/// GetRadioProgrammesByPid radio/programmes/{pid}
		/// </summary>
		/// <param name="pid">pid</param>
		/// <returns>OK</returns>
		public async Task<ProgrammesResponse> GetRadioProgrammesByPidAsync(string pid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "radio/programmes/"+ (pid==null? "" : Uri.EscapeDataString(pid));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ProgrammesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
