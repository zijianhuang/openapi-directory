//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Activity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Block
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockFeed[] Block_feeds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Column { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Row { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Size_x { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Size_y { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Visual_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlockFeed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Feed Feed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Dashboard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Created_epoch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Ele { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Completed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Created_epoch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Ele { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Feed_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Lat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Lon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Feed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional details about this feed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShallowGroup[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> History { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string License { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Is status notification active?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Status_notify { get; set; }
		
		/// <summary>
		/// Status notification timeout in minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status_timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit_symbol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit_type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeedVisibility Visibility { get; set; } = FeedVisibility.private;
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FeedVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@public = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Feed[] Feeds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Permission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionModel Model { get; set; } = PermissionModel.feed;
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Object_id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionScope Scope { get; set; } = PermissionScope.public;
		
		[System.Runtime.Serialization.DataMember()]
		public string Scope_value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PermissionModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		feed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dashboard = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PermissionScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secret = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@public = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ShallowGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Token
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Token1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Trigger
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Time_zone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get information about the current user
		/// CurrentUser user
		/// </summary>
		/// <returns>A User record</returns>
		public async Task<User> CurrentUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send data to a feed via webhook URL.
		/// CreateWebhookFeedData webhooks/feed/:token
		/// </summary>
		/// <param name="requestBody">Webhook payload containing data `value` parameter.</param>
		/// <returns>New feed data record</returns>
		public async Task<Data> CreateWebhookFeedDataAsync(CreateWebhookFeedDataBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/feed/:token";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Data>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send arbitrary data to a feed via webhook URL.
		/// The raw data webhook receiver accepts POST requests and stores the raw request body on your feed. This is useful when you don't have control of the webhook sender. If feed history is turned on, payloads will be truncated at 1024 bytes. If feed history is turned off, payloads will be truncated at 100KB.
		/// CreateRawWebhookFeedData webhooks/feed/:token/raw
		/// </summary>
		/// <returns>New feed data record</returns>
		public async Task<Data> CreateRawWebhookFeedDataAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/feed/:token/raw";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Data>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All activities for current user
		/// Delete all your activities.
		/// DestroyActivities {username}/activities
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted activities successfully</returns>
		public async Task DestroyActivitiesAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/activities";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All activities for current user
		/// The Activities endpoint returns information about the user's activities.
		/// AllActivities {username}/activities
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="start_time">Start time for filtering, returns records created after given time.</param>
		/// <param name="end_time">End time for filtering, returns records created before give time.</param>
		/// <param name="limit">Limit the number of records returned.</param>
		/// <returns>An array of activities</returns>
		public async Task<Activity[]> AllActivitiesAsync(string username, System.DateTimeOffset start_time, System.DateTimeOffset end_time, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/activities&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Activity[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get activities by type for current user
		/// The Activities endpoint returns information about the user's activities.
		/// GetActivity {username}/activities/{type}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="start_time">Start time for filtering, returns records created after given time.</param>
		/// <param name="end_time">End time for filtering, returns records created before give time.</param>
		/// <param name="limit">Limit the number of records returned.</param>
		/// <returns>An array of activities</returns>
		public async Task<Activity[]> GetActivityAsync(string username, string type, System.DateTimeOffset start_time, System.DateTimeOffset end_time, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/activities/"+ (type==null? "" : Uri.EscapeDataString(type))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Activity[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All dashboards for current user
		/// The Dashboards endpoint returns information about the user's dashboards.
		/// 
		/// AllDashboards {username}/dashboards
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of dashboards</returns>
		public async Task<Dashboard[]> AllDashboardsAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Dashboard
		/// CreateDashboard {username}/dashboards
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Dashboard</returns>
		public async Task<Dashboard> CreateDashboardAsync(string username, createDashboardDashboard requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All blocks for current user
		/// The Blocks endpoint returns information about the user's blocks.
		/// 
		/// AllBlocks {username}/dashboards/{dashboard_id}/blocks
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of blocks</returns>
		public async Task<Block[]> AllBlocksAsync(string username, string dashboard_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (dashboard_id==null? "" : Uri.EscapeDataString(dashboard_id))+"/blocks";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Block[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Block
		/// CreateBlock {username}/dashboards/{dashboard_id}/blocks
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Block</returns>
		public async Task<Block> CreateBlockAsync(string username, string dashboard_id, createBlockBlock requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (dashboard_id==null? "" : Uri.EscapeDataString(dashboard_id))+"/blocks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Block>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Block
		/// DestroyBlock {username}/dashboards/{dashboard_id}/blocks/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Block successfully</returns>
		public async Task<string> DestroyBlockAsync(string username, string dashboard_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (dashboard_id==null? "" : Uri.EscapeDataString(dashboard_id))+"/blocks/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Block based on ID
		/// GetBlock {username}/dashboards/{dashboard_id}/blocks/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Block response</returns>
		public async Task<Block> GetBlockAsync(string username, string dashboard_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (dashboard_id==null? "" : Uri.EscapeDataString(dashboard_id))+"/blocks/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Block>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Block
		/// ReplaceBlock {username}/dashboards/{dashboard_id}/blocks/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated block</returns>
		public async Task<Block> ReplaceBlockAsync(string username, string dashboard_id, string id, createBlockBlock requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (dashboard_id==null? "" : Uri.EscapeDataString(dashboard_id))+"/blocks/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Block>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Dashboard
		/// DestroyDashboard {username}/dashboards/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Dashboard successfully</returns>
		public async Task<string> DestroyDashboardAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Dashboard based on ID
		/// GetDashboard {username}/dashboards/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Dashboard response</returns>
		public async Task<Dashboard> GetDashboardAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Dashboard
		/// ReplaceDashboard {username}/dashboards/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated dashboard</returns>
		public async Task<Dashboard> ReplaceDashboardAsync(string username, string id, createDashboardDashboard requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/dashboards/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All feeds for current user
		/// The Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed.
		/// AllFeeds {username}/feeds
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of feeds</returns>
		public async Task<Feed[]> AllFeedsAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Feed
		/// CreateFeed {username}/feeds
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New feed</returns>
		public async Task<Feed> CreateFeedAsync(string username, string group_key, createFeedFeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds&group_key=" + (group_key==null? "" : Uri.EscapeDataString(group_key));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Feed
		/// DestroyFeed {username}/feeds/{feed_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>Deleted feed successfully</returns>
		public async Task DestroyFeedAsync(string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get feed by feed key
		/// Returns feed based on the feed key
		/// GetFeed {username}/feeds/{feed_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>Feed response</returns>
		public async Task<Feed> GetFeedAsync(string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Feed
		/// ReplaceFeed {username}/feeds/{feed_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>Updated feed</returns>
		public async Task<Feed> ReplaceFeedAsync(string username, string feed_key, createFeedFeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all data for the given feed
		/// AllData {username}/feeds/{feed_key}/data
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="start_time">Start time for filtering, returns records created after given time.</param>
		/// <param name="end_time">End time for filtering, returns records created before give time.</param>
		/// <param name="limit">Limit the number of records returned.</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>An array of data</returns>
		public async Task<DataResponse[]> AllDataAsync(string username, string feed_key, System.DateTimeOffset start_time, System.DateTimeOffset end_time, int limit, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit+"&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Data
		/// Create new data records on the given feed.
		/// 
		/// **NOTE:** when feed history is on, data `value` size is limited to 1KB, when feed history is turned off data value size is limited to 100KB.
		/// CreateData {username}/feeds/{feed_key}/data
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="requestBody">Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).</param>
		/// <returns>New data</returns>
		public async Task<Data> CreateDataAsync(string username, string feed_key, createDataDatum requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Data>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create multiple new Data records
		/// BatchCreateData {username}/feeds/{feed_key}/data/batch
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="requestBody">A collection of data records including `value` (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).</param>
		/// <returns>New data</returns>
		public async Task<DataResponse[]> BatchCreateDataAsync(string username, string feed_key, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/batch";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Chart data for current feed
		/// The Chart API is what we use on io.adafruit.com to populate charts over varying timespans with a consistent number of data points. The maximum number of points returned is 480. This API works by aggregating slices of time into a single value by averaging.
		/// 
		/// All time-based parameters are optional, if none are given it will default to 1 hour at the finest-grained resolution possible.
		/// ChartData {username}/feeds/{feed_key}/data/chart
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="start_time">Start time for filtering, returns records created after given time.</param>
		/// <param name="end_time">End time for filtering, returns records created before give time.</param>
		/// <param name="resolution">A resolution size in minutes. By giving a resolution value you will get back grouped data points aggregated over resolution-sized intervals. NOTE: time span is preferred over resolution, so if you request a span of time that includes more than max limit points you may get a larger resolution than you requested. Valid resolutions are 1, 5, 10, 30, 60, and 120.</param>
		/// <param name="hours">The number of hours the chart should cover.</param>
		/// <returns>A JSON record containing chart data and the parameters used to generate it.</returns>
		public async Task<string> ChartDataAsync(string username, string feed_key, System.DateTimeOffset start_time, System.DateTimeOffset end_time, int resolution, int hours, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/chart&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&resolution="+resolution+"&hours="+hours;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// First Data in Queue
		/// Get the oldest data point in the feed. This request sets the queue pointer to the beginning of the feed.
		/// FirstData {username}/feeds/{feed_key}/data/first
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>Data response</returns>
		public async Task<DataResponse> FirstDataAsync(string username, string feed_key, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/first&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Last Data in Queue
		/// Get the most recent data point in the feed. This request sets the queue pointer to the end of the feed.
		/// LastData {username}/feeds/{feed_key}/data/last
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>Data response</returns>
		public async Task<DataResponse> LastDataAsync(string username, string feed_key, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/last&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Next Data in Queue
		/// Get the next newest data point in the feed. If queue processing hasn't been started, the first data point in the feed will be returned.
		/// NextData {username}/feeds/{feed_key}/data/next
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>Data response</returns>
		public async Task<DataResponse> NextDataAsync(string username, string feed_key, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/next&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Previous Data in Queue
		/// Get the previously processed data point in the feed. NOTE: this method doesn't move the processing queue pointer.
		/// PreviousData {username}/feeds/{feed_key}/data/previous
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>Data response</returns>
		public async Task<DataResponse> PreviousDataAsync(string username, string feed_key, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/previous&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Last Data in MQTT CSV format
		/// Get the most recent data point in the feed in an MQTT compatible CSV format: `value,lat,lon,ele`
		/// RetainData {username}/feeds/{feed_key}/data/retain
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>CSV string in `value,lat,lon,ele` format. The lat, lon, and ele values are left blank if they are not set.</returns>
		public async Task RetainDataAsync(string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/retain";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete existing Data
		/// DestroyData {username}/feeds/{feed_key}/data/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>Deleted Group successfully</returns>
		public async Task<string> DestroyDataAsync(string username, string feed_key, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns data based on feed key
		/// GetData {username}/feeds/{feed_key}/data/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="include">List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. </param>
		/// <returns>Data response</returns>
		public async Task<DataResponse> GetDataAsync(string username, string feed_key, string id, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/"+ (id==null? "" : Uri.EscapeDataString(id))+"&include=" + (include==null? "" : Uri.EscapeDataString(include));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace existing Data
		/// ReplaceData {username}/feeds/{feed_key}/data/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="requestBody">Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).</param>
		/// <returns>Updated Data</returns>
		public async Task<DataResponse> ReplaceDataAsync(string username, string feed_key, string id, createDataDatum requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get detailed feed by feed key
		/// Returns more detailed feed record based on the feed key
		/// GetFeedDetails {username}/feeds/{feed_key}/details
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <returns>Feed response</returns>
		public async Task<Feed> GetFeedDetailsAsync(string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/details";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All groups for current user
		/// The Groups endpoint returns information about the user's groups. The response includes the latest value of each feed in the group, and other metadata about the group.
		/// 
		/// AllGroups {username}/groups
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of groups</returns>
		public async Task<Group[]> AllGroupsAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Group
		/// CreateGroup {username}/groups
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Group</returns>
		public async Task<Group> CreateGroupAsync(string username, createGroupGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Group
		/// DestroyGroup {username}/groups/{group_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Group successfully</returns>
		public async Task<string> DestroyGroupAsync(string username, string group_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Group based on ID
		/// GetGroup {username}/groups/{group_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Group response</returns>
		public async Task<Group> GetGroupAsync(string username, string group_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Group
		/// ReplaceGroup {username}/groups/{group_key}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated group</returns>
		public async Task<Group> ReplaceGroupAsync(string username, string group_key, createGroupGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add an existing Feed to a Group
		/// AddFeedToGroup {username}/groups/{group_key}/add
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated group</returns>
		public async Task<Group> AddFeedToGroupAsync(string group_key, string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/add&feed_key=" + (feed_key==null? "" : Uri.EscapeDataString(feed_key));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new data for multiple feeds in a group
		/// CreateGroupData {username}/groups/{group_key}/data
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New data</returns>
		public async Task<DataResponse[]> CreateGroupDataAsync(string username, string group_key, CreateGroupDataBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/data";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All feeds for current user in a given group
		/// The Group Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed, but only for feeds within the given group.
		/// AllGroupFeeds {username}/groups/{group_key}/feeds
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of feeds</returns>
		public async Task<Feed[]> AllGroupFeedsAsync(string group_key, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/feeds";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Feed in a Group
		/// CreateGroupFeed {username}/groups/{group_key}/feeds
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New feed</returns>
		public async Task<Feed> CreateGroupFeedAsync(string username, string group_key, createFeedFeed requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/feeds";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Feed>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All data for current feed in a specific group
		/// AllGroupFeedData {username}/groups/{group_key}/feeds/{feed_key}/data
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="start_time">Start time for filtering data. Returns data created after given time.</param>
		/// <param name="end_time">End time for filtering data. Returns data created before give time.</param>
		/// <param name="limit">Limit the number of records returned.</param>
		/// <returns>An array of data</returns>
		public async Task<DataResponse[]> AllGroupFeedDataAsync(string username, string group_key, string feed_key, System.DateTimeOffset start_time, System.DateTimeOffset end_time, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Data in a feed belonging to a particular group
		/// CreateGroupFeedData {username}/groups/{group_key}/feeds/{feed_key}/data
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="requestBody">Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).</param>
		/// <returns>New data</returns>
		public async Task<DataResponse> CreateGroupFeedDataAsync(string username, string group_key, string feed_key, createDataDatum requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create multiple new Data records in a feed belonging to a particular group
		/// BatchCreateGroupFeedData {username}/groups/{group_key}/feeds/{feed_key}/data/batch
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <param name="feed_key">a valid feed key</param>
		/// <param name="requestBody">A collection of data records including `value` (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).</param>
		/// <returns>New data</returns>
		public async Task<DataResponse[]> BatchCreateGroupFeedDataAsync(string username, string group_key, string feed_key, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/feeds/"+ (feed_key==null? "" : Uri.EscapeDataString(feed_key))+"/data/batch";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DataResponse[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a Feed from a Group
		/// RemoveFeedFromGroup {username}/groups/{group_key}/remove
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated group</returns>
		public async Task<Group> RemoveFeedFromGroupAsync(string group_key, string username, string feed_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/groups/"+ (group_key==null? "" : Uri.EscapeDataString(group_key))+"/remove&feed_key=" + (feed_key==null? "" : Uri.EscapeDataString(feed_key));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Group>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the user's data rate limit and current activity level.
		/// GetCurrentUserThrottle {username}/throttle
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Data rate limit and current actions.</returns>
		public async Task<string> GetCurrentUserThrottleAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/throttle";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All tokens for current user
		/// The Tokens endpoint returns information about the user's tokens.
		/// 
		/// AllTokens {username}/tokens
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of tokens</returns>
		public async Task<Token[]> AllTokensAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/tokens";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Token[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Token
		/// CreateToken {username}/tokens
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Token</returns>
		public async Task<Token> CreateTokenAsync(string username, createTokenToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/tokens";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Token
		/// DestroyToken {username}/tokens/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Token successfully</returns>
		public async Task<string> DestroyTokenAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/tokens/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Token based on ID
		/// GetToken {username}/tokens/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Token response</returns>
		public async Task<Token> GetTokenAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/tokens/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Token
		/// ReplaceToken {username}/tokens/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated token</returns>
		public async Task<Token> ReplaceTokenAsync(string username, string id, createTokenToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/tokens/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Token>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All triggers for current user
		/// The Triggers endpoint returns information about the user's triggers.
		/// 
		/// AllTriggers {username}/triggers
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of triggers</returns>
		public async Task<Trigger[]> AllTriggersAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/triggers";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Trigger[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Trigger
		/// CreateTrigger {username}/triggers
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Trigger</returns>
		public async Task<Trigger> CreateTriggerAsync(string username, createTriggerTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/triggers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Trigger>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Trigger
		/// DestroyTrigger {username}/triggers/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Trigger successfully</returns>
		public async Task<string> DestroyTriggerAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/triggers/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Trigger based on ID
		/// GetTrigger {username}/triggers/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Trigger response</returns>
		public async Task<Trigger> GetTriggerAsync(string username, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/triggers/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Trigger>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Trigger
		/// ReplaceTrigger {username}/triggers/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated trigger</returns>
		public async Task<Trigger> ReplaceTriggerAsync(string username, string id, createTriggerTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/triggers/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Trigger>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// All permissions for current user and type
		/// The Permissions endpoint returns information about the user's permissions.
		/// 
		/// AllPermissions {username}/{type}/{type_id}/acl
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>An array of permissions</returns>
		public async Task<Permission[]> AllPermissionsAsync(string username, string type, string type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (type_id==null? "" : Uri.EscapeDataString(type_id))+"/acl";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Permission[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Permission
		/// CreatePermission {username}/{type}/{type_id}/acl
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>New Permission</returns>
		public async Task<Permission> CreatePermissionAsync(string username, string type, string type_id, createPermissionPermission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (type_id==null? "" : Uri.EscapeDataString(type_id))+"/acl";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an existing Permission
		/// DestroyPermission {username}/{type}/{type_id}/acl/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Deleted Permission successfully</returns>
		public async Task<string> DestroyPermissionAsync(string username, string type, string type_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (type_id==null? "" : Uri.EscapeDataString(type_id))+"/acl/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Permission based on ID
		/// GetPermission {username}/{type}/{type_id}/acl/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Permission response</returns>
		public async Task<Permission> GetPermissionAsync(string username, string type, string type_id, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (type_id==null? "" : Uri.EscapeDataString(type_id))+"/acl/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replace an existing Permission
		/// ReplacePermission {username}/{type}/{type_id}/acl/{id}
		/// </summary>
		/// <param name="username">a valid username string</param>
		/// <returns>Updated permission</returns>
		public async Task<Permission> ReplacePermissionAsync(string username, string type, string type_id, string id, createPermissionPermission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (username==null? "" : Uri.EscapeDataString(username))+"/"+ (type==null? "" : Uri.EscapeDataString(type))+"/"+ (type_id==null? "" : Uri.EscapeDataString(type_id))+"/acl/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookFeedDataBody
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGroupDataBody
	{
		
		/// <summary>
		/// Optional created_at timestamp which will be applied to all feed values created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Created_at { get; set; }
		
		/// <summary>
		/// An array of feed data records with `key` and `value` properties.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateGroupDataBodyFeeds[] CreateGroupDataBodyFeeds { get; set; }
		
		/// <summary>
		/// A location record with `lat`, `lon`, and [optional] `ele` properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
	}
	
	public class CreateGroupDataBodyFeeds
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
