//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An AGCO Power ECU
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AGCOPowerServices.Models.ECU
	{
		
		/// <summary>
		/// The code used to activate the ECU. May not be modified. Returned only on activation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActivationCode { get; set; }
		
		/// <summary>
		/// A description why the ECU cannot be deactivated.
		/// Pattern: ^[a-zA-Z0-9]{0,4096}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DamagedDescription { get; set; }
		
		/// <summary>
		/// The serial number of the ECU’s engine
		/// Pattern: (^[A-Z][0-9]+$)|(^[ABCDEFGHJKLMNPRSTVWX1-9][5CMB][ED][0-5][0-9][0-7][0-9][0-9][0-9]$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EngineSerialNumber { get; set; }
		
		/// <summary>
		/// The serial number of the ECU that this ECU replaces. Required if activating an ECU..
		/// Pattern: ^0?\d{23}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReplacesECUSerialNumber { get; set; }
		
		/// <summary>
		/// The serial number of the ECU
		/// Pattern: ^0?\d{23}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The state of the ECU
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AGCOPowerServices.Models.ECUState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AGCOPowerServices.Models.ECUState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Damaged = 2,
	}
	
	/// <summary>
	/// Production data for an AGCO Power engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AGCOPowerServices.Models.ProductionData
	{
		
		/// <summary>
		/// Type of data. Valid types are (but not limited to)
		///            'PowerCalibration'
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		/// <summary>
		/// Raw values of the calibration data
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataValues { get; set; }
	}
	
	/// <summary>
	/// Status of a voucher in the AGCO Power system
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AGCOPowerServices.Models.UserStatus
	{
		
		/// <summary>
		/// The dealer code of the voucher
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The state of the voucher
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AGCOPowerServices.Models.UserStatusState State { get; set; }
		
		/// <summary>
		/// The voucher code
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AGCOPowerServices.Models.UserStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.IPagedResponse[AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition]
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.IPagedResponse[AuthorizationCodes.Shared.Models.AuthorizationCode]
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.AuthorizationCode[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.ApiError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeveloperMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MoreInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.AuthenticatedUser
	{
		
		/// <summary>
		/// The user's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The MAC identifier to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MACId { get; set; }
		
		/// <summary>
		/// The MAC token to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MACToken { get; set; }
		
		/// <summary>
		/// The user's name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The token to use for API access
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
		
		/// <summary>
		/// The user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// The username used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.Credentials
	{
		
		/// <summary>
		/// The action to perform on the bearer token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.Models.CredentialsBearerAction BearerAction { get; set; }
		
		/// <summary>
		/// The action to perform on the MAC token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.Models.CredentialsMACAction MACAction { get; set; }
		
		/// <summary>
		/// A secret word or phrase that must be used to gain admission
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// A unique ID a user needs to login with
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.CredentialsBearerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.CredentialsMACAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.Log
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.Notification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CC_Addresses { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsBodyHtml { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MessageBody { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] To_Addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.PasswordReset
	{
		
		/// <summary>
		/// The new password
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// The password reset token
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.PasswordResetRequest
	{
		
		/// <summary>
		/// The query string parameter name to use for supplying the password reset token
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		/// <summary>
		/// The URL to direct the user to reset the password.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// The username to reset the password for
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.Permission
	{
		
		/// <summary>
		/// Description of data to be provided with Role Authorization
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataDescription { get; set; }
		
		/// <summary>
		/// Indicates if data is required or optional
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.PermissionDataRequired DataRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The identifier of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the permission.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.PermissionDataRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Optional = 2,
	}
	
	/// <summary>
	/// Defines an API Role
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.Role
	{
		
		/// <summary>
		/// Role description
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The role's identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The name of the role. Must be alpha-numeric strings separated by a period (.).
		/// Pattern: ^[0-9a-zA-Z]+(\.[0-9a-zA-Z]+)*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Change to the Permissions that a Role is given.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.RolePermissionChange
	{
		
		/// <summary>
		/// The action to take.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.RolePermissionChangeAction Action { get; set; }
		
		/// <summary>
		/// The name of the permission to grant or revoke.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.RolePermissionChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoke = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.RoleUserChange
	{
		
		/// <summary>
		/// The action to take with the user
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.RoleUserChangeAction Action { get; set; }
		
		/// <summary>
		/// The Id of the User
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.RoleUserChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoke = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.TokenOptions
	{
		
		/// <summary>
		/// The action to perform on the bearer token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.Models.TokenOptionsBearerAction BearerAction { get; set; }
		
		/// <summary>
		/// The action to perform on the MAC token. Optional. Defaults to ‘None’.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API.Models.TokenOptionsMACAction MACAction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.TokenOptionsBearerAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.TokenOptionsMACAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Reset = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disable = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.User
	{
		
		/// <summary>
		/// Never Returned.  When changing a user's password, this field must contain the new password.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChangePassword { get; set; }
		
		/// <summary>
		/// The user's email address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The user's name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Never Returned.  Required when creating a new user or updating a user.  When changing a user's password this field must contain the current password.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// The user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// The username used for authentication
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.UserEffectivePermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PermissionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.Models.UserRoleChange
	{
		
		/// <summary>
		/// The action to take with the role
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.UserRoleChangeAction Action { get; set; }
		
		/// <summary>
		/// The name of the role
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum API.Models.UserRoleChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Grant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoke = 1,
	}
	
	/// <summary>
	/// Metadata for the paged response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponseMetadata
	{
		
		/// <summary>
		/// The number of entities this paged response is limited to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		/// <summary>
		/// The number of entities prior to this page of items.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		/// <summary>
		/// The total number of entities matching the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalCount { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[API.Models.Log]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.Log[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[API.Models.Permission]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.Permission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[API.Models.Role]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.Role[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[API.Models.UserEffectivePermission]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.UserEffectivePermission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[API.Models.User]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.Models.User[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.ActivityRun]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityRun[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.Activity]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Activity[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.Agent]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Agent[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.JobRun]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.JobRun[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.Job]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Job[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[BuildSystem.Shared.DTO.Step]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Step[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[ContentSubmission.Shared.BusinessEntities.ContentDefinition]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmission.Shared.BusinessEntities.ContentDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[ContentSubmission.Shared.BusinessEntities.ContentSubmission]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmission.Shared.BusinessEntities.ContentSubmission[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[ContentSubmission.Shared.BusinessEntities.Release]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmission.Shared.BusinessEntities.Release[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[ContentSubmission.Shared.BusinessEntities.UserContentDefinition]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentSubmission.Shared.BusinessEntities.UserContentDefinition[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[DealerDB.Models.Dealer]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.Dealer[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[DealerDB.Models.DealersPerCountry]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.DealersPerCountry[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[DealerDB.Models.License]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.License[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[DealerDB.Models.VoucherHistory]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.VoucherHistory[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[DealerDB.Models.Voucher]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.Voucher[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.AvailableUpdateGroupSubscription]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.AvailableUpdateGroupSubscription[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.Bundle]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.Bundle[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.ClientStatus,UpdateSystem.Models.PagedClientStatusMetadata]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.ClientStatus[] Entities { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PagedClientStatusMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.Client]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.Client[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.PackageStatusSummary]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageStatusSummary[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.PackageTypeIDtoBundle]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageTypeIDtoBundle[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.PackageType]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageType[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.Package]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.Package[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.PriorityPackage]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PriorityPackage[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.UpdateGroupClientRelationship]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateGroupClientRelationship[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.UpdateGroupSubscription]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateGroupSubscription[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A response containing a page of results and metadata concerning the results
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class API.PagedResponse[UpdateSystem.Models.UpdateGroup]
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateGroup[] Entities { get; set; }
		
		/// <summary>
		/// Metadata for the paged response
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public API.PagedResponseMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Represents the model containing an authorization code used to unlock a feature in machines and EDT
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationCodes.Shared.Models.AuthorizationCode
	{
		
		/// <summary>
		/// The code to enter to unlock a feature. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The ID of the user that created this authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CreatedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this code was created. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The parameters and values contained as data in this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.Parameter[] DataParameters { get; set; }
		
		/// <summary>
		/// The id of the definition for this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionID { get; set; }
		
		/// <summary>
		/// The ID of the user that deleted this authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeletedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this authorization code was deleted. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// The identifier for the authorization code. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Indicates whether this code is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The parameters and values used to validate this authorization code. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.Parameter[] ValidationParameters { get; set; }
	}
	
	/// <summary>
	/// Represents the model used to define how a type of authorization code is generated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition
	{
		
		/// <summary>
		/// The ID of the user that created this definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CreatedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this definition was created. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The defined fields to include in authorization codes generated from this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.DataField[] DataFields { get; set; }
		
		/// <summary>
		/// The ID of the user that deleted this definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeletedByUserID { get; set; }
		
		/// <summary>
		/// A timestamp of when this definition was deleted. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeletedDate { get; set; }
		
		/// <summary>
		/// A description of this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The number of bits used for timestamp verification. Defaults to 5. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationAccuracy { get; set; }
		
		/// <summary>
		/// The amount of duration for the specified duration unit used to calculate the Authorization Code. Defaults to 1. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationAmount { get; set; }
		
		/// <summary>
		/// The units of duration used to calculate the Authorization Code. Defaults to 'Days'. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.AuthorizationCodeDefinitionDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// The bit length of the hash data which will be used for the authorization code. Defaults to 20. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HashLength { get; set; }
		
		/// <summary>
		/// The ID of the authorization code definition. Read only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// Indicates whether this definition is enabled. True if generating codes is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// The name of the authorization code definition. May not be updated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The bit length of random data which will be included in the authorization code.  This is necessary to allow creation of "identical" authorization codes containing the same timestamp. Defaults to 5. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RandomLength { get; set; }
		
		/// <summary>
		/// The defined fields to verify when reading authorization codes generated from this definition. May not be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.ValidationField[] ValidationFields { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizationCodes.Shared.Models.AuthorizationCodeDefinitionDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weeks = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hours = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minutes = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationCodes.Shared.Models.DataField
	{
		
		/// <summary>
		/// The number of decimal digits to be used by this data field. Required only by the 'Float' data type. Must be in range 1 - 15.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DigitsPrecision { get; set; }
		
		/// <summary>
		/// The maximum exponent to be used by this data field. Required only by the 'Float' data type. May not be greater than 307.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxExponent { get; set; }
		
		/// <summary>
		/// The maximum value that can be represented by this data field. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// The minimum exponent to be used by this data field. Required only by the 'Float' data type. May not be less than -292.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinExponent { get; set; }
		
		/// <summary>
		/// The minimum value that can be represented by this data field. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinValue { get; set; }
		
		/// <summary>
		/// The name of the field.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The resolution of values that can be represented by this data field. The base value is multiplied by this to compute the final value. Required only by the 'Decimal' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ScaleFactor { get; set; }
		
		/// <summary>
		/// Indicates whether this value is signed. Required only by the 'Float' data type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Signed { get; set; }
		
		/// <summary>
		/// The type of this data field.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.DataFieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizationCodes.Shared.Models.DataFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Decimal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VariableLengthByteArray = 3,
	}
	
	/// <summary>
	/// A parameter used to create an authorization code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationCodes.Shared.Models.Parameter
	{
		
		/// <summary>
		/// The name of the parameter. May not be updated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The value of the parameter. May not be updated.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationCodes.Shared.Models.ValidationField
	{
		
		/// <summary>
		/// The name of the field.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The type for this validation field.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationCodes.Shared.Models.ValidationFieldType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthorizationCodes.Shared.Models.ValidationFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Int = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringCaseInsensitive = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringCaseSensitive = 4,
	}
	
	/// <summary>
	/// A DTO for an IActivity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.Activity
	{
		
		/// <summary>
		/// The ID of the activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The name of the activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for this activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Parameter[] Parameters { get; set; }
		
		/// <summary>
		/// The steps which are performed for this activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IActivityRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.ActivityRun
	{
		
		/// <summary>
		/// The identifier for the ActivityRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityRunID { get; set; }
		
		/// <summary>
		/// Read Only. The UTC date and time when the activity completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the Job Activity that defines this activity run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobActivityID { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the JobRun under which this ActivityRun is executing
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// The parameters used for this run of the activity.  Parameters cannot be added or removed, but output parameter values may be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// Read Only. The UTC date and time when the activity started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// A DTO for an IActivityRunStatus
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityRunStatus Status { get; set; }
		
		/// <summary>
		/// Read Only. The steps to be executed for the activity.  These steps come from the relationship through JobActivity down to ActivityStep
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityStep[] Steps { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IActivityRunStatus
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.ActivityRunStatus
	{
		
		/// <summary>
		/// The activity step currently executing, indicated by numeric order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentStep { get; set; }
		
		/// <summary>
		/// The status of the ActivityRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityRunStatusStatus Status { get; set; }
		
		/// <summary>
		/// The percent progress from the currently executing step.  This value shall be null if progress is not available
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepProgress { get; set; }
		
		/// <summary>
		/// The status text from the currently executing step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.ActivityRunStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// A DTO for an IActivityStep
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.ActivityStep
	{
		
		/// <summary>
		/// The id of the activity this activity step belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		/// <summary>
		/// The id of this activity step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityStepID { get; set; }
		
		/// <summary>
		/// The implementation id which is used to look up the step implementation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ImplementationID { get; set; }
		
		/// <summary>
		/// The mapping of values from a source to be used for the step parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterMapping[] ParameterMappings { get; set; }
		
		/// <summary>
		/// The order of this activity step relative to other activity steps
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunOrder { get; set; }
		
		/// <summary>
		/// The id of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepID { get; set; }
		
		/// <summary>
		/// The name of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StepName { get; set; }
		
		/// <summary>
		/// Indicates the configuration for the ActivityStep to use at runtime.  The build agent must provide this configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UseConfig { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IAgent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.Agent
	{
		
		/// <summary>
		/// The id of the Agent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AgentID { get; set; }
		
		/// <summary>
		/// The 'Heartbeat Interval' used by the Build Agent.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int KeepAliveInterval { get; set; }
		
		/// <summary>
		/// The machine name of the computer the agent is running on
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MachineName { get; set; }
		
		/// <summary>
		/// A DTO for an IAgentStatus
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.AgentStatus Status { get; set; }
		
		/// <summary>
		/// The agent's step configurations
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.StepConfiguration[] StepConfigurations { get; set; }
		
		/// <summary>
		/// The UserID of the Agent
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int UserID { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IAgentStatus
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.AgentStatus
	{
		
		/// <summary>
		/// ReadOnly. The UTC date and time of the last status update
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusUpdate { get; set; }
		
		/// <summary>
		/// Indicates if the agent is online
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Online { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJob
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.Job
	{
		
		/// <summary>
		/// The activities which are performed for the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.JobActivity[] Activities { get; set; }
		
		/// <summary>
		/// Indicates if the job has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The ID of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The name of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJobActivity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.JobActivity
	{
		
		/// <summary>
		/// The ID of the activity to be run as part of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActivityID { get; set; }
		
		/// <summary>
		/// The ID of this job activity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobActivityID { get; set; }
		
		/// <summary>
		/// The ID of the job this job activity belongs to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The mapping of values from a source to be used for the activity parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterMapping[] ParameterMappings { get; set; }
		
		/// <summary>
		/// The order of this job activity relative to others in the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunOrder { get; set; }
	}
	
	/// <summary>
	/// A DTO for an IJobRun
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.JobRun
	{
		
		/// <summary>
		/// The activity runs belonging to this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ActivityRun[] ActivityRuns { get; set; }
		
		/// <summary>
		/// The UTC date and time when the job completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The ID of the job that defines the run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		/// <summary>
		/// The ID of this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		/// <summary>
		/// The parameters used for this run of the job
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterValue[] Parameters { get; set; }
		
		/// <summary>
		/// The UTC date and time when the job started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// The status of this JobRun
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.JobRunStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.JobRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ready = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// A DTO for an IParameter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.Parameter
	{
		
		/// <summary>
		/// The parameter direction (Input or Output)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterDirection Direction { get; set; }
		
		/// <summary>
		/// The name of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The data type of the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.ParameterDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Input = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.ParameterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Float = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StringDictionary = 4,
	}
	
	/// <summary>
	/// A DTO for an IParameterMapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.ParameterMapping
	{
		
		/// <summary>
		/// The name of the parameter this mapping applies to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The source of the value.  The meaning of this value is determined by the source type.  When the source type is “Constant” then source is the value formatted as a string.  When the source type is “Variable” then the source is the name of the variable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		/// <summary>
		/// The source type used for supplying the parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterMappingSourceType SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.ParameterMappingSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Constant = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 1,
	}
	
	/// <summary>
	/// A DTO for an IParameterValue
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.ParameterValue
	{
		
		/// <summary>
		/// The parameter direction (Input or Output)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.ParameterValueDirection Direction { get; set; }
		
		/// <summary>
		/// The name of the parameter this value is for
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameter value in string representation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildSystem.Shared.DTO.ParameterValueDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Input = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Output = 1,
	}
	
	/// <summary>
	/// Step
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.Step
	{
		
		/// <summary>
		/// Indicates if the step requires configuration values to be provided by the build agent
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ConfigRequired { get; set; }
		
		/// <summary>
		/// Read Only.  Indicates if the record is deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// A description of the step to be presented to a user
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The implementation ID used to lookup the step implementation when it is executed
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImplementationID { get; set; }
		
		/// <summary>
		/// The name of the step
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters for this step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildSystem.Shared.DTO.Parameter[] Parameters { get; set; }
		
		/// <summary>
		/// The ID of the step
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepID { get; set; }
	}
	
	/// <summary>
	/// Step Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSystem.Shared.DTO.StepConfiguration
	{
		
		/// <summary>
		/// The configuration names supported.  The configurations collection is empty for steps which do not require configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Configurations { get; set; }
		
		/// <summary>
		/// The Implementation ID of the step this configuration is for
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StepImplementationID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.ContentDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TypeID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentReleaseID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PublisherUserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestReportUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.ContentSubmission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentSubmissionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobRunID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmissionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.ContentSubmissionType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CategoryTemplate { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackageID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobID { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNotesDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.Release
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> BuildDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReleaseID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentSubmission.Shared.BusinessEntities.UserContentDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContentDefinitionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserContentDefinitionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.Dealer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingAddress4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BillingZip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Brands { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DealerStatusUpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Filler { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguagePreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionMapping { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleBrand { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingAddress4 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingCountry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingStreet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShippingZip { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Telephone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VATCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.DealersPerCountry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// Registration for an EDT Lite
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.EDTLiteRegistration
	{
		
		/// <summary>
		/// The dealer code with which the EDT Lite was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The date at which the content of the EDT Lite expires.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationDate { get; set; }
		
		/// <summary>
		/// The identifier for the EDT Lite.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceID { get; set; }
		
		/// <summary>
		/// The voucher code with which the EDT Lite was created.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.License
	{
		
		/// <summary>
		/// True if license is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The date the license was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The date the license was deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeactivatedDate { get; set; }
		
		/// <summary>
		/// The type of license (e.g. EDT, EDT Lite)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.LicenseLicenseActivationType LicenseActivationType { get; set; }
		
		/// <summary>
		/// The LicenseID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseID { get; set; }
		
		/// <summary>
		/// The version of the license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
		
		/// <summary>
		/// The date the license was refreshed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RefreshDate { get; set; }
		
		/// <summary>
		/// Information about the system which is licensed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
		
		/// <summary>
		/// The updated version of the license.  A value in this field indicates that the update has not been confirmed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UpdatedLicenseVersion { get; set; }
		
		/// <summary>
		/// The voucher code that generated the license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DealerDB.Models.LicenseLicenseActivationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDTLite = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.LicenseActivation
	{
		
		/// <summary>
		/// The license key in base64 format.  This is only provided when the LicenseData is a new license.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// The license data in base64 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.LicenseActivationConfirm
	{
		
		/// <summary>
		/// The license version to confirm
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.LicenseActivationCreate
	{
		
		/// <summary>
		/// The Dealer Code of the dealer activating the license
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// The type of license to create (e.g. EDT, EDT Lite)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.LicenseActivationCreateLicenseActivationType LicenseActivationType { get; set; }
		
		/// <summary>
		/// The dealer's postal code (zip code)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Information about  the system being activated
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
		
		/// <summary>
		/// The Voucher Code to use for activation
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DealerDB.Models.LicenseActivationCreateLicenseActivationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDTLite = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.LicenseActivationUpdate
	{
		
		/// <summary>
		/// The license version to update
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LicenseVersion { get; set; }
		
		/// <summary>
		/// Information about  the system being activated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SystemInfo { get; set; }
	}
	
	/// <summary>
	/// A voucher for EDT activation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.Voucher
	{
		
		/// <summary>
		/// Read-Only. The date the voucher was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The dealer code the voucher is assigned to.  Required for commercial vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// Read-Only. True if voucher has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The email address. Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The expiration date of the voucher. Required for Temporary Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseTo { get; set; }
		
		/// <summary>
		/// Read-Only. The user that made the last modification to the voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// The order number of a commercial license. Required for Commercial Vouchers. Not supported for other Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// True if voucher has aleady been used.  False if the voucher has not been used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Punched { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was punched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PunchedDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Purpose { get; set; }
		
		/// <summary>
		/// The type of voucher. Commercial is the default if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.VoucherType Type { get; set; }
		
		/// <summary>
		/// The voucher code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DealerDB.Models.VoucherType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commercial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Temporary = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DealerDB.Models.VoucherHistory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ChangedDate { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The dealer code the voucher is assigned to.  Required for commercial vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DealerCode { get; set; }
		
		/// <summary>
		/// Read-Only. True if voucher has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The email address. Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		/// <summary>
		/// The expiration date of the voucher. Required for Temporary Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The id of the voucher history item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LicenseTo { get; set; }
		
		/// <summary>
		/// Read-Only. The user that made the last modification to the voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ModifiedBy { get; set; }
		
		/// <summary>
		/// The order number of a commercial license. Required for Commercial Vouchers. Not supported for other Vouchers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrderNumber { get; set; }
		
		/// <summary>
		/// True if voucher has aleady been used.  False if the voucher has not been used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Punched { get; set; }
		
		/// <summary>
		/// Read-Only. The date the voucher was punched.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PunchedDate { get; set; }
		
		/// <summary>
		/// Required for Internal Vouchers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Purpose { get; set; }
		
		/// <summary>
		/// The type of voucher.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DealerDB.Models.VoucherHistoryType Type { get; set; }
		
		/// <summary>
		/// The voucher code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VoucherCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DealerDB.Models.VoucherHistoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commercial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Internal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Temporary = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.AttributeValue
	{
		
		/// <summary>
		/// The attribute name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Read Only. The timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// The value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.AvailableSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageType PackageType { get; set; }
		
		/// <summary>
		/// The type of subscription supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.AvailableSubscriptionSubscriptionType SubscriptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateSystem.Models.AvailableSubscriptionSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IncludeByDefault = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExcludeByDefault = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.AvailableUpdateGroupSubscription
	{
		
		/// <summary>
		/// The available subscriptions for this update group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.AvailableSubscription[] AvailableSubscriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateGroup UpdateGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.Bundle
	{
		
		/// <summary>
		/// Default Value: false. During the creation of the Bundle, this field must be false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Read-Only.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleID { get; set; }
		
		/// <summary>
		/// The bundle number
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BundleNumber { get; set; }
		
		/// <summary>
		/// The Bundle description.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The update group this bundle belongs to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.Category
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.AttributeValue[] Values { get; set; }
		
		/// <summary>
		/// The category name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.CheckinResult
	{
		
		/// <summary>
		/// The packages for the client to run.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.Package[] Packages { get; set; }
		
		/// <summary>
		/// The package ids for the client to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] RemovePackages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.Client
	{
		
		/// <summary>
		/// Read Only. The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// Read Only. The time of the client's last checkin with the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// A description of the client that can be used for easy reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.ClientInfo
	{
		
		/// <summary>
		/// The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The packages
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageReport[] Package { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.ClientStatus
	{
		
		/// <summary>
		/// The Client ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The time of the client's last check-in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// The number of minutes that have passed since the last check-in
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinutesElapsed { get; set; }
		
		/// <summary>
		/// The result for the client included in the UpdateGroup's report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportResult { get; set; }
		
		/// <summary>
		/// True if the result for the client matches what is expected for the UpdateGroup
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportResultIsValid { get; set; }
		
		/// <summary>
		/// The value for the client included in the UpdateGroup's report
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportValue { get; set; }
		
		/// <summary>
		/// A descriptive name for the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.Package
	{
		
		/// <summary>
		/// Value is true if package should run automatically. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Autorun { get; set; }
		
		/// <summary>
		/// The CRC used to validate the download.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The package description
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the Package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// Notes about the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Read Only. The package ID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// The id of the package type this package belongs to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// For delta packages, the previous version required.  For non-delta packages, the Previous version is 0.  Default value is 0.
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> PreviousVersion { get; set; }
		
		/// <summary>
		/// The date the package was released
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ReleaseDate { get; set; }
		
		/// <summary>
		/// True if the package is released.  Default value is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Released { get; set; }
		
		/// <summary>
		/// True to remove the package after successful execution.  Default value is False.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveOnSuccess { get; set; }
		
		/// <summary>
		/// The size of the file at the specified URL.  If a size is not supplied at creation time, the size will be determined by the response from the URL.
		///            If the size provided does not match the size in the response from the URL an error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// The command line arguments for the package.  Default value is an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Switches { get; set; }
		
		/// <summary>
		/// The Url to download the package from.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// The version.
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public int Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PackageReport
	{
		
		/// <summary>
		/// The package report's categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.Category[] Categories { get; set; }
		
		/// <summary>
		/// Read Only. The package description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageDescription { get; set; }
		
		/// <summary>
		/// The PackageID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PackageStatus
	{
		
		/// <summary>
		/// The id of the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// The client's tag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientKey { get; set; }
		
		/// <summary>
		/// The amount of time spent downloading
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DownloadTime { get; set; }
		
		/// <summary>
		/// The number of bytes downloaded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Downloaded { get; set; }
		
		/// <summary>
		/// The time the package completed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallCompleted { get; set; }
		
		/// <summary>
		/// The package result
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallResult { get; set; }
		
		/// <summary>
		/// The time the package was started
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallStarted { get; set; }
		
		/// <summary>
		/// The amount of time required to run the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstallTime { get; set; }
		
		/// <summary>
		/// The download completion percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Percentage { get; set; }
		
		/// <summary>
		/// The total size of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Size { get; set; }
		
		/// <summary>
		/// The time the status was last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PackageStatusSummary
	{
		
		/// <summary>
		/// The average time required to complete the download
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AverageDownloadTime { get; set; }
		
		/// <summary>
		/// The average time required to complete the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AverageInstallTime { get; set; }
		
		/// <summary>
		/// The number of clients that have completed the download
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Downloaded { get; set; }
		
		/// <summary>
		/// The result of the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Error { get; set; }
		
		/// <summary>
		/// The number of clients that have completed the install
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Installed { get; set; }
		
		/// <summary>
		/// The name of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Package { get; set; }
		
		/// <summary>
		/// The ID of the package
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// The individual package status items
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageStatus[] PackageStatusItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PackageType
	{
		
		/// <summary>
		/// The inventory attribute (from the InventoryPackage) used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		/// <summary>
		/// The inventory category (from the InventoryPackage) used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// The description of the package type
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional.  The icon to use for the PackageType, in base 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Icon { get; set; }
		
		/// <summary>
		/// The number of minutes to wait before requesting another inventory.  The default value is 1440 (24 hours).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryFrequency { get; set; }
		
		/// <summary>
		/// The inventory package used to determine what version of this package type is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackage { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the description of the PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// The maximum number of "chained" delta packages to use when updating the client
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDeltaPackages { get; set; }
		
		/// <summary>
		/// Read Only. The package type id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PackageTypeIDtoBundle
	{
		
		/// <summary>
		/// The bundle to include the package in.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleID { get; set; }
		
		/// <summary>
		/// The package type id of the package to include
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// The package version of the package to include
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int PackageVersion { get; set; }
		
		/// <summary>
		/// The execution priority of the package relative to other packages in the bundle. Range 1 - 100, lower value indication higher priority.
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Optional. The type of subscription supported.  The default subscription type is Required.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.PackageTypeIDtoBundleSubscriptionType SubscriptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateSystem.Models.PackageTypeIDtoBundleSubscriptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IncludeByDefault = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExcludeByDefault = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PagedClientStatusMetadata
	{
		
		/// <summary>
		/// The number of entities this paged response is limited to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Limit { get; set; }
		
		/// <summary>
		/// The number of entities prior to this page of items.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Offset { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportResults
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportResultExpected { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportResults
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportResultLabel { get; set; }
		
		/// <summary>
		/// The label for data contained in ClientStatus.ReportValue
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportValueLabel { get; set; }
		
		/// <summary>
		/// The total number of entities matching the request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.PriorityPackage
	{
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		///            Value is true if package should run automatically. Default value is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Autorun { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CRC { get; set; }
		
		/// <summary>
		/// The ID of the client to receive the priority package
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// The ID of the package to push as a priority package.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PreviousVersion { get; set; }
		
		/// <summary>
		/// Read Only. The ID of the priority package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PriorityPackageID { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		///            The date the package was released
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseDate { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Released { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoveOnSuccess { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> Size { get; set; }
		
		/// <summary>
		/// The command line arguments for the priority package.  Default value is an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Switches { get; set; }
		
		/// <summary>
		/// Read Only. The timestamp of the priority package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TimeStamp { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Read Only. From the package specified by package ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateGroup
	{
		
		/// <summary>
		/// The description of the update group
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		/// <summary>
		/// The time in minutes between inventory checks. Default value is 1440 minutes (one day).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InventoryFrequency { get; set; }
		
		/// <summary>
		/// The Package ID of the package used for inventory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InventoryPackage { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the description of the update group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		/// <summary>
		/// Optional. The StringID used to localize the name of the update group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		/// <summary>
		/// A field to return in the status report for this update group.
		///            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReportField { get; set; }
		
		/// <summary>
		/// The update type name
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateType { get; set; }
		
		/// <summary>
		/// A field used for validation in the status report for this update group.
		///            Specify the field with the format [Label]: {[InventoryPackageID].[Category].[Attribute]}.  (i.e. example: {bec778ca-278d-424a-867a-4653a1a19e86.MyCategory.MyAttribute})
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ValidatingField { get; set; }
		
		/// <summary>
		/// The value to validate the ValidationField against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ValueToValidate { get; set; }
		
		/// <summary>
		/// The version of the UpdateGroup, this value is incremented with each modification to a related Bundle or PackageType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateGroupClientRelationship
	{
		
		/// <summary>
		/// The subscription status.  The status is active by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Read Only after creation. The client id of the subscriber.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// ReadOnly. The timestamp of the last checkin.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastCheckin { get; set; }
		
		/// <summary>
		/// Read Only after creation. The relationship id.  A relationship id will be assigned if not provided on creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationshipID { get; set; }
		
		/// <summary>
		/// Read Only after creation. The update group to subscribe to.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateGroupSubscription
	{
		
		/// <summary>
		/// The ClientID.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
		
		/// <summary>
		/// True to receive content of type indicated by PackageTypeID.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Include { get; set; }
		
		/// <summary>
		/// The PackageType to set subscription status for
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PackageTypeID { get; set; }
		
		/// <summary>
		/// The Update Group this subscription is relevant for.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateGroupID { get; set; }
		
		/// <summary>
		/// The Update Group Subscription ID.  This ID will be automatically assigned when creating an Update Group Subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UpdateGroupSubscriptionID { get; set; }
	}
	
	/// <summary>
	/// Model that retrieves the data for UpdateMetrics
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateMetricsData
	{
		
		/// <summary>
		/// Active version (bundle number) of update type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActiveVersion { get; set; }
		
		/// <summary>
		/// Generic collection that is of type ActiveVersionByClientRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateMetricsData.ActiveVersionByClientRecord[] ActiveVersionByClient { get; set; }
		
		/// <summary>
		/// Generic collection that is of type CurrentStateByClientRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateMetricsData.CurrentStateByClientRecord[] CurrentStateByClient { get; set; }
		
		/// <summary>
		/// Date that has been configured to only show the most recent clients with a cut off date. (Ex. year from current date)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDate { get; set; }
		
		/// <summary>
		/// Data was refreshed at this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DataRefreshed { get; set; }
		
		/// <summary>
		/// Sum of clients represented
		///            Filtered by updateType and lastCheckedInDate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FilteredClientCount { get; set; }
		
		/// <summary>
		/// Generic collection that is of type PackageErrorsRecord
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSystem.Models.UpdateMetricsData.PackageErrorsRecord[] PackageErrors { get; set; }
		
		/// <summary>
		/// Total clients we have ever serviced
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalClientCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateMetricsData.ActiveVersionByClientRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BundleNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateMetricsData.CurrentStateByClientRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSystem.Models.UpdateMetricsData.PackageErrorsRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ClientCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LongDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShortDescription { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// No Documentation Found.
		/// No Documentation Found.
		/// AftermarketServices_GetCerts api/v2/AftermarketServices/Certificates
		/// </summary>
		/// <returns>OK</returns>
		public async Task<object> AftermarketServices_GetCertsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Certificates";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate or Deactivate an ECU, or Report an ECU as Damaged.
		/// No Documentation Found.
		/// AftermarketServices_PutECU api/v2/AftermarketServices/ECUs/{serialNumber}
		/// </summary>
		/// <param name="serialNumber">The serial number of the ECU.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <param name="requestBody">The ecu to modify.</param>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServices.Models.ECU> AftermarketServices_PutECUAsync(string serialNumber, string EDTInstanceId, AGCOPowerServices.Models.ECU requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/ECUs/"+ (serialNumber==null? "" : Uri.EscapeDataString(serialNumber))+"&EDTInstanceId=" + (EDTInstanceId==null? "" : Uri.EscapeDataString(EDTInstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AGCOPowerServices.Models.ECU>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get injector codes given engine.
		/// No Documentation Found.
		/// AftermarketServices_GetEngineIQACodes api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes
		/// </summary>
		/// <param name="serialNumber">The serial number of the engine.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <returns>OK</returns>
		public async Task<string[]> AftermarketServices_GetEngineIQACodesAsync(string serialNumber, string EDTInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : Uri.EscapeDataString(serialNumber))+"/IQACodes&EDTInstanceId=" + (EDTInstanceId==null? "" : Uri.EscapeDataString(EDTInstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report the IQA codes used by an engine
		/// No Documentation Found.
		/// AftermarketServices_PutIQACodes api/v2/AftermarketServices/Engines/{serialNumber}/IQACodes
		/// </summary>
		/// <param name="serialNumber">The serial number of the Engine</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <param name="requestBody">A string array of IQA codes in physical order</param>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_PutIQACodesAsync(string serialNumber, string EDTInstanceId, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : Uri.EscapeDataString(serialNumber))+"/IQACodes&EDTInstanceId=" + (EDTInstanceId==null? "" : Uri.EscapeDataString(EDTInstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get production calibration data for given engine.
		/// No Documentation Found.
		/// AftermarketServices_GetProductionData api/v2/AftermarketServices/Engines/{serialNumber}/ProductionData
		/// </summary>
		/// <param name="serialNumber">The serial number of the engine.</param>
		/// <param name="EDTInstanceId">The EDT Instance Id of the kit calling this method.</param>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServices.Models.ProductionData[]> AftermarketServices_GetProductionDataAsync(string serialNumber, string EDTInstanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Engines/"+ (serialNumber==null? "" : Uri.EscapeDataString(serialNumber))+"/ProductionData&EDTInstanceId=" + (EDTInstanceId==null? "" : Uri.EscapeDataString(EDTInstanceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AGCOPowerServices.Models.ProductionData[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check whether there is connectivity to AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_GetConnectionStatus api/v2/AftermarketServices/Hello
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_GetConnectionStatusAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/Hello";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the status of an EDT Kit Registration with AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_GetUserStatus api/v2/AftermarketServices/UserStatuses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<AGCOPowerServices.Models.UserStatus> AftermarketServices_GetUserStatusAsync(string voucherCode, string dealerCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/UserStatuses?voucherCode=" + (voucherCode==null? "" : Uri.EscapeDataString(voucherCode))+"&dealerCode=" + (dealerCode==null? "" : Uri.EscapeDataString(dealerCode));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AGCOPowerServices.Models.UserStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the status of an EDT Kit Registration with AGCO Power Web Services
		/// No Documentation Found.
		/// AftermarketServices_UpdateUserStatus api/v2/AftermarketServices/UserStatuses
		/// </summary>
		/// <returns>OK</returns>
		public async Task<bool> AftermarketServices_UpdateUserStatusAsync(AGCOPowerServices.Models.UserStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AftermarketServices/UserStatuses";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Manage API tokens.
		/// No Documentation Found.
		/// Authentication_PutManageTokens api/v2/AuthenticatedUsers/{UserID}/Tokens
		/// </summary>
		/// <param name="requestBody">The options for token management.</param>
		public async Task Authentication_PutManageTokensAsync(int UserID, API.Models.TokenOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthenticatedUsers/"+UserID+"/Tokens";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Authenticate a user.
		/// No Documentation Found.
		/// Authentication_Default api/v2/Authentication
		/// </summary>
		/// <param name="requestBody">Create a user account.</param>
		/// <returns>OK</returns>
		public async Task<API.Models.AuthenticatedUser> Authentication_DefaultAsync(API.Models.Credentials requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.AuthenticatedUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Acknowledges the connection to the API
		/// No Documentation Found.
		/// Authentication_IsAlive api/v2/Authentication/IsAlive
		/// </summary>
		public async Task Authentication_IsAliveAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/IsAlive";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Request a password reset.
		/// No Documentation Found.
		/// Authentication_RequestPasswordReset api/v2/Authentication/RequestPasswordReset
		/// </summary>
		/// <param name="requestBody">The password reset request.</param>
		public async Task Authentication_RequestPasswordResetAsync(API.Models.PasswordResetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/RequestPasswordReset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reset a password
		/// No Documentation Found.
		/// Authentication_ResetPasword api/v2/Authentication/ResetPasword
		/// </summary>
		/// <param name="requestBody">The password reset detail.</param>
		public async Task Authentication_ResetPaswordAsync(API.Models.PasswordReset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Authentication/ResetPasword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authorization code definitions.
		/// Additional searches: validationFields[Name]=true and dataFields[Name]=true. These can be used to search for authorization code definitions that have the specified data or validation fields.
		/// AuthorizationCodeDefinitionsGetByLimitAndOffsetAndNameAndCreatedByUserIDAndDeletedByUserIDAndIncludeDeleted api/v2/AuthorizationCodeDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="name">Optional. If specified, filters definitions by name. Starting and ending wildcards (*) supported.</param>
		/// <param name="createdByUserID">Optional. If specified, filters definitions to those created by the given User ID.</param>
		/// <param name="deletedByUserID">Optional. If specified, filters definitions to those deleted by the given User ID.</param>
		/// <param name="includeDeleted">Optional. Whether to include deleted definitions. 'False' by default.</param>
		/// <returns>OK</returns>
		public async Task<API.IPagedResponse> AuthorizationCodeDefinitionsGetByLimitAndOffsetAndNameAndCreatedByUserIDAndDeletedByUserIDAndIncludeDeletedAsync(int limit, int offset, string name, int createdByUserID, int deletedByUserID, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&createdByUserID="+createdByUserID+"&deletedByUserID="+deletedByUserID+"&includeDeleted="+includeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.IPagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an authorization code definition.
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_PostAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions
		/// </summary>
		/// <param name="requestBody">An authorization code definition.</param>
		/// <returns>OK</returns>
		public async Task<string> AuthorizationCodeDefinitions_PostAuthorizationCodeDefinitionAsync(AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disable an authorization code definition
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_DeleteAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		public async Task AuthorizationCodeDefinitions_DeleteAuthorizationCodeDefinitionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an authorization code definition by its ID
		/// No Documentation Found.
		/// AuthorizationCodeDefinitionsGetById api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition> AuthorizationCodeDefinitionsGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization code definition
		/// No Documentation Found.
		/// AuthorizationCodeDefinitions_PutAuthorizationCodeDefinition api/v2/AuthorizationCodeDefinitions/{id}
		/// </summary>
		/// <param name="id">The ID of the authorization code definition.</param>
		/// <param name="requestBody">An authorization code definition.</param>
		public async Task AuthorizationCodeDefinitions_PutAuthorizationCodeDefinitionAsync(string id, AuthorizationCodes.Shared.Models.AuthorizationCodeDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodeDefinitions/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get authorization codes.
		/// Additional searches: validationParameters[Name]=Value and dataParameters[Name]=Value. These can be used to search for authorization codes that have been generated using specified values for data or validation parameters.
		/// AuthorizationCodes_GetAuthorizationCodes api/v2/AuthorizationCodes
		/// </summary>
		/// <param name="code">Optional. If provided, searches for entities with the provided authorization code.</param>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="definitionID">Optional. If specified, filters codes by definition id.</param>
		/// <param name="createdByUserID">Optional. If specified, filters codes to those created by the given User ID.</param>
		/// <param name="deletedByUserID">Optional. If specified, filters codes to those deleted by the given User ID.</param>
		/// <param name="includeDeleted">Optional. Whether to include deleted codes. 'False' by default.</param>
		/// <returns>OK</returns>
		public async Task<API.IPagedResponse> AuthorizationCodes_GetAuthorizationCodesAsync(string code, int limit, int offset, string definitionID, int createdByUserID, int deletedByUserID, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes?code=" + (code==null? "" : Uri.EscapeDataString(code))+"&limit="+limit+"&offset="+offset+"&definitionID=" + (definitionID==null? "" : Uri.EscapeDataString(definitionID))+"&createdByUserID="+createdByUserID+"&deletedByUserID="+deletedByUserID+"&includeDeleted="+includeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.IPagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates an authorization code using the provided definition and parameters.
		/// No Documentation Found.
		/// AuthorizationCodes_PostAuthorizationCode api/v2/AuthorizationCodes
		/// </summary>
		/// <param name="requestBody">The model from which to generate an authorization code.</param>
		/// <returns>OK</returns>
		public async Task<int> AuthorizationCodes_PostAuthorizationCodeAsync(AuthorizationCodes.Shared.Models.AuthorizationCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hide an authorization code.
		/// No Documentation Found.
		/// AuthorizationCodes_DeleteAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		public async Task AuthorizationCodes_DeleteAuthorizationCodeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an authorization code by its ID.
		/// No Documentation Found.
		/// AuthorizationCodes_GetAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		/// <returns>OK</returns>
		public async Task<AuthorizationCodes.Shared.Models.AuthorizationCode> AuthorizationCodes_GetAuthorizationCodeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AuthorizationCodes.Shared.Models.AuthorizationCode>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization code.
		/// No Documentation Found.
		/// AuthorizationCodes_PutAuthorizationCode api/v2/AuthorizationCodes/{id}
		/// </summary>
		/// <param name="id">The id of the authorization code.</param>
		/// <param name="requestBody">The model from which to update an authorization code.</param>
		public async Task AuthorizationCodes_PutAuthorizationCodeAsync(int id, AuthorizationCodes.Shared.Models.AuthorizationCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/AuthorizationCodes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of Brands.
		/// No Documentation Found.
		/// Brands_Brands api/v2/Brands
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> Brands_BrandsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Brands";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of bundles.
		/// No Documentation Found.
		/// Bundles_GetBundles api/v2/Bundles
		/// </summary>
		/// <param name="UpdateGroupID">Optional. Filter by UpdateGroup ID.</param>
		/// <param name="Active">Optional. Filter by active status.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Bundles_GetBundlesAsync(string UpdateGroupID, bool Active, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles?UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&Active="+Active+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Bundle to the Update System.
		/// No Documentation Found.
		/// Bundles_PostBundle api/v2/Bundles
		/// </summary>
		/// <param name="requestBody">The bundle to add</param>
		/// <returns>OK</returns>
		public async Task<string> Bundles_PostBundleAsync(UpdateSystem.Models.Bundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Bundle.
		/// No Documentation Found.
		/// Bundles_DeleteBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The Bundle ID to Delete</param>
		public async Task Bundles_DeleteBundleAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Bundle by ID.
		/// No Documentation Found.
		/// Bundles_GetBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The Bundle ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.Bundle> Bundles_GetBundleAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.Bundle>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Bundle in the Update System.
		/// No Documentation Found.
		/// Bundles_PutBundle api/v2/Bundles/{ID}
		/// </summary>
		/// <param name="ID">The unique ID of the Bundle</param>
		/// <param name="requestBody">The bundle to modify</param>
		public async Task Bundles_PutBundleAsync(string ID, UpdateSystem.Models.Bundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Bundles/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a List of Clients in the Update System.
		/// No Documentation Found.
		/// ClientsGetByTagAndLimitAndOffset api/v2/Clients
		/// </summary>
		/// <param name="Tag">Optional. Filter clients by Tag. Wildcards are supported (*).</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> ClientsGetByTagAndLimitAndOffsetAsync(string Tag, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients?Tag=" + (Tag==null? "" : Uri.EscapeDataString(Tag))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Cached Files installed on the client Machine.
		/// No Documentation Found.
		/// UpdateSystem_GetCachedFiles api/v2/Clients/{ClientID}/CachedFiles
		/// </summary>
		/// <param name="ClientID">The ClientID of the Client</param>
		/// <param name="Expired">Only Expired Files (true|false)</param>
		/// <returns>OK</returns>
		public async Task<string[]> UpdateSystem_GetCachedFilesAsync(string ClientID, bool Expired, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"/CachedFiles&Expired="+Expired;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the package reports for a client.
		/// No Documentation Found.
		/// PackageReportsGetByClientID api/v2/Clients/{ClientID}/PackageReports
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.PackageReport[]> PackageReportsGetByClientIDAsync(string ClientID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"/PackageReports";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.PackageReport[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a package report
		/// No Documentation Found.
		/// PackageReportsPutByClientID api/v2/Clients/{ClientID}/PackageReports
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <param name="requestBody">The Package Report</param>
		public async Task PackageReportsPutByClientIDAsync(string ClientID, UpdateSystem.Models.PackageReport requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"/PackageReports";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Submit a batch of package reports
		/// No Documentation Found.
		/// PackageReports_Batch api/v2/Clients/{ClientID}/PackageReports/Batch
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <param name="requestBody">The Package Reports</param>
		public async Task PackageReports_BatchAsync(string ClientID, UpdateSystem.Models.PackageReport[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"/PackageReports/Batch";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Client in the Update System.
		/// No Documentation Found.
		/// ClientsGetByID api/v2/Clients/{ID}
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.Client> ClientsGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.Client>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Client.
		/// No Documentation Found.
		/// Clients_Put api/v2/Clients/{ID}
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="requestBody">Updated Client Object.</param>
		public async Task Clients_PutAsync(string ID, UpdateSystem.Models.Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Client's Available Update Group Subscriptions
		/// No Documentation Found.
		/// Clients_GetAvailableSubscriptions api/v2/Clients/{ID}/AvailableUpdateGroupSubscriptions
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Clients_GetAvailableSubscriptionsAsync(string ID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : Uri.EscapeDataString(ID))+"/AvailableUpdateGroupSubscriptions&UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Client's Current Update Group Subscriptions
		/// No Documentation Found.
		/// Clients_GetSubscriptions api/v2/Clients/{ID}/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Clients_GetSubscriptionsAsync(string ID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Clients/"+ (ID==null? "" : Uri.EscapeDataString(ID))+"/UpdateGroupSubscriptions&UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ContentDefinitions
		/// Gets a collection of ContentDefinitions. When successful, the response is a PagedResponse of ContentDefinitions.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_GetContentDefinitions api/v2/ContentDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> ContentDefinitions_GetContentDefinitionsAsync(int limit, int offset, int userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions?limit="+limit+"&offset="+offset+"&userID="+userID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentDefinition
		/// Creates a ContentDefinition.  The body of the POST is the ContentDefinition to create.
		/// The ContentDefinitionID will be assigned on creation of the Job.  When successful, the response
		/// is the JobID.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_PostContentDefinition api/v2/ContentDefinitions
		/// </summary>
		/// <param name="requestBody">The ContentDefinition to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentDefinitions_PostContentDefinitionAsync(ContentSubmission.Shared.BusinessEntities.ContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentDefinition
		/// Deletes an ContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentDefinitions_DeleteContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to delete</param>
		public async Task ContentDefinitions_DeleteContentDefinitionAsync(int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ContentDefinition by ID
		/// Gets a ContentDefinition by ID. When successful, the response is the requested ContentDefinition.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_GetContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.ContentDefinition> ContentDefinitions_GetContentDefinitionAsync(int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.ContentDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentDefinition
		/// Updates a ContentDefinition.  The body of the PUT is the updated ContentDefinition.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentDefinitions_PutContentDefinition api/v2/ContentDefinitions/{contentDefinitionID}
		/// </summary>
		/// <param name="contentDefinitionID">The ID of the ContentDefinition to update</param>
		/// <param name="requestBody">The updated ContentDefinition</param>
		public async Task ContentDefinitions_PutContentDefinitionAsync(int contentDefinitionID, ContentSubmission.Shared.BusinessEntities.ContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentDefinitions/"+contentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ContentReleaseVersion
		/// Gets a collection of ContentReleaseVersion. When successful, the response is a PagedResponse of ContentReleaseVersion.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentReleaseGetByLimitAndOffsetAndDeletedAndReleaseIDAndUserIdAndContentDefinitionIDAndVersion api/v2/ContentReleases
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="deleted">Optional. Filter by deleted.</param>
		/// <param name="releaseID">Optional. Filter by releaseID.</param>
		/// <param name="userId">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID.</param>
		/// <param name="version">Optional. Filter by Version.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> ContentReleaseGetByLimitAndOffsetAndDeletedAndReleaseIDAndUserIdAndContentDefinitionIDAndVersionAsync(int limit, int offset, bool deleted, int releaseID, int userId, int contentDefinitionID, int version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases?limit="+limit+"&offset="+offset+"&deleted="+deleted+"&releaseID="+releaseID+"&userId="+userId+"&contentDefinitionID="+contentDefinitionID+"&version="+version;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentReleaseVersion
		/// Creates a ContentReleaseVersion.  The body of the POST is the ContentReleaseVersion to create.
		/// The ContentReleaseId will be assigned on creation of the Job.  When successful, the response
		/// is the contentReleaseId.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentRelease_PostContentRelease api/v2/ContentReleases
		/// </summary>
		/// <param name="requestBody">The ContentReleaseVersion to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentRelease_PostContentReleaseAsync(ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentReleaseVersion
		/// Deletes an ContentReleaseVersion. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentRelease_DeleteContentReleaseVersionn api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to delete</param>
		public async Task ContentRelease_DeleteContentReleaseVersionnAsync(int ContentReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Content Release Version by ID
		/// Gets a ContentReleaseVersion by ID. When successful, the response is the requested ContentReleaseVersion.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentReleaseGetByContentReleaseId api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion> ContentReleaseGetByContentReleaseIdAsync(int ContentReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentReleaseVersion
		/// Updates a ContentReleaseVersion.  The body of the PUT is the updated ContentReleaseVersion.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentRelease_PutContentDefinition api/v2/ContentReleases/{ContentReleaseId}
		/// </summary>
		/// <param name="ContentReleaseId">The ID of the ContentReleaseVersion to update</param>
		/// <param name="requestBody">The updated ContentReleaseVersion</param>
		public async Task ContentRelease_PutContentDefinitionAsync(int ContentReleaseId, ContentSubmission.Shared.BusinessEntities.ContentReleaseVersion requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentReleases/"+ContentReleaseId;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns available Content Submission Types.
		/// No Documentation Found.
		/// ContentSubmissionTypes_GetContentSubmissionTypes api/v2/ContentSubmissionTypes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.ContentSubmissionType[]> ContentSubmissionTypes_GetContentSubmissionTypesAsync(bool enabled, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes?enabled="+enabled;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.ContentSubmissionType[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_PostContentSubmissionType api/v2/ContentSubmissionTypes
		/// </summary>
		/// <param name="requestBody">The Content Submission Type</param>
		/// <returns>OK</returns>
		public async Task<int> ContentSubmissionTypes_PostContentSubmissionTypeAsync(ContentSubmission.Shared.BusinessEntities.ContentSubmissionType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_DeleteContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		public async Task ContentSubmissionTypes_DeleteContentSubmissionTypeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a Content Submission Type by its ID.
		/// No Documentation Found.
		/// ContentSubmissionTypes_GetContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.ContentSubmissionType> ContentSubmissionTypes_GetContentSubmissionTypeAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.ContentSubmissionType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Content Submission Type
		/// No Documentation Found.
		/// ContentSubmissionTypes_PutContentSubmissionType api/v2/ContentSubmissionTypes/{id}
		/// </summary>
		/// <param name="id">The ID of the Content Submission Type</param>
		/// <param name="requestBody">The Content Submission Type</param>
		public async Task ContentSubmissionTypes_PutContentSubmissionTypeAsync(int id, ContentSubmission.Shared.BusinessEntities.ContentSubmissionType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissionTypes/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ContentSubmissions
		/// Gets a collection of ContentSubmissions. When successful, the response is a PagedResponse of ContentSubmissions.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_GetContentSubmissions api/v2/ContentSubmissions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> ContentSubmissions_GetContentSubmissionsAsync(int limit, int offset, int userID, int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions?limit="+limit+"&offset="+offset+"&userID="+userID+"&contentDefinitionID="+contentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ContentSubmission
		/// Creates a ContentSubmission.  The body of the POST is the ContentSubmission to create.
		/// The ContentSubmissionID will be assigned on creation of the Job.  When successful, the response
		/// is the ContentSubmissionID.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_PostContentSubmission api/v2/ContentSubmissions
		/// </summary>
		/// <param name="requestBody">The ContentSubmission to create.</param>
		/// <returns>OK</returns>
		public async Task<int> ContentSubmissions_PostContentSubmissionAsync(ContentSubmission.Shared.BusinessEntities.ContentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a ContentSubmission
		/// Deletes an ContentSubmission. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// ContentSubmissions_DeleteContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to delete</param>
		public async Task ContentSubmissions_DeleteContentSubmissionAsync(int contentSubmissionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ContentSubmission by ID
		/// Gets a ContentSubmission by ID. When successful, the response is the requested ContentSubmission.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_GetContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.ContentSubmission> ContentSubmissions_GetContentSubmissionAsync(int contentSubmissionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.ContentSubmission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a ContentSubmission
		/// Updates a ContentSubmission.  The body of the PUT is the updated ContentSubmission.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ContentSubmissions_PutContentSubmission api/v2/ContentSubmissions/{contentSubmissionID}
		/// </summary>
		/// <param name="contentSubmissionID">The ID of the ContentSubmission to update</param>
		/// <param name="requestBody">The updated ContentSubmission</param>
		public async Task ContentSubmissions_PutContentSubmissionAsync(int contentSubmissionID, ContentSubmission.Shared.BusinessEntities.ContentSubmission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/ContentSubmissions/"+contentSubmissionID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a total count of dealers per country
		/// No Documentation Found.
		/// DealerByCountry_GetCountries api/v2/DealerByCountry
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> DealerByCountry_GetCountriesAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/DealerByCountry?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of dealers.
		/// No Documentation Found.
		/// Dealers_GetDealers api/v2/Dealers
		/// </summary>
		/// <param name="Brand">The brand to filter by.</param>
		/// <param name="ShippingCountry">The country to filter by.</param>
		/// <param name="DealerName">The partial Dealer Name to filter by. Wildcard supported (*).</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Dealers_GetDealersAsync(string Brand, string ShippingCountry, string DealerName, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Dealers?Brand=" + (Brand==null? "" : Uri.EscapeDataString(Brand))+"&ShippingCountry=" + (ShippingCountry==null? "" : Uri.EscapeDataString(ShippingCountry))+"&DealerName=" + (DealerName==null? "" : Uri.EscapeDataString(DealerName))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lookup a dealer using a dealer code.
		/// No Documentation Found.
		/// Dealers_GetDealerbyDealerCode api/v2/Dealers/{DealerCode}
		/// </summary>
		/// <param name="DealerCode">The Dealer Code to Search for</param>
		/// <returns>OK</returns>
		public async Task<DealerDB.Models.Dealer> Dealers_GetDealerbyDealerCodeAsync(string DealerCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Dealers/"+ (DealerCode==null? "" : Uri.EscapeDataString(DealerCode));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DealerDB.Models.Dealer>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a license activation.
		/// No Documentation Found.
		/// LicenseActivations_Post api/v2/LicenseActivations
		/// </summary>
		/// <param name="requestBody">The data required for creating the license.</param>
		/// <returns>OK</returns>
		public async Task<DealerDB.Models.LicenseActivation> LicenseActivations_PostAsync(DealerDB.Models.LicenseActivationCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DealerDB.Models.LicenseActivation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register an EDT Lite with the Server
		/// No Documentation Found.
		/// LicenseActivations_PostRegisterEDTLite api/v2/LicenseActivations/RegisterEDTLite
		/// </summary>
		/// <param name="requestBody">The information required for registration.</param>
		/// <returns>OK</returns>
		public async Task<bool> LicenseActivations_PostRegisterEDTLiteAsync(DealerDB.Models.EDTLiteRegistration requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/RegisterEDTLite";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<bool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a license activiation.
		/// No Documentation Found.
		/// LicenseActivations_Put api/v2/LicenseActivations/{ID}
		/// </summary>
		/// <param name="ID">The ID of the license.</param>
		/// <param name="requestBody">The data required for updating the license.</param>
		/// <returns>OK</returns>
		public async Task<DealerDB.Models.LicenseActivation> LicenseActivations_PutAsync(string ID, DealerDB.Models.LicenseActivationUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DealerDB.Models.LicenseActivation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirm that the client has applied the updated license.
		/// No Documentation Found.
		/// LicenseActivations_PutConfirm api/v2/LicenseActivations/{ID}/Confirm
		/// </summary>
		/// <param name="ID">The ID of the license</param>
		/// <param name="requestBody">The license data.</param>
		public async Task LicenseActivations_PutConfirmAsync(string ID, DealerDB.Models.LicenseActivationConfirm requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/LicenseActivations/"+ (ID==null? "" : Uri.EscapeDataString(ID))+"/Confirm";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of licenses with the specified criteria.
		/// No Documentation Found.
		/// LicensesGetByVoucherCodeAndDealerCodeAndStatusAndLimitAndOffset api/v2/Licenses
		/// </summary>
		/// <param name="VoucherCode">Optional. Filter by VoucherCode</param>
		/// <param name="DealerCode">Optional. Filter by DealerCode</param>
		/// <param name="Status">Optional. Filter by Status.  By default only active licenses will be returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> LicensesGetByVoucherCodeAndDealerCodeAndStatusAndLimitAndOffsetAsync(string VoucherCode, string DealerCode, string Status, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Licenses?VoucherCode=" + (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode))+"&DealerCode=" + (DealerCode==null? "" : Uri.EscapeDataString(DealerCode))+"&Status=" + (Status==null? "" : Uri.EscapeDataString(Status))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a license.
		/// No Documentation Found.
		/// LicensesGetByID api/v2/Licenses/{ID}
		/// </summary>
		/// <param name="ID">The ID of the license to get.</param>
		/// <returns>OK</returns>
		public async Task<DealerDB.Models.License> LicensesGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Licenses/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DealerDB.Models.License>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the API System logs, most recent first.
		/// No Documentation Found.
		/// Logs_GetLogs api/v2/Logs
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Logs_GetLogsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Log entry
		/// No Documentation Found.
		/// Logs_PostLog api/v2/Logs
		/// </summary>
		/// <param name="Message">Message to enter into the log</param>
		/// <returns>OK</returns>
		public async Task<string> Logs_PostLogAsync(string Message, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs?Message=" + (Message==null? "" : Uri.EscapeDataString(Message));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a log by ID
		/// No Documentation Found.
		/// Logs_GetLog api/v2/Logs/{ID}
		/// </summary>
		/// <param name="ID">The Log ID</param>
		/// <returns>OK</returns>
		public async Task<API.Models.Log> Logs_GetLogAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Logs/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.Log>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends an email message.
		/// No Documentation Found.
		/// Notifications_PostMail api/v2/Notifications
		/// </summary>
		/// <param name="requestBody">The Notification Object.</param>
		public async Task Notifications_PostMailAsync(API.Models.Notification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Notifications";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all of the Package Types.
		/// No Documentation Found.
		/// PackageTypesGetByLimitAndOffset api/v2/PackageTypes
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> PackageTypesGetByLimitAndOffsetAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Post api/v2/PackageTypes
		/// </summary>
		/// <param name="requestBody">The Package Type to add</param>
		/// <returns>OK</returns>
		public async Task<string> PackageTypes_PostAsync(UpdateSystem.Models.PackageType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Delete api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The Package Type ID</param>
		public async Task PackageTypes_DeleteAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Package Type.
		/// No Documentation Found.
		/// PackageTypesGetByID api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The Package Type ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.PackageType> PackageTypesGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.PackageType>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Package Type.
		/// No Documentation Found.
		/// PackageTypes_Put api/v2/PackageTypes/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Package Type</param>
		/// <param name="requestBody">The Package Type to update</param>
		public async Task PackageTypes_PutAsync(string ID, UpdateSystem.Models.PackageType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypes/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Package Type to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Delete api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="BundleID">The BundleID</param>
		/// <param name="PackageTypeID">The PackageTypeID</param>
		public async Task PackageTypetoBundles_DeleteAsync(string BundleID, string PackageTypeID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles?BundleID=" + (BundleID==null? "" : Uri.EscapeDataString(BundleID))+"&PackageTypeID=" + (PackageTypeID==null? "" : Uri.EscapeDataString(PackageTypeID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all of the Package Type to Bundle Relationships.
		/// No Documentation Found.
		/// PackageTypetoBundles_Get api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="BundleID">Optional. Filter by BundleID.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> PackageTypetoBundles_GetAsync(string BundleID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles?BundleID=" + (BundleID==null? "" : Uri.EscapeDataString(BundleID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new Package Type ID to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Post api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="requestBody">The PackageTypeToBundle to add.</param>
		public async Task PackageTypetoBundles_PostAsync(UpdateSystem.Models.PackageTypeIDtoBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a Package Type ID to Bundle Relationship.
		/// No Documentation Found.
		/// PackageTypetoBundles_Put api/v2/PackageTypetoBundles
		/// </summary>
		/// <param name="requestBody">The PackageTypeToBundle to update.</param>
		public async Task PackageTypetoBundles_PutAsync(UpdateSystem.Models.PackageTypeIDtoBundle requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PackageTypetoBundles";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Packages.
		/// No Documentation Found.
		/// Packages_GetPackages api/v2/Packages
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Packages_GetPackagesAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Packge to the Update System.
		/// No Documentation Found.
		/// Packages_PostPackage api/v2/Packages
		/// </summary>
		/// <param name="requestBody">The package to add.</param>
		/// <returns>OK</returns>
		public async Task<string> Packages_PostPackageAsync(UpdateSystem.Models.Package requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Package.
		/// No Documentation Found.
		/// Packages_DeletePackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The Package ID to Delete</param>
		public async Task Packages_DeletePackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find a Package.
		/// No Documentation Found.
		/// Packages_GetPackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The Package ID to Search for</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.Package> Packages_GetPackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.Package>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify a Packge to the Update System.
		/// No Documentation Found.
		/// Packages_PutPackage api/v2/Packages/{ID}
		/// </summary>
		/// <param name="ID">The unique ID of the Package</param>
		/// <param name="requestBody">The package to update.</param>
		public async Task Packages_PutPackageAsync(string ID, UpdateSystem.Models.Package requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Packages/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Permissions
		/// No Documentation Found.
		/// Permissions_GetPermissions api/v2/Permissions
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="name">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Permissions_GetPermissionsAsync(int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a Permission
		/// No Documentation Found.
		/// Permissions_PostPermission api/v2/Permissions
		/// </summary>
		/// <param name="requestBody">Permission to add</param>
		/// <returns>OK</returns>
		public async Task<int> Permissions_PostPermissionAsync(API.Models.Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Permission
		/// No Documentation Found.
		/// Permissions_DeletePermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		public async Task Permissions_DeletePermissionAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Permission
		/// No Documentation Found.
		/// Permissions_GetPermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		/// <returns>OK</returns>
		public async Task<API.Models.Permission> Permissions_GetPermissionAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Permission
		/// No Documentation Found.
		/// Permissions_PutPermission api/v2/Permissions/{id}
		/// </summary>
		/// <param name="id">Id of Permission</param>
		/// <param name="requestBody">The Updated Permission</param>
		public async Task Permissions_PutPermissionAsync(int id, API.Models.Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Permissions/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of Priority Packages by Client.
		/// No Documentation Found.
		/// PriorityPackages_GetPriorityPackages api/v2/PriorityPackages
		/// </summary>
		/// <param name="ClientID">Optional. Filter priority packages by ClientID.</param>
		/// <param name="Status">Optional. Filter returned packages by status. By default only active packages will be returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> PriorityPackages_GetPriorityPackagesAsync(string ClientID, string Status, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&Status=" + (Status==null? "" : Uri.EscapeDataString(Status))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a Priority Package for a Client.
		/// No Documentation Found.
		/// PriorityPackages_PostPriorityPackages api/v2/PriorityPackages
		/// </summary>
		/// <param name="requestBody">The PriorityPackage to add</param>
		/// <returns>OK</returns>
		public async Task<string> PriorityPackages_PostPriorityPackagesAsync(UpdateSystem.Models.PriorityPackage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Priority Package for a Client.
		/// No Documentation Found.
		/// PriorityPackages_DeletePriorityPackages api/v2/PriorityPackages/{ID}
		/// </summary>
		/// <param name="ID">The Priority Package ID</param>
		public async Task PriorityPackages_DeletePriorityPackagesAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Priority Packages for a Client.
		/// No Documentation Found.
		/// PriorityPackages_GetPriorityPackage api/v2/PriorityPackages/{ID}
		/// </summary>
		/// <param name="ID">The Priority Package ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.PriorityPackage> PriorityPackages_GetPriorityPackageAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/PriorityPackages/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.PriorityPackage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Release
		/// Gets a collection of Release. When successful, the response is a PagedResponse of Release.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Release_GetReleases api/v2/Releases
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="visible">Optional. Filter by visible.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Release_GetReleasesAsync(int limit, int offset, bool visible, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases?limit="+limit+"&offset="+offset+"&visible="+visible;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Release
		/// Creates a Release.  The body of the POST is the Release to create.
		/// The ReleaseId will be assigned on creation of the Job.  When successful, the response
		/// is the Release Id.  If unsuccessful, an appropriate ApiError is returned.
		/// Release_PostRelease api/v2/Releases
		/// </summary>
		/// <param name="requestBody">The Release to create.</param>
		/// <returns>OK</returns>
		public async Task<int> Release_PostReleaseAsync(ContentSubmission.Shared.BusinessEntities.Release requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a  Release by ID
		/// Gets a Release by ID. When successful, the response is the requested Release.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Release_GetRelease api/v2/Releases/{ReleaseId}
		/// </summary>
		/// <param name="ReleaseId">The ID of the Release to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.Release> Release_GetReleaseAsync(int ReleaseId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+ReleaseId;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.Release>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Release
		/// Updates a Release.  The body of the PUT is the updated Release.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// Release_PutContentDefinition api/v2/Releases/{releaseId}
		/// </summary>
		/// <param name="releaseId">The ID of the Release to update</param>
		/// <param name="requestBody">The updated Release</param>
		public async Task Release_PutContentDefinitionAsync(int releaseId, ContentSubmission.Shared.BusinessEntities.Release requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Releases/"+releaseId;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a summary of all Packages in a Bundle
		/// No Documentation Found.
		/// Reporting_BundleStatusSummary api/v2/Reporting/BundleStatusSummary
		/// </summary>
		/// <param name="BundleID">The BundleID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Reporting_BundleStatusSummaryAsync(string BundleID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/BundleStatusSummary?BundleID=" + (BundleID==null? "" : Uri.EscapeDataString(BundleID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of bundles for UpdateGroup.
		/// No Documentation Found.
		/// Reporting_BundlesInUpdateGroup api/v2/Reporting/BundlesInUpdateGroup
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="IncludeInactive">Include Inactive Bundles (true|false)</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Reporting_BundlesInUpdateGroupAsync(string ID, bool IncludeInactive, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/BundlesInUpdateGroup?ID=" + (ID==null? "" : Uri.EscapeDataString(ID))+"&IncludeInactive="+IncludeInactive+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Client Information
		/// No Documentation Found.
		/// Reporting_ClientInfo api/v2/Reporting/ClientInfo
		/// </summary>
		/// <param name="ClientID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.ClientInfo> Reporting_ClientInfoAsync(string ClientID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/ClientInfo?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.ClientInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the current packages for an update group.
		/// No Documentation Found.
		/// Reporting_CurrentPackagesInUpdateGroup api/v2/Reporting/CurrentPackagesInUpdateGroup
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="SubscriptionTypeFilter">Optional.  The subscription type filter to use.  By default the Default packages (Required and IncludeByDefault) will be returned.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.Package[]> Reporting_CurrentPackagesInUpdateGroupAsync(string ID, string SubscriptionTypeFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/CurrentPackagesInUpdateGroup?ID=" + (ID==null? "" : Uri.EscapeDataString(ID))+"&SubscriptionTypeFilter=" + (SubscriptionTypeFilter==null? "" : Uri.EscapeDataString(SubscriptionTypeFilter));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.Package[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Client in the Update System.
		/// No Documentation Found.
		/// Reporting_GetClient api/v2/Reporting/GetClient
		/// </summary>
		/// <param name="ID">The Client ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.Client> Reporting_GetClientAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/GetClient?ID=" + (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.Client>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of current Client Subscriptions.
		/// No Documentation Found.
		/// Reporting_GetSubscriptions api/v2/Reporting/GetSubscriptions
		/// </summary>
		/// <param name="ClientID">Optional. Filter by Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Reporting_GetSubscriptionsAsync(string ClientID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/GetSubscriptions?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a summary report for a Specific Package
		/// No Documentation Found.
		/// Reporting_PackageStatusSummary api/v2/Reporting/PackageStatusSummary
		/// </summary>
		/// <param name="PackageID">The Package ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.PackageStatusSummary> Reporting_PackageStatusSummaryAsync(string PackageID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/PackageStatusSummary?PackageID=" + (PackageID==null? "" : Uri.EscapeDataString(PackageID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.PackageStatusSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of subscribed clients
		/// No Documentation Found.
		/// Reporting_RegisteredClients api/v2/Reporting/RegisteredClients
		/// </summary>
		/// <param name="UpdateGroupID">Optional. The Update Group ID. If not provided, all clients will be returned.</param>
		/// <param name="ClientID">Optional. Filter where ClientID matches a value. Wildcards are supported (*).</param>
		/// <param name="Tag">Optional. Filter where Tag matches a value. Wildcards are supported (*).</param>
		/// <param name="ReportResult">Optional. Filter where ReportResult matches a value. Wildcards are supported (*).</param>
		/// <param name="ReportResultIsValid">Optional. When 'true' filters results where ReportResult equals ReportResultExpected.  When 'false' filters results where ValueToValidate does not equal ReportResults.</param>
		/// <param name="ReportValue">Optional. Filter where ReportValue matches a value. Wildcards are supported (*).</param>
		/// <param name="LastCheckInBefore">Optional. Filter where LastCheckIn occured before the provided date.</param>
		/// <param name="LastCheckInAfter">Optional. Filter where LastCheckIn occured after the provided date.</param>
		/// <param name="OrderBy">Optional. Specify the order in which results should be returned. Use this format: [FieldName] [ASC|ASCENDING|DESC|DESCENDING],...   
		///            If sort direction is not provided for a field, it will be sorted ascending.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Reporting_RegisteredClientsAsync(string UpdateGroupID, string ClientID, string Tag, string ReportResult, bool ReportResultIsValid, string ReportValue, System.DateTimeOffset LastCheckInBefore, System.DateTimeOffset LastCheckInAfter, string OrderBy, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/RegisteredClients?UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&Tag=" + (Tag==null? "" : Uri.EscapeDataString(Tag))+"&ReportResult=" + (ReportResult==null? "" : Uri.EscapeDataString(ReportResult))+"&ReportResultIsValid="+ReportResultIsValid+"&ReportValue=" + (ReportValue==null? "" : Uri.EscapeDataString(ReportValue))+"&LastCheckInBefore=" + LastCheckInBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&LastCheckInAfter=" + LastCheckInAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&OrderBy=" + (OrderBy==null? "" : Uri.EscapeDataString(OrderBy))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
		/// No Documentation Found.
		/// Reporting_UpdateGroups api/v2/Reporting/UpdateGroups
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Reporting_UpdateGroupsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/UpdateGroups?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get data for pie charts in UpdateMetrics.
		/// No Documentation Found.
		/// Reporting_UpdateMetrics api/v2/Reporting/UpdateMetrics
		/// </summary>
		/// <param name="UpdateGroupID">The UpdateType in which clients must be for the report to include them.</param>
		/// <param name="bundleNumber">Optional. Tells us which chart to show based upon filter.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.UpdateMetricsData> Reporting_UpdateMetricsAsync(string UpdateGroupID, int bundleNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Reporting/UpdateMetrics?UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&bundleNumber="+bundleNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.UpdateMetricsData>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Roles
		/// No Documentation Found.
		/// Roles_GetRoles api/v2/Roles
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <param name="name">Optional. Finds a role with the given name.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Roles_GetRolesAsync(int limit, int offset, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles?limit="+limit+"&offset="+offset+"&name=" + (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a User Role
		/// No Documentation Found.
		/// Roles_PostRole api/v2/Roles
		/// </summary>
		/// <param name="requestBody">Role to add</param>
		/// <returns>OK</returns>
		public async Task<int> Roles_PostRoleAsync(API.Models.Role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a User Role
		/// No Documentation Found.
		/// Roles_DeleteRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		public async Task Roles_DeleteRoleAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a User Role
		/// No Documentation Found.
		/// Roles_GetRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		/// <returns>OK</returns>
		public async Task<API.Models.Role> Roles_GetRoleAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.Role>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a User Role
		/// No Documentation Found.
		/// Roles_PutRole api/v2/Roles/{id}
		/// </summary>
		/// <param name="id">The role's id</param>
		/// <param name="requestBody">The Updated Role</param>
		public async Task Roles_PutRoleAsync(int id, API.Models.Role requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Permissions for a Role
		/// No Documentation Found.
		/// Roles_GetRolePermissions api/v2/Roles/{id}/Permissions
		/// </summary>
		/// <param name="id">The id of the Role</param>
		/// <param name="name">Filter by permission name. Optional.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Roles_GetRolePermissionsAsync(int id, string name, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Permissions?name=" + (name==null? "" : Uri.EscapeDataString(name))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Manage the Permissions for a Role
		/// No Documentation Found.
		/// Roles_PutRolePermissions api/v2/Roles/{id}/Permissions
		/// </summary>
		/// <param name="id">The id of the Role</param>
		/// <param name="requestBody">Permissions Changes for the Role</param>
		public async Task Roles_PutRolePermissionsAsync(int id, API.Models.RolePermissionChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Permissions";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all user's in a role
		/// No Documentation Found.
		/// UserPermissions_GetUsers api/v2/Roles/{id}/Users
		/// </summary>
		/// <param name="id">The Role's ID</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserPermissions_GetUsersAsync(int id, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Users?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Role's users
		/// No Documentation Found.
		/// UserPermissionsPutById api/v2/Roles/{id}/Users
		/// </summary>
		/// <param name="id">The Role's ID</param>
		/// <param name="requestBody">A list of changes to the Role's Users</param>
		public async Task UserPermissionsPutByIdAsync(int id, API.Models.RoleUserChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Roles/"+id+"/Users";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of current Client Subscriptions.
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_GetSubscriptions api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="ClientID">Optional. Filter by Client ID</param>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UpdateGroupClientRelationships_GetSubscriptionsAsync(string ClientID, string UpdateGroupID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a subscription
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PostSubscription api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="requestBody">The UpdateGroupClientRelationship to add.</param>
		/// <returns>OK</returns>
		public async Task<string> UpdateGroupClientRelationships_PostSubscriptionAsync(UpdateSystem.Models.UpdateGroupClientRelationship requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DEPRECATED. Set client subscription status for an update group.
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PutSubscriptionByClientIDUpdateGroupID api/v2/UpdateGroupClientRelationships
		/// </summary>
		/// <param name="ClientID">The Client ID.  This can be a client ID that has not been registered yet.</param>
		/// <param name="UpdateGroupID">The Update Group ID</param>
		/// <param name="Active">Subscribe the client to the Update Group.</param>
		public async Task UpdateGroupClientRelationships_PutSubscriptionByClientIDUpdateGroupIDAsync(string ClientID, string UpdateGroupID, bool Active, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&Active="+Active;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a subscription by RelationshipID
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_GetSubscription api/v2/UpdateGroupClientRelationships/{RelationshipID}
		/// </summary>
		/// <param name="RelationshipID">The RelationshipID.</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.UpdateGroupClientRelationship> UpdateGroupClientRelationships_GetSubscriptionAsync(string RelationshipID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships/"+ (RelationshipID==null? "" : Uri.EscapeDataString(RelationshipID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.UpdateGroupClientRelationship>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Subscription
		/// No Documentation Found.
		/// UpdateGroupClientRelationships_PutSubscription api/v2/UpdateGroupClientRelationships/{RelationshipID}
		/// </summary>
		/// <param name="RelationshipID">The relationship id of the UpdateGroupClientRelationship</param>
		/// <param name="requestBody">The updated UpdateGroupClientRelationship</param>
		public async Task UpdateGroupClientRelationships_PutSubscriptionAsync(string RelationshipID, UpdateSystem.Models.UpdateGroupClientRelationship requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupClientRelationships/"+ (RelationshipID==null? "" : Uri.EscapeDataString(RelationshipID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Update Group Subscriptions
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_GetUpdateGroupSubscriptions api/v2/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="UpdateGroupID">Optional. Filter by Update Group ID.</param>
		/// <param name="PackageTypeID">Optional. Filter by Package Type ID.</param>
		/// <param name="ClientID">Optional. Filter by Client ID.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UpdateGroupSubscriptions_GetUpdateGroupSubscriptionsAsync(string UpdateGroupID, string PackageTypeID, string ClientID, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions?UpdateGroupID=" + (UpdateGroupID==null? "" : Uri.EscapeDataString(UpdateGroupID))+"&PackageTypeID=" + (PackageTypeID==null? "" : Uri.EscapeDataString(PackageTypeID))+"&ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PostUpdateGroupSubscription api/v2/UpdateGroupSubscriptions
		/// </summary>
		/// <param name="requestBody">The Update Group Subscription to add</param>
		/// <returns>OK</returns>
		public async Task<int> UpdateGroupSubscriptions_PostUpdateGroupSubscriptionAsync(UpdateSystem.Models.UpdateGroupSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_DeleteUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID to delete</param>
		public async Task UpdateGroupSubscriptions_DeleteUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_GetUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.UpdateGroupSubscription> UpdateGroupSubscriptions_GetUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.UpdateGroupSubscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Update Group Subscription
		/// No Documentation Found.
		/// UpdateGroupSubscriptions_PutUpdateGroupSubscription api/v2/UpdateGroupSubscriptions/{UpdateGroupSubscriptionID}
		/// </summary>
		/// <param name="UpdateGroupSubscriptionID">The Update Group Subscription ID</param>
		/// <param name="requestBody">The updated Update Group Subscription</param>
		public async Task UpdateGroupSubscriptions_PutUpdateGroupSubscriptionAsync(int UpdateGroupSubscriptionID, UpdateSystem.Models.UpdateGroupSubscription requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroupSubscriptions/"+UpdateGroupSubscriptionID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of Update Groups.  Update Groups are used by the client to register for a specific type of update.
		/// No Documentation Found.
		/// UpdateGroupsGetByLimitAndOffset api/v2/UpdateGroups
		/// </summary>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UpdateGroupsGetByLimitAndOffsetAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new Update Group.  The report field is a string that has a dot based request for a specific piece of submitted data.
		/// No Documentation Found.
		/// UpdateGroups_Post api/v2/UpdateGroups
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> UpdateGroups_PostAsync(UpdateSystem.Models.UpdateGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an Update Group.
		/// No Documentation Found.
		/// UpdateGroups_Delete api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Update Group to Delete</param>
		public async Task UpdateGroups_DeleteAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific Update Group by ID.
		/// No Documentation Found.
		/// UpdateGroupsGetByID api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">The ID of the Update Group</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.UpdateGroup> UpdateGroupsGetByIDAsync(string ID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.UpdateGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify an Update Group.
		/// No Documentation Found.
		/// UpdateGroups_Put api/v2/UpdateGroups/{ID}
		/// </summary>
		/// <param name="ID">ID of the Update Group</param>
		public async Task UpdateGroups_PutAsync(string ID, UpdateSystem.Models.UpdateGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : Uri.EscapeDataString(ID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of bundles for UpdateGroup.
		/// No Documentation Found.
		/// UpdateGroups_GetUpdateGroupBundles api/v2/UpdateGroups/{ID}/Bundles
		/// </summary>
		/// <param name="ID">The UpdateGroupID</param>
		/// <param name="IncludeInactive">Include Inactive Bundles (true|false)</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UpdateGroups_GetUpdateGroupBundlesAsync(string ID, bool IncludeInactive, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateGroups/"+ (ID==null? "" : Uri.EscapeDataString(ID))+"/Bundles&IncludeInactive="+IncludeInactive+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks the Client ID into the Update System.
		/// No Documentation Found.
		/// UpdateSystem_GetCheckin api/v2/UpdateSystem
		/// </summary>
		/// <param name="ClientID">The Client ID to check-in.  If this is a new client ID it will be added to Clients.</param>
		/// <param name="Preview">Get Pkgs w\o updating Datetimes(true|false)</param>
		/// <returns>OK</returns>
		public async Task<UpdateSystem.Models.CheckinResult> UpdateSystem_GetCheckinAsync(string ClientID, bool Preview, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UpdateSystem?ClientID=" + (ClientID==null? "" : Uri.EscapeDataString(ClientID))+"&Preview="+Preview;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateSystem.Models.CheckinResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get UserContentDefinitions
		/// Gets a collection of UserContentDefinitions. When successful, the response is a PagedResponse of UserContentDefinitions.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_GetUserContentDefinitions api/v2/UserContentDefinitions
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="userID">Optional. Filter by UserID.</param>
		/// <param name="contentDefinitionID">Optional. Filter by ContentDefinitionID</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserContentDefinitions_GetUserContentDefinitionsAsync(int limit, int offset, int userID, int contentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions?limit="+limit+"&offset="+offset+"&userID="+userID+"&contentDefinitionID="+contentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a UserContentDefinition
		/// Creates a UserContentDefinition.  The body of the POST is the UserContentDefinition to create.
		/// The UserContentDefinitionID will be assigned on creation of the Job.  When successful, the response
		/// is the UserContentDefinitionID.  If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_PostUserContentDefinition api/v2/UserContentDefinitions
		/// </summary>
		/// <param name="requestBody">The UserContentDefinition to create.</param>
		/// <returns>OK</returns>
		public async Task<int> UserContentDefinitions_PostUserContentDefinitionAsync(ContentSubmission.Shared.BusinessEntities.UserContentDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a UserContentDefinition
		/// Deletes an UserContentDefinition. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// UserContentDefinitions_DeleteUserContentDefinition api/v2/UserContentDefinitions/{userContentDefinitionID}
		/// </summary>
		/// <param name="userContentDefinitionID">The ID of the UserContentDefinition to delete</param>
		public async Task UserContentDefinitions_DeleteUserContentDefinitionAsync(int userContentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions/"+userContentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a UserContentDefinition by ID
		/// Gets a UserContentDefinition by ID. When successful, the response is the requested UserContentDefinition.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// UserContentDefinitions_GetUserContentDefinition api/v2/UserContentDefinitions/{userContentDefinitionID}
		/// </summary>
		/// <param name="userContentDefinitionID">The ID of the UserContentDefinition to get.</param>
		/// <returns>OK</returns>
		public async Task<ContentSubmission.Shared.BusinessEntities.UserContentDefinition> UserContentDefinitions_GetUserContentDefinitionAsync(int userContentDefinitionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/UserContentDefinitions/"+userContentDefinitionID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ContentSubmission.Shared.BusinessEntities.UserContentDefinition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users
		/// No Documentation Found.
		/// UsersGetByUsernameAndEmailAndNameAndLimitAndOffset api/v2/Users
		/// </summary>
		/// <param name="username">Optional. Search by username. Supports beginning and ending wildcards (*).</param>
		/// <param name="email">Optional. Search by email. Supports beginning and ending wildcards (*).</param>
		/// <param name="name">Optional. Search by name. Supports beginning and ending wildcards (*).</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UsersGetByUsernameAndEmailAndNameAndLimitAndOffsetAsync(string username, string email, string name, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users?username=" + (username==null? "" : Uri.EscapeDataString(username))+"&email=" + (email==null? "" : Uri.EscapeDataString(email))+"&name=" + (name==null? "" : Uri.EscapeDataString(name))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a user
		/// No Documentation Found.
		/// Users_Post api/v2/Users
		/// </summary>
		/// <param name="requestBody">The user to create.</param>
		/// <returns>OK</returns>
		public async Task<API.Models.User> Users_PostAsync(API.Models.User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current user
		/// No Documentation Found.
		/// Users_GetCurrentUser api/v2/Users/Current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API.Models.User> Users_GetCurrentUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// No Documentation Found.
		/// Users_PutCurrentUser api/v2/Users/Current
		/// </summary>
		/// <param name="requestBody">The user</param>
		public async Task Users_PutCurrentUserAsync(API.Models.User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a user's permissions
		/// No Documentation Found.
		/// UserPermissionsGetByPermissionAndLimitAndOffset api/v2/Users/Current/Permissions
		/// </summary>
		/// <param name="Permission">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserPermissionsGetByPermissionAndLimitAndOffsetAsync(string Permission, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current/Permissions?Permission=" + (Permission==null? "" : Uri.EscapeDataString(Permission))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the current user's roles
		/// No Documentation Found.
		/// UserPermissions_GetCurrentUserRoles api/v2/Users/Current/Roles
		/// </summary>
		/// <param name="Role">Filter by role name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserPermissions_GetCurrentUserRolesAsync(string Role, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/Current/Roles?Role=" + (Role==null? "" : Uri.EscapeDataString(Role))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a user
		/// No Documentation Found.
		/// Users_Delete api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user id</param>
		public async Task Users_DeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific user
		/// No Documentation Found.
		/// UsersGetById api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user ID</param>
		/// <returns>OK</returns>
		public async Task<API.Models.User> UsersGetByIdAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.Models.User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// No Documentation Found.
		/// Users_Put api/v2/Users/{id}
		/// </summary>
		/// <param name="id">The user id</param>
		/// <param name="requestBody">The user</param>
		public async Task Users_PutAsync(int id, API.Models.User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a user's permissions
		/// No Documentation Found.
		/// UserPermissionsGetByIdAndPermissionAndLimitAndOffset api/v2/Users/{id}/Permissions
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="Permission">Filter by permission name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserPermissionsGetByIdAndPermissionAndLimitAndOffsetAsync(int id, string Permission, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Permissions?Permission=" + (Permission==null? "" : Uri.EscapeDataString(Permission))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a user's roles
		/// No Documentation Found.
		/// UserPermissions_GetRoles api/v2/Users/{id}/Roles
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="Role">Filter by role name. Supports ending wildcard (*). Optional.</param>
		/// <param name="limit">The page limit. The default page limit is 10.</param>
		/// <param name="offset">The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> UserPermissions_GetRolesAsync(int id, string Role, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Roles?Role=" + (Role==null? "" : Uri.EscapeDataString(Role))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user's roles
		/// No Documentation Found.
		/// UserPermissionsPutById api/v2/Users/{id}/Roles
		/// </summary>
		/// <param name="id">The User's ID</param>
		/// <param name="requestBody">A list of changes to the User's Roles</param>
		public async Task UserPermissionsPutByIdAsync(int id, API.Models.UserRoleChange[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Users/"+id+"/Roles";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets voucher history data
		/// No Documentation Found.
		/// VoucherHistory_GetVoucherHistory api/v2/VoucherHistory
		/// </summary>
		/// <param name="VoucherCode">Optional. Filter history data by Voucher Code.</param>
		/// <param name="ChangedBefore">Optional. Filter history data where changes occured before provided date.</param>
		/// <param name="ChangedAfter">Optional. Filter history data where changes occured after provided date.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> VoucherHistory_GetVoucherHistoryAsync(string VoucherCode, System.DateTimeOffset ChangedBefore, System.DateTimeOffset ChangedAfter, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/VoucherHistory?VoucherCode=" + (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode))+"&ChangedBefore=" + ChangedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ChangedAfter=" + ChangedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of vouchers
		/// No Documentation Found.
		/// VouchersGetByTypeAndDealerCodeAndLicenseToAndPurposeAndOrderNumberAndEmailAndModifiedByAndCreatedAfterAndCreatedBeforeAndPunchedAfterAndPunchedBeforeAndPunchedAndExpirationAfterAndExpirationBeforeAndDeletedAndLimitAndOffset api/v2/Vouchers
		/// </summary>
		/// <param name="Type">Optional. Filter vouchers by Type</param>
		/// <param name="DealerCode">Optional. Filter vouchers by DealerCode</param>
		/// <param name="LicenseTo">Optional. Filter vouchers by LicenseTo. Wildcard supported (*).</param>
		/// <param name="Purpose">Optional. Filter vouchers by Purpose. Wildcard supported (*).</param>
		/// <param name="OrderNumber">Optional. Filter vouchers by OrderNumber</param>
		/// <param name="Email">Optional. Filter vouchers by Email. Wildcard supported (*).</param>
		/// <param name="ModifiedBy">Optional. Filter vouchers by ModifiedBy</param>
		/// <param name="CreatedAfter">Optional. Filter vouchers by CreatedDate</param>
		/// <param name="CreatedBefore">Optional. Filter vouchers by CreatedDate</param>
		/// <param name="PunchedAfter">Optional. Filter vouchers by PunchedDate</param>
		/// <param name="PunchedBefore">Optional. Filter vouchers by PunchedDate</param>
		/// <param name="Punched">Optional. Filter vouchers by Punched status</param>
		/// <param name="ExpirationAfter">Optional. Filter vouchers by ExpirationDate</param>
		/// <param name="ExpirationBefore">Optional. Filter vouchers by ExpirationDate</param>
		/// <param name="Deleted">Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> VouchersGetByTypeAndDealerCodeAndLicenseToAndPurposeAndOrderNumberAndEmailAndModifiedByAndCreatedAfterAndCreatedBeforeAndPunchedAfterAndPunchedBeforeAndPunchedAndExpirationAfterAndExpirationBeforeAndDeletedAndLimitAndOffsetAsync(
					DealerDB.Models.VoucherType Type, 
					string DealerCode, 
					string LicenseTo, 
					string Purpose, 
					string OrderNumber, 
					string Email, 
					string ModifiedBy, 
					System.DateTimeOffset CreatedAfter, 
					System.DateTimeOffset CreatedBefore, 
					System.DateTimeOffset PunchedAfter, 
					System.DateTimeOffset PunchedBefore, 
					bool Punched, 
					System.DateTimeOffset ExpirationAfter, 
					System.DateTimeOffset ExpirationBefore, 
					string Deleted, 
					int limit, 
					int offset, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers?Type=" + Type+"&DealerCode=" + (DealerCode==null? "" : Uri.EscapeDataString(DealerCode))+"&LicenseTo=" + (LicenseTo==null? "" : Uri.EscapeDataString(LicenseTo))+"&Purpose=" + (Purpose==null? "" : Uri.EscapeDataString(Purpose))+"&OrderNumber=" + (OrderNumber==null? "" : Uri.EscapeDataString(OrderNumber))+"&Email=" + (Email==null? "" : Uri.EscapeDataString(Email))+"&ModifiedBy=" + (ModifiedBy==null? "" : Uri.EscapeDataString(ModifiedBy))+"&CreatedAfter=" + CreatedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&CreatedBefore=" + CreatedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PunchedAfter=" + PunchedAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&PunchedBefore=" + PunchedBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Punched="+Punched+"&ExpirationAfter=" + ExpirationAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ExpirationBefore=" + ExpirationBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Deleted=" + (Deleted==null? "" : Uri.EscapeDataString(Deleted))+"&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a voucher
		/// No Documentation Found.
		/// Vouchers_Post api/v2/Vouchers
		/// </summary>
		/// <param name="requestBody">The voucher to add.</param>
		/// <returns>OK</returns>
		public async Task<string> Vouchers_PostAsync(DealerDB.Models.Voucher requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a voucher
		/// No Documentation Found.
		/// Vouchers_Delete api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to delete.</param>
		public async Task Vouchers_DeleteAsync(string VoucherCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a voucher
		/// No Documentation Found.
		/// VouchersGetByVoucherCodeAndDeleted api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to get.</param>
		/// <param name="Deleted">Optional. Filter vouchers by Deleted state. By default only vouchers that are not deleted are returned.</param>
		/// <returns>OK</returns>
		public async Task<DealerDB.Models.Voucher> VouchersGetByVoucherCodeAndDeletedAsync(string VoucherCode, string Deleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode))+"&Deleted=" + (Deleted==null? "" : Uri.EscapeDataString(Deleted));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DealerDB.Models.Voucher>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a voucher
		/// No Documentation Found.
		/// Vouchers_Put api/v2/Vouchers/{VoucherCode}
		/// </summary>
		/// <param name="VoucherCode">The voucher code of the voucher to update.</param>
		/// <param name="requestBody">The updated voucher.</param>
		public async Task Vouchers_PutAsync(string VoucherCode, DealerDB.Models.Voucher requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a voucher's history.
		/// No Documentation Found.
		/// Vouchers_GetVoucherHistory api/v2/Vouchers/{VoucherCode}/VoucherHistory
		/// </summary>
		/// <param name="VoucherCode">The voucher code to get history for.</param>
		/// <param name="limit">Optional. The page limit. The default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset. The default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Vouchers_GetVoucherHistoryAsync(string VoucherCode, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/Vouchers/"+ (VoucherCode==null? "" : Uri.EscapeDataString(VoucherCode))+"/VoucherHistory&limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Activities
		/// Gets a collection of Activities. When successful, the response is a PagedResponse of Activities.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Activities_GetActivities api/v2/activities
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="isIncludeDeleted">Does it include deleted activity, or not</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Activities_GetActivitiesAsync(int limit, int offset, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities?limit="+limit+"&offset="+offset+"&isIncludeDeleted="+isIncludeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Activity
		/// Creates an Activity.  The body of the POST is the Activity to create.  The ActivityID will be assigned
		/// on creation of the Activity.  When successful, the response is the ActivityID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Activities_PostActivity api/v2/activities
		/// </summary>
		/// <param name="requestBody">The activity to create.  The ActivityID will be assigned on creation of the Activity.</param>
		/// <returns>OK</returns>
		public async Task<int> Activities_PostActivityAsync(BuildSystem.Shared.DTO.Activity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the delete flag for the Activity
		/// Deletes an Activity. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Activities_DeleteActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The id of the activity to delete</param>
		public async Task Activities_DeleteActivityAsync(int activityID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Activity by ID
		/// Gets an Activity by ID. When successful, the response is the requested Activity.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Activities_GetActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The ID of the Activity to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted activity, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.Activity> Activities_GetActivityAsync(int activityID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.Activity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Activity
		/// Updates an Activity.  The body of the PUT is the updated Activity.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Activities_PutActivity api/v2/activities/{activityID}
		/// </summary>
		/// <param name="activityID">The id of the activity to update</param>
		/// <param name="requestBody">The updated activity</param>
		public async Task Activities_PutActivityAsync(int activityID, BuildSystem.Shared.DTO.Activity requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activities/"+activityID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get ActivityRuns
		/// Gets a collection of ActivityRuns. When successful, the response is a PagedResponse of ActivityRuns.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRuns api/v2/activityRuns
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="status">Optional. Filter activity runs by status.  Value should be a comma separated list of status to include.
		///            If not specified, the default status filter is “InProgress”.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> ActivityRuns_GetActivityRunsAsync(int limit, int offset, BuildSystem.Shared.DTO.ActivityRunStatusStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns?limit="+limit+"&offset="+offset+"&status=" + status;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an ActivityRun by ID
		/// Gets an ActivityRun by ID. When successful, the response is the requested ActivityRun.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRun api/v2/activityRuns/{activityRunID}
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.ActivityRun> ActivityRuns_GetActivityRunAsync(int activityRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.ActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an ActivityRun
		/// Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_PutActivityRun api/v2/activityRuns/{activityRunID}
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to update ActivityRunStatus for.</param>
		/// <param name="requestBody">The updated ActivityRun.</param>
		public async Task ActivityRuns_PutActivityRunAsync(int activityRunID, BuildSystem.Shared.DTO.ActivityRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the ActivityRunStatus of an ActivityRun
		/// Gets the ActivityRunStatus of an ActivityRun.  When successful, the response is the requested ActivityRunStatus.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_GetActivityRunStatus api/v2/activityRuns/{activityRunID}/status
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to get ActivityRunStatus for.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.ActivityRunStatus> ActivityRuns_GetActivityRunStatusAsync(int activityRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID+"/status";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.ActivityRunStatus>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the ActivityRunStatus of an ActivityRun
		/// Updates the ActivityRunStatus of an ActivityRun.  The body of the PUT is the updated ActivityRunStatus.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// ActivityRuns_PutActivityRunStatus api/v2/activityRuns/{activityRunID}/status
		/// </summary>
		/// <param name="activityRunID">The ID of the ActivityRun to update ActivityRunStatus for.</param>
		/// <param name="requestBody">The updated ActivityRunStatus.</param>
		public async Task ActivityRuns_PutActivityRunStatusAsync(int activityRunID, BuildSystem.Shared.DTO.ActivityRunStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/activityRuns/"+activityRunID+"/status";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Agents
		/// Gets a collection of Agents. When successful, the response is a PagedResponse of Agents.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetAgents api/v2/agents
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Agents_GetAgentsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents?limit="+limit+"&offset="+offset;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an Agent
		/// Creates an Agent.  The body of the POST is the Agent to create.  The AgentID will be assigned
		/// on creation of the Agent.  When successful, the response is the AgentID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Agents_PostAgent api/v2/agents
		/// </summary>
		/// <param name="requestBody">The Agent to create.  The AgentID will be assigned on creation of the Agent.</param>
		/// <returns>OK</returns>
		public async Task<int> Agents_PostAgentAsync(BuildSystem.Shared.DTO.Agent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Agent associated with the current user
		/// Gets the Agent associated with the current user. When successful, the response is the requested Agent.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Agents_GetCurrentAgent api/v2/agents/Current
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.Agent> Agents_GetCurrentAgentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/Current";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.Agent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the ActivityRun of Agent associated with the current user
		/// Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
		/// assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetCurrentAgentActivityRun api/v2/agents/Current/ActivityRun
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.ActivityRun> Agents_GetCurrentAgentActivityRunAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/Current/ActivityRun";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.ActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Agent
		/// Deletes an Agent. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Agents_DeleteAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to delete.</param>
		public async Task Agents_DeleteAgentAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Agent
		/// Gets an Agent by ID. When successful, the response is the requested Agent.  If unsuccessful,
		/// an appropriate ApiError is returned.
		/// Agents_GetAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.Agent> Agents_GetAgentAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.Agent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Agent
		/// Updates an Agent.  The body of the PUT is the updated Agent.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Agents_PutAgent api/v2/agents/{agentID}
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The updated Agent</param>
		public async Task Agents_PutAgentAsync(int agentID, BuildSystem.Shared.DTO.Agent requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get an Agent's ActivityRun
		/// Gets the activity run assigned to an agent.  When successful, the response is the ActivityRun
		/// assigned to the Agent.  If unsuccessful, an appropriate ApiError is returned.
		/// Agents_GetAgentActivityRun api/v2/agents/{agentID}/ActivityRun
		/// </summary>
		/// <param name="agentID">The id of the Agent to get.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.ActivityRun> Agents_GetAgentActivityRunAsync(int agentID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/ActivityRun";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.ActivityRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the ActivityRun assigned to the Agent.
		/// No Documentation Found.
		/// Agents_PutAgentActivityRun api/v2/agents/{agentID}/ActivityRun
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The ActivityRun assigned to the agent.  Only the ActivityRunID is used.</param>
		public async Task Agents_PutAgentActivityRunAsync(int agentID, BuildSystem.Shared.DTO.ActivityRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/ActivityRun";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an Agent
		/// Updates the status of an Agent.The body of the PUT is the updated Agent status.  When successful,
		/// the response is empty.If unsuccessful, an appropriate ApiError is returned.
		/// Agents_PutAgentStatus api/v2/agents/{agentID}/Status
		/// </summary>
		/// <param name="agentID">The id of the Agent to update.</param>
		/// <param name="requestBody">The updated AgentStatus.</param>
		public async Task Agents_PutAgentStatusAsync(int agentID, BuildSystem.Shared.DTO.AgentStatus requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/agents/"+agentID+"/Status";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get JobRuns
		/// Gets a collection of JobRuns. When successful, the response is a PagedResponse of JobRuns.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_GetJobRuns api/v2/jobRuns
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="includeActivityRunDetails">Optional. Indicates whether to include ActivityRun details.  Defaults to false.</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> JobRuns_GetJobRunsAsync(int limit, int offset, bool includeActivityRunDetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns?limit="+limit+"&offset="+offset+"&includeActivityRunDetails="+includeActivityRunDetails;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a JobRun
		/// Creates a JobRun.  The body of the POST is the JobRun to create.  The JobRunID will be assigned on
		/// creation of the JobRun.  When successful, the response is the JobRunID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// JobRuns_PostJobRun api/v2/jobRuns
		/// </summary>
		/// <param name="requestBody">The JobRun to create.  The JobRunID will be assigned on creation of the JobRun.</param>
		/// <returns>OK</returns>
		public async Task<int> JobRuns_PostJobRunAsync(BuildSystem.Shared.DTO.JobRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a JobRun
		/// Deletes a JobRun. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// JobRuns_DeleteJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The id of the JobRun to delete</param>
		public async Task JobRuns_DeleteJobRunAsync(int jobRunID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a JobRun by ID
		/// Gets a JobRun by ID. When successful, the response is the requested JobRun.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_GetJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The ID of the JobRun to get.</param>
		/// <param name="includeActivityRunDetails">Optional. Indicates whether to include ActivityRun details.  Defaults to false.</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.JobRun> JobRuns_GetJobRunAsync(int jobRunID, bool includeActivityRunDetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID+"?includeActivityRunDetails="+includeActivityRunDetails;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.JobRun>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a JobRun
		/// ///
		/// Updates a JobRun.  The body of the PUT is the updated JobRun.
		/// When successful, the response is empty.  If unsuccessful, an appropriate ApiError is returned.
		/// JobRuns_PutJobRun api/v2/jobRuns/{jobRunID}
		/// </summary>
		/// <param name="jobRunID">The id of the JobRun to update</param>
		/// <param name="requestBody">The updated JobRun</param>
		public async Task JobRuns_PutJobRunAsync(int jobRunID, BuildSystem.Shared.DTO.JobRun requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobRuns/"+jobRunID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Jobs
		/// Gets a collection of Jobs. When successful, the response is a PagedResponse of Jobs.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// ///
		/// Jobs_GetJobs api/v2/jobs
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="isIncludeDeleted">Does it include deleted job, or not</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Jobs_GetJobsAsync(int limit, int offset, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs?limit="+limit+"&offset="+offset+"&isIncludeDeleted="+isIncludeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Job
		/// Creates a Job.  The body of the POST is the Job to create.  The JobID will be assigned on
		/// creation of the Job.  When successful, the response is the JobID.  If unsuccessful, an
		/// appropriate ApiError is returned.
		/// Jobs_PostJob api/v2/jobs
		/// </summary>
		/// <param name="requestBody">The job to create.  The JobID will be assigned on creation of the Job.</param>
		/// <returns>OK</returns>
		public async Task<int> Jobs_PostJobAsync(BuildSystem.Shared.DTO.Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the delete flag for the Job
		/// Deletes a Job. When successful, the response is empty.  If unsuccessful, an appropriate
		/// ApiError is returned.
		/// Jobs_DeleteJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The id of the job to delete</param>
		public async Task Jobs_DeleteJobAsync(int jobID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Job by ID
		/// Gets a Job by ID. When successful, the response is the requested Job.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Jobs_GetJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The ID of the Job to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted job, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.Job> Jobs_GetJobAsync(int jobID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Job
		/// Updates a Job.  The body of the PUT is the updated Job.  When successful, the response is empty.
		/// If unsuccessful, an appropriate ApiError is returned.
		/// Jobs_PutJob api/v2/jobs/{jobID}
		/// </summary>
		/// <param name="jobID">The id of the job to update</param>
		/// <param name="requestBody">The updated job</param>
		public async Task Jobs_PutJobAsync(int jobID, BuildSystem.Shared.DTO.Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/jobs/"+jobID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Steps
		/// Gets a collection of Steps. When successful, the response is a PagedResponse of Steps.
		/// If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required.
		/// Steps_GetSteps api/v2/steps
		/// </summary>
		/// <param name="limit">Optional. The page limit.  If not specified, the default page limit is 10.</param>
		/// <param name="offset">Optional. The page offset.  If not specified, the default page offset is 0.</param>
		/// <param name="includeDeleted">Does it include deleted step, or not</param>
		/// <returns>OK</returns>
		public async Task<API.PagedResponse> Steps_GetStepsAsync(int limit, int offset, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps?limit="+limit+"&offset="+offset+"&includeDeleted="+includeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<API.PagedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Step
		/// No Documentation Found.
		/// Steps_PostStep api/v2/steps
		/// </summary>
		/// <param name="requestBody">The step to create</param>
		/// <returns>OK</returns>
		public async Task<int> Steps_PostStepAsync(BuildSystem.Shared.DTO.Step requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Step by ID
		/// Gets a Step by ID. When successful, the response is the requested Step.
		/// If unsuccessful, an appropriate ApiError is returned.  Steps.Read permission is required.
		/// Steps_GetStep api/v2/steps/{stepID}
		/// </summary>
		/// <param name="stepID">The ID of the Step to get.</param>
		/// <param name="isIncludeDeleted">Does it include deleted step, or not</param>
		/// <returns>OK</returns>
		public async Task<BuildSystem.Shared.DTO.Step> Steps_GetStepAsync(int stepID, bool isIncludeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps/"+stepID+"?isIncludeDeleted="+isIncludeDeleted;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BuildSystem.Shared.DTO.Step>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Step
		/// No Documentation Found.
		/// Steps_PutStep api/v2/steps/{stepID}
		/// </summary>
		/// <param name="stepID">The step ID of the step to update</param>
		/// <param name="requestBody">The updated step</param>
		public async Task Steps_PutStepAsync(int stepID, BuildSystem.Shared.DTO.Step requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/steps/"+stepID;
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
