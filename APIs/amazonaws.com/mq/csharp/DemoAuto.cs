//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 6,
	}
	
	/// <summary>
	/// An ActiveMQ user associated with the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Returns information about the specified configuration revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstance[] BrokerInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		/// <summary>
		/// The status of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeBrokerResponseBrokerState BrokerState { get; set; }
		
		/// <summary>
		/// Broker configuration information
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Configurations Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The deployment mode of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeBrokerResponseDeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// Encryption options for the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionOptions EncryptionOptions { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeBrokerResponseEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs currently enabled and pending to be deployed for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsSummary Logs { get; set; }
		
		/// <summary>
		/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PendingEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PendingHostInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] PendingSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The storage type of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeBrokerResponseStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSummary[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeBrokerResponseBrokerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOT_IN_PROGRESS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeBrokerResponseDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeBrokerResponseEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeBrokerResponseStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBrokerEngineTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerEngineType[] BrokerEngineTypes { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBrokerInstanceOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstanceOption[] BrokerInstanceOptions { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeConfigurationResponseEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Returns information about the specified configuration revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeConfigurationResponseEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConfigurationRevisionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		/// <summary>
		/// Returns information about the status of the changes pending for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPendingChanges Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBrokersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BrokerSummary[] BrokerSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListConfigurationRevisionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision[] Revisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListConfigurationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserSummary[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBrokerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Returns information about the specified configuration revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SanitizationWarning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Name of the availability zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	/// <summary>
	/// Types of broker engines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrokerEngineType
	{
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BrokerEngineTypeEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineVersion[] EngineVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerEngineTypeEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	/// <summary>
	/// Returns information about all brokers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrokerInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConsoleURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	/// <summary>
	/// The storage type of the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	/// <summary>
	/// Option for host instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrokerInstanceOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstanceOptionEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The storage type of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BrokerInstanceOptionStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeploymentMode[] SupportedDeploymentModes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SupportedEngineVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerInstanceOptionEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerInstanceOptionStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	/// <summary>
	/// The status of the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOT_IN_PROGRESS = 4,
	}
	
	/// <summary>
	/// The deployment mode of the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
	}
	
	/// <summary>
	/// The Amazon Resource Name (ARN) of the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BrokerSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		/// <summary>
		/// The status of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BrokerSummaryBrokerState BrokerState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The deployment mode of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BrokerSummaryDeploymentMode DeploymentMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerSummaryBrokerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETION_IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REBOOT_IN_PROGRESS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BrokerSummaryDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
	}
	
	/// <summary>
	/// The type of change pending for the ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	/// <summary>
	/// Returns information about the specified configuration revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationRevision
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Returns information about all configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Configuration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Returns information about the specified configuration revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationRevision LatestRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConfigurationEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	/// <summary>
	/// A list of information about the configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfigurationId
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
	}
	
	/// <summary>
	/// Broker configuration information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Configurations
	{
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Current { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId[] History { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Pending { get; set; }
	}
	
	/// <summary>
	/// Encryption options for the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UseAwsOwnedKey { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs to be enabled for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Logs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	/// <summary>
	/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WeeklyStartTime
	{
		
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTimeDayOfWeek DayOfWeek { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeOfDay { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WeeklyStartTimeDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 6,
	}
	
	/// <summary>
	/// Creates a broker using the specified properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBrokerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		/// <summary>
		/// The deployment mode of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerRequestDeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// Encryption options for the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionOptions EncryptionOptions { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerRequestEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		/// <summary>
		/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WeeklyStartTime MaintenanceWindowStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The storage type of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerRequestStorageType StorageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerRequestDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerRequestEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerRequestStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	/// <summary>
	/// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationRequest
	{
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateConfigurationRequestEngineType EngineType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateConfigurationRequestEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	/// <summary>
	/// A map of the key-value pairs for the resource tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// Creates a new ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs currently enabled and pending to be deployed for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogsSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AuditLogGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GeneralLogGroup { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingLogs Pending { get; set; }
	}
	
	/// <summary>
	/// Returns information about the status of the changes pending for the ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserPendingChanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		/// <summary>
		/// The type of change pending for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserPendingChangesPendingChange PendingChange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserPendingChangesPendingChange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	/// <summary>
	/// Id of the engine version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EngineVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The list of information about logs to be enabled for the specified broker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingLogs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Audit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> General { get; set; }
	}
	
	/// <summary>
	/// The reason for which the XML elements or attributes were sanitized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SanitizationWarningReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ELEMENT_REMOVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ATTRIBUTE_REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ATTRIBUTE_VALUE_REMOVED = 2,
	}
	
	/// <summary>
	/// Returns information about the XML element or attribute that was sanitized in the configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SanitizationWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElementName { get; set; }
		
		/// <summary>
		/// The reason for which the XML elements or attributes were sanitized.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SanitizationWarningReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SanitizationWarningReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ELEMENT_REMOVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOWED_ATTRIBUTE_REMOVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ATTRIBUTE_VALUE_REMOVED = 2,
	}
	
	/// <summary>
	/// Updates the broker using the specified properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBrokerRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConfigurationId Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Logs Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
	}
	
	/// <summary>
	/// Updates the specified configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Updates the information for an ActiveMQ user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Returns a list of all ActiveMQ users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserSummary
	{
		
		/// <summary>
		/// The type of change pending for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserSummaryPendingChange PendingChange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UserSummaryPendingChange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a broker. Note: This API is asynchronous.
		/// CreateBroker /v1/brokers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateBrokerResponse> CreateBrokerAsync(CreateBrokerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateBrokerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all brokers.
		/// ListBrokers /v1/brokers
		/// </summary>
		/// <param name="maxResults">The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListBrokersResponse> ListBrokersAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBrokersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).
		/// CreateConfiguration /v1/configurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConfigurationResponse> CreateConfigurationAsync(CreateConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all configurations.
		/// ListConfigurations /v1/configurations
		/// </summary>
		/// <param name="maxResults">The maximum number of configurations that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigurationsResponse> ListConfigurationsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListConfigurationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag to a resource.
		/// CreateTags /v1/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		public async Task CreateTagsAsync(string resource_arn, CreateTagsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists tags for a resource.
		/// ListTags /v1/tags/{resource_arn}
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsResponse> ListTagsAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an ActiveMQ user.
		/// CreateUser /v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(string broker_id, string username, CreateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/users/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an ActiveMQ user.
		/// DeleteUser /v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<DeleteUserResponse> DeleteUserAsync(string broker_id, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/users/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about an ActiveMQ user.
		/// DescribeUser /v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<DescribeUserResponse> DescribeUserAsync(string broker_id, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/users/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the information for an ActiveMQ user.
		/// UpdateUser /v1/brokers/{broker_id}/users/{username}
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="username">Required. The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</param>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(string broker_id, string username, UpdateUserBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/users/"+ (username==null? "" : Uri.EscapeDataString(username));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a broker. Note: This API is asynchronous.
		/// DeleteBroker /v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters.</param>
		/// <returns>Success</returns>
		public async Task<DeleteBrokerResponse> DeleteBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteBrokerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified broker.
		/// DescribeBroker /v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerResponse> DescribeBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBrokerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a pending configuration change to a broker.
		/// UpdateBroker /v1/brokers/{broker_id}
		/// </summary>
		/// <param name="broker_id">The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters.</param>
		/// <returns>Success</returns>
		public async Task<UpdateBrokerResponse> UpdateBrokerAsync(string broker_id, UpdateBrokerBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateBrokerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a tag from a resource.
		/// DeleteTags /v1/tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="resource_arn">The Amazon Resource Name (ARN) of the resource tag.</param>
		/// <param name="tagKeys">An array of tag keys to delete</param>
		public async Task DeleteTagsAsync(string resource_arn, @__string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe available engine types and versions.
		/// DescribeBrokerEngineTypes /v1/broker-engine-types
		/// </summary>
		/// <param name="engineType">Filter response by engine type.</param>
		/// <param name="maxResults">The maximum number of engine types that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerEngineTypesResponse> DescribeBrokerEngineTypesAsync(string engineType, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/broker-engine-types?engineType=" + (engineType==null? "" : Uri.EscapeDataString(engineType))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBrokerEngineTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describe available broker instance options.
		/// DescribeBrokerInstanceOptions /v1/broker-instance-options
		/// </summary>
		/// <param name="engineType">Filter response by engine type.</param>
		/// <param name="hostInstanceType">Filter response by host instance type.</param>
		/// <param name="maxResults">The maximum number of instance options that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <param name="storageType">Filter response by storage type.</param>
		/// <returns>Success</returns>
		public async Task<DescribeBrokerInstanceOptionsResponse> DescribeBrokerInstanceOptionsAsync(string engineType, string hostInstanceType, int maxResults, string nextToken, string storageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/broker-instance-options?engineType=" + (engineType==null? "" : Uri.EscapeDataString(engineType))+"&hostInstanceType=" + (hostInstanceType==null? "" : Uri.EscapeDataString(hostInstanceType))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&storageType=" + (storageType==null? "" : Uri.EscapeDataString(storageType));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeBrokerInstanceOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified configuration.
		/// DescribeConfiguration /v1/configurations/{configuration_id}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationResponse> DescribeConfigurationAsync(string configuration_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations/"+ (configuration_id==null? "" : Uri.EscapeDataString(configuration_id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified configuration.
		/// UpdateConfiguration /v1/configurations/{configuration_id}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <returns>Success</returns>
		public async Task<UpdateConfigurationResponse> UpdateConfigurationAsync(string configuration_id, UpdateConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations/"+ (configuration_id==null? "" : Uri.EscapeDataString(configuration_id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the specified configuration revision for the specified configuration.
		/// DescribeConfigurationRevision /v1/configurations/{configuration_id}/revisions/{configuration_revision}
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <param name="configuration_revision">The revision of the configuration.</param>
		/// <returns>Success</returns>
		public async Task<DescribeConfigurationRevisionResponse> DescribeConfigurationRevisionAsync(string configuration_id, string configuration_revision, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations/"+ (configuration_id==null? "" : Uri.EscapeDataString(configuration_id))+"/revisions/"+ (configuration_revision==null? "" : Uri.EscapeDataString(configuration_revision));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeConfigurationRevisionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all revisions for the specified configuration.
		/// ListConfigurationRevisions /v1/configurations/{configuration_id}/revisions
		/// </summary>
		/// <param name="configuration_id">The unique ID that Amazon MQ generates for the configuration.</param>
		/// <param name="maxResults">The maximum number of configurations that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListConfigurationRevisionsResponse> ListConfigurationRevisionsAsync(string configuration_id, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/configurations/"+ (configuration_id==null? "" : Uri.EscapeDataString(configuration_id))+"/revisions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListConfigurationRevisionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all ActiveMQ users.
		/// ListUsers /v1/brokers/{broker_id}/users
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <param name="maxResults">The maximum number of ActiveMQ users that can be returned per page (20 by default). This value must be an integer from 5 to 100.</param>
		/// <param name="nextToken">The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</param>
		/// <returns>Success</returns>
		public async Task<ListUsersResponse> ListUsersAsync(string broker_id, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/users&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reboots a broker. Note: This API is asynchronous.
		/// RebootBroker /v1/brokers/{broker_id}/reboot
		/// </summary>
		/// <param name="broker_id">The unique ID that Amazon MQ generates for the broker.</param>
		/// <returns>Success</returns>
		public async Task<RebootBrokerResponse> RebootBrokerAsync(string broker_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/v1/brokers/"+ (broker_id==null? "" : Uri.EscapeDataString(broker_id))+"/reboot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RebootBrokerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBrokerBody
	{
		
		/// <summary>
		/// Required. Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. The automatic upgrades occur during the maintenance window of the broker or after a manual broker reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// Required. The name of the broker. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain whitespaces, brackets, wildcard characters, or special characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BrokerName { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		/// <summary>
		/// The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CreatorRequestId { get; set; }
		
		/// <summary>
		/// The deployment mode of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerBodyDeploymentMode DeploymentMode { get; set; }
		
		/// <summary>
		/// Encryption options for the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EncryptionOptions { get; set; }
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerBodyEngineType EngineType { get; set; }
		
		/// <summary>
		/// Required. The version of the broker engine. For a list of supported engine versions, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required. The broker's instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Logs { get; set; }
		
		/// <summary>
		/// The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceWindowStartTime { get; set; }
		
		/// <summary>
		/// Required. Enables connections from applications outside of the VPC that hosts the broker's subnets.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		/// <summary>
		/// The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The storage type of the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBrokerBodyStorageType StorageType { get; set; }
		
		/// <summary>
		/// The list of groups (2 maximum) that define which subnets and IP ranges the broker can use from different Availability Zones. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ deployment requires two subnets.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Create tags when creating the broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Required. The list of ActiveMQ users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerBodyDeploymentMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_INSTANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE_STANDBY_MULTI_AZ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerBodyEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBrokerBodyStorageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateConfigurationBody
	{
		
		/// <summary>
		/// The type of broker engine. Note: Currently, Amazon MQ supports only ActiveMQ.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateConfigurationBodyEngineType EngineType { get; set; }
		
		/// <summary>
		/// Required. The version of the broker engine. For a list of supported engine versions, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Create tags when creating the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateConfigurationBodyEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVEMQ = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsBody
	{
		
		/// <summary>
		/// The key-value pair for the resource tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUserBody
	{
		
		/// <summary>
		/// Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		/// <summary>
		/// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		/// <summary>
		/// Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUserBody
	{
		
		/// <summary>
		/// Enables access to the the ActiveMQ Web Console for the ActiveMQ user.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsoleAccess { get; set; }
		
		/// <summary>
		/// The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Groups { get; set; }
		
		/// <summary>
		/// The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateBrokerBody
	{
		
		/// <summary>
		/// Enables automatic upgrades to new minor versions for brokers, as Apache releases the versions. The automatic upgrades occur during the maintenance window of the broker or after a manual broker reboot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		/// <summary>
		/// A list of information about the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Configuration { get; set; }
		
		/// <summary>
		/// The version of the broker engine. For a list of supported engine versions, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/broker-engine.html
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		/// <summary>
		/// The host instance type of the broker to upgrade to. For a list of supported instance types, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide//broker.html#broker-instance-types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HostInstanceType { get; set; }
		
		/// <summary>
		/// The list of information about logs to be enabled for the specified broker.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Logs { get; set; }
		
		/// <summary>
		/// The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateConfigurationBody
	{
		
		/// <summary>
		/// Required. The base64-encoded XML configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
		
		/// <summary>
		/// The description of the configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
