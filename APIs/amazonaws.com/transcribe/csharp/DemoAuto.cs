//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMedicalVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateMedicalVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateMedicalVocabularyResponseVocabularyState VocabularyState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateMedicalVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateMedicalVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMedicalVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateMedicalVocabularyRequestLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateMedicalVocabularyRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVocabularyResponseVocabularyState VocabularyState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateVocabularyRequestLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phrase[] Phrases { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVocabularyRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVocabularyFilterResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVocabularyFilterResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVocabularyFilterResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVocabularyFilterRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateVocabularyFilterRequestLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Word[] Words { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFilterFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateVocabularyFilterRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMedicalTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string MedicalTranscriptionJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMedicalVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string TranscriptionJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVocabularyFilterRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMedicalTranscriptionJobResponse
	{
		
		/// <summary>
		/// The data structure that containts the information for a medical transcription job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJob MedicalTranscriptionJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMedicalTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string MedicalTranscriptionJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMedicalVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMedicalVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetMedicalVocabularyResponseVocabularyState VocabularyState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string DownloadUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMedicalVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetMedicalVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetMedicalVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTranscriptionJobResponse
	{
		
		/// <summary>
		/// Describes an asynchronous transcription job that was created with the <code>StartTranscriptionJob</code> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJob TranscriptionJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string TranscriptionJobName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetVocabularyResponseVocabularyState VocabularyState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string DownloadUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVocabularyFilterResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetVocabularyFilterResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string DownloadUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetVocabularyFilterResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVocabularyFilterRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMedicalTranscriptionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListMedicalTranscriptionJobsResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummary[] MedicalTranscriptionJobSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListMedicalTranscriptionJobsResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMedicalTranscriptionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListMedicalTranscriptionJobsRequestStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string JobNameContains { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListMedicalTranscriptionJobsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMedicalVocabulariesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListMedicalVocabulariesResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyInfo[] Vocabularies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListMedicalVocabulariesResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMedicalVocabulariesRequest
	{
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListMedicalVocabulariesRequestStateEquals StateEquals { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string NameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListMedicalVocabulariesRequestStateEquals
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTranscriptionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListTranscriptionJobsResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobSummary[] TranscriptionJobSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListTranscriptionJobsResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTranscriptionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListTranscriptionJobsRequestStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string JobNameContains { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListTranscriptionJobsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVocabulariesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListVocabulariesResponseStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyInfo[] Vocabularies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListVocabulariesResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVocabulariesRequest
	{
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListVocabulariesRequestStateEquals StateEquals { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string NameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListVocabulariesRequestStateEquals
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVocabularyFiltersResponse
	{
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyFilterInfo[] VocabularyFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVocabularyFiltersRequest
	{
		
		/// <summary>
		/// Max length: 8192
		/// Pattern: .+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string NameContains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMedicalTranscriptionJobResponse
	{
		
		/// <summary>
		/// The data structure that containts the information for a medical transcription job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJob MedicalTranscriptionJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMedicalTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string MedicalTranscriptionJobName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartMedicalTranscriptionJobRequestLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 48000)]
		public System.Nullable<System.Int32> MediaSampleRateHertz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartMedicalTranscriptionJobRequestMediaFormat MediaFormat { get; set; }
		
		/// <summary>
		/// Describes the input media file in a transcription request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Media Media { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Pattern: [a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string OutputBucketName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string OutputEncryptionKMSKeyId { get; set; }
		
		/// <summary>
		/// Optional settings for the <a>StartMedicalTranscriptionJob</a> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionSetting Settings { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartMedicalTranscriptionJobRequestSpecialty Specialty { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartMedicalTranscriptionJobRequestType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartMedicalTranscriptionJobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartMedicalTranscriptionJobRequestMediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flac = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartMedicalTranscriptionJobRequestSpecialty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARYCARE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartMedicalTranscriptionJobRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DICTATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartTranscriptionJobResponse
	{
		
		/// <summary>
		/// Describes an asynchronous transcription job that was created with the <code>StartTranscriptionJob</code> operation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJob TranscriptionJob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartTranscriptionJobRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string TranscriptionJobName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartTranscriptionJobRequestLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 48000)]
		public System.Nullable<System.Int32> MediaSampleRateHertz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartTranscriptionJobRequestMediaFormat MediaFormat { get; set; }
		
		/// <summary>
		/// Describes the input media file in a transcription request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Media Media { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Pattern: [a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64)]
		public string OutputBucketName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string OutputEncryptionKMSKeyId { get; set; }
		
		/// <summary>
		/// Provides optional settings for the <code>StartTranscriptionJob</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Settings Settings { get; set; }
		
		/// <summary>
		/// Provides information about when a transcription job should be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSettings JobExecutionSettings { get; set; }
		
		/// <summary>
		/// Settings for content redaction within a transcription job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentRedaction ContentRedaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartTranscriptionJobRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartTranscriptionJobRequestMediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flac = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMedicalVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateMedicalVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateMedicalVocabularyResponseVocabularyState VocabularyState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateMedicalVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateMedicalVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMedicalVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateMedicalVocabularyRequestLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateMedicalVocabularyRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVocabularyResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateVocabularyResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateVocabularyResponseVocabularyState VocabularyState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateVocabularyResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateVocabularyResponseVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVocabularyRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateVocabularyRequestLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phrase[] Phrases { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateVocabularyRequestLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVocabularyFilterResponse
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateVocabularyFilterResponseLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateVocabularyFilterResponseLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVocabularyFilterRequest
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Word[] Words { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string VocabularyFilterFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PII = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedactionOutput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redacted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redacted_and_unredacted = 1,
	}
	
	/// <summary>
	/// Settings for content redaction within a transcription job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContentRedaction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentRedactionRedactionType RedactionType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ContentRedactionRedactionOutput RedactionOutput { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContentRedactionRedactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PII = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContentRedactionRedactionOutput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redacted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		redacted_and_unredacted = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// The data structure that containts the information for a medical transcription job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MedicalTranscriptionJob
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string MedicalTranscriptionJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobTranscriptionJobStatus TranscriptionJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 48000)]
		public System.Nullable<System.Int32> MediaSampleRateHertz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobMediaFormat MediaFormat { get; set; }
		
		/// <summary>
		/// Describes the input media file in a transcription request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Media Media { get; set; }
		
		/// <summary>
		/// Identifies the location of a medical transcript.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscript Transcript { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Optional settings for the <a>StartMedicalTranscriptionJob</a> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionSetting Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSpecialty Specialty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobTranscriptionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobMediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flac = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSpecialty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARYCARE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DICTATION = 1,
	}
	
	/// <summary>
	/// Describes an asynchronous transcription job that was created with the <code>StartTranscriptionJob</code> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TranscriptionJob
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string TranscriptionJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobTranscriptionJobStatus TranscriptionJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 48000)]
		public System.Nullable<System.Int32> MediaSampleRateHertz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobMediaFormat MediaFormat { get; set; }
		
		/// <summary>
		/// Describes the input media file in a transcription request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Media Media { get; set; }
		
		/// <summary>
		/// Identifies the location of a transcription.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Transcript Transcript { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Provides optional settings for the <code>StartTranscriptionJob</code> operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Settings Settings { get; set; }
		
		/// <summary>
		/// Provides information about when a transcription job should be executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobExecutionSettings JobExecutionSettings { get; set; }
		
		/// <summary>
		/// Settings for content redaction within a transcription job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentRedaction ContentRedaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobTranscriptionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobMediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flac = 3,
	}
	
	/// <summary>
	/// Provides information about when a transcription job should be executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobExecutionSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowDeferredExecution { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws:iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1023}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	/// <summary>
	/// Describes the input media file in a transcription request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Media
	{
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string MediaFileUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MediaFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flac = 3,
	}
	
	/// <summary>
	/// Identifies the location of a medical transcript.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MedicalTranscript
	{
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string TranscriptFileUri { get; set; }
	}
	
	/// <summary>
	/// Optional settings for the <a>StartMedicalTranscriptionJob</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MedicalTranscriptionSetting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowSpeakerLabels { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> MaxSpeakerLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ChannelIdentification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowAlternatives { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> MaxAlternatives { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Specialty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARYCARE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DICTATION = 1,
	}
	
	/// <summary>
	/// Provides summary information about a transcription job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MedicalTranscriptionJobSummary
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string MedicalTranscriptionJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummaryLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummaryTranscriptionJobStatus TranscriptionJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummaryOutputLocationType OutputLocationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummarySpecialty Specialty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MedicalTranscriptionJobSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSummaryLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSummaryTranscriptionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSummaryOutputLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_BUCKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_BUCKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSummarySpecialty
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARYCARE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MedicalTranscriptionJobSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DICTATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_BUCKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_BUCKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VocabularyFilterMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mask = 1,
	}
	
	/// <summary>
	/// Provides optional settings for the <code>StartTranscriptionJob</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Settings
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowSpeakerLabels { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> MaxSpeakerLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ChannelIdentification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowAlternatives { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 10)]
		public System.Nullable<System.Int32> MaxAlternatives { get; set; }
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SettingsVocabularyFilterMethod VocabularyFilterMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SettingsVocabularyFilterMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mask = 1,
	}
	
	/// <summary>
	/// Identifies the location of a transcription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Transcript
	{
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string TranscriptFileUri { get; set; }
		
		/// <summary>
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: (s3://|http(s*)://).+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2000, MinimumLength=1)]
		public string RedactedTranscriptFileUri { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of information about a transcription job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TranscriptionJobSummary
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string TranscriptionJobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobSummaryLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobSummaryTranscriptionJobStatus TranscriptionJobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TranscriptionJobSummaryOutputLocationType OutputLocationType { get; set; }
		
		/// <summary>
		/// Settings for content redaction within a transcription job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContentRedaction ContentRedaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobSummaryLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobSummaryTranscriptionJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TranscriptionJobSummaryOutputLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_BUCKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_BUCKET = 1,
	}
	
	/// <summary>
	/// Provides information about a custom vocabulary. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VocabularyInfo
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyInfoLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyInfoVocabularyState VocabularyState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VocabularyInfoLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VocabularyInfoVocabularyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Provides information about a vocabulary filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VocabularyFilterInfo
	{
		
		/// <summary>
		/// Max length: 200
		/// Min length: 1
		/// Pattern: ^[0-9a-zA-Z._-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength=1)]
		public string VocabularyFilterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VocabularyFilterInfoLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VocabularyFilterInfoLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-US = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-CA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-GB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-DE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-BR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr-FR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it-IT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko-KR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es-ES = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi-IN = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-SA = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru-RU = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-CN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl-NL = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id-ID = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ta-IN = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa-IR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-IE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-AB = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en-WL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt-PT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		te-IN = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr-TR = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de-CH = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he-IL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms-MY = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja-JP = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar-AE = 30,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new custom vocabulary that you can use to change how Amazon Transcribe Medical transcribes your audio file.
		/// CreateMedicalVocabulary /#X-Amz-Target=Transcribe.CreateMedicalVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateMedicalVocabularyResponse> CreateMedicalVocabularyAsync(CreateMedicalVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.CreateMedicalVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateMedicalVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new custom vocabulary that you can use to change the way Amazon Transcribe handles transcription of an audio file.
		/// CreateVocabulary /#X-Amz-Target=Transcribe.CreateVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVocabularyResponse> CreateVocabularyAsync(CreateVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.CreateVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new vocabulary filter that you can use to filter words, such as profane words, from the output of a transcription job.
		/// CreateVocabularyFilter /#X-Amz-Target=Transcribe.CreateVocabularyFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVocabularyFilterResponse> CreateVocabularyFilterAsync(CreateVocabularyFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.CreateVocabularyFilter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVocabularyFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a transcription job generated by Amazon Transcribe Medical and any related information.
		/// DeleteMedicalTranscriptionJob /#X-Amz-Target=Transcribe.DeleteMedicalTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteMedicalTranscriptionJobAsync(DeleteMedicalTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.DeleteMedicalTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a vocabulary from Amazon Transcribe Medical.
		/// DeleteMedicalVocabulary /#X-Amz-Target=Transcribe.DeleteMedicalVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteMedicalVocabularyAsync(DeleteMedicalVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.DeleteMedicalVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously submitted transcription job along with any other generated results such as the transcription, models, and so on.
		/// DeleteTranscriptionJob /#X-Amz-Target=Transcribe.DeleteTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteTranscriptionJobAsync(DeleteTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.DeleteTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a vocabulary from Amazon Transcribe.
		/// DeleteVocabulary /#X-Amz-Target=Transcribe.DeleteVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteVocabularyAsync(DeleteVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.DeleteVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a vocabulary filter.
		/// DeleteVocabularyFilter /#X-Amz-Target=Transcribe.DeleteVocabularyFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteVocabularyFilterAsync(DeleteVocabularyFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.DeleteVocabularyFilter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a transcription job from Amazon Transcribe Medical. To see the status of the job, check the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished. You find the results of the completed job in the <code>TranscriptFileUri</code> field.
		/// GetMedicalTranscriptionJob /#X-Amz-Target=Transcribe.GetMedicalTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMedicalTranscriptionJobResponse> GetMedicalTranscriptionJobAsync(GetMedicalTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.GetMedicalTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMedicalTranscriptionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve information about a medical vocabulary.
		/// GetMedicalVocabulary /#X-Amz-Target=Transcribe.GetMedicalVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetMedicalVocabularyResponse> GetMedicalVocabularyAsync(GetMedicalVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.GetMedicalVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetMedicalVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a transcription job. To see the status of the job, check the <code>TranscriptionJobStatus</code> field. If the status is <code>COMPLETED</code>, the job is finished and you can find the results at the location specified in the <code>TranscriptFileUri</code> field. If you enable content redaction, the redacted transcript appears in <code>RedactedTranscriptFileUri</code>.
		/// GetTranscriptionJob /#X-Amz-Target=Transcribe.GetTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTranscriptionJobResponse> GetTranscriptionJobAsync(GetTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.GetTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTranscriptionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a vocabulary.
		/// GetVocabulary /#X-Amz-Target=Transcribe.GetVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetVocabularyResponse> GetVocabularyAsync(GetVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.GetVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a vocabulary filter.
		/// GetVocabularyFilter /#X-Amz-Target=Transcribe.GetVocabularyFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetVocabularyFilterResponse> GetVocabularyFilterAsync(GetVocabularyFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.GetVocabularyFilter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVocabularyFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists medical transcription jobs with a specified status or substring that matches their names.
		/// ListMedicalTranscriptionJobs /#X-Amz-Target=Transcribe.ListMedicalTranscriptionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMedicalTranscriptionJobsResponse> ListMedicalTranscriptionJobsAsync(string MaxResults, string NextToken, ListMedicalTranscriptionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.ListMedicalTranscriptionJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMedicalTranscriptionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of vocabularies that match the specified criteria. You get the entire list of vocabularies if you don't enter a value in any of the request parameters.
		/// ListMedicalVocabularies /#X-Amz-Target=Transcribe.ListMedicalVocabularies
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMedicalVocabulariesResponse> ListMedicalVocabulariesAsync(string MaxResults, string NextToken, ListMedicalVocabulariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.ListMedicalVocabularies?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMedicalVocabulariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists transcription jobs with the specified status.
		/// ListTranscriptionJobs /#X-Amz-Target=Transcribe.ListTranscriptionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTranscriptionJobsResponse> ListTranscriptionJobsAsync(string MaxResults, string NextToken, ListTranscriptionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.ListTranscriptionJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTranscriptionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of vocabularies that match the specified criteria. If no criteria are specified, returns the entire list of vocabularies.
		/// ListVocabularies /#X-Amz-Target=Transcribe.ListVocabularies
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVocabulariesResponse> ListVocabulariesAsync(string MaxResults, string NextToken, ListVocabulariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.ListVocabularies?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVocabulariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about vocabulary filters.
		/// ListVocabularyFilters /#X-Amz-Target=Transcribe.ListVocabularyFilters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVocabularyFiltersResponse> ListVocabularyFiltersAsync(string MaxResults, string NextToken, ListVocabularyFiltersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.ListVocabularyFilters?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVocabularyFiltersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start a batch job to transcribe medical speech to text.
		/// StartMedicalTranscriptionJob /#X-Amz-Target=Transcribe.StartMedicalTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartMedicalTranscriptionJobResponse> StartMedicalTranscriptionJobAsync(StartMedicalTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.StartMedicalTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartMedicalTranscriptionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous job to transcribe speech to text.
		/// StartTranscriptionJob /#X-Amz-Target=Transcribe.StartTranscriptionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartTranscriptionJobResponse> StartTranscriptionJobAsync(StartTranscriptionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.StartTranscriptionJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartTranscriptionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing vocabulary with new values in a different text file. The <code>UpdateMedicalVocabulary</code> operation overwrites all of the existing information with the values that you provide in the request.
		/// UpdateMedicalVocabulary /#X-Amz-Target=Transcribe.UpdateMedicalVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateMedicalVocabularyResponse> UpdateMedicalVocabularyAsync(UpdateMedicalVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.UpdateMedicalVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMedicalVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing vocabulary with new values. The <code>UpdateVocabulary</code> operation overwrites all of the existing information with the values that you provide in the request.
		/// UpdateVocabulary /#X-Amz-Target=Transcribe.UpdateVocabulary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateVocabularyResponse> UpdateVocabularyAsync(UpdateVocabularyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.UpdateVocabulary";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVocabularyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a vocabulary filter with a new list of filtered words.
		/// UpdateVocabularyFilter /#X-Amz-Target=Transcribe.UpdateVocabularyFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateVocabularyFilterResponse> UpdateVocabularyFilterAsync(UpdateVocabularyFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Transcribe.UpdateVocabularyFilter";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVocabularyFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
