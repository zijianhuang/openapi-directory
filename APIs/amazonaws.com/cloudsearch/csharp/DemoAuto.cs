//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The result of a <code>BuildSuggester</code> request. Contains a list of the fields used for suggestions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSuggestersResponse
	{
		
		/// <summary>
		/// A list of field names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FieldName[] FieldNames { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>CreateDomainRequest</code>. Contains the status of a newly created domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainResponse
	{
		
		/// <summary>
		/// The current status of the search domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus DomainStatus { get; set; }
	}
	
	/// <summary>
	/// The result of a <code><a>DefineAnalysisScheme</a></code> request. Contains the status of the newly-configured analysis scheme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineAnalysisSchemeResponse
	{
		
		/// <summary>
		/// The status and configuration of an <code>AnalysisScheme</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisSchemeStatus AnalysisScheme { get; set; }
	}
	
	/// <summary>
	/// An <a href="http://tools.ietf.org/html/rfc4646" target="_blank">IETF RFC 4646</a> language code or <code>mul</code> for multiple languages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AnalysisSchemeLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ga = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gl = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hy = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lv = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mul = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		th = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-Hans = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-Hant = 34,
	}
	
	/// <summary>
	/// Synonyms, stopwords, and stemming options for an analysis scheme. Includes tokenization dictionary for Japanese.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalysisOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Synonyms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Stopwords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StemmingDictionary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JapaneseTokenizationDictionary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnalysisOptionsAlgorithmicStemming AlgorithmicStemming { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AnalysisOptionsAlgorithmicStemming
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		light = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 3,
	}
	
	/// <summary>
	/// The result of a <code>DefineExpression</code> request. Contains the status of the newly-configured expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineExpressionResponse
	{
		
		/// <summary>
		/// The value of an <code>Expression</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpressionStatus Expression { get; set; }
	}
	
	/// <summary>
	/// The result of a <code><a>DefineIndexField</a></code> request. Contains the status of the newly-configured index field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineIndexFieldResponse
	{
		
		/// <summary>
		/// The value of an <code>IndexField</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus IndexField { get; set; }
	}
	
	/// <summary>
	/// The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@int = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@double = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		literal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		latlon = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		int-array = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		double-array = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		literal-array = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text-array = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date-array = 10,
	}
	
	/// <summary>
	/// Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DoubleOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LiteralOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TextOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HighlightEnabled { get; set; }
		
		/// <summary>
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AnalysisScheme { get; set; }
	}
	
	/// <summary>
	/// Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LatLonOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SortEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntArrayOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultValue { get; set; }
		
		/// <summary>
		/// Pattern: \s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DoubleArrayOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DefaultValue { get; set; }
		
		/// <summary>
		/// Pattern: \s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LiteralArrayOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Pattern: \s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
	}
	
	/// <summary>
	/// Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TextArrayOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Pattern: \s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HighlightEnabled { get; set; }
		
		/// <summary>
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AnalysisScheme { get; set; }
	}
	
	/// <summary>
	/// Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateArrayOptions
	{
		
		/// <summary>
		/// The value of a field attribute.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Pattern: \s*[a-z*][a-z0-9_]*\*?\s*(,\s*[a-z*][a-z0-9_]*\*?\s*)*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FacetEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SearchEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnEnabled { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DefineSuggester</code> request. Contains the status of the newly-configured suggester.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineSuggesterResponse
	{
		
		/// <summary>
		/// The value of a <code>Suggester</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuggesterStatus Suggester { get; set; }
	}
	
	/// <summary>
	/// Options for a search suggester.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DocumentSuggesterOptions
	{
		
		/// <summary>
		/// <p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SourceField { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentSuggesterOptionsFuzzyMatching FuzzyMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SortExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DocumentSuggesterOptionsFuzzyMatching
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 2,
	}
	
	/// <summary>
	/// The result of a <code>DeleteAnalysisScheme</code> request. Contains the status of the deleted analysis scheme.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAnalysisSchemeResponse
	{
		
		/// <summary>
		/// The status and configuration of an <code>AnalysisScheme</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisSchemeStatus AnalysisScheme { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DeleteDomain</code> request. Contains the status of a newly deleted domain, or no status if the domain has already been completely deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainResponse
	{
		
		/// <summary>
		/// The current status of the search domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus DomainStatus { get; set; }
	}
	
	/// <summary>
	/// The result of a <code><a>DeleteExpression</a></code> request. Specifies the expression being deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteExpressionResponse
	{
		
		/// <summary>
		/// The value of an <code>Expression</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpressionStatus Expression { get; set; }
	}
	
	/// <summary>
	/// The result of a <code><a>DeleteIndexField</a></code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIndexFieldResponse
	{
		
		/// <summary>
		/// The value of an <code>IndexField</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus IndexField { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DeleteSuggester</code> request. Contains the status of the deleted suggester.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSuggesterResponse
	{
		
		/// <summary>
		/// The value of a <code>Suggester</code> and its current status.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuggesterStatus Suggester { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeAnalysisSchemes</code> request. Contains the analysis schemes configured for the domain specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAnalysisSchemesResponse
	{
		
		/// <summary>
		/// A list of the analysis schemes configured for a domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisSchemeStatus[] AnalysisSchemes { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeAvailabilityOptions</code> request. Indicates whether or not the Multi-AZ option is enabled for the domain specified in the request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailabilityOptionsResponse
	{
		
		/// <summary>
		/// The status and configuration of the domain's availability options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityOptionsStatus AvailabilityOptions { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeDomainEndpointOptions</code> request. Contains the status and configuration of a search domain's endpoint options. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainEndpointOptionsResponse
	{
		
		/// <summary>
		/// The configuration and status of the domain's endpoint options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainEndpointOptionsStatus DomainEndpointOptions { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeDomains</code> request. Contains the status of the domains specified in the request or all domains owned by the account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainsResponse
	{
		
		/// <summary>
		/// A list that contains the status of each requested domain.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainStatus[] DomainStatusList { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeExpressions</code> request. Contains the expressions configured for the domain specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExpressionsResponse
	{
		
		/// <summary>
		/// Contains the status of multiple expressions.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExpressionStatus[] Expressions { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeIndexFields</code> request. Contains the index fields configured for the domain specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIndexFieldsResponse
	{
		
		/// <summary>
		/// Contains the status of multiple index fields.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldStatus[] IndexFields { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeScalingParameters</code> request. Contains the scaling parameters configured for the domain specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingParametersResponse
	{
		
		/// <summary>
		/// The status and configuration of a search domain's scaling parameters. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingParametersStatus ScalingParameters { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeServiceAccessPolicies</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeServiceAccessPoliciesResponse
	{
		
		/// <summary>
		/// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPoliciesStatus AccessPolicies { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>DescribeSuggesters</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSuggestersResponse
	{
		
		/// <summary>
		/// Contains the status of multiple suggesters.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SuggesterStatus[] Suggesters { get; set; }
	}
	
	/// <summary>
	/// The result of an <code>IndexDocuments</code> request. Contains the status of the indexing operation, including the fields being indexed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexDocumentsResponse
	{
		
		/// <summary>
		/// A list of field names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FieldName[] FieldNames { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>ListDomainNames</code> request. Contains a list of the domains owned by an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDomainNamesResponse
	{
		
		/// <summary>
		/// A collection of domain names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainNameMap DomainNames { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>UpdateAvailabilityOptions</code> request. Contains the status of the domain's availability options. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAvailabilityOptionsResponse
	{
		
		/// <summary>
		/// The status and configuration of the domain's availability options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityOptionsStatus AvailabilityOptions { get; set; }
	}
	
	/// <summary>
	/// The result of a <code>UpdateDomainEndpointOptions</code> request. Contains the configuration and status of the domain's endpoint options. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainEndpointOptionsResponse
	{
		
		/// <summary>
		/// The configuration and status of the domain's endpoint options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainEndpointOptionsStatus DomainEndpointOptions { get; set; }
	}
	
	/// <summary>
	/// The minimum required TLS version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TLSSecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy-Min-TLS-1-0-2019-07 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy-Min-TLS-1-2-2019-07 = 1,
	}
	
	/// <summary>
	/// The result of a <code>UpdateScalingParameters</code> request. Contains the status of the newly-configured scaling parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateScalingParametersResponse
	{
		
		/// <summary>
		/// The status and configuration of a search domain's scaling parameters. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingParametersStatus ScalingParameters { get; set; }
	}
	
	/// <summary>
	/// The instance type (such as <code>search.m1.small</code>) on which an index partition is hosted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PartitionInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m1.small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m1.large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m2.xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m2.2xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.large = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.2xlarge = 7,
	}
	
	/// <summary>
	/// The result of an <code>UpdateServiceAccessPolicies</code> request. Contains the new access policies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateServiceAccessPoliciesResponse
	{
		
		/// <summary>
		/// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessPoliciesStatus AccessPolicies { get; set; }
	}
	
	/// <summary>
	/// The status of domain configuration option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OptionStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateDate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> UpdateVersion { get; set; }
		
		/// <summary>
		/// <p>The state of processing a change to an option. One of:</p> <ul> <li>RequiresIndexDocuments: The option's latest value will not be deployed until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li>Processing: The option's latest value is in the process of being activated.</li> <li>Active: The option's latest value is fully deployed. </li> <li>FailedToValidate: The option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li> </ul>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatusState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PendingDeletion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OptionStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequiresIndexDocuments = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedToValidate = 3,
	}
	
	/// <summary>
	/// The configured access rules for the domain's document and search endpoints, and the current status of those rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessPoliciesStatus
	{
		
		/// <summary>
		/// Access rules for a domain's document or search service endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. The maximum size of a policy document is 100 KB.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlgorithmicStemming
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		minimal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		light = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 3,
	}
	
	/// <summary>
	/// Configuration information for an analysis scheme. Each analysis scheme has a unique name and specifies the language of the text to be processed. The following options can be configured for an analysis scheme: <code>Synonyms</code>, <code>Stopwords</code>, <code>StemmingDictionary</code>, <code>JapaneseTokenizationDictionary</code> and <code>AlgorithmicStemming</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalysisScheme
	{
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AnalysisSchemeName { get; set; }
		
		/// <summary>
		/// An <a href="http://tools.ietf.org/html/rfc4646" target="_blank">IETF RFC 4646</a> language code or <code>mul</code> for multiple languages.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisSchemeAnalysisSchemeLanguage AnalysisSchemeLanguage { get; set; }
		
		/// <summary>
		/// Synonyms, stopwords, and stemming options for an analysis scheme. Includes tokenization dictionary for Japanese.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalysisOptions AnalysisOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AnalysisSchemeAnalysisSchemeLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		da = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		el = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fa = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fi = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ga = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gl = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		he = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hu = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hy = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		id = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lv = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mul = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nl = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ro = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ru = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sv = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		th = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tr = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-Hans = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh-Hant = 34,
	}
	
	/// <summary>
	/// The status and configuration of an <code>AnalysisScheme</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalysisSchemeStatus
	{
		
		/// <summary>
		/// Configuration information for an analysis scheme. Each analysis scheme has a unique name and specifies the language of the text to be processed. The following options can be configured for an analysis scheme: <code>Synonyms</code>, <code>Stopwords</code>, <code>StemmingDictionary</code>, <code>JapaneseTokenizationDictionary</code> and <code>AlgorithmicStemming</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisScheme Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// The status and configuration of the domain's availability options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityOptionsStatus
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>BuildSuggester</a></code> operation. Specifies the name of the domain you want to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildSuggestersRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>CreateDomain</a></code> operation. Specifies a name for the new search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The current status of the search domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainStatus
	{
		
		/// <summary>
		/// An internally generated unique identifier for a domain.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string DomainId { get; set; }
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the search domain. See <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html" target="_blank">Identifiers for IAM Entities</a> in <i>Using AWS Identity and Access Management</i> for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// The endpoint to which service requests can be submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceEndpoint DocService { get; set; }
		
		/// <summary>
		/// The endpoint to which service requests can be submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceEndpoint SearchService { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequiresIndexDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Processing { get; set; }
		
		/// <summary>
		/// The instance type (such as <code>search.m1.small</code>) that is being used to process search requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SearchInstanceType { get; set; }
		
		/// <summary>
		/// The number of partitions used to hold the domain's index.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SearchPartitionCount { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SearchInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Limits Limits { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DefineAnalysisScheme</a></code> operation. Specifies the name of the domain you want to update and the analysis scheme configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineAnalysisSchemeRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Configuration information for an analysis scheme. Each analysis scheme has a unique name and specifies the language of the text to be processed. The following options can be configured for an analysis scheme: <code>Synonyms</code>, <code>Stopwords</code>, <code>StemmingDictionary</code>, <code>JapaneseTokenizationDictionary</code> and <code>AlgorithmicStemming</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalysisScheme AnalysisScheme { get; set; }
	}
	
	/// <summary>
	/// A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Expression
	{
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ExpressionName { get; set; }
		
		/// <summary>
		/// The expression to evaluate for sorting while processing a search request. The <code>Expression</code> syntax is based on JavaScript expressions. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// Max length: 10240
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10240, MinimumLength=1)]
		public string ExpressionValue { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DefineExpression</a></code> operation. Specifies the name of the domain you want to update and the expression you want to configure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineExpressionRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Expression Expression { get; set; }
	}
	
	/// <summary>
	/// The value of an <code>Expression</code> and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExpressionStatus
	{
		
		/// <summary>
		/// A named expression that can be evaluated at search time. Can be used to sort the search results, define other expressions, or return computed information in the search results. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Expression Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><a>IndexFieldType</a></code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexField
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ([a-z][a-z0-9_]*\*?|\*[a-z0-9_]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string IndexFieldName { get; set; }
		
		/// <summary>
		/// The type of field. The valid options for a field depend on the field type. For more information about the supported field types, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexFieldIndexFieldType IndexFieldType { get; set; }
		
		/// <summary>
		/// Options for a 64-bit signed integer field. Present if <code>IndexFieldType</code> specifies the field is of type <code>int</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IntOptions IntOptions { get; set; }
		
		/// <summary>
		/// Options for a double-precision 64-bit floating point field. Present if <code>IndexFieldType</code> specifies the field is of type <code>double</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DoubleOptions DoubleOptions { get; set; }
		
		/// <summary>
		/// Options for literal field. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LiteralOptions LiteralOptions { get; set; }
		
		/// <summary>
		/// Options for text field. Present if <code>IndexFieldType</code> specifies the field is of type <code>text</code>. A <code>text</code> field is always searchable. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextOptions TextOptions { get; set; }
		
		/// <summary>
		/// Options for a date field. Dates and times are specified in UTC (Coordinated Universal Time) according to IETF RFC3339: yyyy-mm-ddT00:00:00Z. Present if <code>IndexFieldType</code> specifies the field is of type <code>date</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateOptions DateOptions { get; set; }
		
		/// <summary>
		/// Options for a latlon field. A latlon field contains a location stored as a latitude and longitude value pair. Present if <code>IndexFieldType</code> specifies the field is of type <code>latlon</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LatLonOptions LatLonOptions { get; set; }
		
		/// <summary>
		/// Options for a field that contains an array of 64-bit signed integers. Present if <code>IndexFieldType</code> specifies the field is of type <code>int-array</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IntArrayOptions IntArrayOptions { get; set; }
		
		/// <summary>
		/// Options for a field that contains an array of double-precision 64-bit floating point values. Present if <code>IndexFieldType</code> specifies the field is of type <code>double-array</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DoubleArrayOptions DoubleArrayOptions { get; set; }
		
		/// <summary>
		/// Options for a field that contains an array of literal strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>literal-array</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LiteralArrayOptions LiteralArrayOptions { get; set; }
		
		/// <summary>
		/// Options for a field that contains an array of text strings. Present if <code>IndexFieldType</code> specifies the field is of type <code>text-array</code>. A <code>text-array</code> field is always searchable. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TextArrayOptions TextArrayOptions { get; set; }
		
		/// <summary>
		/// Options for a field that contains an array of dates. Present if <code>IndexFieldType</code> specifies the field is of type <code>date-array</code>. All options are enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateArrayOptions DateArrayOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IndexFieldIndexFieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@int = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@double = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		literal = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		latlon = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		int-array = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		double-array = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		literal-array = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text-array = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date-array = 10,
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DefineIndexField</a></code> operation. Specifies the name of the domain you want to update and the index field configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineIndexFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><a>IndexFieldType</a></code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexField IndexField { get; set; }
	}
	
	/// <summary>
	/// The value of an <code>IndexField</code> and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexFieldStatus
	{
		
		/// <summary>
		/// Configuration information for a field in the index, including its name, type, and options. The supported options depend on the <code><a>IndexFieldType</a></code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IndexField Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Suggester
	{
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SuggesterName { get; set; }
		
		/// <summary>
		/// Options for a search suggester.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentSuggesterOptions DocumentSuggesterOptions { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DefineSuggester</a></code> operation. Specifies the name of the domain you want to update and the suggester configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefineSuggesterRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Suggester Suggester { get; set; }
	}
	
	/// <summary>
	/// The value of a <code>Suggester</code> and its current status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuggesterStatus
	{
		
		/// <summary>
		/// Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Suggester Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DeleteAnalysisScheme</a></code> operation. Specifies the name of the domain you want to update and the analysis scheme you want to delete. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAnalysisSchemeRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AnalysisSchemeName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DeleteDomain</a></code> operation. Specifies the name of the domain you want to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DeleteExpression</a></code> operation. Specifies the name of the domain you want to update and the name of the expression you want to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteExpressionRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ExpressionName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DeleteIndexField</a></code> operation. Specifies the name of the domain you want to update and the name of the index field you want to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteIndexFieldRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ([a-z][a-z0-9_]*\*?|\*[a-z0-9_]*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string IndexFieldName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DeleteSuggester</a></code> operation. Specifies the name of the domain you want to update and name of the suggester you want to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSuggesterRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).
		/// Max length: 64
		/// Min length: 1
		/// Pattern: [a-z][a-z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string SuggesterName { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeAnalysisSchemes</a></code> operation. Specifies the name of the domain you want to describe. To limit the response to particular analysis schemes, specify the names of the analysis schemes you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAnalysisSchemesRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardName[] AnalysisSchemeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the Deployed option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailabilityOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeDomainEndpointOptions</a></code> operation. Specify the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the Deployed option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainEndpointOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// The configuration and status of the domain's endpoint options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainEndpointOptionsStatus
	{
		
		/// <summary>
		/// The domain's endpoint options.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainEndpointOptions Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeDomains</a></code> operation. By default shows the status of all domains. To restrict the response to particular domains, specify the names of the domains you want to describe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDomainsRequest
	{
		
		/// <summary>
		/// A list of domain names.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainName[] DomainNames { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeDomains</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular expressions, specify the names of the expressions you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExpressionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardName[] ExpressionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeIndexFields</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular index fields, specify the names of the index fields you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIndexFieldsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DynamicFieldName[] FieldNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeScalingParameters</a></code> operation. Specifies the name of the domain you want to describe. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingParametersRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// The status and configuration of a search domain's scaling parameters. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingParametersStatus
	{
		
		/// <summary>
		/// The desired instance type and desired number of replicas of each index partition.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingParameters Options { get; set; }
		
		/// <summary>
		/// The status of domain configuration option.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OptionStatus Status { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeServiceAccessPolicies</a></code> operation. Specifies the name of the domain you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeServiceAccessPoliciesRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>DescribeSuggester</a></code> operation. Specifies the name of the domain you want to describe. To restrict the response to particular suggesters, specify the names of the suggesters you want to describe. To show the active configuration and exclude any pending changes, set the <code>Deployed</code> option to <code>true</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSuggestersRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StandardName[] SuggesterNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deployed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuggesterFuzzyMatching
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 2,
	}
	
	/// <summary>
	/// The domain's endpoint options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainEndpointOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnforceHTTPS { get; set; }
		
		/// <summary>
		/// The minimum required TLS version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DomainEndpointOptionsTLSSecurityPolicy TLSSecurityPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainEndpointOptionsTLSSecurityPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy-Min-TLS-1-0-2019-07 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policy-Min-TLS-1-2-2019-07 = 1,
	}
	
	/// <summary>
	/// The endpoint to which service requests can be submitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceEndpoint
	{
		
		/// <summary>
		/// The endpoint to which service requests can be submitted. For example, <code>search-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code> or <code>doc-imdb-movies-oopcnjfn6ugofer3zx5iadxxca.eu-west-1.cloudsearch.amazonaws.com</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Limits
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int MaximumReplicationCount { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int MaximumPartitionCount { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>IndexDocuments</a></code> operation. Specifies the name of the domain you want to re-index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexDocumentsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	/// <p>The state of processing a change to an option. One of:</p> <ul> <li>RequiresIndexDocuments: The option's latest value will not be deployed until <a>IndexDocuments</a> has been called and indexing is complete.</li> <li>Processing: The option's latest value is in the process of being activated.</li> <li>Active: The option's latest value is fully deployed. </li> <li>FailedToValidate: The option value is not compatible with the domain's data and cannot be used to index the data. You must either modify the option value or update or remove the incompatible documents.</li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequiresIndexDocuments = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailedToValidate = 3,
	}
	
	/// <summary>
	/// The desired instance type and desired number of replicas of each index partition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingParameters
	{
		
		/// <summary>
		/// The instance type (such as <code>search.m1.small</code>) on which an index partition is hosted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScalingParametersDesiredInstanceType DesiredInstanceType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> DesiredReplicationCount { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> DesiredPartitionCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingParametersDesiredInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m1.small = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m1.large = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m2.xlarge = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m2.2xlarge = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.large = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search.m3.2xlarge = 7,
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>UpdateAvailabilityOptions</a></code> operation. Specifies the name of the domain you want to update and the Multi-AZ availability option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAvailabilityOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool MultiAZ { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>UpdateDomainEndpointOptions</a></code> operation. Specifies the name of the domain you want to update and the domain endpoint options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainEndpointOptionsRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The domain's endpoint options.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainEndpointOptions DomainEndpointOptions { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>UpdateScalingParameters</a></code> operation. Specifies the name of the domain you want to update and the scaling parameters you want to configure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateScalingParametersRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// The desired instance type and desired number of replicas of each index partition.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingParameters ScalingParameters { get; set; }
	}
	
	/// <summary>
	/// Container for the parameters to the <code><a>UpdateServiceAccessPolicies</a></code> operation. Specifies the name of the domain you want to update and the access rules you want to configure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateServiceAccessPoliciesRequest
	{
		
		/// <summary>
		/// A string that represents the name of a domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
		/// Max length: 28
		/// Min length: 3
		/// Pattern: [a-z][a-z0-9\-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(28, MinimumLength=3)]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Access rules for a domain's document or search service endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>. The maximum size of a policy document is 100 KB.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessPolicies { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Indexes the search suggestions. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html#configuring-suggesters">Configuring Suggesters</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_BuildSuggesters /#Action=BuildSuggesters
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_BuildSuggestersAsync(string DomainName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=BuildSuggesters?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/creating-domains.html" target="_blank">Creating a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_CreateDomain /#Action=CreateDomain
		/// </summary>
		/// <param name="DomainName">A name for the domain you are creating. Allowed characters are a-z (lower-case letters), 0-9, and hyphen (-). Domain names must start with a letter or number and be at least 3 and no more than 28 characters long.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDomainAsync(string DomainName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=CreateDomain?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures an analysis scheme that can be applied to a <code>text</code> or <code>text-array</code> field to define language-specific text processing options. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DefineAnalysisScheme /#Action=DefineAnalysisScheme
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DefineAnalysisSchemeAsync(string DomainName, string AnalysisScheme, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DefineAnalysisScheme?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&AnalysisScheme=" + (AnalysisScheme==null? "" : Uri.EscapeDataString(AnalysisScheme))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures an <code><a>Expression</a></code> for the search domain. Used to create new expressions and modify existing ones. If the expression exists, the new configuration replaces the old one. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DefineExpression /#Action=DefineExpression
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DefineExpressionAsync(string DomainName, string Expression, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DefineExpression?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Expression=" + (Expression==null? "" : Uri.EscapeDataString(Expression))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures an <code><a>IndexField</a></code> for the search domain. Used to create new fields and modify existing ones. You must specify the name of the domain you are configuring and an index field configuration. The index field configuration specifies a unique name, the index field type, and the options you want to configure for the field. The options you can specify depend on the <code><a>IndexFieldType</a></code>. If the field exists, the new configuration replaces the old one. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DefineIndexField /#Action=DefineIndexField
		/// </summary>
		/// <param name="IndexField">The index field and field options you want to configure. </param>
		/// <returns>Success</returns>
		public async Task GET_DefineIndexFieldAsync(string DomainName, string IndexField, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DefineIndexField?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&IndexField=" + (IndexField==null? "" : Uri.EscapeDataString(IndexField))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures a suggester for a domain. A suggester enables you to display possible matches before users finish typing their queries. When you configure a suggester, you must specify the name of the text field you want to search for possible matches and a unique name for the suggester. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DefineSuggester /#Action=DefineSuggester
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DefineSuggesterAsync(string DomainName, string Suggester, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DefineSuggester?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Suggester=" + (Suggester==null? "" : Uri.EscapeDataString(Suggester))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an analysis scheme. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DeleteAnalysisScheme /#Action=DeleteAnalysisScheme
		/// </summary>
		/// <param name="AnalysisSchemeName">The name of the analysis scheme you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAnalysisSchemeAsync(string DomainName, string AnalysisSchemeName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteAnalysisScheme?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&AnalysisSchemeName=" + (AnalysisSchemeName==null? "" : Uri.EscapeDataString(AnalysisSchemeName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a search domain and all of its data. Once a domain has been deleted, it cannot be recovered. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/deleting-domains.html" target="_blank">Deleting a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DeleteDomain /#Action=DeleteDomain
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to permanently delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDomainAsync(string DomainName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteDomain?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an <code><a>Expression</a></code> from the search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DeleteExpression /#Action=DeleteExpression
		/// </summary>
		/// <param name="ExpressionName">The name of the <code><a>Expression</a></code> to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteExpressionAsync(string DomainName, string ExpressionName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteExpression?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&ExpressionName=" + (ExpressionName==null? "" : Uri.EscapeDataString(ExpressionName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an <code><a>IndexField</a></code> from the search domain. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-index-fields.html" target="_blank">Configuring Index Fields</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DeleteIndexField /#Action=DeleteIndexField
		/// </summary>
		/// <param name="IndexFieldName">The name of the index field your want to remove from the domain's indexing options.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteIndexFieldAsync(string DomainName, string IndexFieldName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteIndexField?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&IndexFieldName=" + (IndexFieldName==null? "" : Uri.EscapeDataString(IndexFieldName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a suggester. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DeleteSuggester /#Action=DeleteSuggester
		/// </summary>
		/// <param name="SuggesterName">Specifies the name of the suggester you want to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSuggesterAsync(string DomainName, string SuggesterName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DeleteSuggester?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&SuggesterName=" + (SuggesterName==null? "" : Uri.EscapeDataString(SuggesterName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the analysis schemes configured for a domain. An analysis scheme defines language-specific text processing options for a <code>text</code> field. Can be limited to specific analysis schemes by name. By default, shows all analysis schemes and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-analysis-schemes.html" target="_blank">Configuring Analysis Schemes</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeAnalysisSchemes /#Action=DescribeAnalysisSchemes
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="AnalysisSchemeNames">The analysis schemes you want to describe.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAnalysisSchemesAsync(string DomainName, StandardName[] AnalysisSchemeNames, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAnalysisSchemes?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&"+String.Join("&", AnalysisSchemeNames.Select(z => $"AnalysisSchemeNames={z}"))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the availability options configured for a domain. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeAvailabilityOptions /#Action=DescribeAvailabilityOptions
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAvailabilityOptionsAsync(string DomainName, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeAvailabilityOptions?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html" target="_blank">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeDomainEndpointOptions /#Action=DescribeDomainEndpointOptions
		/// </summary>
		/// <param name="DomainName">A string that represents the name of a domain.</param>
		/// <param name="Deployed">Whether to retrieve the latest configuration (which might be in a Processing state) or the current, active configuration. Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDomainEndpointOptionsAsync(string DomainName, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDomainEndpointOptions?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the search domains owned by this account. Can be limited to specific domains. Shows all domains by default. To get the number of searchable documents in a domain, use the console or submit a <code>matchall</code> request to your domain's search endpoint: <code>q=matchall&amp;amp;q.parser=structured&amp;amp;size=0</code>. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html" target="_blank">Getting Information about a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeDomains /#Action=DescribeDomains
		/// </summary>
		/// <param name="DomainNames">The names of the domains you want to include in the response.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDomainsAsync(DomainName[] DomainNames, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeDomains?"+String.Join("&", DomainNames.Select(z => $"DomainNames={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the expressions configured for the search domain. Can be limited to specific expressions by name. By default, shows all expressions and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-expressions.html" target="_blank">Configuring Expressions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeExpressions /#Action=DescribeExpressions
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="ExpressionNames">Limits the <code><a>DescribeExpressions</a></code> response to the specified expressions. If not specified, all expressions are shown.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeExpressionsAsync(string DomainName, StandardName[] ExpressionNames, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeExpressions?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&"+String.Join("&", ExpressionNames.Select(z => $"ExpressionNames={z}"))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the index fields configured for the search domain. Can be limited to specific fields by name. By default, shows all fields and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-domain-info.html" target="_blank">Getting Domain Information</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeIndexFields /#Action=DescribeIndexFields
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="FieldNames">A list of the index fields you want to describe. If not specified, information is returned for all configured index fields.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIndexFieldsAsync(string DomainName, DynamicFieldName[] FieldNames, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeIndexFields?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&"+String.Join("&", FieldNames.Select(z => $"FieldNames={z}"))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the scaling parameters configured for a domain. A domain's scaling parameters specify the desired search instance type and replication count. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html" target="_blank">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeScalingParameters /#Action=DescribeScalingParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DescribeScalingParametersAsync(string DomainName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeScalingParameters?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the access policies that control access to the domain's document and search endpoints. By default, shows the configuration with any pending changes. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank">Configuring Access for a Search Domain</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeServiceAccessPolicies /#Action=DescribeServiceAccessPolicies
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeServiceAccessPoliciesAsync(string DomainName, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeServiceAccessPolicies?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the suggesters configured for a domain. A suggester enables you to display possible matches before users finish typing their queries. Can be limited to specific suggesters by name. By default, shows all suggesters and includes any pending changes to the configuration. Set the <code>Deployed</code> option to <code>true</code> to show the active configuration and exclude pending changes. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html" target="_blank">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_DescribeSuggesters /#Action=DescribeSuggesters
		/// </summary>
		/// <param name="DomainName">The name of the domain you want to describe.</param>
		/// <param name="SuggesterNames">The suggesters you want to describe.</param>
		/// <param name="Deployed">Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSuggestersAsync(string DomainName, StandardName[] SuggesterNames, bool Deployed, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=DescribeSuggesters?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&"+String.Join("&", SuggesterNames.Select(z => $"SuggesterNames={z}"))+"&Deployed="+Deployed+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tells the search domain to start indexing its documents using the latest indexing options. This operation must be invoked to activate options whose <a>OptionStatus</a> is <code>RequiresIndexDocuments</code>.
		/// GET_IndexDocuments /#Action=IndexDocuments
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_IndexDocumentsAsync(string DomainName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=IndexDocuments?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all search domains owned by an account.
		/// GET_ListDomainNames /#Action=ListDomainNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ListDomainNamesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListDomainNames?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all search domains owned by an account.
		/// POST_ListDomainNames /#Action=ListDomainNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ListDomainNamesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=ListDomainNames?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the availability options for a domain. Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability Zone in the same Region to increase fault tolerance in the event of a service disruption. Changes to the Multi-AZ option can take about half an hour to become active. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-availability-options.html" target="_blank">Configuring Availability Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_UpdateAvailabilityOptions /#Action=UpdateAvailabilityOptions
		/// </summary>
		/// <param name="MultiAZ">You expand an existing search domain to a second Availability Zone by setting the Multi-AZ option to true. Similarly, you can turn off the Multi-AZ option to downgrade the domain to a single Availability Zone by setting the Multi-AZ option to <code>false</code>. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAvailabilityOptionsAsync(string DomainName, bool MultiAZ, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateAvailabilityOptions?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&MultiAZ="+MultiAZ+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the domain's endpoint options, specifically whether all requests to the domain must arrive over HTTPS. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-domain-endpoint-options.html" target="_blank">Configuring Domain Endpoint Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_UpdateDomainEndpointOptions /#Action=UpdateDomainEndpointOptions
		/// </summary>
		/// <param name="DomainName">A string that represents the name of a domain.</param>
		/// <param name="DomainEndpointOptions">Whether to require that all requests to the domain arrive over HTTPS. We recommend Policy-Min-TLS-1-2-2019-07 for TLSSecurityPolicy. For compatibility with older clients, the default is Policy-Min-TLS-1-0-2019-07. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateDomainEndpointOptionsAsync(string DomainName, string DomainEndpointOptions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateDomainEndpointOptions?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&DomainEndpointOptions=" + (DomainEndpointOptions==null? "" : Uri.EscapeDataString(DomainEndpointOptions))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures scaling parameters for a domain. A domain's scaling parameters specify the desired search instance type and replication count. Amazon CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count. If the Multi-AZ option is enabled, these values control the resources used per Availability Zone. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-scaling-options.html" target="_blank">Configuring Scaling Options</a> in the <i>Amazon CloudSearch Developer Guide</i>.
		/// GET_UpdateScalingParameters /#Action=UpdateScalingParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_UpdateScalingParametersAsync(string DomainName, string ScalingParameters, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateScalingParameters?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&ScalingParameters=" + (ScalingParameters==null? "" : Uri.EscapeDataString(ScalingParameters))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Configures the access rules that control access to the domain's document and search endpoints. For more information, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/configuring-access.html" target="_blank"> Configuring Access for an Amazon CloudSearch Domain</a>.
		/// GET_UpdateServiceAccessPolicies /#Action=UpdateServiceAccessPolicies
		/// </summary>
		/// <param name="AccessPolicies">The access rules you want to configure. These rules replace any existing rules. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateServiceAccessPoliciesAsync(string DomainName, string AccessPolicies, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#Action=UpdateServiceAccessPolicies?DomainName=" + (DomainName==null? "" : Uri.EscapeDataString(DomainName))+"&AccessPolicies=" + (AccessPolicies==null? "" : Uri.EscapeDataString(AccessPolicies))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
