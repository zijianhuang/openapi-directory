//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The result of the exchange and whether it was <code>successful</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptReservedInstancesExchangeQuoteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ExchangeId { get; set; }
	}
	
	/// <summary>
	/// Details about the target configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransitGatewayPeeringAttachmentResult
	{
		
		/// <summary>
		/// Describes the transit gateway peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeeringAttachment TransitGatewayPeeringAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes the transit gateway peering attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayPeeringAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		/// <summary>
		/// Information about the transit gateway in the peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringTgwInfo RequesterTgwInfo { get; set; }
		
		/// <summary>
		/// Information about the transit gateway in the peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringTgwInfo AccepterTgwInfo { get; set; }
		
		/// <summary>
		/// The status of the transit gateway peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringAttachmentStatus Status { get; set; }
		
		public TransitGatewayAttachmentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about the transit gateway in the peering attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PeeringTgwInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// The status of the transit gateway peering attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PeeringAttachmentStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayAttachmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initiating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pendingAcceptance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rollingBack = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modifying = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejecting = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failing = 11,
	}
	
	/// <summary>
	/// Describes a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransitGatewayVpcAttachmentResult
	{
		
		/// <summary>
		/// Describes a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment TransitGatewayVpcAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayVpcAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcOwnerId { get; set; }
		
		public TransitGatewayAttachmentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Describes the VPC attachment options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachmentOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the VPC attachment options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayVpcAttachmentOptions
	{
		
		public DnsSupportValue DnsSupport { get; set; }
		
		public Ipv6SupportValue Ipv6Support { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DnsSupportValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ipv6SupportValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptVpcEndpointConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Information about items that were not successfully processed in a batch call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnsuccessfulItem
	{
		
		/// <summary>
		/// Information about the error that occurred. For more information about errors, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItemError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	/// <summary>
	/// Information about the error that occurred. For more information about errors, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnsuccessfulItemError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptVpcPeeringConnectionResult
	{
		
		/// <summary>
		/// Describes a VPC peering connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnection VpcPeeringConnection { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC peering connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcPeeringConnection
	{
		
		/// <summary>
		/// Describes a VPC in a VPC peering connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnectionVpcInfo AccepterVpcInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		/// <summary>
		/// Describes a VPC in a VPC peering connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnectionVpcInfo RequesterVpcInfo { get; set; }
		
		/// <summary>
		/// Describes the status of a VPC peering connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnectionStateReason Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC in a VPC peering connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcPeeringConnectionVpcInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ipv6CidrBlock[] Ipv6CidrBlockSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CidrBlock[] CidrBlockSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		/// <summary>
		/// Describes the VPC peering connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnectionOptionsDescription PeeringOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 CIDR block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ipv6CidrBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="Ipv6CidrBlock")]
		public string Ipv6CidrBlock1 { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv4 CIDR block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CidrBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="CidrBlock")]
		public string CidrBlock1 { get; set; }
	}
	
	/// <summary>
	/// Describes the VPC peering connection options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcPeeringConnectionOptionsDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowDnsResolutionFromRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalClassicLinkToRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalVpcToRemoteClassicLink { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a VPC peering connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcPeeringConnectionStateReason
	{
		
		public VpcPeeringConnectionStateReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcPeeringConnectionStateReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initiating_request = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_acceptance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expired = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdvertiseByoipCidrResult
	{
		
		/// <summary>
		/// Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ByoipCidr ByoipCidr { get; set; }
	}
	
	/// <summary>
	/// Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ByoipCidr
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		public ByoipCidrState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ByoipCidrState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advertised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deprovisioned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed_deprovision = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed_provision = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_deprovision = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_provision = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioned = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioned_not_publicly_advertisable = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateAddressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpv4Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		public DomainType Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 1,
	}
	
	/// <summary>
	/// Contains the output of AllocateHosts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateHostsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIds { get; set; }
	}
	
	/// <summary>
	/// The tags to apply to a resource when the resource is being created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagSpecification
	{
		
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		client_vpn_endpoint = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		customer_gateway = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated_host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dhcp_options = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		elastic_ip = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleet = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fpga_image = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		host_reservation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		internet_gateway = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		key_pair = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launch_template = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		natgateway = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network_acl = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network_interface = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		placement_group = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reserved_instances = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		route_table = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		security_group = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		snapshot = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot_fleet_request = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot_instances_request = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		subnet = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		traffic_mirror_filter = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		traffic_mirror_session = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		traffic_mirror_target = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transit_gateway = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transit_gateway_attachment = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transit_gateway_multicast_domain = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transit_gateway_route_table = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volume = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc_peering_connection = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpn_connection = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpn_gateway = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc_flow_log = 36,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplySecurityGroupsToClientVpnTargetNetworkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssignIpv6AddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AssignedIpv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssignPrivateIpAddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssignedPrivateIpAddress[] AssignedPrivateIpAddresses { get; set; }
	}
	
	/// <summary>
	/// Describes the private IP addresses assigned to a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssignedPrivateIpAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateAddressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateClientVpnTargetNetworkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Describes the state of a target network association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a target network association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociationStatus
	{
		
		public AssociationStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociationStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		association_failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateIamInstanceProfileResult
	{
		
		/// <summary>
		/// Describes an association between an IAM instance profile and an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileAssociation IamInstanceProfileAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes an association between an IAM instance profile and an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IamInstanceProfileAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfile IamInstanceProfile { get; set; }
		
		public IamInstanceProfileAssociationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// Describes an IAM instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IamInstanceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IamInstanceProfileAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateRouteTableResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Describes the state of an association between a route table and a subnet or gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteTableAssociationState AssociationState { get; set; }
	}
	
	/// <summary>
	/// Describes the state of an association between a route table and a subnet or gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteTableAssociationState
	{
		
		public RouteTableAssociationStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RouteTableAssociationStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSubnetCidrBlockResult
	{
		
		/// <summary>
		/// Describes an IPv6 CIDR block associated with a subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubnetIpv6CidrBlockAssociation Ipv6CidrBlockAssociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 CIDR block associated with a subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubnetIpv6CidrBlockAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		/// <summary>
		/// Describes the state of a CIDR block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubnetCidrBlockState Ipv6CidrBlockState { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a CIDR block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubnetCidrBlockState
	{
		
		public SubnetCidrBlockStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SubnetCidrBlockStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failing = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTransitGatewayMulticastDomainResult
	{
		
		/// <summary>
		/// Describes the multicast domain associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomainAssociations Associations { get; set; }
	}
	
	/// <summary>
	/// Describes the multicast domain associations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastDomainAssociations
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetAssociation[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayAttachmentResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		direct_connect_gateway = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tgw_peering = 3,
	}
	
	/// <summary>
	/// Describes the subnet association with the transit gateway multicast domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SubnetAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		public TransitGatewayMulitcastDomainAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayMulitcastDomainAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTransitGatewayRouteTableResult
	{
		
		/// <summary>
		/// Describes an association between a resource attachment and a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayAssociation Association { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a resource attachment and a transit gateway route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		public TransitGatewayAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateVpcCidrBlockResult
	{
		
		/// <summary>
		/// Describes an IPv6 CIDR block associated with a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcIpv6CidrBlockAssociation Ipv6CidrBlockAssociation { get; set; }
		
		/// <summary>
		/// Describes an IPv4 CIDR block associated with a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcCidrBlockAssociation CidrBlockAssociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 CIDR block associated with a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcIpv6CidrBlockAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		/// <summary>
		/// Describes the state of a CIDR block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcCidrBlockState Ipv6CidrBlockState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Pool { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a CIDR block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcCidrBlockState
	{
		
		public VpcCidrBlockStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcCidrBlockStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disassociated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failing = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 5,
	}
	
	/// <summary>
	/// Describes an IPv4 CIDR block associated with a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcCidrBlockAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		/// <summary>
		/// Describes the state of a CIDR block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcCidrBlockState CidrBlockState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachClassicLinkVpcResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	/// <summary>
	/// Contains the output of AttachNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachNetworkInterfaceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
	}
	
	/// <summary>
	/// Describes volume attachment details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AttachTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Device { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public VolumeAttachmentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeAttachmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detaching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detached = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		busy = 4,
	}
	
	/// <summary>
	/// Contains the output of AttachVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachVpnGatewayResult
	{
		
		/// <summary>
		/// Describes an attachment between a virtual private gateway and a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcAttachment VpcAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes an attachment between a virtual private gateway and a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcAttachment
	{
		
		public AttachmentStatus State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttachmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attached = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detaching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detached = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeClientVpnIngressResult
	{
		
		/// <summary>
		/// Describes the state of an authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnAuthorizationRuleStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes the state of an authorization rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnAuthorizationRuleStatus
	{
		
		public ClientVpnAuthorizationRuleStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientVpnAuthorizationRuleStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorizing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		revoking = 3,
	}
	
	/// <summary>
	/// Describes a set of permissions for a security group rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IpPermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpRange[] IpRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ipv6Range[] Ipv6Ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrefixListId[] PrefixListIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserIdGroupPair[] UserIdGroupPairs { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv4 range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IpRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// [EC2-VPC only] Describes an IPv6 range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ipv6Range
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIpv6 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Describes a prefix list ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrefixListId
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="PrefixListId")]
		public string PrefixListId1 { get; set; }
	}
	
	/// <summary>
	/// Describes a security group and AWS account ID pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserIdGroupPair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeeringStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of BundleInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BundleInstanceResult
	{
		
		/// <summary>
		/// Describes a bundle task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BundleTask BundleTask { get; set; }
	}
	
	/// <summary>
	/// Describes a bundle task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BundleTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		/// <summary>
		/// Describes an error for <a>BundleInstance</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BundleTaskError BundleTaskError { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		public BundleTaskState State { get; set; }
		
		/// <summary>
		/// Describes the storage location for an instance store-backed AMI.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Storage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Describes an error for <a>BundleInstance</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BundleTaskError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BundleTaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting_for_shutdown = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bundling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		storing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelling = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 6,
	}
	
	/// <summary>
	/// Describes the storage location for an instance store-backed AMI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Storage
	{
		
		/// <summary>
		/// Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Storage S3 { get; set; }
	}
	
	/// <summary>
	/// Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Storage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AWSAccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadPolicySignature { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CancelBundleTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelBundleTaskResult
	{
		
		/// <summary>
		/// Describes a bundle task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BundleTask BundleTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelCapacityReservationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelImportTaskResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreviousState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CancelReservedInstancesListing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelReservedInstancesListingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesListing[] ReservedInstancesListings { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance listing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesListing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceCount[] InstanceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PriceSchedule[] PriceSchedules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesListingId { get; set; }
		
		public ListingStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdateDate { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance listing state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="InstanceCount")]
		public System.Nullable<System.Int32> InstanceCount1 { get; set; }
		
		public ListingState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 3,
	}
	
	/// <summary>
	/// Describes the price for a Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PriceSchedule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CurrencyCodeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 3,
	}
	
	/// <summary>
	/// Contains the output of CancelSpotFleetRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotFleetRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CancelSpotFleetRequestsSuccessItem[] SuccessfulFleetRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CancelSpotFleetRequestsErrorItem[] UnsuccessfulFleetRequests { get; set; }
	}
	
	/// <summary>
	/// Describes a Spot Fleet request that was successfully canceled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotFleetRequestsSuccessItem
	{
		
		public BatchState CurrentSpotFleetRequestState { get; set; }
		
		public BatchState PreviousSpotFleetRequestState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BatchState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled_running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled_terminating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modifying = 6,
	}
	
	/// <summary>
	/// Describes a Spot Fleet request that was not successfully canceled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotFleetRequestsErrorItem
	{
		
		/// <summary>
		/// Describes a Spot Fleet error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CancelSpotFleetRequestsError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
	}
	
	/// <summary>
	/// Describes a Spot Fleet error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotFleetRequestsError
	{
		
		public CancelBatchErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelBatchErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetRequestIdDoesNotExist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetRequestIdMalformed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetRequestNotInCancellableState = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unexpectedError = 3,
	}
	
	/// <summary>
	/// Contains the output of CancelSpotInstanceRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotInstanceRequestsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CancelledSpotInstanceRequest[] CancelledSpotInstanceRequests { get; set; }
	}
	
	/// <summary>
	/// Describes a request to cancel a Spot Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelledSpotInstanceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotInstanceRequestId { get; set; }
		
		public CancelSpotInstanceRequestState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelSpotInstanceRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmProductInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyFpgaImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CopyImage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopySnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCapacityReservationResult
	{
		
		/// <summary>
		/// Describes a Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservation CapacityReservation { get; set; }
	}
	
	/// <summary>
	/// Describes a Capacity Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		public CapacityReservationInstancePlatform InstancePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public CapacityReservationTenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EphemeralStorage { get; set; }
		
		public CapacityReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		public EndDateType EndDateType { get; set; }
		
		public InstanceMatchCriteria InstanceMatchCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CapacityReservationInstancePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_UNIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red_Hat_Enterprise_Linux = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSE_Linux = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_with_SQL_Server = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_with_SQL_Server_Enterprise = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_with_SQL_Server_Standard = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_with_SQL_Server_Web = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_with_SQL_Server_Standard = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_with_SQL_Server_Web = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_with_SQL_Server_Enterprise = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CapacityReservationTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CapacityReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EndDateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unlimited = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		limited = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceMatchCriteria
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		targeted = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClientVpnEndpointResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnEndpointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DnsName { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a Client VPN endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnEndpointStatus
	{
		
		public ClientVpnEndpointStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientVpnEndpointStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_associate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	/// <summary>
	/// Describes the authentication method to be used by a Client VPN endpoint. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a> in the <i>AWS Client VPN Administrator Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnAuthenticationRequest
	{
		
		public ClientVpnAuthenticationType Type { get; set; }
		
		/// <summary>
		/// Describes the Active Directory to be used for client authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectoryServiceAuthenticationRequest ActiveDirectory { get; set; }
		
		/// <summary>
		/// Information about the client certificate to be used for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateAuthenticationRequest MutualAuthentication { get; set; }
		
		/// <summary>
		/// The IAM SAML identity provider used for federated authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FederatedAuthenticationRequest FederatedAuthentication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientVpnAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		certificate_authentication = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		directory_service_authentication = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		federated_authentication = 2,
	}
	
	/// <summary>
	/// Describes the Active Directory to be used for client authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectoryServiceAuthenticationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryId { get; set; }
	}
	
	/// <summary>
	/// Information about the client certificate to be used for authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateAuthenticationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRootCertificateChainArn { get; set; }
	}
	
	/// <summary>
	/// The IAM SAML identity provider used for federated authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FederatedAuthenticationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClientVpnRouteResult
	{
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint route.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnRouteStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a Client VPN endpoint route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnRouteStatus
	{
		
		public ClientVpnRouteStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientVpnRouteStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
	}
	
	/// <summary>
	/// Contains the output of CreateCustomerGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCustomerGatewayResult
	{
		
		/// <summary>
		/// Describes a customer gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerGateway CustomerGateway { get; set; }
	}
	
	/// <summary>
	/// Describes a customer gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BgpAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDefaultSubnetResult
	{
		
		/// <summary>
		/// Describes a subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Subnet Subnet { get; set; }
	}
	
	/// <summary>
	/// Describes a subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableIpAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultForAz { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MapPublicIpOnLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MapCustomerOwnedIpOnLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
		
		public SubnetState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssignIpv6AddressOnCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetIpv6CidrBlockAssociation[] Ipv6CidrBlockAssociationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SubnetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDefaultVpcResult
	{
		
		/// <summary>
		/// Describes a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vpc Vpc { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Vpc
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DhcpOptionsId { get; set; }
		
		public VpcState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		public Tenancy InstanceTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcIpv6CidrBlockAssociation[] Ipv6CidrBlockAssociationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcCidrBlockAssociation[] CidrBlockAssociationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Tenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		host = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDhcpOptionsResult
	{
		
		/// <summary>
		/// Describes a set of DHCP options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DhcpOptions DhcpOptions { get; set; }
	}
	
	/// <summary>
	/// Describes a set of DHCP options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DhcpOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DhcpConfiguration[] DhcpConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DhcpOptionsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a DHCP configuration option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DhcpConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue[] Values { get; set; }
	}
	
	/// <summary>
	/// Describes a value for a resource attribute that is a String.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NewDhcpConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEgressOnlyInternetGatewayResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes an egress-only internet gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EgressOnlyInternetGateway EgressOnlyInternetGateway { get; set; }
	}
	
	/// <summary>
	/// Describes an egress-only internet gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EgressOnlyInternetGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InternetGatewayAttachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressOnlyInternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the attachment of a VPC to an internet gateway or an egress-only internet gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InternetGatewayAttachment
	{
		
		public AttachmentStatus State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFleetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateFleetError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateFleetInstance[] Instances { get; set; }
	}
	
	/// <summary>
	/// Describes the instances that could not be launched by the fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFleetError
	{
		
		/// <summary>
		/// Describes a launch template and overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateAndOverridesResponse LaunchTemplateAndOverrides { get; set; }
		
		public InstanceLifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template and overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateAndOverridesResponse
	{
		
		/// <summary>
		/// Describes the Amazon EC2 launch template and the launch template version that can be used by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
		
		/// <summary>
		/// Describes overrides for a launch template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateOverrides Overrides { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon EC2 launch template and the launch template version that can be used by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Describes overrides for a launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateOverrides
	{
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Priority { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementResponse Placement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t1_micro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_nano = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_micro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_small = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_medium = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_large = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_xlarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2_2xlarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_nano = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_micro = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_small = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_medium = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_large = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_xlarge = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3_2xlarge = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_nano = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_micro = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_small = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_medium = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_large = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_xlarge = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a_2xlarge = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m1_small = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m1_medium = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m1_large = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m1_xlarge = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m3_medium = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m3_large = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m3_xlarge = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m3_2xlarge = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_large = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_xlarge = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_2xlarge = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_4xlarge = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_10xlarge = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m4_16xlarge = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m2_xlarge = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m2_2xlarge = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m2_4xlarge = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cr1_8xlarge = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r3_large = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r3_xlarge = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r3_2xlarge = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r3_4xlarge = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r3_8xlarge = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_large = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_xlarge = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_2xlarge = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_4xlarge = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_8xlarge = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r4_16xlarge = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_large = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_xlarge = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_2xlarge = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_4xlarge = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_8xlarge = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_12xlarge = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_16xlarge = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_24xlarge = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5_metal = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_large = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_xlarge = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_2xlarge = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_4xlarge = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_8xlarge = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_12xlarge = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_16xlarge = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5a_24xlarge = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_large = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_xlarge = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_2xlarge = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_4xlarge = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_8xlarge = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_12xlarge = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_16xlarge = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_24xlarge = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5d_metal = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_large = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_xlarge = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_2xlarge = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_4xlarge = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_8xlarge = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_12xlarge = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_16xlarge = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5ad_24xlarge = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1_16xlarge = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1_32xlarge = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_xlarge = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_2xlarge = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_4xlarge = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_8xlarge = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_16xlarge = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x1e_32xlarge = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i2_xlarge = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i2_2xlarge = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i2_4xlarge = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i2_8xlarge = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_large = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_xlarge = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_2xlarge = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_4xlarge = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_8xlarge = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_16xlarge = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3_metal = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_large = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_xlarge = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_2xlarge = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_3xlarge = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_6xlarge = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_12xlarge = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_24xlarge = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i3en_metal = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi1_4xlarge = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hs1_8xlarge = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c1_medium = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c1_xlarge = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c3_large = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c3_xlarge = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c3_2xlarge = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c3_4xlarge = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c3_8xlarge = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c4_large = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c4_xlarge = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c4_2xlarge = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c4_4xlarge = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c4_8xlarge = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_large = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_xlarge = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_2xlarge = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_4xlarge = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_9xlarge = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_12xlarge = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_18xlarge = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_24xlarge = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5_metal = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_large = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_xlarge = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_2xlarge = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_4xlarge = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_8xlarge = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_12xlarge = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_16xlarge = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5a_24xlarge = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_large = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_xlarge = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_2xlarge = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_4xlarge = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_9xlarge = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_12xlarge = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_18xlarge = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_24xlarge = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5d_metal = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_large = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_xlarge = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_2xlarge = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_4xlarge = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_9xlarge = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		c5n_18xlarge = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc1_4xlarge = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cc2_8xlarge = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g2_2xlarge = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g2_8xlarge = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g3_4xlarge = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g3_8xlarge = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g3_16xlarge = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g3s_xlarge = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_xlarge = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_2xlarge = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_4xlarge = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_8xlarge = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_12xlarge = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_16xlarge = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		g4dn_metal = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cg1_4xlarge = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p2_xlarge = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p2_8xlarge = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p2_16xlarge = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p3_2xlarge = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p3_8xlarge = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p3_16xlarge = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		p3dn_24xlarge = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d2_xlarge = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d2_2xlarge = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d2_4xlarge = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		d2_8xlarge = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f1_2xlarge = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f1_4xlarge = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		f1_16xlarge = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_large = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_xlarge = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_2xlarge = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_4xlarge = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_8xlarge = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_12xlarge = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_16xlarge = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_24xlarge = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5_metal = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_large = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_xlarge = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_2xlarge = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_4xlarge = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_8xlarge = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_12xlarge = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_16xlarge = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5a_24xlarge = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_large = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_xlarge = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_2xlarge = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_4xlarge = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_8xlarge = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_12xlarge = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_16xlarge = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_24xlarge = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5d_metal = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_large = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_xlarge = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_2xlarge = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_4xlarge = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_8xlarge = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_12xlarge = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_16xlarge = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5ad_24xlarge = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		h1_2xlarge = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		h1_4xlarge = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		h1_8xlarge = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		h1_16xlarge = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_large = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_xlarge = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_2xlarge = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_3xlarge = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_6xlarge = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_12xlarge = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		z1d_metal = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u_6tb1_metal = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u_9tb1_metal = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u_12tb1_metal = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u_18tb1_metal = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		u_24tb1_metal = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_medium = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_large = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_xlarge = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_2xlarge = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_4xlarge = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		a1_metal = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_large = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_xlarge = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_2xlarge = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_4xlarge = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_8xlarge = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_12xlarge = 249,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_16xlarge = 250,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5dn_24xlarge = 251,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_large = 252,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_xlarge = 253,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_2xlarge = 254,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_4xlarge = 255,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_8xlarge = 256,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_12xlarge = 257,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_16xlarge = 258,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m5n_24xlarge = 259,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_large = 260,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_xlarge = 261,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_2xlarge = 262,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_4xlarge = 263,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_8xlarge = 264,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_12xlarge = 265,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_16xlarge = 266,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5dn_24xlarge = 267,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_large = 268,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_xlarge = 269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_2xlarge = 270,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_4xlarge = 271,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_8xlarge = 272,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_12xlarge = 273,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_16xlarge = 274,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		r5n_24xlarge = 275,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inf1_xlarge = 276,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inf1_2xlarge = 277,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inf1_6xlarge = 278,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inf1_24xlarge = 279,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_metal = 280,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_medium = 281,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_large = 282,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_xlarge = 283,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_2xlarge = 284,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_4xlarge = 285,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_8xlarge = 286,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_12xlarge = 287,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		m6g_16xlarge = 288,
	}
	
	/// <summary>
	/// Describes the placement of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlacementResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceLifecycle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on_demand = 1,
	}
	
	/// <summary>
	/// Describes the instances that were launched by the fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFleetInstance
	{
		
		/// <summary>
		/// Describes a launch template and overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateAndOverridesResponse LaunchTemplateAndOverrides { get; set; }
		
		public InstanceLifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		public PlatformValues Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotAllocationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowest_price = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		diversified = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		capacity_optimized = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotInstanceInterruptionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hibernate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetOnDemandAllocationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowest_price = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prioritized = 1,
	}
	
	/// <summary>
	/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p> <note> <p>This strategy can only be used if the EC2 Fleet is of type <code>instant</code>.</p> </note> <p>For more information about Capacity Reservations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2 Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationOptionsRequest
	{
		
		public FleetCapacityReservationUsageStrategy UsageStrategy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetCapacityReservationUsageStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		use_capacity_reservations_first = 0,
	}
	
	/// <summary>
	/// Describes a launch template and overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateConfigRequest
	{
		
		/// <summary>
		/// Describes the Amazon EC2 launch template and the launch template version that can be used by an EC2 Fleet to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateSpecificationRequest LaunchTemplateSpecification { get; set; }
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FleetLaunchTemplateOverridesRequest[] Overrides { get; set; }
	}
	
	/// <summary>
	/// Describes the Amazon EC2 launch template and the launch template version that can be used by an EC2 Fleet to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Describes overrides for a launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateOverridesRequest
	{
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Priority { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Placement Placement { get; set; }
	}
	
	/// <summary>
	/// Describes the placement of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Placement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Affinity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		public Tenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpreadDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostResourceGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DefaultTargetCapacityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on_demand = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFlowLogsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FlowLogIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFpgaImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageGlobalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
		
		/// <summary>
		/// Describes a block device for an EBS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsBlockDevice Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NoDevice { get; set; }
	}
	
	/// <summary>
	/// Describes a block device for an EBS volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsBlockDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		public VolumeType VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		io1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gp2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sc1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		st1 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceExportTaskResult
	{
		
		/// <summary>
		/// Describes an instance export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportTask ExportTask { get; set; }
	}
	
	/// <summary>
	/// Describes an instance export task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExportTaskId { get; set; }
		
		/// <summary>
		/// Describes the format and location for an instance export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportToS3Task ExportToS3Task { get; set; }
		
		/// <summary>
		/// Describes an instance to export.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceExportDetails InstanceExportDetails { get; set; }
		
		public ExportTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the format and location for an instance export task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportToS3Task
	{
		
		public ContainerFormat ContainerFormat { get; set; }
		
		public DiskImageFormat DiskImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContainerFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ova = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskImageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VMDK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VHD = 2,
	}
	
	/// <summary>
	/// Describes an instance to export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceExportDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public ExportEnvironment TargetEnvironment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		citrix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vmware = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		microsoft = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportTaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInternetGatewayResult
	{
		
		/// <summary>
		/// Describes an internet gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InternetGateway InternetGateway { get; set; }
	}
	
	/// <summary>
	/// Describes an internet gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InternetGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InternetGatewayAttachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyPair
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyFingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLaunchTemplateResult
	{
		
		/// <summary>
		/// Describes a launch template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
		
		/// <summary>
		/// The error codes and error messages that are returned for the parameters or parameter combinations that are not valid when a new launch template or new version of a launch template is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidationWarning Warning { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultVersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatestVersionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The error codes and error messages that are returned for the parameters or parameter combinations that are not valid when a new launch template or new version of a launch template is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidationWarning
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ValidationError[] Errors { get; set; }
	}
	
	/// <summary>
	/// The error code and error message that is returned for a parameter or parameter combination that is not valid when a new launch template or new version of a launch template is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ValidationError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// An IAM instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateIamInstanceProfileSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes the monitoring for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplatesMonitoringRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Describes the placement of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplatePlacementRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Affinity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		public Tenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpreadDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostResourceGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ShutdownBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stop = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 1,
	}
	
	/// <summary>
	/// The market (purchasing) option for the instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceMarketOptionsRequest
	{
		
		public MarketType MarketType { get; set; }
		
		/// <summary>
		/// The options for Spot Instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpotMarketOptionsRequest SpotOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MarketType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot = 0,
	}
	
	/// <summary>
	/// The options for Spot Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateSpotMarketOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		public SpotInstanceType SpotInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotInstanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		one_time = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		persistent = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceInterruptionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hibernate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stop = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminate = 2,
	}
	
	/// <summary>
	/// The credit option for CPU usage of a T2 or T3 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditSpecificationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	/// <summary>
	/// The CPU options for the instance. Both the core count and threads per core must be specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateCpuOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// Describes an instance's Capacity Reservation targeting option. You can specify only one option at a time. Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run in On-Demand capacity or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateCapacityReservationSpecificationRequest
	{
		
		public CapacityReservationPreference CapacityReservationPreference { get; set; }
		
		/// <summary>
		/// Describes a target Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationTarget CapacityReservationTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CapacityReservationPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
	}
	
	/// <summary>
	/// Describes a target Capacity Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
	}
	
	/// <summary>
	/// Indicates whether the instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateHibernationOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Configured { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceMetadataOptionsRequest
	{
		
		public LaunchTemplateHttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		public LaunchTemplateInstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LaunchTemplateHttpTokensState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LaunchTemplateInstanceMetadataEndpointState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLaunchTemplateVersionResult
	{
		
		/// <summary>
		/// Describes a launch template version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateVersion LaunchTemplateVersion { get; set; }
		
		/// <summary>
		/// The error codes and error messages that are returned for the parameters or parameter combinations that are not valid when a new launch template or new version of a launch template is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ValidationWarning Warning { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string VersionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultVersion { get; set; }
		
		/// <summary>
		/// The information for a launch template. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResponseLaunchTemplateData LaunchTemplateData { get; set; }
	}
	
	/// <summary>
	/// The information for a launch template. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResponseLaunchTemplateData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateIamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceNetworkInterfaceSpecification[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Describes the monitoring for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplatesMonitoring Monitoring { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplatePlacement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamDiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableApiTermination { get; set; }
		
		public ShutdownBehavior InstanceInitiatedShutdownBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateTagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpuSpecificationResponse[] ElasticGpuSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateElasticInferenceAcceleratorResponse[] ElasticInferenceAccelerators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The market (purchasing) option for the instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceMarketOptions InstanceMarketOptions { get; set; }
		
		/// <summary>
		/// Describes the credit option for CPU usage of a T2 or T3 instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreditSpecification CreditSpecification { get; set; }
		
		/// <summary>
		/// The CPU options for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateCpuOptions CpuOptions { get; set; }
		
		/// <summary>
		/// Information about the Capacity Reservation targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateCapacityReservationSpecificationResponse CapacityReservationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateLicenseConfiguration[] LicenseSpecifications { get; set; }
		
		/// <summary>
		/// Indicates whether an instance is configured for hibernation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateHibernationOptions HibernationOptions { get; set; }
		
		/// <summary>
		/// The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceMetadataOptions MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// Describes an IAM instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateIamInstanceProfileSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateBlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
		
		/// <summary>
		/// Describes a block device for an EBS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateEbsBlockDevice Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NoDevice { get; set; }
	}
	
	/// <summary>
	/// Describes a block device for an EBS volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateEbsBlockDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		public VolumeType VolumeType { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceNetworkInterfaceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InterfaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressSpecification[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceIpv6Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
	}
	
	/// <summary>
	/// Describes a secondary private IPv4 address for a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateIpAddressSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	/// <summary>
	/// Describes the monitoring for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplatesMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Describes the placement of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplatePlacement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Affinity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		public Tenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpreadDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostResourceGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionNumber { get; set; }
	}
	
	/// <summary>
	/// The tag specification for the launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateTagSpecification
	{
		
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes an elastic GPU.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticGpuSpecificationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	///  Describes an elastic inference accelerator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateElasticInferenceAcceleratorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// The market (purchasing) option for the instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceMarketOptions
	{
		
		public MarketType MarketType { get; set; }
		
		/// <summary>
		/// The options for Spot Instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpotMarketOptions SpotOptions { get; set; }
	}
	
	/// <summary>
	/// The options for Spot Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateSpotMarketOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		public SpotInstanceType SpotInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
	}
	
	/// <summary>
	/// Describes the credit option for CPU usage of a T2 or T3 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreditSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	/// <summary>
	/// The CPU options for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateCpuOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// Information about the Capacity Reservation targeting option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateCapacityReservationSpecificationResponse
	{
		
		public CapacityReservationPreference CapacityReservationPreference { get; set; }
		
		/// <summary>
		/// Describes a target Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationTargetResponse CapacityReservationTarget { get; set; }
	}
	
	/// <summary>
	/// Describes a target Capacity Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationTargetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
	}
	
	/// <summary>
	/// Describes a license configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateLicenseConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	/// <summary>
	/// Indicates whether an instance is configured for hibernation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateHibernationOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Configured { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceMetadataOptions
	{
		
		public LaunchTemplateInstanceMetadataOptionsState State { get; set; }
		
		public LaunchTemplateHttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		public LaunchTemplateInstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LaunchTemplateInstanceMetadataOptionsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		applied = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLocalGatewayRouteResult
	{
		
		/// <summary>
		/// Describes a route for a local gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRoute Route { get; set; }
	}
	
	/// <summary>
	/// Describes a route for a local gateway route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayVirtualInterfaceGroupId { get; set; }
		
		public LocalGatewayRouteType Type { get; set; }
		
		public LocalGatewayRouteState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LocalGatewayRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		propagated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LocalGatewayRouteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blackhole = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLocalGatewayRouteTableVpcAssociationResult
	{
		
		/// <summary>
		/// Describes an association between a local gateway route table and a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRouteTableVpcAssociation LocalGatewayRouteTableVpcAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a local gateway route table and a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayRouteTableVpcAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableVpcAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNatGatewayResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes a NAT gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NatGateway NatGateway { get; set; }
	}
	
	/// <summary>
	/// Describes a NAT gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NatGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DeleteTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NatGatewayAddress[] NatGatewayAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
		
		/// <summary>
		/// Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedBandwidth ProvisionedBandwidth { get; set; }
		
		public NatGatewayState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the IP addresses and network interface associated with a NAT gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NatGatewayAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	/// <summary>
	/// Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisionedBandwidth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ProvisionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provisioned { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Requested { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NatGatewayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkAclResult
	{
		
		/// <summary>
		/// Describes a network ACL.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkAcl NetworkAcl { get; set; }
	}
	
	/// <summary>
	/// Describes a network ACL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkAcl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkAclAssociation[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkAclEntry[] Entries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a network ACL and a subnet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkAclAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes an entry in a network ACL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkAclEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Egress { get; set; }
		
		/// <summary>
		/// Describes the ICMP type and code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IcmpTypeCode IcmpTypeCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		/// <summary>
		/// Describes a range of ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PortRange PortRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		public RuleAction RuleAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuleNumber { get; set; }
	}
	
	/// <summary>
	/// Describes the ICMP type and code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IcmpTypeCode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	/// <summary>
	/// Describes a range of ports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deny = 1,
	}
	
	/// <summary>
	/// Contains the output of CreateNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkInterfaceResult
	{
		
		/// <summary>
		/// Describes a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface NetworkInterface { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterface
	{
		
		/// <summary>
		/// Describes association information for an Elastic IP address (IPv4 only).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceAssociation Association { get; set; }
		
		/// <summary>
		/// Describes a network interface attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceAttachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		public NetworkInterfaceType InterfaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfacePrivateIpAddress[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequesterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SourceDestCheck { get; set; }
		
		public NetworkInterfaceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes association information for an Elastic IP address (IPv4 only).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfaceAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfaceAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AttachTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceOwnerId { get; set; }
		
		public AttachmentStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInterfaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@interface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		natGateway = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		efa = 2,
	}
	
	/// <summary>
	/// Describes an IPv6 address associated with a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfaceIpv6Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
	}
	
	/// <summary>
	/// Describes the private IPv4 address of a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfacePrivateIpAddress
	{
		
		/// <summary>
		/// Describes association information for an Elastic IP address (IPv4 only).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceAssociation Association { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInterfaceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		associated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attaching = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in_use = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detaching = 4,
	}
	
	/// <summary>
	/// Contains the output of CreateNetworkInterfacePermission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkInterfacePermissionResult
	{
		
		/// <summary>
		/// Describes a permission for a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfacePermission InterfacePermission { get; set; }
	}
	
	/// <summary>
	/// Describes a permission for a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfacePermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfacePermissionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsService { get; set; }
		
		public InterfacePermissionType Permission { get; set; }
		
		/// <summary>
		/// Describes the state of a network interface permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfacePermissionState PermissionState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InterfacePermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ATTACH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EIP_ASSOCIATE = 1,
	}
	
	/// <summary>
	/// Describes the state of a network interface permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfacePermissionState
	{
		
		public NetworkInterfacePermissionStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInterfacePermissionStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		granted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		revoking = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		revoked = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePlacementGroupResult
	{
		
		/// <summary>
		/// Describes a placement group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementGroup PlacementGroup { get; set; }
	}
	
	/// <summary>
	/// Describes a placement group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlacementGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		public PlacementGroupState State { get; set; }
		
		public PlacementStrategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlacementGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlacementStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spread = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		partition = 2,
	}
	
	/// <summary>
	/// Contains the output of CreateReservedInstancesListing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReservedInstancesListingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesListing[] ReservedInstancesListings { get; set; }
	}
	
	/// <summary>
	/// Describes the price for a Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PriceScheduleSpecification
	{
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteTableResult
	{
		
		/// <summary>
		/// Describes a route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteTable RouteTable { get; set; }
	}
	
	/// <summary>
	/// Describes a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteTable
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteTableAssociation[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PropagatingVgw[] PropagatingVgws { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Route[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a route table and a subnet or gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RouteTableAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Main { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		/// <summary>
		/// Describes the state of an association between a route table and a subnet or gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteTableAssociationState AssociationState { get; set; }
	}
	
	/// <summary>
	/// Describes a virtual private gateway propagating route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PropagatingVgw
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
	}
	
	/// <summary>
	/// Describes a route in a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Route
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationPrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressOnlyInternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		public RouteOrigin Origin { get; set; }
		
		public RouteState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RouteOrigin
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRouteTable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRoute = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnableVgwRoutePropagation = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RouteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blackhole = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	/// <summary>
	/// Describes a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DataEncryptionKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		public SnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotInfo[] Snapshots { get; set; }
	}
	
	/// <summary>
	/// Information about a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		public SnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CreateSpotDatafeedSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSpotDatafeedSubscriptionResult
	{
		
		/// <summary>
		/// Describes the data feed for a Spot Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotDatafeedSubscription SpotDatafeedSubscription { get; set; }
	}
	
	/// <summary>
	/// Describes the data feed for a Spot Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotDatafeedSubscription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Describes a Spot Instance state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotInstanceStateFault Fault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		public DatafeedSubscriptionState State { get; set; }
	}
	
	/// <summary>
	/// Describes a Spot Instance state change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotInstanceStateFault
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatafeedSubscriptionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSubnetResult
	{
		
		/// <summary>
		/// Describes a subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Subnet Subnet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorFilterResult
	{
		
		/// <summary>
		/// Describes the Traffic Mirror filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilter TrafficMirrorFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes the Traffic Mirror filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilterRule[] IngressFilterRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilterRule[] EgressFilterRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorNetworkService[] NetworkServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the Traffic Mirror rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorFilterRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		public TrafficDirection TrafficDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuleNumber { get; set; }
		
		public TrafficMirrorRuleAction RuleAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Protocol { get; set; }
		
		/// <summary>
		/// Describes the Traffic Mirror port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRange DestinationPortRange { get; set; }
		
		/// <summary>
		/// Describes the Traffic Mirror port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRange SourcePortRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ingress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		egress = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficMirrorRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		accept = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reject = 1,
	}
	
	/// <summary>
	/// Describes the Traffic Mirror port range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorPortRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficMirrorNetworkService
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amazon_dns = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorFilterRuleResult
	{
		
		/// <summary>
		/// Describes the Traffic Mirror rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilterRule TrafficMirrorFilterRule { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorSessionResult
	{
		
		/// <summary>
		/// Describes a Traffic Mirror session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorSession TrafficMirrorSession { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes a Traffic Mirror session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorSession
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PacketLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VirtualNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorTargetResult
	{
		
		/// <summary>
		/// Describes a Traffic Mirror target.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorTarget TrafficMirrorTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes a Traffic Mirror target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkLoadBalancerArn { get; set; }
		
		public TrafficMirrorTargetType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficMirrorTargetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network_interface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		network_load_balancer = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayResult
	{
		
		/// <summary>
		/// Describes a transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGateway TransitGateway { get; set; }
	}
	
	/// <summary>
	/// Describes a transit gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		public TransitGatewayState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		/// <summary>
		/// Describes the options for a transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modifying = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	/// <summary>
	/// Describes the options for a transit gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		public AutoAcceptSharedAttachmentsValue AutoAcceptSharedAttachments { get; set; }
		
		public DefaultRouteTableAssociationValue DefaultRouteTableAssociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationDefaultRouteTableId { get; set; }
		
		public DefaultRouteTablePropagationValue DefaultRouteTablePropagation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PropagationDefaultRouteTableId { get; set; }
		
		public VpnEcmpSupportValue VpnEcmpSupport { get; set; }
		
		public DnsSupportValue DnsSupport { get; set; }
		
		public MulticastSupportValue MulticastSupport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoAcceptSharedAttachmentsValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DefaultRouteTableAssociationValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DefaultRouteTablePropagationValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpnEcmpSupportValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MulticastSupportValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disable = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayMulticastDomainResult
	{
		
		/// <summary>
		/// Describes the transit gateway multicast domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomain TransitGatewayMulticastDomain { get; set; }
	}
	
	/// <summary>
	/// Describes the transit gateway multicast domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastDomain
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		public TransitGatewayMulticastDomainState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayMulticastDomainState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayPeeringAttachmentResult
	{
		
		/// <summary>
		/// Describes the transit gateway peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeeringAttachment TransitGatewayPeeringAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayRouteResult
	{
		
		/// <summary>
		/// Describes a route for a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRoute Route { get; set; }
	}
	
	/// <summary>
	/// Describes a route for a transit gateway route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteAttachment[] TransitGatewayAttachments { get; set; }
		
		public TransitGatewayRouteType Type { get; set; }
		
		public TransitGatewayRouteState State { get; set; }
	}
	
	/// <summary>
	/// Describes a route attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRouteAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		propagated = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayRouteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blackhole = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayRouteTableResult
	{
		
		/// <summary>
		/// Describes a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTable TransitGatewayRouteTable { get; set; }
	}
	
	/// <summary>
	/// Describes a transit gateway route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRouteTable
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		public TransitGatewayRouteTableState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultAssociationRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultPropagationRouteTable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayRouteTableState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayVpcAttachmentResult
	{
		
		/// <summary>
		/// Describes a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment TransitGatewayVpcAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Volume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeAttachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		public VolumeState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public VolumeType VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FastRestored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAttachEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creating = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in_use = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcResult
	{
		
		/// <summary>
		/// Describes a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vpc Vpc { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CreateVpcEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointResult
	{
		
		/// <summary>
		/// Describes a VPC endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcEndpoint VpcEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		public VpcEndpointType VpcEndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		public State State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivateDnsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequesterManaged { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsEntry[] DnsEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		/// <summary>
		/// The last error that occurred for a VPC endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LastError LastError { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gateway = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum State
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingAcceptance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expired = 7,
	}
	
	/// <summary>
	/// Describes a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityGroupIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	/// <summary>
	/// Describes a DNS entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DnsEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostedZoneId { get; set; }
	}
	
	/// <summary>
	/// The last error that occurred for a VPC endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LastError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointConnectionNotificationResult
	{
		
		/// <summary>
		/// Describes a connection notification for a VPC endpoint or VPC endpoint service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectionNotification ConnectionNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes a connection notification for a VPC endpoint or VPC endpoint service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionNotification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		public ConnectionNotificationType ConnectionNotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConnectionEvents { get; set; }
		
		public ConnectionNotificationState ConnectionNotificationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Topic = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConnectionNotificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointServiceConfigurationResult
	{
		
		/// <summary>
		/// Describes a service configuration for a VPC endpoint service.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceConfiguration ServiceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Describes a service configuration for a VPC endpoint service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceTypeDetail[] ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		public ServiceState ServiceState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AcceptanceRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ManagesVpcEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkLoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BaseEndpointDnsNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		/// <summary>
		/// Information about the private DNS name for the service endpoint. For more information about these parameters, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PrivateDnsNameConfiguration PrivateDnsNameConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the type of service for a VPC endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceTypeDetail
	{
		
		public ServiceType ServiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Interface = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gateway = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleted = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
	}
	
	/// <summary>
	/// Information about the private DNS name for the service endpoint. For more information about these parameters, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrivateDnsNameConfiguration
	{
		
		public DnsNameState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DnsNameState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pendingVerification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		verified = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcPeeringConnectionResult
	{
		
		/// <summary>
		/// Describes a VPC peering connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnection VpcPeeringConnection { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CreateVpnConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpnConnectionResult
	{
		
		/// <summary>
		/// Describes a VPN connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnection VpnConnection { get; set; }
	}
	
	/// <summary>
	/// Describes a VPN connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnConnection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		public VpnState State { get; set; }
		
		public GatewayType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		/// <summary>
		/// Describes VPN connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnectionOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpnStaticRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VgwTelemetry[] VgwTelemetry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpnState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleting = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GatewayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipsec_1 = 0,
	}
	
	/// <summary>
	/// Describes VPN connection options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnConnectionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAcceleration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StaticRoutesOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TunnelOption[] TunnelOptions { get; set; }
	}
	
	/// <summary>
	/// The VPN tunnel options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TunnelOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutsideIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TunnelInsideCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSharedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase1LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase2LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyMarginTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyFuzzPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplayWindowSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DpdTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1EncryptionAlgorithmsListValue[] Phase1EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2EncryptionAlgorithmsListValue[] Phase2EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1IntegrityAlgorithmsListValue[] Phase1IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2IntegrityAlgorithmsListValue[] Phase2IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1DHGroupNumbersListValue[] Phase1DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2DHGroupNumbersListValue[] Phase2DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IKEVersionsListValue[] IkeVersions { get; set; }
	}
	
	/// <summary>
	/// The encryption algorithm for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1EncryptionAlgorithmsListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The encryption algorithm for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2EncryptionAlgorithmsListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The integrity algorithm for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1IntegrityAlgorithmsListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The integrity algorithm for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2IntegrityAlgorithmsListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The Diffie-Hellmann group number for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1DHGroupNumbersListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// The Diffie-Hellmann group number for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2DHGroupNumbersListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// The internet key exchange (IKE) version permitted for the VPN tunnel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IKEVersionsListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes a static route for a VPN connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnStaticRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		public VpnStaticRouteSource Source { get; set; }
		
		public VpnState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpnStaticRouteSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Static = 0,
	}
	
	/// <summary>
	/// Describes telemetry for a VPN tunnel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VgwTelemetry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AcceptedRouteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastStatusChange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutsideIpAddress { get; set; }
		
		public TelemetryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TelemetryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWN = 1,
	}
	
	/// <summary>
	/// Contains the output of CreateVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpnGatewayResult
	{
		
		/// <summary>
		/// Describes a virtual private gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnGateway VpnGateway { get; set; }
	}
	
	/// <summary>
	/// Describes a virtual private gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public VpnState State { get; set; }
		
		public GatewayType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcAttachment[] VpcAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClientVpnEndpointResult
	{
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnEndpointStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClientVpnRouteResult
	{
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint route.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnRouteStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEgressOnlyInternetGatewayResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFleetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteFleetSuccessItem[] SuccessfulFleetDeletions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteFleetErrorItem[] UnsuccessfulFleetDeletions { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 Fleet that was successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFleetSuccessItem
	{
		
		public FleetStateCode CurrentFleetState { get; set; }
		
		public FleetStateCode PreviousFleetState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted_running = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted_terminating = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modifying = 6,
	}
	
	/// <summary>
	/// Describes an EC2 Fleet that was not successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFleetErrorItem
	{
		
		/// <summary>
		/// Describes an EC2 Fleet error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteFleetError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 Fleet error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFleetError
	{
		
		public DeleteFleetErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteFleetErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetIdDoesNotExist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetIdMalformed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetNotInDeletableState = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unexpectedError = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFlowLogsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFpgaImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateResult
	{
		
		/// <summary>
		/// Describes a launch template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteLaunchTemplateVersionsResponseSuccessItem[] SuccessfullyDeletedLaunchTemplateVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteLaunchTemplateVersionsResponseErrorItem[] UnsuccessfullyDeletedLaunchTemplateVersions { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template version that was successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateVersionsResponseSuccessItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template version that could not be deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateVersionsResponseErrorItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
		
		/// <summary>
		/// Describes the error that's returned when you cannot delete a launch template version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResponseError ResponseError { get; set; }
	}
	
	/// <summary>
	/// Describes the error that's returned when you cannot delete a launch template version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResponseError
	{
		
		public LaunchTemplateErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LaunchTemplateErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchTemplateIdDoesNotExist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchTemplateIdMalformed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchTemplateNameDoesNotExist = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchTemplateNameMalformed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchTemplateVersionDoesNotExist = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unexpectedError = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLocalGatewayRouteResult
	{
		
		/// <summary>
		/// Describes a route for a local gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRoute Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLocalGatewayRouteTableVpcAssociationResult
	{
		
		/// <summary>
		/// Describes an association between a local gateway route table and a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRouteTableVpcAssociation LocalGatewayRouteTableVpcAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNatGatewayResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DeleteNetworkInterfacePermission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkInterfacePermissionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteQueuedReservedInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuccessfulQueuedPurchaseDeletion[] SuccessfulQueuedPurchaseDeletions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FailedQueuedPurchaseDeletion[] FailedQueuedPurchaseDeletions { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance whose queued purchase was successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuccessfulQueuedPurchaseDeletion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance whose queued purchase was not deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailedQueuedPurchaseDeletion
	{
		
		/// <summary>
		/// Describes the error for a Reserved Instance whose queued purchase could not be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteQueuedReservedInstancesError Error { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
	}
	
	/// <summary>
	/// Describes the error for a Reserved Instance whose queued purchase could not be deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteQueuedReservedInstancesError
	{
		
		public DeleteQueuedReservedInstancesErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteQueuedReservedInstancesErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reserved_instances_id_invalid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reserved_instances_not_in_queued_state = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unexpected_error = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorFilterResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorFilterRuleResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterRuleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorSessionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorSessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorTargetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayResult
	{
		
		/// <summary>
		/// Describes a transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGateway TransitGateway { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayMulticastDomainResult
	{
		
		/// <summary>
		/// Describes the transit gateway multicast domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomain TransitGatewayMulticastDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayPeeringAttachmentResult
	{
		
		/// <summary>
		/// Describes the transit gateway peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeeringAttachment TransitGatewayPeeringAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayRouteResult
	{
		
		/// <summary>
		/// Describes a route for a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRoute Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayRouteTableResult
	{
		
		/// <summary>
		/// Describes a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTable TransitGatewayRouteTable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayVpcAttachmentResult
	{
		
		/// <summary>
		/// Describes a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment TransitGatewayVpcAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointConnectionNotificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointServiceConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DeleteVpcEndpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcPeeringConnectionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprovisionByoipCidrResult
	{
		
		/// <summary>
		/// Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ByoipCidr ByoipCidr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterInstanceEventNotificationAttributesResult
	{
		
		/// <summary>
		/// Describes the registered tag keys for the current Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTagNotificationAttribute InstanceTagAttribute { get; set; }
	}
	
	/// <summary>
	/// Describes the registered tag keys for the current Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTagNotificationAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceTagKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllTagsOfInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTransitGatewayMulticastGroupMembersResult
	{
		
		/// <summary>
		/// Describes the deregistered transit gateway multicast group members.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDeregisteredGroupMembers DeregisteredMulticastGroupMembers { get; set; }
	}
	
	/// <summary>
	/// Describes the deregistered transit gateway multicast group members.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastDeregisteredGroupMembers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeregisteredNetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTransitGatewayMulticastGroupSourcesResult
	{
		
		/// <summary>
		/// Describes the deregistered transit gateway multicast group sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDeregisteredGroupSources DeregisteredMulticastGroupSources { get; set; }
	}
	
	/// <summary>
	/// Describes the deregistered transit gateway multicast group sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastDeregisteredGroupSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DeregisteredNetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAttribute[] AccountAttributes { get; set; }
	}
	
	/// <summary>
	/// Describes an account attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAttributeValue[] AttributeValues { get; set; }
	}
	
	/// <summary>
	/// Describes a value of an account attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountAttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttributeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supported_platforms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		default_vpc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
	}
	
	/// <summary>
	/// Describes an Elastic IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		public DomainType Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpv4Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
	}
	
	/// <summary>
	/// <p>A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs. The filters supported by a describe operation are documented with the describe operation. For example:</p> <ul> <li> <p> <a>DescribeAvailabilityZones</a> </p> </li> <li> <p> <a>DescribeImages</a> </p> </li> <li> <p> <a>DescribeInstances</a> </p> </li> <li> <p> <a>DescribeKeyPairs</a> </p> </li> <li> <p> <a>DescribeSecurityGroups</a> </p> </li> <li> <p> <a>DescribeSnapshots</a> </p> </li> <li> <p> <a>DescribeSubnets</a> </p> </li> <li> <p> <a>DescribeTags</a> </p> </li> <li> <p> <a>DescribeVolumes</a> </p> </li> <li> <p> <a>DescribeVpcs</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregateIdFormatResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLongIdsAggregated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdFormat[] Statuses { get; set; }
	}
	
	/// <summary>
	/// Describes the ID format for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IdFormat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLongIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailabilityZonesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// Describes an Availability Zone or Local Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		public AvailabilityZoneState State { get; set; }
		
		public AvailabilityZoneOptInStatus OptInStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZoneMessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ZoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AvailabilityZoneState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		information = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AvailabilityZoneOptInStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		opt_in_not_required = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		opted_in = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_opted_in = 2,
	}
	
	/// <summary>
	/// Describes a message about an Availability Zone or Local Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZoneMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBundleTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BundleTask[] BundleTasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeByoipCidrsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ByoipCidr[] ByoipCidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCapacityReservationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservation[] CapacityReservations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClassicLinkInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClassicLinkInstance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a linked EC2-Classic instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClassicLinkInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnAuthorizationRulesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthorizationRule[] AuthorizationRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about an authorization rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizationRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccessAll { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidr { get; set; }
		
		/// <summary>
		/// Describes the state of an authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnAuthorizationRuleStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnConnection[] Connections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a client connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnConnection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionEstablishedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngressBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngressPackets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressPackets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CommonName { get; set; }
		
		/// <summary>
		/// Describes the status of a client connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnConnectionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionEndTime { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a client connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnConnectionStatus
	{
		
		public ClientVpnConnectionStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientVpnConnectionStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed_to_terminate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminating = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnEndpointsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnEndpoint[] ClientVpnEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a Client VPN endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnEndpointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DnsServers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SplitTunnel { get; set; }
		
		public VpnProtocol VpnProtocol { get; set; }
		
		public TransportProtocol TransportProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VpnPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssociatedTargetNetwork[] AssociatedTargetNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnAuthentication[] AuthenticationOptions { get; set; }
		
		/// <summary>
		/// Information about the client connection logging options for a Client VPN endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectionLogResponseOptions ConnectionLogOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpnProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		openvpn = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransportProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 1,
	}
	
	/// <summary>
	/// Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociatedTargetNetwork
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkId { get; set; }
		
		public AssociatedNetworkType NetworkType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AssociatedNetworkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vpc = 0,
	}
	
	/// <summary>
	/// Describes the authentication methods used by a Client VPN endpoint. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a> in the <i>AWS Client VPN Administrator Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnAuthentication
	{
		
		public ClientVpnAuthenticationType Type { get; set; }
		
		/// <summary>
		/// Describes an Active Directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DirectoryServiceAuthentication ActiveDirectory { get; set; }
		
		/// <summary>
		/// Information about the client certificate used for authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CertificateAuthentication MutualAuthentication { get; set; }
		
		/// <summary>
		/// Describes the IAM SAML identity provider used for federated authentication.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FederatedAuthentication FederatedAuthentication { get; set; }
	}
	
	/// <summary>
	/// Describes an Active Directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DirectoryServiceAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DirectoryId { get; set; }
	}
	
	/// <summary>
	/// Information about the client certificate used for authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CertificateAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRootCertificateChain { get; set; }
	}
	
	/// <summary>
	/// Describes the IAM SAML identity provider used for federated authentication.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FederatedAuthentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SamlProviderArn { get; set; }
	}
	
	/// <summary>
	/// Information about the client connection logging options for a Client VPN endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionLogResponseOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudwatchLogGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudwatchLogStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnRoutesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Information about a Client VPN endpoint route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientVpnRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetSubnet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Origin { get; set; }
		
		/// <summary>
		/// Describes the state of a Client VPN endpoint route.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnRouteStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnTargetNetworksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetNetwork[] ClientVpnTargetNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a target network associated with a Client VPN endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetNetwork
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		/// <summary>
		/// Describes the state of a target network association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCoipPoolsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoipPool[] CoipPools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a customer-owned address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoipPool
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolCidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConversionTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConversionTask[] ConversionTasks { get; set; }
	}
	
	/// <summary>
	/// Describes a conversion task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConversionTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConversionTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExpirationTime { get; set; }
		
		/// <summary>
		/// Describes an import instance task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportInstanceTaskDetails ImportInstance { get; set; }
		
		/// <summary>
		/// Describes an import volume task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportVolumeTaskDetails ImportVolume { get; set; }
		
		public ConversionTaskState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes an import instance task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportInstanceTaskDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public PlatformValues Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportInstanceVolumeDetailItem[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Describes an import volume task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportInstanceVolumeDetailItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesConverted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskImageDescription Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Describes a disk image volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskImageVolumeDescription Volume { get; set; }
	}
	
	/// <summary>
	/// Describes a disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskImageDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Checksum { get; set; }
		
		public DiskImageFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportManifestUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// Describes a disk image volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskImageVolumeDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// Describes an import volume task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportVolumeTaskDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesConverted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskImageDescription Image { get; set; }
		
		/// <summary>
		/// Describes a disk image volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskImageVolumeDescription Volume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ConversionTaskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 3,
	}
	
	/// <summary>
	/// Contains the output of DescribeCustomerGateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCustomerGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGateway[] CustomerGateways { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDhcpOptionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DhcpOptions[] DhcpOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEgressOnlyInternetGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EgressOnlyInternetGateway[] EgressOnlyInternetGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeElasticGpusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpus[] ElasticGpuSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an Elastic Graphics accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticGpus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuType { get; set; }
		
		/// <summary>
		/// Describes the status of an Elastic Graphics accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpuHealth ElasticGpuHealth { get; set; }
		
		public ElasticGpuState ElasticGpuState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the status of an Elastic Graphics accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticGpuHealth
	{
		
		public ElasticGpuStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticGpuStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPAIRED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ElasticGpuState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExportImageTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExportImageTask[] ExportImageTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an export image task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportImageTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExportImageTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		/// <summary>
		/// Describes the destination for an export image task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportTaskS3Location S3ExportLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// Describes the destination for an export image task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportTaskS3Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExportTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExportTask[] ExportTasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFastSnapshotRestoresResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeFastSnapshotRestoreSuccessItem[] FastSnapshotRestores { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes fast snapshot restores for a snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFastSnapshotRestoreSuccessItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public FastSnapshotRestoreStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateTransitionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OptimizingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisabledTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FastSnapshotRestoreStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optimizing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetHistoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HistoryRecordEntry[] HistoryRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastEvaluatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Describes an event in the history of an EC2 Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoryRecordEntry
	{
		
		/// <summary>
		/// Describes an EC2 Fleet or Spot Fleet event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventInformation EventInformation { get; set; }
		
		public FleetEventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 Fleet or Spot Fleet event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EventDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventSubType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_change = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleet_change = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		service_error = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveInstance[] ActiveInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
	}
	
	/// <summary>
	/// Describes a running instance in a Spot Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ActiveInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotInstanceRequestId { get; set; }
		
		public InstanceHealthStatus InstanceHealth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceHealthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FleetData[] Fleets { get; set; }
	}
	
	/// <summary>
	/// Describes an EC2 Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetData
	{
		
		public FleetActivityStatus ActivityStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		public FleetStateCode FleetState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		public FleetExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FulfilledCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FulfilledOnDemandCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateConfig[] LaunchTemplateConfigs { get; set; }
		
		/// <summary>
		/// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code>, or both to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html">OnDemandOptions</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions">SpotOptions</a> </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetCapacitySpecification TargetCapacitySpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminateInstancesWithExpiration { get; set; }
		
		public FleetType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplaceUnhealthyInstances { get; set; }
		
		/// <summary>
		/// Describes the configuration of Spot Instances in an EC2 Fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotOptions SpotOptions { get; set; }
		
		/// <summary>
		/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnDemandOptions OnDemandOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeFleetError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeFleetsInstances[] Instances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetActivityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_fulfillment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_termination = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fulfilled = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetExcessCapacityTerminationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		no_termination = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		termination = 1,
	}
	
	/// <summary>
	/// Describes a launch template and overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FleetLaunchTemplateConfig
	{
		
		/// <summary>
		/// Describes the Amazon EC2 launch template and the launch template version that can be used by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateOverrides[] Overrides { get; set; }
	}
	
	/// <summary>
	/// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code>, or both to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html">OnDemandOptions</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions">SpotOptions</a> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetCapacitySpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpotTargetCapacity { get; set; }
		
		public DefaultTargetCapacityType DefaultTargetCapacityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FleetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		request = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		maintain = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instant = 2,
	}
	
	/// <summary>
	/// Describes the configuration of Spot Instances in an EC2 Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotOptions
	{
		
		public SpotAllocationStrategy AllocationStrategy { get; set; }
		
		public SpotInstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancePoolsToUseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxTotalPrice { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OnDemandOptions
	{
		
		public FleetOnDemandAllocationStrategy AllocationStrategy { get; set; }
		
		/// <summary>
		/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p> <note> <p>This strategy can only be used if the EC2 Fleet is of type <code>instant</code>.</p> </note> <p>For more information about Capacity Reservations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2 Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationOptions CapacityReservationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxTotalPrice { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p> <note> <p>This strategy can only be used if the EC2 Fleet is of type <code>instant</code>.</p> </note> <p>For more information about Capacity Reservations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2 Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationOptions
	{
		
		public FleetCapacityReservationUsageStrategy UsageStrategy { get; set; }
	}
	
	/// <summary>
	/// Describes the instances that could not be launched by the fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetError
	{
		
		/// <summary>
		/// Describes a launch template and overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateAndOverridesResponse LaunchTemplateAndOverrides { get; set; }
		
		public InstanceLifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Describes the instances that were launched by the fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetsInstances
	{
		
		/// <summary>
		/// Describes a launch template and overrides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateAndOverridesResponse LaunchTemplateAndOverrides { get; set; }
		
		public InstanceLifecycle Lifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		public PlatformValues Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFlowLogsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlowLog[] FlowLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a flow log.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FlowLog
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliverLogsErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliverLogsPermissionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliverLogsStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowLogId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlowLogStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TrafficType TrafficType { get; set; }
		
		public LogDestinationType LogDestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAggregationInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cloud_watch_logs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFpgaImageAttributeResult
	{
		
		/// <summary>
		/// Describes an Amazon FPGA image (AFI) attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FpgaImageAttribute FpgaImageAttribute { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon FPGA image (AFI) attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaImageAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadPermission[] LoadPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
	}
	
	/// <summary>
	/// Describes a load permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadPermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		public PermissionGroup Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PermissionGroup
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
	}
	
	/// <summary>
	/// Describes a product code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProductCode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductCodeId { get; set; }
		
		public ProductCodeValues ProductCodeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProductCodeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		devpay = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		marketplace = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFpgaImagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FpgaImage[] FpgaImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an Amazon FPGA image (AFI).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageGlobalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShellVersion { get; set; }
		
		/// <summary>
		/// Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PciId PciId { get; set; }
		
		/// <summary>
		/// Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FpgaImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataRetentionSupport { get; set; }
	}
	
	/// <summary>
	/// Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PciId
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VendorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubsystemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubsystemVendorId { get; set; }
	}
	
	/// <summary>
	/// Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaImageState
	{
		
		public FpgaImageStateCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FpgaImageStateCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostReservationOfferingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostOffering[] OfferingSet { get; set; }
	}
	
	/// <summary>
	/// Details about the Dedicated Host Reservation offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostOffering
	{
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		public PaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpfrontPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllUpfront = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartialUpfront = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoUpfront = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostReservationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HostReservation[] HostReservationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details about the Dedicated Host Reservation and associated Dedicated Hosts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostReservation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIdSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		public PaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		public ReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpfrontPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment_pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment_failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		retired = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Host[] Hosts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of the Dedicated Host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Host
	{
		
		public AutoPlacement AutoPlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The capacity information for instances that can be launched onto the Dedicated Host. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailableCapacity AvailableCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		/// <summary>
		/// Describes the properties of a Dedicated Host.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HostProperties HostProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostInstance[] Instances { get; set; }
		
		public AllocationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AllocationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReleaseTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public HostRecovery HostRecovery { get; set; }
		
		public AllowsMultipleInstanceTypes AllowsMultipleInstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MemberOfServiceLinkedResourceGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		off = 1,
	}
	
	/// <summary>
	/// The capacity information for instances that can be launched onto the Dedicated Host. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailableCapacity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceCapacity[] AvailableInstanceCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableVCpus { get; set; }
	}
	
	/// <summary>
	/// Information about the number of instances that can be launched onto the Dedicated Host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceCapacity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCapacity { get; set; }
	}
	
	/// <summary>
	/// Describes the properties of a Dedicated Host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Cores { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalVCpus { get; set; }
	}
	
	/// <summary>
	/// Describes an instance running on a Dedicated Host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AllocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		under_assessment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		permanent_failure = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		released = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		released_permanent_failure = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HostRecovery
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		off = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AllowsMultipleInstanceTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		off = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIamInstanceProfileAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileAssociation[] IamInstanceProfileAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdFormatResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdFormat[] Statuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityIdFormatResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IdFormat[] Statuses { get; set; }
	}
	
	/// <summary>
	/// Describes an image attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImageAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchPermission[] LaunchPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Description { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue KernelId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue RamdiskId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue SriovNetSupport { get; set; }
	}
	
	/// <summary>
	/// Describes a launch permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchPermission
	{
		
		public PermissionGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Image[] Images { get; set; }
	}
	
	/// <summary>
	/// Describes an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Image
	{
		
		public ArchitectureValues Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageLocation { get; set; }
		
		public ImageTypeValues ImageType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		public PlatformValues Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlatformDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UsageOperation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		public ImageState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnaSupport { get; set; }
		
		public HypervisorType Hypervisor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageOwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RootDeviceName { get; set; }
		
		public DeviceType RootDeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SriovNetSupport { get; set; }
		
		/// <summary>
		/// Describes a state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StateReason StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public VirtualizationType VirtualizationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArchitectureValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i386 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86_64 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm64 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImageTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		machine = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kernel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ramdisk = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImageState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deregistered = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transient = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HypervisorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ovm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xen = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ebs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_store = 1,
	}
	
	/// <summary>
	/// Describes a state change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StateReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VirtualizationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hvm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paravirtual = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImportImageTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImportImageTask[] ImportImageTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an import image task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportImageTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Hypervisor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDetail[] SnapshotDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportImageLicenseConfigurationResponse[] LicenseSpecifications { get; set; }
	}
	
	/// <summary>
	/// Describes the snapshot created from the imported disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DiskImageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Describes the S3 bucket for the disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserBucketDetails UserBucket { get; set; }
	}
	
	/// <summary>
	/// Describes the S3 bucket for the disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserBucketDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	///  The response information for license configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportImageLicenseConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImportSnapshotTasksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ImportSnapshotTask[] ImportSnapshotTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an import snapshot task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportSnapshotTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
		
		/// <summary>
		/// Details about the import snapshot task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnapshotTaskDetail SnapshotTaskDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Details about the import snapshot task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotTaskDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DiskImageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Describes the S3 bucket for the disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserBucketDetails UserBucket { get; set; }
	}
	
	/// <summary>
	/// Describes an instance attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue DisableApiTermination { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnaSupport { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue InstanceInitiatedShutdownBehavior { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue InstanceType { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue RamdiskId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue RootDeviceName { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue SourceDestCheck { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue SriovNetSupport { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue UserData { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceBlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Describes a parameter used to set up an EBS volume in a block device mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsInstanceBlockDevice Ebs { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter used to set up an EBS volume in a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsInstanceBlockDevice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AttachTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		public AttachmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
	}
	
	/// <summary>
	/// Describes a value for a resource attribute that is a Boolean value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttributeBooleanValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceCreditSpecificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceCreditSpecification[] InstanceCreditSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the credit option for CPU usage of a burstable performance instance. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceCreditSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceEventNotificationAttributesResult
	{
		
		/// <summary>
		/// Describes the registered tag keys for the current Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTagNotificationAttribute InstanceTagAttribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatus[] InstanceStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the status of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatusEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes the current state of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState InstanceState { get; set; }
		
		/// <summary>
		/// Describes the status of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="InstanceStatus")]
		public InstanceStatusSummary InstanceStatus1 { get; set; }
		
		/// <summary>
		/// Describes the status of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatusSummary SystemStatus { get; set; }
	}
	
	/// <summary>
	/// Describes a scheduled event for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStatusEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceEventId { get; set; }
		
		public EventCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBeforeDeadline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_reboot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system_reboot = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system_maintenance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_retirement = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_stop = 4,
	}
	
	/// <summary>
	/// Describes the current state of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Code { get; set; }
		
		public InstanceStateName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStateName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		running = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shutting_down = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		terminated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stopped = 5,
	}
	
	/// <summary>
	/// Describes the status of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStatusSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatusDetails[] Details { get; set; }
		
		public SummaryStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes the instance status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStatusDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ImpairedSince { get; set; }
		
		public StatusName Name { get; set; }
		
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reachability = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		passed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insufficient_data = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initializing = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		impaired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insufficient_data = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_applicable = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initializing = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceTypeOfferingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTypeOffering[] InstanceTypeOfferings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The instance types offered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTypeOffering
	{
		
		public InstanceType InstanceType { get; set; }
		
		public LocationType LocationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		region = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		availability_zone = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		availability_zone_id = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceTypesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTypeInfo[] InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTypeInfo
	{
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FreeTierEligible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageClassType[] SupportedUsageClasses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RootDeviceType[] SupportedRootDeviceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VirtualizationType[] SupportedVirtualizationTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BareMetal { get; set; }
		
		public InstanceTypeHypervisor Hypervisor { get; set; }
		
		/// <summary>
		/// Describes the processor used by the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProcessorInfo ProcessorInfo { get; set; }
		
		/// <summary>
		/// Describes the vCPU configurations for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VCpuInfo VCpuInfo { get; set; }
		
		/// <summary>
		/// Describes the memory for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MemoryInfo MemoryInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InstanceStorageSupported { get; set; }
		
		/// <summary>
		/// Describes the disks that are available for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceStorageInfo InstanceStorageInfo { get; set; }
		
		/// <summary>
		/// Describes the Amazon EBS features supported by the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsInfo EbsInfo { get; set; }
		
		/// <summary>
		/// Describes the networking features of the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInfo NetworkInfo { get; set; }
		
		/// <summary>
		/// Describes the GPU accelerators for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GpuInfo GpuInfo { get; set; }
		
		/// <summary>
		/// Describes the FPGAs for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FpgaInfo FpgaInfo { get; set; }
		
		/// <summary>
		/// Describes the placement group support of the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementGroupInfo PlacementGroupInfo { get; set; }
		
		/// <summary>
		/// Describes the Inference accelerators for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InferenceAcceleratorInfo InferenceAcceleratorInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HibernationSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BurstablePerformanceSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DedicatedHostsSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoRecoverySupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UsageClassType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		on_demand = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RootDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ebs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_store = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceTypeHypervisor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nitro = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xen = 1,
	}
	
	/// <summary>
	/// Describes the processor used by the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProcessorInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ArchitectureType[] SupportedArchitectures { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SustainedClockSpeedInGhz { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArchitectureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		i386 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x86_64 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		arm64 = 2,
	}
	
	/// <summary>
	/// Describes the vCPU configurations for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VCpuInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultVCpus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultCores { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultThreadsPerCore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ValidCores { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ValidThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// Describes the memory for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MemoryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInMiB { get; set; }
	}
	
	/// <summary>
	/// Describes the disks that are available for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStorageInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalSizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskInfo[] Disks { get; set; }
	}
	
	/// <summary>
	/// Describes the disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGB { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		public DiskType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hdd = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssd = 1,
	}
	
	/// <summary>
	/// Describes the Amazon EBS features supported by the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsInfo
	{
		
		public EbsOptimizedSupport EbsOptimizedSupport { get; set; }
		
		public EbsEncryptionSupport EncryptionSupport { get; set; }
		
		/// <summary>
		/// Describes the optimized EBS performance for supported instance types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsOptimizedInfo EbsOptimizedInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EbsOptimizedSupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supported = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EbsEncryptionSupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supported = 1,
	}
	
	/// <summary>
	/// Describes the optimized EBS performance for supported instance types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsOptimizedInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BaselineBandwidthInMbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BaselineThroughputInMBps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BaselineIops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumBandwidthInMbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaximumThroughputInMBps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumIops { get; set; }
	}
	
	/// <summary>
	/// Describes the networking features of the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkPerformance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumNetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv4AddressesPerInterface { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressesPerInterface { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Ipv6Supported { get; set; }
		
		public EnaSupport EnaSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EfaSupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnaSupport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		supported = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 2,
	}
	
	/// <summary>
	/// Describes the GPU accelerators for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GpuInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GpuDeviceInfo[] Gpus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalGpuMemoryInMiB { get; set; }
	}
	
	/// <summary>
	/// Describes the GPU accelerators for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GpuDeviceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Describes the memory available to the GPU accelerator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GpuDeviceMemoryInfo MemoryInfo { get; set; }
	}
	
	/// <summary>
	/// Describes the memory available to the GPU accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GpuDeviceMemoryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInMiB { get; set; }
	}
	
	/// <summary>
	/// Describes the FPGAs for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FpgaDeviceInfo[] Fpgas { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalFpgaMemoryInMiB { get; set; }
	}
	
	/// <summary>
	/// Describes the FPGA accelerator for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaDeviceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Describes the memory for the FPGA accelerator for the instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FpgaDeviceMemoryInfo MemoryInfo { get; set; }
	}
	
	/// <summary>
	/// Describes the memory for the FPGA accelerator for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FpgaDeviceMemoryInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInMiB { get; set; }
	}
	
	/// <summary>
	/// Describes the placement group support of the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlacementGroupInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlacementGroupStrategy[] SupportedStrategies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlacementGroupStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		partition = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spread = 2,
	}
	
	/// <summary>
	/// Describes the Inference accelerators for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferenceAcceleratorInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InferenceDeviceInfo[] Accelerators { get; set; }
	}
	
	/// <summary>
	/// Describes the Inference accelerators for the instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InferenceDeviceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Reservation[] Reservations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Reservation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequesterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
	}
	
	/// <summary>
	/// Describes an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Instance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmiLaunchIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LaunchTime { get; set; }
		
		/// <summary>
		/// Describes the monitoring of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Monitoring Monitoring { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Placement Placement { get; set; }
		
		public PlatformValues Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		/// <summary>
		/// Describes the current state of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateTransitionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		public ArchitectureValues Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnaSupport { get; set; }
		
		public HypervisorType Hypervisor { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfile IamInstanceProfile { get; set; }
		
		public InstanceLifecycleType InstanceLifecycle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpuAssociation[] ElasticGpuAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticInferenceAcceleratorAssociation[] ElasticInferenceAcceleratorAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RootDeviceName { get; set; }
		
		public DeviceType RootDeviceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SourceDestCheck { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotInstanceRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SriovNetSupport { get; set; }
		
		/// <summary>
		/// Describes a state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StateReason StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public VirtualizationType VirtualizationType { get; set; }
		
		/// <summary>
		/// The CPU options for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CpuOptions CpuOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		/// <summary>
		/// Describes the instance's Capacity Reservation targeting preferences. The action returns the <code>capacityReservationPreference</code> response element if the instance is configured to run in On-Demand capacity, or if it is configured in run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). The action returns the <code>capacityReservationTarget</code> response element if the instance explicily targets a specific Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationSpecificationResponse CapacityReservationSpecification { get; set; }
		
		/// <summary>
		/// Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HibernationOptions HibernationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LicenseConfiguration[] Licenses { get; set; }
		
		/// <summary>
		/// The metadata options for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataOptionsResponse MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// Describes the monitoring of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Monitoring
	{
		
		public MonitoringState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MonitoringState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceLifecycleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		spot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 1,
	}
	
	/// <summary>
	/// Describes the association between an instance and an Elastic Graphics accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticGpuAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuAssociationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticGpuAssociationTime { get; set; }
	}
	
	/// <summary>
	///  Describes the association between an instance and an elastic inference accelerator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticInferenceAcceleratorAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticInferenceAcceleratorArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticInferenceAcceleratorAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ElasticInferenceAcceleratorAssociationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ElasticInferenceAcceleratorAssociationTime { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceNetworkInterface
	{
		
		/// <summary>
		/// Describes association information for an Elastic IP address (IPv4).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceAssociation Association { get; set; }
		
		/// <summary>
		/// Describes a network interface attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceAttachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePrivateIpAddress[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SourceDestCheck { get; set; }
		
		public NetworkInterfaceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InterfaceType { get; set; }
	}
	
	/// <summary>
	/// Describes association information for an Elastic IP address (IPv4).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceNetworkInterfaceAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IpOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceNetworkInterfaceAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AttachTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		public AttachmentStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes a private IPv4 address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstancePrivateIpAddress
	{
		
		/// <summary>
		/// Describes association information for an Elastic IP address (IPv4).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceAssociation Association { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	/// <summary>
	/// The CPU options for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CpuOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThreadsPerCore { get; set; }
	}
	
	/// <summary>
	/// Describes the instance's Capacity Reservation targeting preferences. The action returns the <code>capacityReservationPreference</code> response element if the instance is configured to run in On-Demand capacity, or if it is configured in run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). The action returns the <code>capacityReservationTarget</code> response element if the instance explicily targets a specific Capacity Reservation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationSpecificationResponse
	{
		
		public CapacityReservationPreference CapacityReservationPreference { get; set; }
		
		/// <summary>
		/// Describes a target Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationTargetResponse CapacityReservationTarget { get; set; }
	}
	
	/// <summary>
	/// Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HibernationOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Configured { get; set; }
	}
	
	/// <summary>
	/// Describes a license configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LicenseConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceMetadataOptionsResponse
	{
		
		public InstanceMetadataOptionsState State { get; set; }
		
		public HttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		public InstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceMetadataOptionsState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		applied = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HttpTokensState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optional = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		required = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceMetadataEndpointState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInternetGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InternetGateway[] InternetGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIpv6PoolsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Ipv6Pool[] Ipv6Pools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ipv6Pool
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PoolCidrBlock[] PoolCidrBlocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a CIDR block for an address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PoolCidrBlock
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeKeyPairsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPairInfo[] KeyPairs { get; set; }
	}
	
	/// <summary>
	/// Describes a key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyPairInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyFingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLaunchTemplateVersionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateVersion[] LaunchTemplateVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLaunchTemplatesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate[] LaunchTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] LocalGatewayRouteTableVirtualInterfaceGroupAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a local gateway route table and a virtual interface group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayRouteTableVirtualInterfaceGroupAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableVirtualInterfaceGroupAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayVirtualInterfaceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTableVpcAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRouteTableVpcAssociation[] LocalGatewayRouteTableVpcAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTablesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRouteTable[] LocalGatewayRouteTables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a local gateway route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayRouteTable
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayVirtualInterfaceGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayVirtualInterfaceGroup[] LocalGatewayVirtualInterfaceGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a local gateway virtual interface group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayVirtualInterfaceGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayVirtualInterfaceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayVirtualInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayVirtualInterfacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayVirtualInterface[] LocalGatewayVirtualInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a local gateway virtual interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGatewayVirtualInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayVirtualInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LocalBgpAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeerBgpAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGateway[] LocalGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a local gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LocalGateway
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMovingAddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MovingAddressStatus[] MovingAddressStatuses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a moving Elastic IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MovingAddressStatus
	{
		
		public MoveStatus MoveStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MoveStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		movingToVpc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restoringToClassic = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNatGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NatGateway[] NatGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkAclsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkAcl[] NetworkAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeNetworkInterfaceAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfaceAttributeResult
	{
		
		/// <summary>
		/// Describes a network interface attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceAttachment Attachment { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue SourceDestCheck { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DescribeNetworkInterfacePermissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfacePermissionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfacePermission[] NetworkInterfacePermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeNetworkInterfaces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfacesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePlacementGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PlacementGroup[] PlacementGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePrefixListsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrefixList[] PrefixLists { get; set; }
	}
	
	/// <summary>
	/// Describes prefixes for AWS services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrefixList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefixListName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePrincipalIdFormatResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PrincipalIdFormat[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// PrincipalIdFormat description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PrincipalIdFormat
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IdFormat[] Statuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePublicIpv4PoolsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PublicIpv4Pool[] PublicIpv4Pools { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv4 address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublicIpv4Pool
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PublicIpv4PoolRange[] PoolAddressRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalAvailableAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes an address range of an IPv4 address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublicIpv4PoolRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableAddressCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRegionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Region[] Regions { get; set; }
	}
	
	/// <summary>
	/// Describes a Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Region
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RegionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptInStatus { get; set; }
	}
	
	/// <summary>
	/// Contains the output for DescribeReservedInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstances[] ReservedInstances { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstances
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		public RIProductDescription ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		public ReservedInstanceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> UsagePrice { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		public Tenancy InstanceTenancy { get; set; }
		
		public OfferingClassType OfferingClass { get; set; }
		
		public OfferingTypeValues OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
		
		public Scope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RIProductDescription
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_UNIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linux_UNIX_Amazon_VPC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Windows_Amazon_VPC = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservedInstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment_pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment_failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		retired = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queued_deleted = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingClassType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		convertible = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Heavy_Utilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium_Utilization = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Light_Utilization = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		No_Upfront = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partial_Upfront = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All_Upfront = 5,
	}
	
	/// <summary>
	/// Describes a recurring charge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		public RecurringChargeFrequency Frequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecurringChargeFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hourly = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Availability_Zone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Region = 1,
	}
	
	/// <summary>
	/// Contains the output of DescribeReservedInstancesListings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesListingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesListing[] ReservedInstancesListings { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeReservedInstancesModifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesModificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesModification[] ReservedInstancesModifications { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesModification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesModificationResult[] ModificationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesId[] ReservedInstancesIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesModificationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdateDate { get; set; }
	}
	
	/// <summary>
	/// Describes the modification request/s.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesModificationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
		
		/// <summary>
		/// Describes the configuration settings for the modified Reserved Instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesConfiguration TargetConfiguration { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration settings for the modified Reserved Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		public Scope Scope { get; set; }
	}
	
	/// <summary>
	/// Describes the ID of a Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesId
	{
		
		[System.Runtime.Serialization.DataMember(Name="ReservedInstancesId")]
		public string ReservedInstancesId1 { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeReservedInstancesOfferings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesOfferingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesOffering[] ReservedInstancesOfferings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstancesOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> FixedPrice { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		public RIProductDescription ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> UsagePrice { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		public Tenancy InstanceTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Marketplace { get; set; }
		
		public OfferingClassType OfferingClass { get; set; }
		
		public OfferingTypeValues OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PricingDetail[] PricingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
		
		public Scope Scope { get; set; }
	}
	
	/// <summary>
	/// Describes a Reserved Instance offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PricingDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeRouteTables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRouteTablesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteTable[] RouteTables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeScheduledInstanceAvailability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledInstanceAvailabilityResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstanceAvailability[] ScheduledInstanceAvailabilitySet { get; set; }
	}
	
	/// <summary>
	/// Describes a schedule that is available for your Scheduled Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstanceAvailability
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstSlotStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxTermDurationInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinTermDurationInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkPlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PurchaseToken { get; set; }
		
		/// <summary>
		/// Describes the recurring schedule for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstanceRecurrence Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlotDurationInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalScheduledInstanceHours { get; set; }
	}
	
	/// <summary>
	/// Describes the recurring schedule for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstanceRecurrence
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OccurrenceDaySet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OccurrenceRelativeToEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OccurrenceUnit { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstance[] ScheduledInstanceSet { get; set; }
	}
	
	/// <summary>
	/// Describes a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkPlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NextSlotStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PreviousSlotEndTime { get; set; }
		
		/// <summary>
		/// Describes the recurring schedule for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstanceRecurrence Recurrence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SlotDurationInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TermEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TermStartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalScheduledInstanceHours { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityGroupReferencesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupReference[] SecurityGroupReferenceSet { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC with a security group that references your security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityGroupReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReferencingVpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroup[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a security group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissionsEgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVolumePermission[] CreateVolumePermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
	}
	
	/// <summary>
	/// Describes the user or group to be added or removed from the list of create volume permissions for a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVolumePermission
	{
		
		public PermissionGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot[] Snapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotDatafeedSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotDatafeedSubscriptionResult
	{
		
		/// <summary>
		/// Describes the data feed for a Spot Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotDatafeedSubscription SpotDatafeedSubscription { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotFleetInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetInstancesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ActiveInstance[] ActiveInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotFleetRequestHistory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetRequestHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HistoryRecord[] HistoryRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastEvaluatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Describes an event in the history of the Spot Fleet request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HistoryRecord
	{
		
		/// <summary>
		/// Describes an EC2 Fleet or Spot Fleet event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EventInformation EventInformation { get; set; }
		
		public EventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instanceChange = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fleetRequestChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		information = 3,
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotFleetRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetRequestsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpotFleetRequestConfig[] SpotFleetRequestConfigs { get; set; }
	}
	
	/// <summary>
	/// Describes a Spot Fleet request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotFleetRequestConfig
	{
		
		public ActivityStatus ActivityStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// Describes the configuration of a Spot Fleet request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="SpotFleetRequestConfig")]
		public SpotFleetRequestConfigData SpotFleetRequestConfig1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
		
		public BatchState SpotFleetRequestState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActivityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_fulfillment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending_termination = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fulfilled = 3,
	}
	
	/// <summary>
	/// Describes the configuration of a Spot Fleet request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotFleetRequestConfigData
	{
		
		public AllocationStrategy AllocationStrategy { get; set; }
		
		public OnDemandAllocationStrategy OnDemandAllocationStrategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		public ExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FulfilledCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> OnDemandFulfilledCapacity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IamFleetRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpotFleetLaunchSpecification[] LaunchSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateConfig[] LaunchTemplateConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandMaxTotalPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotMaxTotalPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminateInstancesWithExpiration { get; set; }
		
		public FleetType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplaceUnhealthyInstances { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
		
		/// <summary>
		/// Describes the Classic Load Balancers and target groups to attach to a Spot Fleet request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancersConfig LoadBalancersConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancePoolsToUseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AllocationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowestPrice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		diversified = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		capacityOptimized = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OnDemandAllocationStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lowestPrice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prioritized = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExcessCapacityTerminationPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noTermination = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 1,
	}
	
	/// <summary>
	/// Describes the launch specification for one or more Spot Instances. If you include On-Demand capacity in your fleet request, you can't use <code>SpotFleetLaunchSpecification</code>; you must use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html">LaunchTemplateConfig</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotFleetLaunchSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Describes whether monitoring is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotFleetMonitoring Monitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceSpecification[] NetworkInterfaces { get; set; }
		
		/// <summary>
		/// Describes Spot Instance placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotPlacement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpotFleetTagSpecification[] TagSpecifications { get; set; }
	}
	
	/// <summary>
	/// Describes an IAM instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IamInstanceProfileSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes whether monitoring is enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotFleetMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceNetworkInterfaceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressSpecification[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InterfaceType { get; set; }
	}
	
	/// <summary>
	/// Describes Spot Instance placement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotPlacement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		public Tenancy Tenancy { get; set; }
	}
	
	/// <summary>
	/// The tags for a Spot Fleet resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotFleetTagSpecification
	{
		
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a launch template and overrides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateConfig
	{
		
		/// <summary>
		/// Describes the Amazon EC2 launch template and the launch template version that can be used by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FleetLaunchTemplateSpecification LaunchTemplateSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateOverrides[] Overrides { get; set; }
	}
	
	/// <summary>
	/// Describes overrides for a launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateOverrides
	{
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> WeightedCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Priority { get; set; }
	}
	
	/// <summary>
	/// Describes the Classic Load Balancers and target groups to attach to a Spot Fleet request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancersConfig
	{
		
		/// <summary>
		/// Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClassicLoadBalancersConfig ClassicLoadBalancersConfig { get; set; }
		
		/// <summary>
		/// Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetGroupsConfig TargetGroupsConfig { get; set; }
	}
	
	/// <summary>
	/// Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClassicLoadBalancersConfig
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public ClassicLoadBalancer[] ClassicLoadBalancers { get; set; }
	}
	
	/// <summary>
	/// Describes a Classic Load Balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClassicLoadBalancer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroupsConfig
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public TargetGroup[] TargetGroups { get; set; }
	}
	
	/// <summary>
	/// Describes a load balancer target group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotInstanceRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotInstanceRequestsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpotInstanceRequest[] SpotInstanceRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a Spot Instance request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotInstanceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActualBlockHourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// Describes a Spot Instance state change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotInstanceStateFault Fault { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchGroup { get; set; }
		
		/// <summary>
		/// Describes the launch specification for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchSpecification LaunchSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchedAvailabilityZone { get; set; }
		
		public RIProductDescription ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotInstanceRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		public SpotInstanceState State { get; set; }
		
		/// <summary>
		/// Describes the status of a Spot Instance request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotInstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public SpotInstanceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
	}
	
	/// <summary>
	/// Describes the launch specification for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupIdentifier[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceSpecification[] NetworkInterfaces { get; set; }
		
		/// <summary>
		/// Describes Spot Instance placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotPlacement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Describes the monitoring of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RunInstancesMonitoringEnabled Monitoring { get; set; }
	}
	
	/// <summary>
	/// Describes the monitoring of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunInstancesMonitoringEnabled
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotInstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cancelled = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 4,
	}
	
	/// <summary>
	/// Describes the status of a Spot Instance request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotInstanceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeSpotPriceHistory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotPriceHistoryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpotPrice[] SpotPriceHistory { get; set; }
	}
	
	/// <summary>
	/// Describes the maximum price per hour that you are willing to pay for a Spot Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		public RIProductDescription ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="SpotPrice")]
		public string SpotPrice1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeStaleSecurityGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaleSecurityGroup[] StaleSecurityGroupSet { get; set; }
	}
	
	/// <summary>
	/// Describes a stale security group (a security group that contains stale rules).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaleSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaleIpPermission[] StaleIpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaleIpPermission[] StaleIpPermissionsEgress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes a stale rule in a security group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaleIpPermission
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] IpRanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrefixListIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UserIdGroupPair[] UserIdGroupPairs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSubnetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Subnet[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagDescription[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorFiltersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilter[] TrafficMirrorFilters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorSessionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorSession[] TrafficMirrorSessions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorTargetsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorTarget[] TrafficMirrorTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayAttachmentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayAttachment[] TransitGatewayAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an attachment between a resource and a transit gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwnerId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentState State { get; set; }
		
		/// <summary>
		/// Describes an association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayAttachmentAssociation Association { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes an association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayAttachmentAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		public TransitGatewayAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayMulticastDomainsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomain[] TransitGatewayMulticastDomains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayPeeringAttachmentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeeringAttachment[] TransitGatewayPeeringAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayRouteTablesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTable[] TransitGatewayRouteTables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayVpcAttachmentsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment[] TransitGatewayVpcAttachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGateway[] TransitGateways { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumeAttributeResult
	{
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue AutoEnableIO { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductCode[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumeStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusItem[] VolumeStatuses { get; set; }
	}
	
	/// <summary>
	/// Describes the volume status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusAction[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		/// <summary>
		/// Describes the status of a volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusInfo VolumeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusAttachmentStatus[] AttachmentStatuses { get; set; }
	}
	
	/// <summary>
	/// Describes a volume status operation code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
	}
	
	/// <summary>
	/// Describes a volume status event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeStatusDetails[] Details { get; set; }
		
		public VolumeStatusInfoStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes a volume status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusDetails
	{
		
		public VolumeStatusName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeStatusName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		io_enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		io_performance = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeStatusInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		impaired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insufficient_data = 2,
	}
	
	/// <summary>
	/// Information about the instances to which the volume is attached.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeStatusAttachmentStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IoPerformance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Volume[] Volumes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumesModificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VolumeModification[] VolumesModifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the modification status of an EBS volume.</p> <p>If the volume has never been modified, some element values will be null.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeModification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		public VolumeModificationState ModificationState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetIops { get; set; }
		
		public VolumeType TargetVolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OriginalSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OriginalIops { get; set; }
		
		public VolumeType OriginalVolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeModificationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		modifying = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		optimizing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnableDnsHostnames { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnableDnsSupport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcClassicLinkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcClassicLink[] Vpcs { get; set; }
	}
	
	/// <summary>
	/// Describes whether a VPC is enabled for ClassicLink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcClassicLink
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClassicLinkEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcClassicLinkDnsSupportResult
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClassicLinkDnsSupport[] Vpcs { get; set; }
	}
	
	/// <summary>
	/// Describes the ClassicLink DNS support status of a VPC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClassicLinkDnsSupport
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClassicLinkDnsSupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointConnectionNotificationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionNotification[] ConnectionNotificationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcEndpointConnection[] VpcEndpointConnections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC endpoint connection to a service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcEndpointConnection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointOwner { get; set; }
		
		public State VpcEndpointState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DnsEntry[] DnsEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkLoadBalancerArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServiceConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceConfiguration[] ServiceConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServicePermissionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AllowedPrincipal[] AllowedPrincipals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllowedPrincipal
	{
		
		public PrincipalType PrincipalType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PrincipalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Service = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OrganizationUnit = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Account = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Role = 5,
	}
	
	/// <summary>
	/// Contains the output of DescribeVpcEndpointServices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServicesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceDetail[] ServiceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC endpoint service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceTypeDetail[] ServiceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BaseEndpointDnsNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VpcEndpointPolicySupported { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AcceptanceRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ManagesVpcEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		public DnsNameState PrivateDnsNameVerificationState { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeVpcEndpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcEndpoint[] VpcEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcPeeringConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcPeeringConnection[] VpcPeeringConnections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Vpc[] Vpcs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeVpnConnections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpnConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpnConnection[] VpnConnections { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeVpnGateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpnGatewaysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpnGateway[] VpnGateways { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachClassicLinkVpcResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableEbsEncryptionByDefaultResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsEncryptionByDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoresResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DisableFastSnapshotRestoreSuccessItem[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DisableFastSnapshotRestoreErrorItem[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Describes fast snapshot restores that were successfully disabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoreSuccessItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public FastSnapshotRestoreStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateTransitionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OptimizingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisabledTime { get; set; }
	}
	
	/// <summary>
	/// Contains information about the errors that occurred when disabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoreErrorItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DisableFastSnapshotRestoreStateErrorItem[] FastSnapshotRestoreStateErrors { get; set; }
	}
	
	/// <summary>
	/// Contains information about an error that occurred when disabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoreStateErrorItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Describes an error that occurred when disabling fast snapshot restores.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DisableFastSnapshotRestoreStateError Error { get; set; }
	}
	
	/// <summary>
	/// Describes an error that occurred when disabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoreStateError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableTransitGatewayRouteTablePropagationResult
	{
		
		/// <summary>
		/// Describes route propagation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPropagation Propagation { get; set; }
	}
	
	/// <summary>
	/// Describes route propagation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayPropagation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		public TransitGatewayPropagationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayPropagationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabling = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disabled = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableVpcClassicLinkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableVpcClassicLinkDnsSupportResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateClientVpnTargetNetworkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Describes the state of a target network association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AssociationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateIamInstanceProfileResult
	{
		
		/// <summary>
		/// Describes an association between an IAM instance profile and an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileAssociation IamInstanceProfileAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateSubnetCidrBlockResult
	{
		
		/// <summary>
		/// Describes an IPv6 CIDR block associated with a subnet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubnetIpv6CidrBlockAssociation Ipv6CidrBlockAssociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateTransitGatewayMulticastDomainResult
	{
		
		/// <summary>
		/// Describes the multicast domain associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomainAssociations Associations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateTransitGatewayRouteTableResult
	{
		
		/// <summary>
		/// Describes an association between a resource attachment and a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayAssociation Association { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateVpcCidrBlockResult
	{
		
		/// <summary>
		/// Describes an IPv6 CIDR block associated with a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcIpv6CidrBlockAssociation Ipv6CidrBlockAssociation { get; set; }
		
		/// <summary>
		/// Describes an IPv4 CIDR block associated with a VPC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcCidrBlockAssociation CidrBlockAssociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableEbsEncryptionByDefaultResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsEncryptionByDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoresResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnableFastSnapshotRestoreSuccessItem[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnableFastSnapshotRestoreErrorItem[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Describes fast snapshot restores that were successfully enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoreSuccessItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		public FastSnapshotRestoreStateCode State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateTransitionReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OptimizingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EnabledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisablingTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DisabledTime { get; set; }
	}
	
	/// <summary>
	/// Contains information about the errors that occurred when enabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoreErrorItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnableFastSnapshotRestoreStateErrorItem[] FastSnapshotRestoreStateErrors { get; set; }
	}
	
	/// <summary>
	/// Contains information about an error that occurred when enabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoreStateErrorItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Describes an error that occurred when enabling fast snapshot restores.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnableFastSnapshotRestoreStateError Error { get; set; }
	}
	
	/// <summary>
	/// Describes an error that occurred when enabling fast snapshot restores.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoreStateError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableTransitGatewayRouteTablePropagationResult
	{
		
		/// <summary>
		/// Describes route propagation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPropagation Propagation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVpcClassicLinkResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVpcClassicLinkDnsSupportResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportClientVpnClientCertificateRevocationListResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateRevocationList { get; set; }
		
		/// <summary>
		/// Describes the state of a client certificate revocation list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientCertificateRevocationListStatus Status { get; set; }
	}
	
	/// <summary>
	/// Describes the state of a client certificate revocation list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientCertificateRevocationListStatus
	{
		
		public ClientCertificateRevocationListStatusCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClientCertificateRevocationListStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportClientVpnClientConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		public DiskImageFormat DiskImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExportImageTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		/// <summary>
		/// Describes the destination for an export image task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportTaskS3Location S3ExportLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportTransitGatewayRoutesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAssociatedIpv6PoolCidrsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Ipv6CidrAssociation[] Ipv6CidrAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 CIDR block association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ipv6CidrAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociatedResource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCapacityReservationUsageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AvailableInstanceCount { get; set; }
		
		public CapacityReservationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceUsage[] InstanceUsages { get; set; }
	}
	
	/// <summary>
	/// Information about the Capacity Reservation usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UsedInstanceCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCoipPoolUsageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoipPoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoipAddressUsage[] CoipAddressUsages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
	}
	
	/// <summary>
	/// Describes address usage for a customer-owned address pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoipAddressUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsService { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConsoleOutputResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Output { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConsoleScreenshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDefaultCreditSpecificationResult
	{
		
		/// <summary>
		/// Describes the default credit option for CPU usage of a burstable performance instance family.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFamilyCreditSpecification InstanceFamilyCreditSpecification { get; set; }
	}
	
	/// <summary>
	/// Describes the default credit option for CPU usage of a burstable performance instance family.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFamilyCreditSpecification
	{
		
		public UnlimitedSupportedInstanceFamily InstanceFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnlimitedSupportedInstanceFamily
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		t3a = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEbsDefaultKmsKeyIdResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEbsEncryptionByDefaultResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsEncryptionByDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetHostReservationPurchasePreviewResult
	{
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Purchase[] Purchase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalHourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalUpfrontPrice { get; set; }
	}
	
	/// <summary>
	/// Describes the result of the purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Purchase
	{
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIdSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
		
		public PaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UpfrontPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLaunchTemplateDataResult
	{
		
		/// <summary>
		/// The information for a launch template. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResponseLaunchTemplateData LaunchTemplateData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPasswordDataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PasswordData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// Contains the output of GetReservedInstancesExchangeQuote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservedInstancesExchangeQuoteResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsValidExchange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> OutputReservedInstancesWillExpireAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PaymentDue { get; set; }
		
		/// <summary>
		/// The cost associated with the Reserved Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationValue ReservedInstanceValueRollup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstanceReservationValue[] ReservedInstanceValueSet { get; set; }
		
		/// <summary>
		/// The cost associated with the Reserved Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationValue TargetConfigurationValueRollup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetReservationValue[] TargetConfigurationValueSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ValidationFailureReason { get; set; }
	}
	
	/// <summary>
	/// The cost associated with the Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RemainingTotalValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RemainingUpfrontValue { get; set; }
	}
	
	/// <summary>
	/// The total value of the Convertible Reserved Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstanceReservationValue
	{
		
		/// <summary>
		/// The cost associated with the Reserved Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationValue ReservationValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstanceId { get; set; }
	}
	
	/// <summary>
	/// The total value of the new Convertible Reserved Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetReservationValue
	{
		
		/// <summary>
		/// The cost associated with the Reserved Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationValue ReservationValue { get; set; }
		
		/// <summary>
		/// Information about the Convertible Reserved Instance offering.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetConfiguration TargetConfiguration { get; set; }
	}
	
	/// <summary>
	/// Information about the Convertible Reserved Instance offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayAttachmentPropagationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayAttachmentPropagation[] TransitGatewayAttachmentPropagations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a propagation route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayAttachmentPropagation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		public TransitGatewayPropagationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayMulticastDomainAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastDomainAssociation[] MulticastDomainAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the resources associated with the transit gateway multicast domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastDomainAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Describes the subnet association with the transit gateway multicast domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubnetAssociation Subnet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayRouteTableAssociationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTableAssociation[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes an association between a route table and a resource attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRouteTableAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		public TransitGatewayAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayRouteTablePropagationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTablePropagation[] TransitGatewayRouteTablePropagations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a route table propagation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRouteTablePropagation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		public TransitGatewayPropagationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportClientVpnClientCertificateRevocationListResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Hypervisor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDetail[] SnapshotDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportImageLicenseConfigurationResponse[] LicenseSpecifications { get; set; }
	}
	
	/// <summary>
	/// Describes the disk container object for an import image task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImageDiskContainer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Describes the S3 bucket for the disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserBucket UserBucket { get; set; }
	}
	
	/// <summary>
	/// Describes the S3 bucket for the disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserBucket
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Key { get; set; }
	}
	
	/// <summary>
	/// The request information of license configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportImageLicenseConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportInstanceResult
	{
		
		/// <summary>
		/// Describes a conversion task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConversionTask ConversionTask { get; set; }
	}
	
	/// <summary>
	/// Describes a disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskImageDetail Image { get; set; }
		
		/// <summary>
		/// Describes an EBS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeDetail Volume { get; set; }
	}
	
	/// <summary>
	/// Describes a disk image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskImageDetail
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Bytes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DiskImageFormat Format { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImportManifestUrl { get; set; }
	}
	
	/// <summary>
	/// Describes an EBS volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeDetail
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Size { get; set; }
	}
	
	/// <summary>
	/// Describes the user data for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UserData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyFingerprint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
		
		/// <summary>
		/// Details about the import snapshot task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnapshotTaskDetail SnapshotTaskDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportVolumeResult
	{
		
		/// <summary>
		/// Describes a conversion task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConversionTask ConversionTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyAvailabilityZoneGroupResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyCapacityReservationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClientVpnEndpointResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDefaultCreditSpecificationResult
	{
		
		/// <summary>
		/// Describes the default credit option for CPU usage of a burstable performance instance family.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFamilyCreditSpecification InstanceFamilyCreditSpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEbsDefaultKmsKeyIdResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyFleetResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyFpgaImageAttributeResult
	{
		
		/// <summary>
		/// Describes an Amazon FPGA image (AFI) attribute.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FpgaImageAttribute FpgaImageAttribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyHostsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceBlockDeviceMappingSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Describes information used to set up an EBS volume specified in a block device mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsInstanceBlockDeviceSpecification Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NoDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
	}
	
	/// <summary>
	/// Describes information used to set up an EBS volume specified in a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsInstanceBlockDeviceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceCapacityReservationAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceCreditSpecificationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SuccessfulInstanceCreditSpecificationItem[] SuccessfulInstanceCreditSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulInstanceCreditSpecificationItem[] UnsuccessfulInstanceCreditSpecifications { get; set; }
	}
	
	/// <summary>
	/// Describes the burstable performance instance whose credit option for CPU usage was successfully modified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SuccessfulInstanceCreditSpecificationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	/// <summary>
	/// Describes the burstable performance instance whose credit option for CPU usage was not modified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnsuccessfulInstanceCreditSpecificationItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Information about the error for the burstable performance instance whose credit option for CPU usage was not modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulInstanceCreditSpecificationItemError Error { get; set; }
	}
	
	/// <summary>
	/// Information about the error for the burstable performance instance whose credit option for CPU usage was not modified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnsuccessfulInstanceCreditSpecificationItemError
	{
		
		public UnsuccessfulInstanceCreditSpecificationErrorCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UnsuccessfulInstanceCreditSpecificationErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidInstanceID_Malformed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidInstanceID_NotFound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IncorrectInstanceState = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceCreditSpecification_NotSupported = 3,
	}
	
	/// <summary>
	/// Describes the credit option for CPU usage of a burstable performance instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceCreditSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceEventStartTimeResult
	{
		
		/// <summary>
		/// Describes a scheduled event for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatusEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceMetadataOptionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// The metadata options for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataOptionsResponse InstanceMetadataOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstancePlacementResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLaunchTemplateResult
	{
		
		/// <summary>
		/// Describes a launch template.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplate LaunchTemplate { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ModifyReservedInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyReservedInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesModificationId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ModifySpotFleetRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySpotFleetRequestResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorFilterNetworkServicesResult
	{
		
		/// <summary>
		/// Describes the Traffic Mirror filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilter TrafficMirrorFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorFilterRuleResult
	{
		
		/// <summary>
		/// Describes the Traffic Mirror rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilterRule TrafficMirrorFilterRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficMirrorFilterRuleField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		destination_port_range = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		source_port_range = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		protocol = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorSessionResult
	{
		
		/// <summary>
		/// Describes a Traffic Mirror session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorSession TrafficMirrorSession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TrafficMirrorSessionField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		packet_length = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		virtual_network_id = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTransitGatewayVpcAttachmentResult
	{
		
		/// <summary>
		/// Describes a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment TransitGatewayVpcAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVolumeResult
	{
		
		/// <summary>
		/// <p>Describes the modification status of an EBS volume.</p> <p>If the volume has never been modified, some element values will be null.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeModification VolumeModification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointConnectionNotificationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointServiceConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointServicePermissionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcPeeringConnectionOptionsResult
	{
		
		/// <summary>
		/// Describes the VPC peering connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringConnectionOptions AccepterPeeringConnectionOptions { get; set; }
		
		/// <summary>
		/// Describes the VPC peering connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringConnectionOptions RequesterPeeringConnectionOptions { get; set; }
	}
	
	/// <summary>
	/// Describes the VPC peering connection options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PeeringConnectionOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowDnsResolutionFromRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalClassicLinkToRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalVpcToRemoteClassicLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcTenancyResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnConnectionResult
	{
		
		/// <summary>
		/// Describes a VPN connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnection VpnConnection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnTunnelCertificateResult
	{
		
		/// <summary>
		/// Describes a VPN connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnection VpnConnection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnTunnelOptionsResult
	{
		
		/// <summary>
		/// Describes a VPN connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnection VpnConnection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MonitorInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMonitoring[] InstanceMonitorings { get; set; }
	}
	
	/// <summary>
	/// Describes the monitoring of an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes the monitoring of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Monitoring Monitoring { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MoveAddressToVpcResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MoveInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InVpc = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InClassic = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisionByoipCidrResult
	{
		
		/// <summary>
		/// Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ByoipCidr ByoipCidr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseHostReservationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Purchase[] Purchase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalHourlyPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalUpfrontPrice { get; set; }
	}
	
	/// <summary>
	/// Contains the output of PurchaseReservedInstancesOffering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseReservedInstancesOfferingResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of PurchaseScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseScheduledInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstance[] ScheduledInstanceSet { get; set; }
	}
	
	/// <summary>
	/// Describes a request to purchase Scheduled Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PurchaseToken { get; set; }
	}
	
	/// <summary>
	/// Contains the output of RegisterImage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterImageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterInstanceEventNotificationAttributesResult
	{
		
		/// <summary>
		/// Describes the registered tag keys for the current Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTagNotificationAttribute InstanceTagAttribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayMulticastGroupMembersResult
	{
		
		/// <summary>
		/// Describes the registered transit gateway multicast group members.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastRegisteredGroupMembers RegisteredMulticastGroupMembers { get; set; }
	}
	
	/// <summary>
	/// Describes the registered transit gateway multicast group members.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastRegisteredGroupMembers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RegisteredNetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayMulticastGroupSourcesResult
	{
		
		/// <summary>
		/// Describes the members registered with the transit gateway multicast group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastRegisteredGroupSources RegisteredMulticastGroupSources { get; set; }
	}
	
	/// <summary>
	/// Describes the members registered with the transit gateway multicast group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastRegisteredGroupSources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RegisteredNetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectTransitGatewayPeeringAttachmentResult
	{
		
		/// <summary>
		/// Describes the transit gateway peering attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeeringAttachment TransitGatewayPeeringAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectTransitGatewayVpcAttachmentResult
	{
		
		/// <summary>
		/// Describes a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayVpcAttachment TransitGatewayVpcAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectVpcEndpointConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectVpcPeeringConnectionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReleaseHostsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Successful { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnsuccessfulItem[] Unsuccessful { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceIamInstanceProfileAssociationResult
	{
		
		/// <summary>
		/// Describes an association between an IAM instance profile and an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileAssociation IamInstanceProfileAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceNetworkAclAssociationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NewAssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceRouteTableAssociationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NewAssociationId { get; set; }
		
		/// <summary>
		/// Describes the state of an association between a route table and a subnet or gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteTableAssociationState AssociationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceTransitGatewayRouteResult
	{
		
		/// <summary>
		/// Describes a route for a transit gateway route table.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRoute Route { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportInstanceReasonCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instance_stuck_in_state = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unresponsive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_accepting_credentials = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password_not_available = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance_network = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance_instance_store = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance_ebs_volume = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		performance_other = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 8,
	}
	
	/// <summary>
	/// Contains the output of RequestSpotFleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestSpotFleetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of RequestSpotInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestSpotInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpotInstanceRequest[] SpotInstanceRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetEbsDefaultKmsKeyIdResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetFpgaImageAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreAddressToClassicResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeClientVpnIngressResult
	{
		
		/// <summary>
		/// Describes the state of an authorization rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnAuthorizationRuleStatus Status { get; set; }
	}
	
	/// <summary>
	/// A specification for an Elastic Graphics accelerator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticGpuSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	///  Describes an elastic inference accelerator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElasticInferenceAccelerator
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// The options for Spot Instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotMarketOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxPrice { get; set; }
		
		public SpotInstanceType SpotInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
	}
	
	/// <summary>
	/// Describes a license configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LicenseConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	/// <summary>
	/// Contains the output of RunScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunScheduledInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIdSet { get; set; }
	}
	
	/// <summary>
	/// Describes an IAM instance profile for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesIamInstanceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Describes whether monitoring is enabled for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesMonitoring
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Describes the placement for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesPlacement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchLocalGatewayRoutesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LocalGatewayRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchTransitGatewayMulticastGroupsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayMulticastGroup[] MulticastGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the transit gateway multicast group resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayMulticastGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		public TransitGatewayAttachmentResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GroupMember { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> GroupSource { get; set; }
		
		public MembershipType MemberType { get; set; }
		
		public MembershipType SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MembershipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@static = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		igmp = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchTransitGatewayRoutesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AdditionalRoutesAvailable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStateChange[] StartingInstances { get; set; }
	}
	
	/// <summary>
	/// Describes an instance state change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStateChange
	{
		
		/// <summary>
		/// Describes the current state of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState CurrentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes the current state of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState PreviousState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartVpcEndpointServicePrivateDnsVerificationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReturnValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStateChange[] StoppingInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateClientVpnConnectionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TerminateConnectionStatus[] ConnectionStatuses { get; set; }
	}
	
	/// <summary>
	/// Information about a terminated Client VPN endpoint client connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateConnectionStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		/// <summary>
		/// Describes the status of a client connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnConnectionStatus PreviousStatus { get; set; }
		
		/// <summary>
		/// Describes the status of a client connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnConnectionStatus CurrentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStateChange[] TerminatingInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnassignIpv6AddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UnassignedIpv6Addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnmonitorInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMonitoring[] InstanceMonitorings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityGroupRuleDescriptionsEgressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityGroupRuleDescriptionsIngressResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Return { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WithdrawByoipCidrResult
	{
		
		/// <summary>
		/// Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ByoipCidr ByoipCidr { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for accepting the quote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptReservedInstancesExchangeQuoteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetConfigurationRequest[] TargetConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransitGatewayPeeringAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptTransitGatewayVpcAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptVpcEndpointConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcEndpointIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AcceptVpcPeeringConnectionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AdvertiseByoipCidrRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Affinity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		host = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateAddressRequest
	{
		
		public DomainType Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpv4Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateHostsRequest
	{
		
		public AutoPlacement AutoPlacement { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		public HostRecovery HostRecovery { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplySecurityGroupsToClientVpnTargetNetworkRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssignIpv6AddressesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Ipv6Addresses { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for AssignPrivateIpAddresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssignPrivateIpAddressesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowReassignment { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateAddressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowReassociation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateClientVpnTargetNetworkRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateDhcpOptionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DhcpOptionsId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateIamInstanceProfileRequest
	{
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateRouteTableRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateSubnetCidrBlockRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTransitGatewayMulticastDomainRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateTransitGatewayRouteTableRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateVpcCidrBlockRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AmazonProvidedIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlockNetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachClassicLinkVpcRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for AttachNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachNetworkInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachVolumeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Device { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for AttachVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachVpnGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeClientVpnIngressRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetNetworkCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AuthorizeAllGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeSecurityGroupEgressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AuthorizeSecurityGroupIngressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlobAttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for BundleInstance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BundleInstanceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes the storage location for an instance store-backed AMI.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Storage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CancelBundleTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelBundleTaskRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelCapacityReservationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelConversionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConversionTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReasonMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelExportTaskRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExportTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelImportTaskRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CancelReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImportTaskId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CancelReservedInstancesListing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelReservedInstancesListingRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesListingId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CancelSpotFleetRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotFleetRequestsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SpotFleetRequestIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool TerminateInstances { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CancelSpotInstanceRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelSpotInstanceRequestsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SpotInstanceRequestIds { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CapacityReservationSpecification
	{
		
		public CapacityReservationPreference CapacityReservationPreference { get; set; }
		
		/// <summary>
		/// Describes a target Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationTarget CapacityReservationTarget { get; set; }
	}
	
	/// <summary>
	/// Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CidrAuthorizationContext
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Signature { get; set; }
	}
	
	/// <summary>
	/// Describes the client-specific data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClientData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UploadEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UploadSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UploadStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConfirmProductInstanceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes the client connection logging options for the Client VPN endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ConnectionLogOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudwatchLogGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudwatchLogStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyFpgaImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceFpgaImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CopyImage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceImageId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopySnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PresignedUrl { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceRegion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CopyTagsFromSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		volume = 0,
	}
	
	/// <summary>
	/// The CPU options for the instance. Both the core count and threads per core must be specified in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CpuOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoreCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ThreadsPerCore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCapacityReservationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public CapacityReservationInstancePlatform InstancePlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneId { get; set; }
		
		public CapacityReservationTenancy Tenancy { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EphemeralStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		public EndDateType EndDateType { get; set; }
		
		public InstanceMatchCriteria InstanceMatchCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClientVpnEndpointRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ClientVpnAuthenticationRequest[] AuthenticationOptions { get; set; }
		
		/// <summary>
		/// Describes the client connection logging options for the Client VPN endpoint.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConnectionLogOptions ConnectionLogOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DnsServers { get; set; }
		
		public TransportProtocol TransportProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VpnPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SplitTunnel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClientVpnRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetVpcSubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateCustomerGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCustomerGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int BgpAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public GatewayType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDefaultSubnetRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDefaultVpcRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDhcpOptionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NewDhcpConfiguration[] DhcpConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEgressOnlyInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of Spot Instances in an EC2 Fleet request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotOptionsRequest
	{
		
		public SpotAllocationStrategy AllocationStrategy { get; set; }
		
		public SpotInstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancePoolsToUseCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxTotalPrice { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OnDemandOptionsRequest
	{
		
		public FleetOnDemandAllocationStrategy AllocationStrategy { get; set; }
		
		/// <summary>
		/// <p>Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.</p> <note> <p>This strategy can only be used if the EC2 Fleet is of type <code>instant</code>.</p> </note> <p>For more information about Capacity Reservations, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">On-Demand Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For examples of using Capacity Reservations in an EC2 Fleet, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html">EC2 Fleet Example Configurations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationOptionsRequest CapacityReservationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SingleAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxTotalPrice { get; set; }
	}
	
	/// <summary>
	/// <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest">OnDemandOptionsRequest</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest">SpotOptionsRequest</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetCapacitySpecificationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandTargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SpotTargetCapacity { get; set; }
		
		public DefaultTargetCapacityType DefaultTargetCapacityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFleetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Describes the configuration of Spot Instances in an EC2 Fleet request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotOptionsRequest SpotOptions { get; set; }
		
		/// <summary>
		/// Describes the configuration of On-Demand Instances in an EC2 Fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnDemandOptionsRequest OnDemandOptions { get; set; }
		
		public FleetExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy { get; set; }
		
		/// <summary>
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public FleetLaunchTemplateConfigRequest[] LaunchTemplateConfigs { get; set; }
		
		/// <summary>
		/// <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest">OnDemandOptionsRequest</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest">SpotOptionsRequest</a>.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetCapacitySpecificationRequest TargetCapacitySpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminateInstancesWithExpiration { get; set; }
		
		public FleetType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReplaceUnhealthyInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FlowLogsResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Subnet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkInterface = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFlowLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeliverLogsPermissionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public FlowLogsResourceType ResourceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public TrafficType TrafficType { get; set; }
		
		public LogDestinationType LogDestinationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAggregationInterval { get; set; }
	}
	
	/// <summary>
	/// Describes a storage location in Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StorageLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFpgaImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes a storage location in Amazon S3.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StorageLocation InputStorageLocation { get; set; }
		
		/// <summary>
		/// Describes a storage location in Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StorageLocation LogsStorageLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NoReboot { get; set; }
	}
	
	/// <summary>
	/// Describes an instance export task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportToS3TaskSpecification
	{
		
		public ContainerFormat ContainerFormat { get; set; }
		
		public DiskImageFormat DiskImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceExportTaskRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes an instance export task.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportToS3TaskSpecification ExportToS3Task { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public ExportEnvironment TargetEnvironment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateKeyPairRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	/// <summary>
	/// The information to include in the launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestLaunchTemplateData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// An IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateIamInstanceProfileSpecificationRequest IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateBlockDeviceMappingRequest[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceNetworkInterfaceSpecificationRequest[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Describes the monitoring for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplatesMonitoringRequest Monitoring { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplatePlacementRequest Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamDiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableApiTermination { get; set; }
		
		public ShutdownBehavior InstanceInitiatedShutdownBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateTagSpecificationRequest[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpuSpecification[] ElasticGpuSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateElasticInferenceAccelerator[] ElasticInferenceAccelerators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// The market (purchasing) option for the instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceMarketOptionsRequest InstanceMarketOptions { get; set; }
		
		/// <summary>
		/// The credit option for CPU usage of a T2 or T3 instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreditSpecificationRequest CreditSpecification { get; set; }
		
		/// <summary>
		/// The CPU options for the instance. Both the core count and threads per core must be specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateCpuOptionsRequest CpuOptions { get; set; }
		
		/// <summary>
		/// Describes an instance's Capacity Reservation targeting option. You can specify only one option at a time. Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run in On-Demand capacity or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateCapacityReservationSpecificationRequest CapacityReservationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateLicenseConfigurationRequest[] LicenseSpecifications { get; set; }
		
		/// <summary>
		/// Indicates whether the instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateHibernationOptionsRequest HibernationOptions { get; set; }
		
		/// <summary>
		/// The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateInstanceMetadataOptionsRequest MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateBlockDeviceMappingRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
		
		/// <summary>
		/// The parameters for a block device for an EBS volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateEbsBlockDeviceRequest Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NoDevice { get; set; }
	}
	
	/// <summary>
	/// The parameters for a block device for an EBS volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateEbsBlockDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		public VolumeType VolumeType { get; set; }
	}
	
	/// <summary>
	/// The parameters for a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InterfaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6AddressRequest[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressSpecification[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceIpv6AddressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
	}
	
	/// <summary>
	/// The tags specification for the launch template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateTagSpecificationRequest
	{
		
		public ResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	///  Describes an elastic inference accelerator. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateElasticInferenceAccelerator
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Describes a license configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateLicenseConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLaunchTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// The information to include in the launch template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestLaunchTemplateData LaunchTemplateData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLaunchTemplateVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string VersionDescription { get; set; }
		
		/// <summary>
		/// The information to include in the launch template.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestLaunchTemplateData LaunchTemplateData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLocalGatewayRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayVirtualInterfaceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLocalGatewayRouteTableVpcAssociationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNatGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkAclEntryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Egress { get; set; }
		
		/// <summary>
		/// Describes the ICMP type and code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IcmpTypeCode IcmpTypeCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
		
		/// <summary>
		/// Describes a range of ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PortRange PortRange { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public RuleAction RuleAction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RuleNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkAclRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateNetworkInterfacePermission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkInterfacePermissionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsService { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public InterfacePermissionType Permission { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInterfaceCreationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		efa = 0,
	}
	
	/// <summary>
	/// Contains the parameters for CreateNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkInterfaceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrivateIpAddressSpecification[] PrivateIpAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
		
		public NetworkInterfaceCreationType InterfaceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePlacementGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		public PlacementStrategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateReservedInstancesListing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReservedInstancesListingRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PriceScheduleSpecification[] PriceSchedules { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressOnlyInternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRouteTableRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityGroupRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// The instance details to specify which volumes should be snapshotted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeBootVolume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The instance details to specify which volumes should be snapshotted.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceSpecification InstanceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public CopyTagsFromSource CopyTagsFromSource { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateSpotDatafeedSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSpotDatafeedSubscriptionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSubnetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorFilterRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Information about the Traffic Mirror filter rule port range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrafficMirrorPortRangeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorFilterRuleRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public TrafficDirection TrafficDirection { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RuleNumber { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public TrafficMirrorRuleAction RuleAction { get; set; }
		
		/// <summary>
		/// Information about the Traffic Mirror filter rule port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRangeRequest DestinationPortRange { get; set; }
		
		/// <summary>
		/// Information about the Traffic Mirror filter rule port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRangeRequest SourcePortRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Protocol { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorSessionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PacketLength { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SessionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VirtualNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTrafficMirrorTargetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkLoadBalancerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayMulticastDomainRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayPeeringAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PeerTransitGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PeerAccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PeerRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes the options for a transit gateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRequestOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		public AutoAcceptSharedAttachmentsValue AutoAcceptSharedAttachments { get; set; }
		
		public DefaultRouteTableAssociationValue DefaultRouteTableAssociation { get; set; }
		
		public DefaultRouteTablePropagationValue DefaultRouteTablePropagation { get; set; }
		
		public VpnEcmpSupportValue VpnEcmpSupport { get; set; }
		
		public DnsSupportValue DnsSupport { get; set; }
		
		public MulticastSupportValue MulticastSupport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the options for a transit gateway.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRequestOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blackhole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayRouteTableRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes the options for a VPC attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayVpcAttachmentRequestOptions
	{
		
		public DnsSupportValue DnsSupport { get; set; }
		
		public Ipv6SupportValue Ipv6Support { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTransitGatewayVpcAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Describes the options for a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateTransitGatewayVpcAttachmentRequestOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes modifications to the list of create volume permissions for a volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVolumePermissionModifications
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVolumePermission[] Add { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateVolumePermission[] Remove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVolumeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		public VolumeType VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MultiAttachEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointConnectionNotificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ConnectionEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateVpcEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public VpcEndpointType VpcEndpointType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivateDnsEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcEndpointServiceConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AcceptanceRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkLoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcPeeringConnectionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerVpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpcRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AmazonProvidedIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Pool { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public Tenancy InstanceTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlockNetworkBorderGroup { get; set; }
	}
	
	/// <summary>
	/// Describes VPN connection options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnConnectionOptionsSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableAcceleration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StaticRoutesOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpnTunnelOptionsSpecification[] TunnelOptions { get; set; }
	}
	
	/// <summary>
	/// The tunnel options for a single VPN tunnel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpnTunnelOptionsSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TunnelInsideCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSharedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase1LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase2LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyMarginTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyFuzzPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplayWindowSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DPDTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1EncryptionAlgorithmsRequestListValue[] Phase1EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2EncryptionAlgorithmsRequestListValue[] Phase2EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1IntegrityAlgorithmsRequestListValue[] Phase1IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2IntegrityAlgorithmsRequestListValue[] Phase2IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1DHGroupNumbersRequestListValue[] Phase1DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2DHGroupNumbersRequestListValue[] Phase2DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IKEVersionsRequestListValue[] IKEVersions { get; set; }
	}
	
	/// <summary>
	/// Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1EncryptionAlgorithmsRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2EncryptionAlgorithmsRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1IntegrityAlgorithmsRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2IntegrityAlgorithmsRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase1DHGroupNumbersRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Phase2DHGroupNumbersRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// The IKE version that is permitted for the VPN tunnel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IKEVersionsRequestListValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateVpnConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpnConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes VPN connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpnConnectionOptionsSpecification Options { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateVpnConnectionRoute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpnConnectionRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreateVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVpnGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public GatewayType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AmazonSideAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClientVpnEndpointRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteClientVpnRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetVpcSubnetId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteCustomerGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteCustomerGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDhcpOptionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DhcpOptionsId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteEgressOnlyInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EgressOnlyInternetGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFleetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FleetIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool TerminateInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFlowLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] FlowLogIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteFpgaImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteKeyPairRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLaunchTemplateVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLocalGatewayRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLocalGatewayRouteTableVpcAssociationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableVpcAssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNatGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkAclEntryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Egress { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RuleNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkAclRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteNetworkInterfacePermission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkInterfacePermissionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfacePermissionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkInterfaceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePlacementGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteQueuedReservedInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] ReservedInstancesIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRouteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRouteTableRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSecurityGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSnapshotRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteSpotDatafeedSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSpotDatafeedSubscriptionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSubnetRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorFilterRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorFilterRuleRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorSessionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTrafficMirrorTargetRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayMulticastDomainRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayPeeringAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayRouteTableRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTransitGatewayVpcAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVolumeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointConnectionNotificationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ConnectionNotificationIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointServiceConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceIds { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteVpcEndpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcEndpointsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcEndpointIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcPeeringConnectionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpcRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteVpnConnection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpnConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteVpnConnectionRoute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpnConnectionRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeleteVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVpnGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeprovisionByoipCidrRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeregisterImage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterImageRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Information about the tag keys to deregister for the current Region. You can either specify individual tag keys or deregister all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterInstanceTagAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllTagsOfInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceTagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterInstanceEventNotificationAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Information about the tag keys to deregister for the current Region. You can either specify individual tag keys or deregister all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeregisterInstanceTagAttributeRequest InstanceTagAttribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTransitGatewayMulticastGroupMembersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTransitGatewayMulticastGroupSourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAccountAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccountAttributeName[] AttributeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PublicIps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllocationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAggregateIdFormatRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAvailabilityZonesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ZoneNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ZoneIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeBundleTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BundleIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeByoipCidrsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public int MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCapacityReservationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CapacityReservationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClassicLinkInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnAuthorizationRulesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnConnectionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnEndpointsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClientVpnEndpointIds { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnRoutesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClientVpnTargetNetworksRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AssociationIds { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCoipPoolsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeConversionTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConversionTaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeCustomerGateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCustomerGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CustomerGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDhcpOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DhcpOptionsIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEgressOnlyInternetGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EgressOnlyInternetGatewayIds { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 255)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeElasticGpusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ElasticGpuIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExportImageTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExportImageTaskIds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeExportTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExportTaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFastSnapshotRestoresRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public FleetEventType EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFleetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FleetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFlowLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FlowLogIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FpgaImageAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		loadPermission = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productCodes = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFpgaImageAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public FpgaImageAttributeName Attribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeFpgaImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] FpgaImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Owners { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostReservationOfferingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 500)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostReservationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HostReservationIdSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHostsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIamInstanceProfileAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AssociationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdFormatRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIdentityIdFormatRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImageAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kernel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ramdisk = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchPermission = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productCodes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blockDeviceMapping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sriovNetSupport = 6,
	}
	
	/// <summary>
	/// Contains the parameters for DescribeImageAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImageAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ImageAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImagesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExecutableUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImageIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Owners { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImportImageTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportTaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeImportSnapshotTasksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ImportTaskIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instanceType = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kernel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ramdisk = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		userData = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		disableApiTermination = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		instanceInitiatedShutdownBehavior = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rootDeviceName = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		blockDeviceMapping = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productCodes = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceDestCheck = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groupSet = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ebsOptimized = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sriovNetSupport = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enaSupport = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public InstanceAttributeName Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceCreditSpecificationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceEventNotificationAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceTypeOfferingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public LocationType LocationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstanceTypesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public InstanceType[] InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInternetGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InternetGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeIpv6PoolsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeKeyPairsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] KeyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] KeyPairIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLaunchTemplateVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLaunchTemplatesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LaunchTemplateIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LaunchTemplateNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 200)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTableVpcAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayRouteTableVpcAssociationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayRouteTablesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayRouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayVirtualInterfaceGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayVirtualInterfaceGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewayVirtualInterfacesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayVirtualInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeLocalGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LocalGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMovingAddressesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PublicIps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNatGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filter { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NatGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkAclsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkAclIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInterfaceAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		groupSet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sourceDestCheck = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attachment = 3,
	}
	
	/// <summary>
	/// Contains the parameters for DescribeNetworkInterfaceAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfaceAttributeRequest
	{
		
		public NetworkInterfaceAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeNetworkInterfacePermissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfacePermissionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfacePermissionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 255)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeNetworkInterfaces.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeNetworkInterfacesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePlacementGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePrefixListsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrefixListIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePrincipalIdFormatRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePublicIpv4PoolsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PoolIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRegionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RegionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllRegions { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeReservedInstancesListings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesListingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesListingId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeReservedInstancesModifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesModificationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstancesModificationIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeReservedInstancesOfferings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesOfferingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeMarketplace { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinDuration { get; set; }
		
		public OfferingClassType OfferingClass { get; set; }
		
		public RIProductDescription ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstancesOfferingIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public Tenancy InstanceTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		public OfferingTypeValues OfferingType { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeReservedInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservedInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		public OfferingClassType OfferingClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstancesIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public OfferingTypeValues OfferingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRouteTablesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SlotDateTimeRangeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EarliestTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestTime { get; set; }
	}
	
	/// <summary>
	/// Describes the recurring schedule for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstanceRecurrenceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OccurrenceDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OccurrenceRelativeToEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OccurrenceUnit { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeScheduledInstanceAvailability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledInstanceAvailabilityRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SlotDateTimeRangeRequest FirstSlotStartTimeRange { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 300)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSlotDurationInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSlotDurationInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Describes the recurring schedule for a Scheduled Instance.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstanceRecurrenceRequest Recurrence { get; set; }
	}
	
	/// <summary>
	/// Describes the time period for a Scheduled Instance to start its first schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SlotStartTimeRangeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EarliestTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestTime { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduledInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScheduledInstanceIds { get; set; }
		
		/// <summary>
		/// Describes the time period for a Scheduled Instance to start its first schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SlotStartTimeRangeRequest SlotStartTimeRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityGroupReferencesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnapshotAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productCodes = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		createVolumePermission = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public SnapshotAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OwnerIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RestorableByUserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotDatafeedSubscription.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotDatafeedSubscriptionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotFleetInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotFleetRequestHistory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetRequestHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public EventType EventType { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotFleetRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotFleetRequestsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SpotFleetRequestIds { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotInstanceRequests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotInstanceRequestsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SpotInstanceRequestIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeSpotPriceHistory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSpotPriceHistoryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceType[] InstanceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProductDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeStaleSecurityGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 255)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSubnetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTagsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorFiltersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrafficMirrorFilterIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorSessionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrafficMirrorSessionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTrafficMirrorTargetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TrafficMirrorTargetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayAttachmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayAttachmentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayMulticastDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayMulticastDomainIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayPeeringAttachmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayAttachmentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayRouteTablesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayRouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewayVpcAttachmentsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayAttachmentIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTransitGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TransitGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VolumeAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoEnableIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		productCodes = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumeAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public VolumeAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumeStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumesModificationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVolumesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VolumeIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enableDnsSupport = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enableDnsHostnames = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public VpcAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcClassicLinkDnsSupportRequest
	{
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 255)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcClassicLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointConnectionNotificationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServiceConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServicePermissionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeVpcEndpointServices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointServicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeVpcEndpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcEndpointsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcEndpointIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcPeeringConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcPeeringConnectionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpcsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeVpnConnections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpnConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpnConnectionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeVpnGateways.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeVpnGatewaysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] VpnGatewayIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachClassicLinkVpcRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachInternetGatewayRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InternetGatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DetachNetworkInterface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachNetworkInterfaceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachVolumeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Device { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DetachVpnGateway.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachVpnGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableEbsEncryptionByDefaultRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableFastSnapshotRestoresRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceSnapshotIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableTransitGatewayRouteTablePropagationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DisableVgwRoutePropagation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableVgwRoutePropagationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableVpcClassicLinkDnsSupportRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableVpcClassicLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateAddressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateClientVpnTargetNetworkRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateIamInstanceProfileRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateRouteTableRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateSubnetCidrBlockRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateTransitGatewayMulticastDomainRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateTransitGatewayRouteTableRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateVpcCidrBlockRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	/// <summary>
	/// Information about the DNS server to be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DnsServersOptionsModifyStructure
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CustomDnsServers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableEbsEncryptionByDefaultRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableFastSnapshotRestoresRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AvailabilityZones { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SourceSnapshotIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableTransitGatewayRouteTablePropagationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for EnableVgwRoutePropagation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVgwRoutePropagationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVolumeIORequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVpcClassicLinkDnsSupportRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableVpcClassicLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportClientVpnClientCertificateRevocationListRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportClientVpnClientConfigurationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes the destination for an export image task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportTaskS3LocationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public DiskImageFormat DiskImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		/// <summary>
		/// Describes the destination for an export image task.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExportTaskS3LocationRequest S3ExportLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportTransitGatewayRoutesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAssociatedIpv6PoolCidrsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCapacityReservationUsageRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCoipPoolUsageRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PoolId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConsoleOutputRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Latest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetConsoleScreenshotRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> WakeUp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDefaultCreditSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public UnlimitedSupportedInstanceFamily InstanceFamily { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEbsDefaultKmsKeyIdRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetEbsEncryptionByDefaultRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetHostReservationPurchasePreviewRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIdSet { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLaunchTemplateDataRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPasswordDataRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for GetReservedInstanceExchangeQuote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservedInstancesExchangeQuoteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetConfigurationRequest[] TargetConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayAttachmentPropagationsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayMulticastDomainAssociationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayRouteTableAssociationsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayRouteTablePropagationsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HibernationOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Configured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HostTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dedicated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		host = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportClientVpnClientCertificateRevocationListRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateRevocationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Architecture { get; set; }
		
		/// <summary>
		/// Describes the client-specific data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientData ClientData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImageDiskContainer[] DiskContainers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Hypervisor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportImageLicenseConfigurationRequest[] LicenseSpecifications { get; set; }
	}
	
	/// <summary>
	/// Describes the launch specification for VM import.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportInstanceLaunchSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		public ArchitectureValues Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupNames { get; set; }
		
		public ShutdownBehavior InstanceInitiatedShutdownBehavior { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Monitoring { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Placement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Describes the user data for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserData UserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportInstanceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskImage[] DiskImages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes the launch specification for VM import.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImportInstanceLaunchSpecification LaunchSpecification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public PlatformValues Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportKeyPairRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublicKeyMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
	}
	
	/// <summary>
	/// The disk container object for the import snapshot request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SnapshotDiskContainer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Describes the S3 bucket for the disk image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserBucket UserBucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportSnapshotRequest
	{
		
		/// <summary>
		/// Describes the client-specific data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClientData ClientData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The disk container object for the import snapshot request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SnapshotDiskContainer DiskContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportVolumeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes a disk image.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DiskImageDetail Image { get; set; }
		
		/// <summary>
		/// Describes an EBS volume.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VolumeDetail Volume { get; set; }
	}
	
	/// <summary>
	/// Describes the market (purchasing) option for the instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceMarketOptionsRequest
	{
		
		public MarketType MarketType { get; set; }
		
		/// <summary>
		/// The options for Spot Instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotMarketOptions SpotOptions { get; set; }
	}
	
	/// <summary>
	/// The metadata options for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceMetadataOptionsRequest
	{
		
		public HttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		public InstanceMetadataEndpointState HttpEndpoint { get; set; }
	}
	
	/// <summary>
	/// Describes a launch permission modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchPermissionModifications
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchPermission[] Add { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchPermission[] Remove { get; set; }
	}
	
	/// <summary>
	/// The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LaunchTemplateSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Describes a load permission.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadPermissionRequest
	{
		
		public PermissionGroup Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// Describes modifications to the load permissions of an Amazon FPGA image (AFI).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadPermissionModifications
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadPermissionRequest[] Add { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadPermissionRequest[] Remove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ModifyAvailabilityZoneOptInStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		opted_in = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_opted_in = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyAvailabilityZoneGroupRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ModifyAvailabilityZoneOptInStatus OptInStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyCapacityReservationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CapacityReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		public EndDateType EndDateType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClientVpnEndpointRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateArn { get; set; }
		
		/// <summary>
		/// Describes the client connection logging options for the Client VPN endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ConnectionLogOptions ConnectionLogOptions { get; set; }
		
		/// <summary>
		/// Information about the DNS server to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DnsServersOptionsModifyStructure DnsServers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VpnPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SplitTunnel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyDefaultCreditSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public UnlimitedSupportedInstanceFamily InstanceFamily { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CpuCredits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyEbsDefaultKmsKeyIdRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyFleetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		public FleetExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FleetId { get; set; }
		
		/// <summary>
		/// <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest">OnDemandOptionsRequest</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest">SpotOptionsRequest</a>.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetCapacitySpecificationRequest TargetCapacitySpecification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		add = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remove = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyFpgaImageAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		public FpgaImageAttributeName Attribute { get; set; }
		
		public OperationType OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProductCodes { get; set; }
		
		/// <summary>
		/// Describes modifications to the load permissions of an Amazon FPGA image (AFI).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadPermissionModifications LoadPermission { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyHostsRequest
	{
		
		public AutoPlacement AutoPlacement { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIds { get; set; }
		
		public HostRecovery HostRecovery { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFamily { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyIdFormatRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UseLongIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyIdentityIdFormatRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool UseLongIds { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifyImageAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyImageAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		/// <summary>
		/// Describes a launch permission modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchPermissionModifications LaunchPermission { get; set; }
		
		public OperationType OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProductCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceAttributeRequest
	{
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue SourceDestCheck { get; set; }
		
		public InstanceAttributeName Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceBlockDeviceMappingSpecification[] BlockDeviceMappings { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue DisableApiTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnaSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue InstanceInitiatedShutdownBehavior { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue InstanceType { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Kernel { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Ramdisk { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue SriovNetSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlobAttributeValue UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceCapacityReservationAttributesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		/// <summary>
		/// <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationSpecification CapacityReservationSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceCreditSpecificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceCreditSpecificationRequest[] InstanceCreditSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceEventStartTimeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceEventId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset NotBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceMetadataOptionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public HttpTokensState HttpTokens { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HttpPutResponseHopLimit { get; set; }
		
		public InstanceMetadataEndpointState HttpEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstancePlacementRequest
	{
		
		public Affinity Affinity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		public HostTenancy Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartitionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HostResourceGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyLaunchTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchTemplateId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 3
		/// Pattern: [a-zA-Z0-9\(\)\.\-/_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=3)]
		public string LaunchTemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersion { get; set; }
	}
	
	/// <summary>
	/// Describes an attachment change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterfaceAttachmentChanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifyNetworkInterfaceAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyNetworkInterfaceAttributeRequest
	{
		
		/// <summary>
		/// Describes an attachment change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterfaceAttachmentChanges Attachment { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a String.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue SourceDestCheck { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifyReservedInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyReservedInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ReservedInstancesIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstancesConfiguration[] TargetConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySnapshotAttributeRequest
	{
		
		public SnapshotAttributeName Attribute { get; set; }
		
		/// <summary>
		/// Describes modifications to the list of create volume permissions for a volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateVolumePermissionModifications CreateVolumePermission { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupNames { get; set; }
		
		public OperationType OperationType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifySpotFleetRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySpotFleetRequestRequest
	{
		
		public ExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpotFleetRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TargetCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> OnDemandTargetCapacity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifySubnetAttributeRequest
	{
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue AssignIpv6AddressOnCreation { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue MapPublicIpOnLaunch { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue MapCustomerOwnedIpOnLaunch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerOwnedIpv4Pool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorFilterNetworkServicesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorNetworkService[] AddNetworkServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorNetworkService[] RemoveNetworkServices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorFilterRuleRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterRuleId { get; set; }
		
		public TrafficDirection TrafficDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RuleNumber { get; set; }
		
		public TrafficMirrorRuleAction RuleAction { get; set; }
		
		/// <summary>
		/// Information about the Traffic Mirror filter rule port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRangeRequest DestinationPortRange { get; set; }
		
		/// <summary>
		/// Information about the Traffic Mirror filter rule port range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorPortRangeRequest SourcePortRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorFilterRuleField[] RemoveFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTrafficMirrorSessionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorTargetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrafficMirrorFilterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PacketLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SessionNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VirtualNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrafficMirrorSessionField[] RemoveFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Describes the options for a VPC attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTransitGatewayVpcAttachmentRequestOptions
	{
		
		public DnsSupportValue DnsSupport { get; set; }
		
		public Ipv6SupportValue Ipv6Support { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyTransitGatewayVpcAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddSubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveSubnetIds { get; set; }
		
		/// <summary>
		/// Describes the options for a VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModifyTransitGatewayVpcAttachmentRequestOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVolumeAttributeRequest
	{
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue AutoEnableIO { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVolumeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		public VolumeType VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcAttributeRequest
	{
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnableDnsHostnames { get; set; }
		
		/// <summary>
		/// Describes a value for a resource attribute that is a Boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AttributeBooleanValue EnableDnsSupport { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointConnectionNotificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionNotificationArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ConnectionEvents { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ModifyVpcEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ResetPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddRouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveRouteTableIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddSubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveSubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveSecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivateDnsEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointServiceConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemovePrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AcceptanceRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddNetworkLoadBalancerArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveNetworkLoadBalancerArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcEndpointServicePermissionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddAllowedPrincipals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveAllowedPrincipals { get; set; }
	}
	
	/// <summary>
	/// The VPC peering connection options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PeeringConnectionOptionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowDnsResolutionFromRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalClassicLinkToRemoteVpc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowEgressFromLocalVpcToRemoteClassicLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcPeeringConnectionOptionsRequest
	{
		
		/// <summary>
		/// The VPC peering connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringConnectionOptionsRequest AccepterPeeringConnectionOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// The VPC peering connection options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PeeringConnectionOptionsRequest RequesterPeeringConnectionOptions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VpcTenancy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@default = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpcTenancyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public VpcTenancy InstanceTenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnConnectionRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnTunnelCertificateRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnTunnelOutsideIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// The AWS Site-to-Site VPN tunnel options to modify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnTunnelOptionsSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TunnelInsideCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreSharedKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase1LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Phase2LifetimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyMarginTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RekeyFuzzPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplayWindowSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DPDTimeoutSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1EncryptionAlgorithmsRequestListValue[] Phase1EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2EncryptionAlgorithmsRequestListValue[] Phase2EncryptionAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1IntegrityAlgorithmsRequestListValue[] Phase1IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2IntegrityAlgorithmsRequestListValue[] Phase2IntegrityAlgorithms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase1DHGroupNumbersRequestListValue[] Phase1DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Phase2DHGroupNumbersRequestListValue[] Phase2DHGroupNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IKEVersionsRequestListValue[] IKEVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyVpnTunnelOptionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnTunnelOutsideIpAddress { get; set; }
		
		/// <summary>
		/// The AWS Site-to-Site VPN tunnel options to modify.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ModifyVpnTunnelOptionsSpecification TunnelOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MonitorInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MoveAddressToVpcRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	/// <summary>
	/// Describes a private IPv4 address for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesPrivateIpAddressConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisionByoipCidrRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		/// <summary>
		/// Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CidrAuthorizationContext CidrAuthorizationContext { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAdvertisable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] PoolTagSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseHostReservationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIdSet { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LimitPrice { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
	}
	
	/// <summary>
	/// Describes the limit price of a Reserved Instance offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservedInstanceLimitPrice
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		public CurrencyCodeValues CurrencyCode { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for PurchaseReservedInstancesOffering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseReservedInstancesOfferingRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedInstancesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes the limit price of a Reserved Instance offering.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservedInstanceLimitPrice LimitPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PurchaseTime { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for PurchaseScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseScheduledInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public PurchaseRequest[] PurchaseRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RegisterImage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterImageRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageLocation { get; set; }
		
		public ArchitectureValues Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnaSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BillingProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RootDeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SriovNetSupport { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualizationType { get; set; }
	}
	
	/// <summary>
	/// Information about the tag keys to register for the current Region. You can either specify individual tag keys or register all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterInstanceTagAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAllTagsOfInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceTagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterInstanceEventNotificationAttributesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Information about the tag keys to register for the current Region. You can either specify individual tag keys or register all tag keys in the current Region. You must specify either <code>IncludeAllTagsOfInstance</code> or <code>InstanceTagKeys</code> in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegisterInstanceTagAttributeRequest InstanceTagAttribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayMulticastGroupMembersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayMulticastGroupSourcesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NetworkInterfaceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectTransitGatewayPeeringAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectTransitGatewayVpcAttachmentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectVpcEndpointConnectionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] VpcEndpointIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RejectVpcPeeringConnectionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReleaseAddressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkBorderGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReleaseHostsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] HostIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceIamInstanceProfileAssociationRequest
	{
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceNetworkAclAssociationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceNetworkAclEntryRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Egress { get; set; }
		
		/// <summary>
		/// Describes the ICMP type and code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IcmpTypeCode IcmpTypeCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6CidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkAclId { get; set; }
		
		/// <summary>
		/// Describes a range of ports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PortRange PortRange { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Protocol { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public RuleAction RuleAction { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int RuleNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceRouteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIpv6CidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EgressOnlyInternetGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> LocalTarget { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NatGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcPeeringConnectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceRouteTableAssociationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssociationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplaceTransitGatewayRouteRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Blackhole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ok = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		impaired = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportInstanceStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Instances { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportInstanceReasonCodes[] ReasonCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ReportStatusType Status { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RequestSpotFleet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestSpotFleetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Describes the configuration of a Spot Fleet request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpotFleetRequestConfigData SpotFleetRequestConfig { get; set; }
	}
	
	/// <summary>
	/// Describes the launch specification for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestSpotLaunchSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Describes the monitoring of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RunInstancesMonitoringEnabled Monitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceSpecification[] NetworkInterfaces { get; set; }
		
		/// <summary>
		/// Describes Spot Instance placement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpotPlacement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RequestSpotInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestSpotInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZoneGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchGroup { get; set; }
		
		/// <summary>
		/// Describes the launch specification for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestSpotLaunchSpecification LaunchSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpotPrice { get; set; }
		
		public SpotInstanceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
		
		public InstanceInterruptionBehavior InstanceInterruptionBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetEbsDefaultKmsKeyIdRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResetFpgaImageAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		loadPermission = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetFpgaImageAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FpgaImageId { get; set; }
		
		public ResetFpgaImageAttributeName Attribute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResetImageAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		launchPermission = 0,
	}
	
	/// <summary>
	/// Contains the parameters for ResetImageAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetImageAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public ResetImageAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetInstanceAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public InstanceAttributeName Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ResetNetworkInterfaceAttribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetNetworkInterfaceAttributeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDestCheck { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResetSnapshotAttributeRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		public SnapshotAttributeName Attribute { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreAddressToClassicRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublicIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeClientVpnIngressRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetNetworkCidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RevokeAllGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeSecurityGroupEgressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupOwnerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RevokeSecurityGroupIngressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CidrIp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpProtocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceSecurityGroupOwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		public InstanceType InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinCount { get; set; }
		
		/// <summary>
		/// Describes the monitoring of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RunInstancesMonitoringEnabled Monitoring { get; set; }
		
		/// <summary>
		/// Describes the placement of an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Placement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableApiTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IamInstanceProfileSpecification IamInstanceProfile { get; set; }
		
		public ShutdownBehavior InstanceInitiatedShutdownBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworkInterfaceSpecification[] NetworkInterfaces { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticGpuSpecification[] ElasticGpuSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ElasticInferenceAccelerator[] ElasticInferenceAccelerators { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagSpecification[] TagSpecifications { get; set; }
		
		/// <summary>
		/// The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LaunchTemplateSpecification LaunchTemplate { get; set; }
		
		/// <summary>
		/// Describes the market (purchasing) option for the instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceMarketOptionsRequest InstanceMarketOptions { get; set; }
		
		/// <summary>
		/// The credit option for CPU usage of a T2 or T3 instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreditSpecificationRequest CreditSpecification { get; set; }
		
		/// <summary>
		/// The CPU options for the instance. Both the core count and threads per core must be specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CpuOptionsRequest CpuOptions { get; set; }
		
		/// <summary>
		/// <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CapacityReservationSpecification CapacityReservationSpecification { get; set; }
		
		/// <summary>
		/// Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HibernationOptionsRequest HibernationOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LicenseConfigurationRequest[] LicenseSpecifications { get; set; }
		
		/// <summary>
		/// The metadata options for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceMetadataOptionsRequest MetadataOptions { get; set; }
	}
	
	/// <summary>
	/// <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesLaunchSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesBlockDeviceMapping[] BlockDeviceMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Describes an IAM instance profile for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesIamInstanceProfile IamInstanceProfile { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ImageId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KernelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyName { get; set; }
		
		/// <summary>
		/// Describes whether monitoring is enabled for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesMonitoring Monitoring { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesNetworkInterface[] NetworkInterfaces { get; set; }
		
		/// <summary>
		/// Describes the placement for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesPlacement Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RamdiskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
	}
	
	/// <summary>
	/// Describes a block device mapping for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesBlockDeviceMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceName { get; set; }
		
		/// <summary>
		/// Describes an EBS volume for a Scheduled Instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesEbs Ebs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NoDevice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VirtualName { get; set; }
	}
	
	/// <summary>
	/// Describes an EBS volume for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesEbs
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Encrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface for a Scheduled Instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesNetworkInterface
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AssociatePublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteOnTermination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DeviceIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Ipv6AddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesIpv6Address[] Ipv6Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesPrivateIpAddressConfig[] PrivateIpAddressConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SecondaryPrivateIpAddressCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetId { get; set; }
	}
	
	/// <summary>
	/// Describes an IPv6 address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduledInstancesIpv6Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for RunScheduledInstances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunScheduledInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		/// <summary>
		/// <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduledInstancesLaunchSpecification LaunchSpecification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledInstanceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchLocalGatewayRoutesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LocalGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchTransitGatewayMulticastGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayMulticastDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SearchTransitGatewayRoutesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 1000)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendDiagnosticInterruptRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdditionalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartVpcEndpointServicePrivateDnsVerificationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Hibernate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateClientVpnConnectionsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientVpnEndpointId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnassignIpv6AddressesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Ipv6Addresses { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for UnassignPrivateIpAddresses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnassignPrivateIpAddressesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PrivateIpAddresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnmonitorInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InstanceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityGroupRuleDescriptionsEgressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSecurityGroupRuleDescriptionsIngressRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public IpPermission[] IpPermissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WithdrawByoipCidrRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.
		/// GET_AcceptReservedInstancesExchangeQuote #Action=AcceptReservedInstancesExchangeQuote
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ReservedInstanceId">The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.</param>
		/// <param name="TargetConfiguration">The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.</param>
		/// <returns>Success</returns>
		public async Task GET_AcceptReservedInstancesExchangeQuoteAsync(bool DryRun, string[] ReservedInstanceId, TargetConfigurationRequest[] TargetConfiguration, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptReservedInstancesExchangeQuote?DryRun="+DryRun+"&"+String.Join("&", ReservedInstanceId.Select(z => $"ReservedInstanceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", TargetConfiguration.Select(z => $"TargetConfiguration={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.
		/// POST_AcceptReservedInstancesExchangeQuote #Action=AcceptReservedInstancesExchangeQuote
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AcceptReservedInstancesExchangeQuoteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptReservedInstancesExchangeQuote?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts a transit gateway peering attachment request. The peering attachment must be in the <code>pendingAcceptance</code> state.
		/// GET_AcceptTransitGatewayPeeringAttachment #Action=AcceptTransitGatewayPeeringAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the transit gateway attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AcceptTransitGatewayPeeringAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptTransitGatewayPeeringAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts a transit gateway peering attachment request. The peering attachment must be in the <code>pendingAcceptance</code> state.
		/// POST_AcceptTransitGatewayPeeringAttachment #Action=AcceptTransitGatewayPeeringAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AcceptTransitGatewayPeeringAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptTransitGatewayPeeringAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
		/// GET_AcceptTransitGatewayVpcAttachment #Action=AcceptTransitGatewayVpcAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AcceptTransitGatewayVpcAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptTransitGatewayVpcAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Accepts a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
		/// POST_AcceptTransitGatewayVpcAttachment #Action=AcceptTransitGatewayVpcAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AcceptTransitGatewayVpcAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptTransitGatewayVpcAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.
		/// GET_AcceptVpcEndpointConnections #Action=AcceptVpcEndpointConnections
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the VPC endpoint service.</param>
		/// <param name="VpcEndpointId">The IDs of one or more interface VPC endpoints.</param>
		/// <returns>Success</returns>
		public async Task GET_AcceptVpcEndpointConnectionsAsync(bool DryRun, string ServiceId, string[] VpcEndpointId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptVpcEndpointConnections?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&"+String.Join("&", VpcEndpointId.Select(z => $"VpcEndpointId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.
		/// POST_AcceptVpcEndpointConnections #Action=AcceptVpcEndpointConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AcceptVpcEndpointConnectionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptVpcEndpointConnections?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering connection requests.</p> <p>For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.</p>
		/// GET_AcceptVpcPeeringConnection #Action=AcceptVpcPeeringConnection
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcPeeringConnectionId">The ID of the VPC peering connection. You must specify this parameter in the request.</param>
		/// <returns>Success</returns>
		public async Task GET_AcceptVpcPeeringConnectionAsync(bool DryRun, string VpcPeeringConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptVpcPeeringConnection?DryRun="+DryRun+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering connection requests.</p> <p>For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.</p>
		/// POST_AcceptVpcPeeringConnection #Action=AcceptVpcPeeringConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AcceptVpcPeeringConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AcceptVpcPeeringConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.</p> <p>It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.</p> <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
		/// GET_AdvertiseByoipCidr #Action=AdvertiseByoipCidr
		/// </summary>
		/// <param name="Cidr">The address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AdvertiseByoipCidrAsync(string Cidr, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AdvertiseByoipCidr?Cidr=" + (Cidr==null? "" : Uri.EscapeDataString(Cidr))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Advertises an IPv4 or IPv6 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.</p> <p>It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.</p> <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
		/// POST_AdvertiseByoipCidr #Action=AdvertiseByoipCidr
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AdvertiseByoipCidrAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AdvertiseByoipCidr?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.</p> <p>You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p> <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_AllocateAddress #Action=AllocateAddress
		/// </summary>
		/// <param name="Domain"><p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p></param>
		/// <param name="Address">[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.</param>
		/// <param name="PublicIpv4Pool">The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the <code>Address</code> parameter instead.</param>
		/// <param name="NetworkBorderGroup"><p>The location from which the IP address is advertised. Use this parameter to limit the address to this location.</p> <p>A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises IP addresses and limits the addresses to the group. IP addresses cannot move between network border groups.</p> <p>Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">DescribeAvailabilityZones</a> to view the network border groups.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p> </note></param>
		/// <param name="CustomerOwnedIpv4Pool">The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AllocateAddressAsync(DomainType Domain, string Address, string PublicIpv4Pool, string NetworkBorderGroup, string CustomerOwnedIpv4Pool, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AllocateAddress?Domain=" + Domain+"&Address=" + (Address==null? "" : Uri.EscapeDataString(Address))+"&PublicIpv4Pool=" + (PublicIpv4Pool==null? "" : Uri.EscapeDataString(PublicIpv4Pool))+"&NetworkBorderGroup=" + (NetworkBorderGroup==null? "" : Uri.EscapeDataString(NetworkBorderGroup))+"&CustomerOwnedIpv4Pool=" + (CustomerOwnedIpv4Pool==null? "" : Uri.EscapeDataString(CustomerOwnedIpv4Pool))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.</p> <p>You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p> <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_AllocateAddress #Action=AllocateAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AllocateAddressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AllocateAddress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.
		/// GET_AllocateHosts #Action=AllocateHosts
		/// </summary>
		/// <param name="AutoPlacement"><p>Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding"> Understanding Instance Placement and Host Affinity</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>Default: <code>on</code> </p></param>
		/// <param name="AvailabilityZone">The Availability Zone in which to allocate the Dedicated Host.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="InstanceType"><p>Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.</p> <p>If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p></param>
		/// <param name="InstanceFamily"><p>Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.</p> <p>If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p></param>
		/// <param name="Quantity">The number of Dedicated Hosts to allocate to your account with these parameters.</param>
		/// <param name="TagSpecification">The tags to apply to the Dedicated Host during creation.</param>
		/// <param name="HostRecovery"><p>Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>off</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_AllocateHostsAsync(AutoPlacement AutoPlacement, string AvailabilityZone, string ClientToken, string InstanceType, string InstanceFamily, int Quantity, TagSpecification[] TagSpecification, AutoPlacement HostRecovery, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AllocateHosts?AutoPlacement=" + AutoPlacement+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&InstanceFamily=" + (InstanceFamily==null? "" : Uri.EscapeDataString(InstanceFamily))+"&Quantity="+Quantity+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&HostRecovery=" + HostRecovery+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.
		/// POST_AllocateHosts #Action=AllocateHosts
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AllocateHostsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AllocateHosts?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.
		/// GET_ApplySecurityGroupsToClientVpnTargetNetwork #Action=ApplySecurityGroupsToClientVpnTargetNetwork
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="VpcId">The ID of the VPC in which the associated target network is located.</param>
		/// <param name="SecurityGroupId">The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ApplySecurityGroupsToClientVpnTargetNetworkAsync(string ClientVpnEndpointId, string VpcId, string[] SecurityGroupId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ApplySecurityGroupsToClientVpnTargetNetwork?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.
		/// POST_ApplySecurityGroupsToClientVpnTargetNetwork #Action=ApplySecurityGroupsToClientVpnTargetNetwork
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ApplySecurityGroupsToClientVpnTargetNetworkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ApplySecurityGroupsToClientVpnTargetNetwork?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify either the IPv6 addresses or the IPv6 address count in the request.</p>
		/// GET_AssignIpv6Addresses #Action=AssignIpv6Addresses
		/// </summary>
		/// <param name="Ipv6AddressCount">The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.</param>
		/// <param name="Ipv6Addresses">One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_AssignIpv6AddressesAsync(int Ipv6AddressCount, string[] Ipv6Addresses, string NetworkInterfaceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssignIpv6Addresses?Ipv6AddressCount="+Ipv6AddressCount+"&"+String.Join("&", Ipv6Addresses.Select(z => $"Ipv6Addresses={Uri.EscapeDataString(z.ToString())}"))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify either the IPv6 addresses or the IPv6 address count in the request.</p>
		/// POST_AssignIpv6Addresses #Action=AssignIpv6Addresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssignIpv6AddressesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssignIpv6Addresses?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more secondary private IP addresses to the specified network interface.</p> <p>You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.</p> <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance metadata to confirm that the remapping is complete.</p> <p>You must specify either the IP addresses or the IP address count in the request.</p>
		/// GET_AssignPrivateIpAddresses #Action=AssignPrivateIpAddresses
		/// </summary>
		/// <param name="AllowReassignment">Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <param name="PrivateIpAddress"><p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p></param>
		/// <param name="SecondaryPrivateIpAddressCount">The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</param>
		/// <returns>Success</returns>
		public async Task GET_AssignPrivateIpAddressesAsync(bool AllowReassignment, string NetworkInterfaceId, string[] PrivateIpAddress, int SecondaryPrivateIpAddressCount, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssignPrivateIpAddresses?AllowReassignment="+AllowReassignment+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&"+String.Join("&", PrivateIpAddress.Select(z => $"PrivateIpAddress={Uri.EscapeDataString(z.ToString())}"))+"&SecondaryPrivateIpAddressCount="+SecondaryPrivateIpAddressCount+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Assigns one or more secondary private IP addresses to the specified network interface.</p> <p>You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.</p> <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance metadata to confirm that the remapping is complete.</p> <p>You must specify either the IP addresses or the IP address count in the request.</p>
		/// POST_AssignPrivateIpAddresses #Action=AssignPrivateIpAddresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssignPrivateIpAddressesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssignPrivateIpAddresses?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.</p> <p>[VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.</p> <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important>
		/// GET_AssociateAddress #Action=AssociateAddress
		/// </summary>
		/// <param name="AllocationId">[EC2-VPC] The allocation ID. This is required for EC2-VPC.</param>
		/// <param name="InstanceId">The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.</param>
		/// <param name="PublicIp">The Elastic IP address to associate with the instance. This is required for EC2-Classic.</param>
		/// <param name="AllowReassociation">[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkInterfaceId"><p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p> <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p></param>
		/// <param name="PrivateIpAddress">[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateAddressAsync(string AllocationId, string InstanceId, string PublicIp, bool AllowReassociation, bool DryRun, string NetworkInterfaceId, string PrivateIpAddress, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateAddress?AllocationId=" + (AllocationId==null? "" : Uri.EscapeDataString(AllocationId))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&PublicIp=" + (PublicIp==null? "" : Uri.EscapeDataString(PublicIp))+"&AllowReassociation="+AllowReassociation+"&DryRun="+DryRun+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&PrivateIpAddress=" + (PrivateIpAddress==null? "" : Uri.EscapeDataString(PrivateIpAddress))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.</p> <p>[VPC in an EC2-Classic account] If you don't specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.</p> <p>You cannot associate an Elastic IP address with an interface in a different network border group.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important>
		/// POST_AssociateAddress #Action=AssociateAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateAddressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateAddress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p> <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
		/// GET_AssociateClientVpnTargetNetwork #Action=AssociateClientVpnTargetNetwork
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="SubnetId">The ID of the subnet to associate with the Client VPN endpoint.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateClientVpnTargetNetworkAsync(string ClientVpnEndpointId, string SubnetId, string ClientToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateClientVpnTargetNetwork?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p> <p>If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (<a>ModifyClientVpnEndpoint</a>) and change the VPC that's associated with it.</p>
		/// POST_AssociateClientVpnTargetNetwork #Action=AssociateClientVpnTargetNetwork
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateClientVpnTargetNetworkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateClientVpnTargetNetwork?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_AssociateDhcpOptions #Action=AssociateDhcpOptions
		/// </summary>
		/// <param name="DhcpOptionsId">The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateDhcpOptionsAsync(string DhcpOptionsId, string VpcId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateDhcpOptions?DhcpOptionsId=" + (DhcpOptionsId==null? "" : Uri.EscapeDataString(DhcpOptionsId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_AssociateDhcpOptions #Action=AssociateDhcpOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateDhcpOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateDhcpOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
		/// GET_AssociateIamInstanceProfile #Action=AssociateIamInstanceProfile
		/// </summary>
		/// <param name="IamInstanceProfile">The IAM instance profile.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateIamInstanceProfileAsync(string IamInstanceProfile, string InstanceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateIamInstanceProfile?IamInstanceProfile=" + (IamInstanceProfile==null? "" : Uri.EscapeDataString(IamInstanceProfile))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
		/// POST_AssociateIamInstanceProfile #Action=AssociateIamInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateIamInstanceProfileAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateIamInstanceProfile?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_AssociateRouteTable #Action=AssociateRouteTable
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RouteTableId">The ID of the route table.</param>
		/// <param name="SubnetId">The ID of the subnet.</param>
		/// <param name="GatewayId">The ID of the internet gateway or virtual private gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateRouteTableAsync(bool DryRun, string RouteTableId, string SubnetId, string GatewayId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateRouteTable?DryRun="+DryRun+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&GatewayId=" + (GatewayId==null? "" : Uri.EscapeDataString(GatewayId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_AssociateRouteTable #Action=AssociateRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.
		/// GET_AssociateSubnetCidrBlock #Action=AssociateSubnetCidrBlock
		/// </summary>
		/// <param name="Ipv6CidrBlock">The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.</param>
		/// <param name="SubnetId">The ID of your subnet.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateSubnetCidrBlockAsync(string Ipv6CidrBlock, string SubnetId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateSubnetCidrBlock?Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.
		/// POST_AssociateSubnetCidrBlock #Action=AssociateSubnetCidrBlock
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateSubnetCidrBlockAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateSubnetCidrBlock?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p> <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a> to see the state of the attachment.</p>
		/// GET_AssociateTransitGatewayMulticastDomain #Action=AssociateTransitGatewayMulticastDomain
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the transit gateway attachment to associate with the transit gateway multicast domain.</param>
		/// <param name="SubnetIds">The IDs of the subnets to associate with the transit gateway multicast domain.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateTransitGatewayMulticastDomainAsync(string TransitGatewayMulticastDomainId, string TransitGatewayAttachmentId, string[] SubnetIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateTransitGatewayMulticastDomain?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.</p> <p>The transit gateway attachment must be in the available state before you can add a resource. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html">DescribeTransitGatewayAttachments</a> to see the state of the attachment.</p>
		/// POST_AssociateTransitGatewayMulticastDomain #Action=AssociateTransitGatewayMulticastDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateTransitGatewayMulticastDomainAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateTransitGatewayMulticastDomain?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.
		/// GET_AssociateTransitGatewayRouteTable #Action=AssociateTransitGatewayRouteTable
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AssociateTransitGatewayRouteTableAsync(string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateTransitGatewayRouteTable?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.
		/// POST_AssociateTransitGatewayRouteTable #Action=AssociateTransitGatewayRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateTransitGatewayRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateTransitGatewayRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>). The IPv6 CIDR block size is fixed at /56.</p> <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6 pool, or an Amazon-provided IPv6 CIDR block.</p> <p>For more information about associating CIDR blocks with your VPC and applicable restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing">VPC and Subnet Sizing</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_AssociateVpcCidrBlock #Action=AssociateVpcCidrBlock
		/// </summary>
		/// <param name="AmazonProvidedIpv6CidrBlock">Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.</param>
		/// <param name="CidrBlock">An IPv4 CIDR block to associate with the VPC.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="Ipv6CidrBlockNetworkBorderGroup"><p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CiDR block to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p> <p> You can have one IPv6 CIDR block association per network border group.</p></param>
		/// <param name="Ipv6Pool">The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</param>
		/// <param name="Ipv6CidrBlock"><p>An IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p> <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AssociateVpcCidrBlockAsync(bool AmazonProvidedIpv6CidrBlock, string CidrBlock, string VpcId, string Ipv6CidrBlockNetworkBorderGroup, string Ipv6Pool, string Ipv6CidrBlock, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateVpcCidrBlock?AmazonProvidedIpv6CidrBlock="+AmazonProvidedIpv6CidrBlock+"&CidrBlock=" + (CidrBlock==null? "" : Uri.EscapeDataString(CidrBlock))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Ipv6CidrBlockNetworkBorderGroup=" + (Ipv6CidrBlockNetworkBorderGroup==null? "" : Uri.EscapeDataString(Ipv6CidrBlockNetworkBorderGroup))+"&Ipv6Pool=" + (Ipv6Pool==null? "" : Uri.EscapeDataString(Ipv6Pool))+"&Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>). The IPv6 CIDR block size is fixed at /56.</p> <p>You must specify one of the following in the request: an IPv4 CIDR block, an IPv6 pool, or an Amazon-provided IPv6 CIDR block.</p> <p>For more information about associating CIDR blocks with your VPC and applicable restrictions, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing">VPC and Subnet Sizing</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_AssociateVpcCidrBlock #Action=AssociateVpcCidrBlock
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AssociateVpcCidrBlockAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AssociateVpcCidrBlock?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
		/// GET_AttachClassicLinkVpc #Action=AttachClassicLinkVpc
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SecurityGroupId">The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</param>
		/// <param name="InstanceId">The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</param>
		/// <param name="VpcId">The ID of a ClassicLink-enabled VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachClassicLinkVpcAsync(bool DryRun, string[] SecurityGroupId, string InstanceId, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachClassicLinkVpc?DryRun="+DryRun+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
		/// POST_AttachClassicLinkVpc #Action=AttachClassicLinkVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AttachClassicLinkVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachClassicLinkVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.
		/// GET_AttachInternetGateway #Action=AttachInternetGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InternetGatewayId">The ID of the internet gateway.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachInternetGatewayAsync(bool DryRun, string InternetGatewayId, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachInternetGateway?DryRun="+DryRun+"&InternetGatewayId=" + (InternetGatewayId==null? "" : Uri.EscapeDataString(InternetGatewayId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.
		/// POST_AttachInternetGateway #Action=AttachInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AttachInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches a network interface to an instance.
		/// GET_AttachNetworkInterface #Action=AttachNetworkInterface
		/// </summary>
		/// <param name="DeviceIndex">The index of the device for the network interface attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachNetworkInterfaceAsync(int DeviceIndex, bool DryRun, string InstanceId, string NetworkInterfaceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachNetworkInterface?DeviceIndex="+DeviceIndex+"&DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attaches a network interface to an instance.
		/// POST_AttachNetworkInterface #Action=AttachNetworkInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AttachNetworkInterfaceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachNetworkInterface?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.</p> <p>Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>After you attach an EBS volume, you must make it available. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Making an EBS Volume Available For Use</a>.</p> <p>If a volume has an AWS Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>AWS Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_AttachVolume #Action=AttachVolume
		/// </summary>
		/// <param name="Device">The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="VolumeId">The ID of the EBS volume. The volume and instance must be within the same Availability Zone.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachVolumeAsync(string Device, string InstanceId, string VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachVolume?Device=" + (Device==null? "" : Uri.EscapeDataString(Device))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.</p> <p>Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>After you attach an EBS volume, you must make it available. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html">Making an EBS Volume Available For Use</a>.</p> <p>If a volume has an AWS Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>AWS Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_AttachVolume #Action=AttachVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AttachVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_AttachVpnGateway #Action=AttachVpnGateway
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="VpnGatewayId">The ID of the virtual private gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AttachVpnGatewayAsync(string VpcId, string VpnGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachVpnGateway?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&VpnGatewayId=" + (VpnGatewayId==null? "" : Uri.EscapeDataString(VpnGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_AttachVpnGateway #Action=AttachVpnGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AttachVpnGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachVpnGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.
		/// GET_AuthorizeClientVpnIngress #Action=AuthorizeClientVpnIngress
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="TargetNetworkCidr">The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</param>
		/// <param name="AccessGroupId">The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group.</param>
		/// <param name="AuthorizeAllGroups">Indicates whether to grant access to all clients. Use <code>true</code> to grant all clients who successfully establish a VPN connection access to the network.</param>
		/// <param name="Description">A brief description of the authorization rule.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeClientVpnIngressAsync(string ClientVpnEndpointId, string TargetNetworkCidr, string AccessGroupId, bool AuthorizeAllGroups, string Description, string ClientToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeClientVpnIngress?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&TargetNetworkCidr=" + (TargetNetworkCidr==null? "" : Uri.EscapeDataString(TargetNetworkCidr))+"&AccessGroupId=" + (AccessGroupId==null? "" : Uri.EscapeDataString(AccessGroupId))+"&AuthorizeAllGroups="+AuthorizeAllGroups+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.
		/// POST_AuthorizeClientVpnIngress #Action=AuthorizeClientVpnIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AuthorizeClientVpnIngressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeClientVpnIngress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Adds the specified egress rules to a security group for use with a VPC.</p> <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.</p> <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// GET_AuthorizeSecurityGroupEgress #Action=AuthorizeSecurityGroupEgress
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupId">The ID of the security group.</param>
		/// <param name="IpPermissions">The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</param>
		/// <param name="CidrIp">Not supported. Use a set of IP permissions to specify the CIDR.</param>
		/// <param name="FromPort">Not supported. Use a set of IP permissions to specify the port.</param>
		/// <param name="IpProtocol">Not supported. Use a set of IP permissions to specify the protocol name or number.</param>
		/// <param name="ToPort">Not supported. Use a set of IP permissions to specify the port.</param>
		/// <param name="SourceSecurityGroupName">Not supported. Use a set of IP permissions to specify a destination security group.</param>
		/// <param name="SourceSecurityGroupOwnerId">Not supported. Use a set of IP permissions to specify a destination security group.</param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeSecurityGroupEgressAsync(bool DryRun, string GroupId, IpPermission[] IpPermissions, string CidrIp, int FromPort, string IpProtocol, int ToPort, string SourceSecurityGroupName, string SourceSecurityGroupOwnerId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeSecurityGroupEgress?DryRun="+DryRun+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&CidrIp=" + (CidrIp==null? "" : Uri.EscapeDataString(CidrIp))+"&FromPort="+FromPort+"&IpProtocol=" + (IpProtocol==null? "" : Uri.EscapeDataString(IpProtocol))+"&ToPort="+ToPort+"&SourceSecurityGroupName=" + (SourceSecurityGroupName==null? "" : Uri.EscapeDataString(SourceSecurityGroupName))+"&SourceSecurityGroupOwnerId=" + (SourceSecurityGroupOwnerId==null? "" : Uri.EscapeDataString(SourceSecurityGroupOwnerId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Adds the specified egress rules to a security group for use with a VPC.</p> <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.</p> <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// POST_AuthorizeSecurityGroupEgress #Action=AuthorizeSecurityGroupEgress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AuthorizeSecurityGroupEgressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeSecurityGroupEgress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified ingress rules to a security group.</p> <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// GET_AuthorizeSecurityGroupIngress #Action=AuthorizeSecurityGroupIngress
		/// </summary>
		/// <param name="CidrIp"><p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p></param>
		/// <param name="FromPort"><p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all types. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p></param>
		/// <param name="GroupId">The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</param>
		/// <param name="GroupName">[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</param>
		/// <param name="IpPermissions">The sets of IP permissions.</param>
		/// <param name="IpProtocol"><p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p> <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed, regardless of any ports you specify.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p></param>
		/// <param name="SourceSecurityGroupName">[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.</param>
		/// <param name="SourceSecurityGroupOwnerId">[nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.</param>
		/// <param name="ToPort"><p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all codes. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_AuthorizeSecurityGroupIngressAsync(string CidrIp, int FromPort, string GroupId, string GroupName, IpPermission[] IpPermissions, string IpProtocol, string SourceSecurityGroupName, string SourceSecurityGroupOwnerId, int ToPort, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeSecurityGroupIngress?CidrIp=" + (CidrIp==null? "" : Uri.EscapeDataString(CidrIp))+"&FromPort="+FromPort+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&IpProtocol=" + (IpProtocol==null? "" : Uri.EscapeDataString(IpProtocol))+"&SourceSecurityGroupName=" + (SourceSecurityGroupName==null? "" : Uri.EscapeDataString(SourceSecurityGroupName))+"&SourceSecurityGroupOwnerId=" + (SourceSecurityGroupOwnerId==null? "" : Uri.EscapeDataString(SourceSecurityGroupOwnerId))+"&ToPort="+ToPort+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified ingress rules to a security group.</p> <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// POST_AuthorizeSecurityGroupIngress #Action=AuthorizeSecurityGroupIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_AuthorizeSecurityGroupIngressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AuthorizeSecurityGroupIngress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note>
		/// GET_BundleInstance #Action=BundleInstance
		/// </summary>
		/// <param name="InstanceId"><p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p></param>
		/// <param name="Storage">The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_BundleInstanceAsync(string InstanceId, string Storage, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BundleInstance?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Storage=" + (Storage==null? "" : Uri.EscapeDataString(Storage))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note>
		/// POST_BundleInstance #Action=BundleInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_BundleInstanceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BundleInstance?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a bundling operation for an instance store-backed Windows instance.
		/// GET_CancelBundleTask #Action=CancelBundleTask
		/// </summary>
		/// <param name="BundleId">The ID of the bundle task.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelBundleTaskAsync(string BundleId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelBundleTask?BundleId=" + (BundleId==null? "" : Uri.EscapeDataString(BundleId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a bundling operation for an instance store-backed Windows instance.
		/// POST_CancelBundleTask #Action=CancelBundleTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelBundleTaskAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelBundleTask?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to <code>cancelled</code>.</p> <p>Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.</p>
		/// GET_CancelCapacityReservation #Action=CancelCapacityReservation
		/// </summary>
		/// <param name="CapacityReservationId">The ID of the Capacity Reservation to be cancelled.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelCapacityReservationAsync(string CapacityReservationId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelCapacityReservation?CapacityReservationId=" + (CapacityReservationId==null? "" : Uri.EscapeDataString(CapacityReservationId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to <code>cancelled</code>.</p> <p>Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.</p>
		/// POST_CancelCapacityReservation #Action=CancelCapacityReservation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelCapacityReservationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelCapacityReservation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p>
		/// GET_CancelConversionTask #Action=CancelConversionTask
		/// </summary>
		/// <param name="ConversionTaskId">The ID of the conversion task.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ReasonMessage">The reason for canceling the conversion task.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelConversionTaskAsync(string ConversionTaskId, bool DryRun, string ReasonMessage, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelConversionTask?ConversionTaskId=" + (ConversionTaskId==null? "" : Uri.EscapeDataString(ConversionTaskId))+"&DryRun="+DryRun+"&ReasonMessage=" + (ReasonMessage==null? "" : Uri.EscapeDataString(ReasonMessage))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p>
		/// POST_CancelConversionTask #Action=CancelConversionTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelConversionTaskAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelConversionTask?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
		/// GET_CancelExportTask #Action=CancelExportTask
		/// </summary>
		/// <param name="ExportTaskId">The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelExportTaskAsync(string ExportTaskId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelExportTask?ExportTaskId=" + (ExportTaskId==null? "" : Uri.EscapeDataString(ExportTaskId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
		/// POST_CancelExportTask #Action=CancelExportTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelExportTaskAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelExportTask?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an in-process import virtual machine or import snapshot task.
		/// GET_CancelImportTask #Action=CancelImportTask
		/// </summary>
		/// <param name="CancelReason">The reason for canceling the task.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ImportTaskId">The ID of the import image or import snapshot task to be canceled.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelImportTaskAsync(string CancelReason, bool DryRun, string ImportTaskId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelImportTask?CancelReason=" + (CancelReason==null? "" : Uri.EscapeDataString(CancelReason))+"&DryRun="+DryRun+"&ImportTaskId=" + (ImportTaskId==null? "" : Uri.EscapeDataString(ImportTaskId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels an in-process import virtual machine or import snapshot task.
		/// POST_CancelImportTask #Action=CancelImportTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelImportTaskAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelImportTask?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CancelReservedInstancesListing #Action=CancelReservedInstancesListing
		/// </summary>
		/// <param name="ReservedInstancesListingId">The ID of the Reserved Instance listing.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelReservedInstancesListingAsync(string ReservedInstancesListingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelReservedInstancesListing?ReservedInstancesListingId=" + (ReservedInstancesListingId==null? "" : Uri.EscapeDataString(ReservedInstancesListingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CancelReservedInstancesListing #Action=CancelReservedInstancesListing
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelReservedInstancesListingAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelReservedInstancesListing?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Spot Fleet requests.</p> <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
		/// GET_CancelSpotFleetRequests #Action=CancelSpotFleetRequests
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SpotFleetRequestId">The IDs of the Spot Fleet requests.</param>
		/// <param name="TerminateInstances">Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelSpotFleetRequestsAsync(bool DryRun, string[] SpotFleetRequestId, bool TerminateInstances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelSpotFleetRequests?DryRun="+DryRun+"&"+String.Join("&", SpotFleetRequestId.Select(z => $"SpotFleetRequestId={Uri.EscapeDataString(z.ToString())}"))+"&TerminateInstances="+TerminateInstances+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels the specified Spot Fleet requests.</p> <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
		/// POST_CancelSpotFleetRequests #Action=CancelSpotFleetRequests
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelSpotFleetRequestsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelSpotFleetRequests?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels one or more Spot Instance requests.</p> <important> <p>Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.</p> </important>
		/// GET_CancelSpotInstanceRequests #Action=CancelSpotInstanceRequests
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SpotInstanceRequestId">One or more Spot Instance request IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_CancelSpotInstanceRequestsAsync(bool DryRun, string[] SpotInstanceRequestId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelSpotInstanceRequests?DryRun="+DryRun+"&"+String.Join("&", SpotInstanceRequestId.Select(z => $"SpotInstanceRequestId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Cancels one or more Spot Instance requests.</p> <important> <p>Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.</p> </important>
		/// POST_CancelSpotInstanceRequests #Action=CancelSpotInstanceRequests
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CancelSpotInstanceRequestsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CancelSpotInstanceRequests?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
		/// GET_ConfirmProductInstance #Action=ConfirmProductInstance
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="ProductCode">The product code. This must be a product code that you own.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ConfirmProductInstanceAsync(string InstanceId, string ProductCode, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ConfirmProductInstance?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&ProductCode=" + (ProductCode==null? "" : Uri.EscapeDataString(ProductCode))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
		/// POST_ConfirmProductInstance #Action=ConfirmProductInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ConfirmProductInstanceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ConfirmProductInstance?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies the specified Amazon FPGA Image (AFI) to the current Region.
		/// GET_CopyFpgaImage #Action=CopyFpgaImage
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SourceFpgaImageId">The ID of the source AFI.</param>
		/// <param name="Description">The description for the new AFI.</param>
		/// <param name="Name">The name for the new AFI. The default is the name of the source AFI.</param>
		/// <param name="SourceRegion">The Region that contains the source AFI.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyFpgaImageAsync(bool DryRun, string SourceFpgaImageId, string Description, string Name, string SourceRegion, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyFpgaImage?DryRun="+DryRun+"&SourceFpgaImageId=" + (SourceFpgaImageId==null? "" : Uri.EscapeDataString(SourceFpgaImageId))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&SourceRegion=" + (SourceRegion==null? "" : Uri.EscapeDataString(SourceRegion))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies the specified Amazon FPGA Image (AFI) to the current Region.
		/// POST_CopyFpgaImage #Action=CopyFpgaImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CopyFpgaImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyFpgaImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.</p> <p>Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set <code>Encrypted</code> during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.</p> <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CopyImage #Action=CopyImage
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="Description">A description for the new AMI in the destination Region.</param>
		/// <param name="Encrypted">Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="KmsKeyId"><p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". For example:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to. </p> <p>Amazon EBS does not support asymmetric CMKs.</p></param>
		/// <param name="Name">The name of the new AMI in the destination Region.</param>
		/// <param name="SourceImageId">The ID of the AMI to copy.</param>
		/// <param name="SourceRegion">The name of the Region that contains the AMI to copy.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CopyImageAsync(string ClientToken, string Description, bool Encrypted, string KmsKeyId, string Name, string SourceImageId, string SourceRegion, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyImage?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Encrypted="+Encrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&SourceImageId=" + (SourceImageId==null? "" : Uri.EscapeDataString(SourceImageId))+"&SourceRegion=" + (SourceRegion==null? "" : Uri.EscapeDataString(SourceRegion))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.</p> <p>Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set <code>Encrypted</code> during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.</p> <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CopyImage #Action=CopyImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CopyImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopyImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).</p> <p>Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a different CMK.</p> <p>To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.</p> <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CopySnapshot #Action=CopySnapshot
		/// </summary>
		/// <param name="Description">A description for the EBS snapshot.</param>
		/// <param name="DestinationRegion"><p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a <code>PresignedUrl</code> parameter, where it is required.</p> <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the AWS CLI, this is specified using the <code>--region</code> parameter or the default Region in your AWS configuration file.</p></param>
		/// <param name="Encrypted">To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="KmsKeyId"><p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p></param>
		/// <param name="PresignedUrl"><p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html">Query Requests</a>.</p> <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p></param>
		/// <param name="SourceRegion">The ID of the Region that contains the snapshot to be copied.</param>
		/// <param name="SourceSnapshotId">The ID of the EBS snapshot to copy.</param>
		/// <param name="TagSpecification">The tags to apply to the new snapshot.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CopySnapshotAsync(string Description, string DestinationRegion, bool Encrypted, string KmsKeyId, string PresignedUrl, string SourceRegion, string SourceSnapshotId, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopySnapshot?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DestinationRegion=" + (DestinationRegion==null? "" : Uri.EscapeDataString(DestinationRegion))+"&Encrypted="+Encrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&PresignedUrl=" + (PresignedUrl==null? "" : Uri.EscapeDataString(PresignedUrl))+"&SourceRegion=" + (SourceRegion==null? "" : Uri.EscapeDataString(SourceRegion))+"&SourceSnapshotId=" + (SourceSnapshotId==null? "" : Uri.EscapeDataString(SourceSnapshotId))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).</p> <p>Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a different CMK.</p> <p>To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.</p> <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CopySnapshot #Action=CopySnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CopySnapshotAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CopySnapshot?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Capacity Reservation with the specified attributes.</p> <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.</p> <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateCapacityReservation #Action=CreateCapacityReservation
		/// </summary>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p></param>
		/// <param name="InstanceType">The instance type for which to reserve capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="InstancePlatform">The type of operating system for which to reserve capacity.</param>
		/// <param name="AvailabilityZone">The Availability Zone in which to create the Capacity Reservation.</param>
		/// <param name="AvailabilityZoneId">The ID of the Availability Zone in which to create the Capacity Reservation.</param>
		/// <param name="Tenancy"><p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul></param>
		/// <param name="InstanceCount">The number of instances for which to reserve capacity.</param>
		/// <param name="EbsOptimized">Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.</param>
		/// <param name="EphemeralStorage">Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.</param>
		/// <param name="EndDate"><p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p> <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p></param>
		/// <param name="EndDateType"><p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> if the <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if the <code>EndDateType</code> value is <code>limited</code>.</p> </li> </ul></param>
		/// <param name="InstanceMatchCriteria"><p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul> <p>Default: <code>open</code> </p></param>
		/// <param name="TagSpecifications">The tags to apply to the Capacity Reservation during launch.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCapacityReservationAsync(
					string ClientToken, 
					string InstanceType, 
					string InstancePlatform, 
					string AvailabilityZone, 
					string AvailabilityZoneId, 
					CapacityReservationTenancy Tenancy, 
					int InstanceCount, 
					bool EbsOptimized, 
					bool EphemeralStorage, 
					System.DateTimeOffset EndDate, 
					EndDateType EndDateType, 
					InstanceMatchCriteria InstanceMatchCriteria, 
					TagSpecification[] TagSpecifications, 
					bool DryRun, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCapacityReservation?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&InstancePlatform=" + (InstancePlatform==null? "" : Uri.EscapeDataString(InstancePlatform))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&AvailabilityZoneId=" + (AvailabilityZoneId==null? "" : Uri.EscapeDataString(AvailabilityZoneId))+"&Tenancy=" + Tenancy+"&InstanceCount="+InstanceCount+"&EbsOptimized="+EbsOptimized+"&EphemeralStorage="+EphemeralStorage+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDateType=" + EndDateType+"&InstanceMatchCriteria=" + InstanceMatchCriteria+"&"+String.Join("&", TagSpecifications.Select(z => $"TagSpecifications={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new Capacity Reservation with the specified attributes.</p> <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.</p> <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateCapacityReservation #Action=CreateCapacityReservation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateCapacityReservationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCapacityReservation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.
		/// GET_CreateClientVpnEndpoint #Action=CreateClientVpnEndpoint
		/// </summary>
		/// <param name="ClientCidrBlock">The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.</param>
		/// <param name="ServerCertificateArn">The ARN of the server certificate. For more information, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</param>
		/// <param name="Authentication">Information about the authentication method to be used to authenticate clients.</param>
		/// <param name="ConnectionLogOptions"><p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul></param>
		/// <param name="DnsServers">Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.</param>
		/// <param name="TransportProtocol"><p>The transport protocol to be used by the VPN session.</p> <p>Default value: <code>udp</code> </p></param>
		/// <param name="VpnPort"><p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p> <p>Valid Values: <code>443</code> | <code>1194</code> </p> <p>Default Value: <code>443</code> </p></param>
		/// <param name="Description">A brief description of the Client VPN endpoint.</param>
		/// <param name="SplitTunnel"><p>Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.</p> <p>By default, split-tunnel on a VPN endpoint is disabled.</p> <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="TagSpecification">The tags to apply to the Client VPN endpoint during creation.</param>
		/// <param name="SecurityGroupId">The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.</param>
		/// <param name="VpcId">The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClientVpnEndpointAsync(
					string ClientCidrBlock, 
					string ServerCertificateArn, 
					ClientVpnAuthenticationRequest[] Authentication, 
					string ConnectionLogOptions, 
					string[] DnsServers, 
					TransportProtocol TransportProtocol, 
					int VpnPort, 
					string Description, 
					bool SplitTunnel, 
					bool DryRun, 
					string ClientToken, 
					TagSpecification[] TagSpecification, 
					string[] SecurityGroupId, 
					string VpcId, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClientVpnEndpoint?ClientCidrBlock=" + (ClientCidrBlock==null? "" : Uri.EscapeDataString(ClientCidrBlock))+"&ServerCertificateArn=" + (ServerCertificateArn==null? "" : Uri.EscapeDataString(ServerCertificateArn))+"&"+String.Join("&", Authentication.Select(z => $"Authentication={z}"))+"&ConnectionLogOptions=" + (ConnectionLogOptions==null? "" : Uri.EscapeDataString(ConnectionLogOptions))+"&"+String.Join("&", DnsServers.Select(z => $"DnsServers={Uri.EscapeDataString(z.ToString())}"))+"&TransportProtocol=" + TransportProtocol+"&VpnPort="+VpnPort+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&SplitTunnel="+SplitTunnel+"&DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.
		/// POST_CreateClientVpnEndpoint #Action=CreateClientVpnEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateClientVpnEndpointAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClientVpnEndpoint?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
		/// GET_CreateClientVpnRoute #Action=CreateClientVpnRoute
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint to which to add the route.</param>
		/// <param name="DestinationCidrBlock"><p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p> <ul> <li> <p>To add a route for Internet access, enter <code>0.0.0.0/0</code> </p> </li> <li> <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p> </li> <li> <p>To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range</p> </li> </ul> <p>Route address ranges cannot overlap with the CIDR range specified for client allocation.</p></param>
		/// <param name="TargetVpcSubnetId">The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.</param>
		/// <param name="Description">A brief description of the route.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateClientVpnRouteAsync(string ClientVpnEndpointId, string DestinationCidrBlock, string TargetVpcSubnetId, string Description, string ClientToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClientVpnRoute?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&TargetVpcSubnetId=" + (TargetVpcSubnetId==null? "" : Uri.EscapeDataString(TargetVpcSubnetId))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
		/// POST_CreateClientVpnRoute #Action=CreateClientVpnRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateClientVpnRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateClientVpnRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway's external interface. The IP address must be static and can be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN (in the 64512 - 65534 range).</p> <note> <p>Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the <code>us-east-1</code> Region, and 9059, which is reserved in the <code>eu-west-1</code> Region.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <important> <p>To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.</p> </important>
		/// GET_CreateCustomerGateway #Action=CreateCustomerGateway
		/// </summary>
		/// <param name="BgpAsn"><p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p></param>
		/// <param name="IpAddress">The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</param>
		/// <param name="CertificateArn">The Amazon Resource Name (ARN) for the customer gateway certificate.</param>
		/// <param name="Type">The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</param>
		/// <param name="DeviceName"><p>A name for the customer gateway device.</p> <p>Length Constraints: Up to 255 characters.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateCustomerGatewayAsync(int BgpAsn, string IpAddress, string CertificateArn, string Type, string DeviceName, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCustomerGateway?BgpAsn="+BgpAsn+"&IpAddress=" + (IpAddress==null? "" : Uri.EscapeDataString(IpAddress))+"&CertificateArn=" + (CertificateArn==null? "" : Uri.EscapeDataString(CertificateArn))+"&Type=" + (Type==null? "" : Uri.EscapeDataString(Type))+"&DeviceName=" + (DeviceName==null? "" : Uri.EscapeDataString(DeviceName))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway's external interface. The IP address must be static and can be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN (in the 64512 - 65534 range).</p> <note> <p>Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the <code>us-east-1</code> Region, and 9059, which is reserved in the <code>eu-west-1</code> Region.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <important> <p>To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.</p> </important>
		/// POST_CreateCustomerGateway #Action=CreateCustomerGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateCustomerGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateCustomerGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Creating a Default Subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// GET_CreateDefaultSubnet #Action=CreateDefaultSubnet
		/// </summary>
		/// <param name="AvailabilityZone">The Availability Zone in which to create the default subnet.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDefaultSubnetAsync(string AvailabilityZone, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDefaultSubnet?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet">Creating a Default Subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// POST_CreateDefaultSubnet #Action=CreateDefaultSubnet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateDefaultSubnetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDefaultSubnet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPC and Default Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot specify the components of the default VPC yourself.</p> <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.</p> <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs FAQ</a>.</p>
		/// GET_CreateDefaultVpc #Action=CreateDefaultVpc
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDefaultVpcAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDefaultVpc?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html">Default VPC and Default Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot specify the components of the default VPC yourself.</p> <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.</p> <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs FAQ</a>.</p>
		/// POST_CreateDefaultVpc #Action=CreateDefaultVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateDefaultVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDefaultVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> <ul> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in <code>domain-name</code>, you must set <code>domain-name-servers</code> to a custom DNS server.</p> </li> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using AmazonProvidedDNS in another Region, specify <code>region.compute.internal</code> (for example, <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain name (for example, <code>MyCompany.com</code>). This value is used to complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP) servers.</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> </ul> <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the <code>domain-name-servers</code> option either to <code>AmazonProvidedDNS</code> or to a domain name server of your choice. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateDhcpOptions #Action=CreateDhcpOptions
		/// </summary>
		/// <param name="DhcpConfiguration">A DHCP configuration option.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDhcpOptionsAsync(NewDhcpConfiguration[] DhcpConfiguration, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDhcpOptions?"+String.Join("&", DhcpConfiguration.Select(z => $"DhcpConfiguration={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> <ul> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in <code>domain-name</code>, you must set <code>domain-name-servers</code> to a custom DNS server.</p> </li> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using AmazonProvidedDNS in another Region, specify <code>region.compute.internal</code> (for example, <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain name (for example, <code>MyCompany.com</code>). This value is used to complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP) servers.</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> </ul> <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the <code>domain-name-servers</code> option either to <code>AmazonProvidedDNS</code> or to a domain name server of your choice. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateDhcpOptions #Action=CreateDhcpOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateDhcpOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDhcpOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.
		/// GET_CreateEgressOnlyInternetGateway #Action=CreateEgressOnlyInternetGateway
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">The ID of the VPC for which to create the egress-only internet gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateEgressOnlyInternetGatewayAsync(string ClientToken, bool DryRun, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateEgressOnlyInternetGateway?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.
		/// POST_CreateEgressOnlyInternetGateway #Action=CreateEgressOnlyInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateEgressOnlyInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateEgressOnlyInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches an EC2 Fleet.</p> <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateFleet #Action=CreateFleet
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="SpotOptions">Describes the configuration of Spot Instances in an EC2 Fleet.</param>
		/// <param name="OnDemandOptions">Describes the configuration of On-Demand Instances in an EC2 Fleet.</param>
		/// <param name="ExcessCapacityTerminationPolicy">Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.</param>
		/// <param name="LaunchTemplateConfigs">The configuration for the EC2 Fleet.</param>
		/// <param name="TargetCapacitySpecification">The number of units to request.</param>
		/// <param name="TerminateInstancesWithExpiration">Indicates whether running instances should be terminated when the EC2 Fleet expires.</param>
		/// <param name="Type">The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (<code>maintain</code>). A value of <code>instant</code> places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of <code>request</code> places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type">EC2 Fleet Request Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="ValidFrom">The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.</param>
		/// <param name="ValidUntil">The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.</param>
		/// <param name="ReplaceUnhealthyInstances">Indicates whether EC2 Fleet should replace unhealthy instances.</param>
		/// <param name="TagSpecification">The key-value pair for tagging the EC2 Fleet request on creation. The value for <code>ResourceType</code> must be <code>fleet</code>, otherwise the fleet request fails. To tag instances at launch, specify the tags in the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch template</a>. For information about tagging after launch, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging Your Resources</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_CreateFleetAsync(
					bool DryRun, 
					string ClientToken, 
					string SpotOptions, 
					string OnDemandOptions, 
					string ExcessCapacityTerminationPolicy, 
					FleetLaunchTemplateConfigRequest[] LaunchTemplateConfigs, 
					string TargetCapacitySpecification, 
					bool TerminateInstancesWithExpiration, 
					FleetType Type, 
					System.DateTimeOffset ValidFrom, 
					System.DateTimeOffset ValidUntil, 
					bool ReplaceUnhealthyInstances, 
					TagSpecification[] TagSpecification, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFleet?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&SpotOptions=" + (SpotOptions==null? "" : Uri.EscapeDataString(SpotOptions))+"&OnDemandOptions=" + (OnDemandOptions==null? "" : Uri.EscapeDataString(OnDemandOptions))+"&ExcessCapacityTerminationPolicy=" + (ExcessCapacityTerminationPolicy==null? "" : Uri.EscapeDataString(ExcessCapacityTerminationPolicy))+"&"+String.Join("&", LaunchTemplateConfigs.Select(z => $"LaunchTemplateConfigs={z}"))+"&TargetCapacitySpecification=" + (TargetCapacitySpecification==null? "" : Uri.EscapeDataString(TargetCapacitySpecification))+"&TerminateInstancesWithExpiration="+TerminateInstancesWithExpiration+"&Type=" + Type+"&ValidFrom=" + ValidFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ValidUntil=" + ValidUntil.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ReplaceUnhealthyInstances="+ReplaceUnhealthyInstances+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches an EC2 Fleet.</p> <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateFleet #Action=CreateFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateFleetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFleet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. </p> <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow Log Records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateFlowLogs #Action=CreateFlowLogs
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="DeliverLogsPermissionArn"><p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p></param>
		/// <param name="LogGroupName"><p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p></param>
		/// <param name="ResourceId"><p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p> <p>Constraints: Maximum of 1000 resources</p></param>
		/// <param name="ResourceType">The type of resource for which to create the flow log. For example, if you specified a VPC ID for the <code>ResourceId</code> property, specify <code>VPC</code> for this property.</param>
		/// <param name="TrafficType">The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.</param>
		/// <param name="LogDestinationType"><p>Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To publish flow log data to Amazon S3, specify <code>s3</code>.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p> <p>Default: <code>cloud-watch-logs</code> </p></param>
		/// <param name="LogDestination"><p>Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for <code>LogDestinationType</code>.</p> <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called <code>my-logs</code>, specify <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively, use <code>LogGroupName</code> instead.</p> <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p></param>
		/// <param name="LogFormat"><p>The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow Log Records</a>. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field.</p> <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value.</p></param>
		/// <param name="TagSpecification">The tags to apply to the flow logs.</param>
		/// <param name="MaxAggregationInterval"><p>The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).</p> <p>When a network interface is attached to a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instance</a>, the aggregation interval is always 60 seconds or less, regardless of the value that you specify.</p> <p>Default: 600</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateFlowLogsAsync(bool DryRun, string ClientToken, string DeliverLogsPermissionArn, string LogGroupName, string[] ResourceId, FlowLogsResourceType ResourceType, TrafficType TrafficType, string LogDestinationType, string LogDestination, string LogFormat, TagSpecification[] TagSpecification, int MaxAggregationInterval, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFlowLogs?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DeliverLogsPermissionArn=" + (DeliverLogsPermissionArn==null? "" : Uri.EscapeDataString(DeliverLogsPermissionArn))+"&LogGroupName=" + (LogGroupName==null? "" : Uri.EscapeDataString(LogGroupName))+"&"+String.Join("&", ResourceId.Select(z => $"ResourceId={Uri.EscapeDataString(z.ToString())}"))+"&ResourceType=" + ResourceType+"&TrafficType=" + TrafficType+"&LogDestinationType=" + (LogDestinationType==null? "" : Uri.EscapeDataString(LogDestinationType))+"&LogDestination=" + (LogDestination==null? "" : Uri.EscapeDataString(LogDestination))+"&LogFormat=" + (LogFormat==null? "" : Uri.EscapeDataString(LogFormat))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&MaxAggregationInterval="+MaxAggregationInterval+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. </p> <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records">Flow Log Records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateFlowLogs #Action=CreateFlowLogs
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateFlowLogsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFlowLogs?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p> <p>The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.</p> <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the <a href="https://github.com/aws/aws-fpga/">AWS FPGA Hardware Development Kit</a>.</p>
		/// GET_CreateFpgaImage #Action=CreateFpgaImage
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InputStorageLocation">The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.</param>
		/// <param name="LogsStorageLocation">The location in Amazon S3 for the output logs.</param>
		/// <param name="Description">A description for the AFI.</param>
		/// <param name="Name">A name for the AFI.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="TagSpecification">The tags to apply to the FPGA image during creation.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateFpgaImageAsync(bool DryRun, string InputStorageLocation, string LogsStorageLocation, string Description, string Name, string ClientToken, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFpgaImage?DryRun="+DryRun+"&InputStorageLocation=" + (InputStorageLocation==null? "" : Uri.EscapeDataString(InputStorageLocation))+"&LogsStorageLocation=" + (LogsStorageLocation==null? "" : Uri.EscapeDataString(LogsStorageLocation))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p> <p>The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.</p> <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the <a href="https://github.com/aws/aws-fpga/">AWS FPGA Hardware Development Kit</a>.</p>
		/// POST_CreateFpgaImage #Action=CreateFpgaImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateFpgaImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateFpgaImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateImage #Action=CreateImage
		/// </summary>
		/// <param name="BlockDeviceMapping">The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the <a>CopyImage</a> action.</param>
		/// <param name="Description">A description for the new image.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="Name"><p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p></param>
		/// <param name="NoReboot">By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateImageAsync(BlockDeviceMapping[] BlockDeviceMapping, string Description, bool DryRun, string InstanceId, string Name, bool NoReboot, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateImage?"+String.Join("&", BlockDeviceMapping.Select(z => $"BlockDeviceMapping={z}"))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&NoReboot="+NoReboot+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateImage #Action=CreateImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Exports a running or stopped instance to an S3 bucket.</p> <p>For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
		/// GET_CreateInstanceExportTask #Action=CreateInstanceExportTask
		/// </summary>
		/// <param name="Description">A description for the conversion task or the resource being exported. The maximum length is 255 bytes.</param>
		/// <param name="ExportToS3">The format and location for an instance export task.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="TargetEnvironment">The target virtualization environment.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateInstanceExportTaskAsync(string Description, string ExportToS3, string InstanceId, ExportEnvironment TargetEnvironment, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateInstanceExportTask?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&ExportToS3=" + (ExportToS3==null? "" : Uri.EscapeDataString(ExportToS3))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&TargetEnvironment=" + TargetEnvironment+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Exports a running or stopped instance to an S3 bucket.</p> <p>For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
		/// POST_CreateInstanceExportTask #Action=CreateInstanceExportTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateInstanceExportTaskAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateInstanceExportTask?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
		/// GET_CreateInternetGateway #Action=CreateInternetGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateInternetGatewayAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateInternetGateway?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon Virtual Private Cloud User Guide</a>.</p>
		/// POST_CreateInternetGateway #Action=CreateInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>You can have up to five thousand key pairs per Region.</p> <p>The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <a>ImportKeyPair</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateKeyPair #Action=CreateKeyPair
		/// </summary>
		/// <param name="KeyName"><p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="TagSpecification">The tags to apply to the new key pair.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateKeyPairAsync(string KeyName, bool DryRun, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateKeyPair?KeyName=" + (KeyName==null? "" : Uri.EscapeDataString(KeyName))+"&DryRun="+DryRun+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>You can have up to five thousand key pairs per Region.</p> <p>The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <a>ImportKeyPair</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateKeyPair #Action=CreateKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateKeyPairAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateKeyPair?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify a launch template instead of providing the launch parameters in the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_CreateLaunchTemplate #Action=CreateLaunchTemplate
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p></param>
		/// <param name="LaunchTemplateName">A name for the launch template.</param>
		/// <param name="VersionDescription">A description for the first version of the launch template.</param>
		/// <param name="LaunchTemplateData">The information for the launch template.</param>
		/// <param name="TagSpecification">The tags to apply to the launch template during creation.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLaunchTemplateAsync(bool DryRun, string ClientToken, string LaunchTemplateName, string VersionDescription, string LaunchTemplateData, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLaunchTemplate?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&VersionDescription=" + (VersionDescription==null? "" : Uri.EscapeDataString(VersionDescription))+"&LaunchTemplateData=" + (LaunchTemplateData==null? "" : Uri.EscapeDataString(LaunchTemplateData))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify a launch template instead of providing the launch parameters in the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Launching an instance from a launch template</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_CreateLaunchTemplate #Action=CreateLaunchTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateLaunchTemplateAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLaunchTemplate?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.</p> <p>Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Managing launch template versions</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateLaunchTemplateVersion #Action=CreateLaunchTemplateVersion
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p></param>
		/// <param name="LaunchTemplateId">The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateName">The name of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="SourceVersion">The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in <code>LaunchTemplateData</code>. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.</param>
		/// <param name="VersionDescription">A description for the version of the launch template.</param>
		/// <param name="LaunchTemplateData">The information for the launch template.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLaunchTemplateVersionAsync(bool DryRun, string ClientToken, string LaunchTemplateId, string LaunchTemplateName, string SourceVersion, string VersionDescription, string LaunchTemplateData, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLaunchTemplateVersion?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&LaunchTemplateId=" + (LaunchTemplateId==null? "" : Uri.EscapeDataString(LaunchTemplateId))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&SourceVersion=" + (SourceVersion==null? "" : Uri.EscapeDataString(SourceVersion))+"&VersionDescription=" + (VersionDescription==null? "" : Uri.EscapeDataString(VersionDescription))+"&LaunchTemplateData=" + (LaunchTemplateData==null? "" : Uri.EscapeDataString(LaunchTemplateData))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.</p> <p>Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#manage-launch-template-versions">Managing launch template versions</a>in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateLaunchTemplateVersion #Action=CreateLaunchTemplateVersion
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateLaunchTemplateVersionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLaunchTemplateVersion?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a static route for the specified local gateway route table.
		/// GET_CreateLocalGatewayRoute #Action=CreateLocalGatewayRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR range used for destination matches. Routing decisions are based on the most specific match.</param>
		/// <param name="LocalGatewayRouteTableId">The ID of the local gateway route table.</param>
		/// <param name="LocalGatewayVirtualInterfaceGroupId">The ID of the virtual interface group.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLocalGatewayRouteAsync(string DestinationCidrBlock, string LocalGatewayRouteTableId, string LocalGatewayVirtualInterfaceGroupId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLocalGatewayRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&LocalGatewayRouteTableId=" + (LocalGatewayRouteTableId==null? "" : Uri.EscapeDataString(LocalGatewayRouteTableId))+"&LocalGatewayVirtualInterfaceGroupId=" + (LocalGatewayVirtualInterfaceGroupId==null? "" : Uri.EscapeDataString(LocalGatewayVirtualInterfaceGroupId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a static route for the specified local gateway route table.
		/// POST_CreateLocalGatewayRoute #Action=CreateLocalGatewayRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateLocalGatewayRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLocalGatewayRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified VPC with the specified local gateway route table.
		/// GET_CreateLocalGatewayRouteTableVpcAssociation #Action=CreateLocalGatewayRouteTableVpcAssociation
		/// </summary>
		/// <param name="LocalGatewayRouteTableId">The ID of the local gateway route table.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="TagSpecification">The tags to assign to the local gateway route table VPC association.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLocalGatewayRouteTableVpcAssociationAsync(string LocalGatewayRouteTableId, string VpcId, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLocalGatewayRouteTableVpcAssociation?LocalGatewayRouteTableId=" + (LocalGatewayRouteTableId==null? "" : Uri.EscapeDataString(LocalGatewayRouteTableId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates the specified VPC with the specified local gateway route table.
		/// POST_CreateLocalGatewayRouteTableVpcAssociation #Action=CreateLocalGatewayRouteTableVpcAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateLocalGatewayRouteTableVpcAssociationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLocalGatewayRouteTableVpcAssociation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// GET_CreateNatGateway #Action=CreateNatGateway
		/// </summary>
		/// <param name="AllocationId">The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.</param>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SubnetId">The subnet in which to create the NAT gateway.</param>
		/// <param name="TagSpecification">The tags to assign to the NAT gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateNatGatewayAsync(string AllocationId, string ClientToken, bool DryRun, string SubnetId, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNatGateway?AllocationId=" + (AllocationId==null? "" : Uri.EscapeDataString(AllocationId))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html">NAT Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// POST_CreateNatGateway #Action=CreateNatGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateNatGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNatGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateNetworkAcl #Action=CreateNetworkAcl
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateNetworkAclAsync(bool DryRun, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkAcl?DryRun="+DryRun+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateNetworkAcl #Action=CreateNetworkAcl
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateNetworkAclAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkAcl?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateNetworkAclEntry #Action=CreateNetworkAclEntry
		/// </summary>
		/// <param name="CidrBlock">The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Egress">Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</param>
		/// <param name="Icmp">ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</param>
		/// <param name="Ipv6CidrBlock">The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).</param>
		/// <param name="NetworkAclId">The ID of the network ACL.</param>
		/// <param name="PortRange">TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</param>
		/// <param name="Protocol">The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</param>
		/// <param name="RuleAction">Indicates whether to allow or deny the traffic that matches the rule.</param>
		/// <param name="RuleNumber"><p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateNetworkAclEntryAsync(string CidrBlock, bool DryRun, bool Egress, string Icmp, string Ipv6CidrBlock, string NetworkAclId, string PortRange, string Protocol, RuleAction RuleAction, int RuleNumber, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkAclEntry?CidrBlock=" + (CidrBlock==null? "" : Uri.EscapeDataString(CidrBlock))+"&DryRun="+DryRun+"&Egress="+Egress+"&Icmp=" + (Icmp==null? "" : Uri.EscapeDataString(Icmp))+"&Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&NetworkAclId=" + (NetworkAclId==null? "" : Uri.EscapeDataString(NetworkAclId))+"&PortRange=" + (PortRange==null? "" : Uri.EscapeDataString(PortRange))+"&Protocol=" + (Protocol==null? "" : Uri.EscapeDataString(Protocol))+"&RuleAction=" + RuleAction+"&RuleNumber="+RuleNumber+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateNetworkAclEntry #Action=CreateNetworkAclEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateNetworkAclEntryAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkAclEntry?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a network interface in the specified subnet.</p> <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateNetworkInterface #Action=CreateNetworkInterface
		/// </summary>
		/// <param name="Description">A description for the network interface.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SecurityGroupId">The IDs of one or more security groups.</param>
		/// <param name="Ipv6AddressCount">The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set to <code>true</code>, you can specify <code>0</code> to override this setting.</param>
		/// <param name="Ipv6Addresses">One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.</param>
		/// <param name="PrivateIpAddress">The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).</param>
		/// <param name="PrivateIpAddresses">One or more private IPv4 addresses.</param>
		/// <param name="SecondaryPrivateIpAddressCount"><p>The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p></param>
		/// <param name="InterfaceType">Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html"> Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="SubnetId">The ID of the subnet to associate with the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateNetworkInterfaceAsync(string Description, bool DryRun, string[] SecurityGroupId, int Ipv6AddressCount, InstanceIpv6Address[] Ipv6Addresses, string PrivateIpAddress, PrivateIpAddressSpecification[] PrivateIpAddresses, int SecondaryPrivateIpAddressCount, NetworkInterfaceCreationType InterfaceType, string SubnetId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkInterface?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&Ipv6AddressCount="+Ipv6AddressCount+"&"+String.Join("&", Ipv6Addresses.Select(z => $"Ipv6Addresses={z}"))+"&PrivateIpAddress=" + (PrivateIpAddress==null? "" : Uri.EscapeDataString(PrivateIpAddress))+"&"+String.Join("&", PrivateIpAddresses.Select(z => $"PrivateIpAddresses={z}"))+"&SecondaryPrivateIpAddressCount="+SecondaryPrivateIpAddressCount+"&InterfaceType=" + InterfaceType+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a network interface in the specified subnet.</p> <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateNetworkInterface #Action=CreateNetworkInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateNetworkInterfaceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkInterface?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.</p> <p>You can grant permission to a single AWS account only, and only one account at a time.</p>
		/// GET_CreateNetworkInterfacePermission #Action=CreateNetworkInterfacePermission
		/// </summary>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <param name="AwsAccountId">The AWS account ID.</param>
		/// <param name="AwsService">The AWS service. Currently not supported.</param>
		/// <param name="Permission">The type of permission to grant.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateNetworkInterfacePermissionAsync(string NetworkInterfaceId, string AwsAccountId, string AwsService, string Permission, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkInterfacePermission?NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&AwsAccountId=" + (AwsAccountId==null? "" : Uri.EscapeDataString(AwsAccountId))+"&AwsService=" + (AwsService==null? "" : Uri.EscapeDataString(AwsService))+"&Permission=" + (Permission==null? "" : Uri.EscapeDataString(Permission))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.</p> <p>You can grant permission to a single AWS account only, and only one account at a time.</p>
		/// POST_CreateNetworkInterfacePermission #Action=CreateNetworkInterfacePermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateNetworkInterfacePermissionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateNetworkInterfacePermission?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. </p> <p>A <code>cluster</code> placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A <code>spread</code> placement group places instances on distinct hardware. A <code>partition</code> placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreatePlacementGroup #Action=CreatePlacementGroup
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupName"><p>A name for the placement group. Must be unique within the scope of your account for the Region.</p> <p>Constraints: Up to 255 ASCII characters</p></param>
		/// <param name="Strategy">The placement strategy.</param>
		/// <param name="PartitionCount">The number of partitions. Valid only when <b>Strategy</b> is set to <code>partition</code>.</param>
		/// <param name="TagSpecification">The tags to apply to the new placement group.</param>
		/// <returns>Success</returns>
		public async Task GET_CreatePlacementGroupAsync(bool DryRun, string GroupName, PlacementStrategy Strategy, int PartitionCount, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePlacementGroup?DryRun="+DryRun+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&Strategy=" + Strategy+"&PartitionCount="+PartitionCount+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. </p> <p>A <code>cluster</code> placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A <code>spread</code> placement group places instances on distinct hardware. A <code>partition</code> placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreatePlacementGroup #Action=CreatePlacementGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreatePlacementGroupAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePlacementGroup?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <note> <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.</p> </note> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateReservedInstancesListing #Action=CreateReservedInstancesListing
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="InstanceCount">The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</param>
		/// <param name="PriceSchedules">A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</param>
		/// <param name="ReservedInstancesId">The ID of the active Standard Reserved Instance.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateReservedInstancesListingAsync(string ClientToken, int InstanceCount, PriceScheduleSpecification[] PriceSchedules, string ReservedInstancesId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateReservedInstancesListing?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&InstanceCount="+InstanceCount+"&"+String.Join("&", PriceSchedules.Select(z => $"PriceSchedules={z}"))+"&ReservedInstancesId=" + (ReservedInstancesId==null? "" : Uri.EscapeDataString(ReservedInstancesId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <note> <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.</p> </note> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateReservedInstancesListing #Action=CreateReservedInstancesListing
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateReservedInstancesListingAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateReservedInstancesListing?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a route in a route table within a VPC.</p> <p>You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the route table includes the following two IPv4 routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateRoute #Action=CreateRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.</param>
		/// <param name="DestinationIpv6CidrBlock">The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EgressOnlyInternetGatewayId">[IPv6 traffic only] The ID of an egress-only internet gateway.</param>
		/// <param name="GatewayId">The ID of an internet gateway or virtual private gateway attached to your VPC.</param>
		/// <param name="InstanceId">The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</param>
		/// <param name="NatGatewayId">[IPv4 traffic only] The ID of a NAT gateway.</param>
		/// <param name="TransitGatewayId">The ID of a transit gateway.</param>
		/// <param name="LocalGatewayId">The ID of the local gateway.</param>
		/// <param name="NetworkInterfaceId">The ID of a network interface.</param>
		/// <param name="RouteTableId">The ID of the route table for the route.</param>
		/// <param name="VpcPeeringConnectionId">The ID of a VPC peering connection.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateRouteAsync(string DestinationCidrBlock, string DestinationIpv6CidrBlock, bool DryRun, string EgressOnlyInternetGatewayId, string GatewayId, string InstanceId, string NatGatewayId, string TransitGatewayId, string LocalGatewayId, string NetworkInterfaceId, string RouteTableId, string VpcPeeringConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&DestinationIpv6CidrBlock=" + (DestinationIpv6CidrBlock==null? "" : Uri.EscapeDataString(DestinationIpv6CidrBlock))+"&DryRun="+DryRun+"&EgressOnlyInternetGatewayId=" + (EgressOnlyInternetGatewayId==null? "" : Uri.EscapeDataString(EgressOnlyInternetGatewayId))+"&GatewayId=" + (GatewayId==null? "" : Uri.EscapeDataString(GatewayId))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&NatGatewayId=" + (NatGatewayId==null? "" : Uri.EscapeDataString(NatGatewayId))+"&TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&LocalGatewayId=" + (LocalGatewayId==null? "" : Uri.EscapeDataString(LocalGatewayId))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a route in a route table within a VPC.</p> <p>You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the route table includes the following two IPv4 routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateRoute #Action=CreateRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateRouteTable #Action=CreateRouteTable
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateRouteTableAsync(bool DryRun, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRouteTable?DryRun="+DryRun+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateRouteTable #Action=CreateRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a security group.</p> <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p> <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// GET_CreateSecurityGroup #Action=CreateSecurityGroup
		/// </summary>
		/// <param name="GroupDescription"><p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p></param>
		/// <param name="GroupName"><p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length. Cannot start with <code>sg-</code>.</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p></param>
		/// <param name="VpcId">[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSecurityGroupAsync(string GroupDescription, string GroupName, string VpcId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSecurityGroup?GroupDescription=" + (GroupDescription==null? "" : Uri.EscapeDataString(GroupDescription))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a security group.</p> <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p> <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
		/// POST_CreateSecurityGroup #Action=CreateSecurityGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateSecurityGroupAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSecurityGroup?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.</p> <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateSnapshot #Action=CreateSnapshot
		/// </summary>
		/// <param name="Description">A description for the snapshot.</param>
		/// <param name="VolumeId">The ID of the EBS volume.</param>
		/// <param name="TagSpecification">The tags to apply to the snapshot during creation.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotAsync(string Description, string VolumeId, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshot?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.</p> <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateSnapshot #Action=CreateSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateSnapshotAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshot?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.
		/// GET_CreateSnapshots #Action=CreateSnapshots
		/// </summary>
		/// <param name="Description"> A description propagated to every snapshot specified by the instance.</param>
		/// <param name="InstanceSpecification">The instance to specify which volumes should be included in the snapshots.</param>
		/// <param name="TagSpecification">Tags to apply to every snapshot specified by the instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="CopyTagsFromSource">Copies the tags from the specified volume to corresponding snapshot.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSnapshotsAsync(string Description, string InstanceSpecification, TagSpecification[] TagSpecification, bool DryRun, CopyTagsFromSource CopyTagsFromSource, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshots?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&InstanceSpecification=" + (InstanceSpecification==null? "" : Uri.EscapeDataString(InstanceSpecification))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&CopyTagsFromSource=" + CopyTagsFromSource+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.
		/// POST_CreateSnapshots #Action=CreateSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateSnapshotsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSnapshots?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// GET_CreateSpotDatafeedSubscription #Action=CreateSpotDatafeedSubscription
		/// </summary>
		/// <param name="Bucket">The Amazon S3 bucket in which to store the Spot Instance data feed.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Prefix">A prefix for the data feed file names.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSpotDatafeedSubscriptionAsync(string Bucket, bool DryRun, string Prefix, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSpotDatafeedSubscription?Bucket=" + (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"&DryRun="+DryRun+"&Prefix=" + (Prefix==null? "" : Uri.EscapeDataString(Prefix))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// POST_CreateSpotDatafeedSubscription #Action=CreateSpotDatafeedSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateSpotDatafeedSubscriptionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSpotDatafeedSubscription?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a subnet in an existing VPC.</p> <p>When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).</p> <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. </p> <important> <p>AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.</p> </important> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateSubnet #Action=CreateSubnet
		/// </summary>
		/// <param name="AvailabilityZone"><p>The Availability Zone or Local Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet.</p> <p>To create a subnet in a Local Zone, set this value to the Local Zone ID, for example <code>us-west-2-lax-1a</code>. For information about the Regions that support Local Zones, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">Available Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN.</p></param>
		/// <param name="AvailabilityZoneId">The AZ ID or the Local Zone ID of the subnet.</param>
		/// <param name="CidrBlock">The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>.</param>
		/// <param name="Ipv6CidrBlock">The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.</param>
		/// <param name="OutpostArn">The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateSubnetAsync(string AvailabilityZone, string AvailabilityZoneId, string CidrBlock, string Ipv6CidrBlock, string OutpostArn, string VpcId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSubnet?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&AvailabilityZoneId=" + (AvailabilityZoneId==null? "" : Uri.EscapeDataString(AvailabilityZoneId))+"&CidrBlock=" + (CidrBlock==null? "" : Uri.EscapeDataString(CidrBlock))+"&Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&OutpostArn=" + (OutpostArn==null? "" : Uri.EscapeDataString(OutpostArn))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a subnet in an existing VPC.</p> <p>When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).</p> <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. </p> <important> <p>AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.</p> </important> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateSubnet #Action=CreateSubnet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateSubnetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSubnet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateTags #Action=CreateTags
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ResourceId"><p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p></param>
		/// <param name="Tag">The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTagsAsync(bool DryRun, string[] ResourceId, Tag[] Tag, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTags?DryRun="+DryRun+"&"+String.Join("&", ResourceId.Select(z => $"ResourceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Tag.Select(z => $"Tag={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateTags #Action=CreateTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTagsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTags?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror filter.</p> <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p> <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
		/// GET_CreateTrafficMirrorFilter #Action=CreateTrafficMirrorFilter
		/// </summary>
		/// <param name="Description">The description of the Traffic Mirror filter.</param>
		/// <param name="TagSpecification">The tags to assign to a Traffic Mirror filter.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTrafficMirrorFilterAsync(string Description, TagSpecification[] TagSpecification, bool DryRun, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorFilter?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror filter.</p> <p>A Traffic Mirror filter is a set of rules that defines the traffic to mirror.</p> <p>By default, no traffic is mirrored. To mirror traffic, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm">CreateTrafficMirrorFilterRule</a> to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html">ModifyTrafficMirrorFilterNetworkServices</a> to mirror supported network services.</p>
		/// POST_CreateTrafficMirrorFilter #Action=CreateTrafficMirrorFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTrafficMirrorFilterAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorFilter?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror filter rule. </p> <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p> <p>You need the Traffic Mirror filter ID when you create the rule.</p>
		/// GET_CreateTrafficMirrorFilterRule #Action=CreateTrafficMirrorFilterRule
		/// </summary>
		/// <param name="TrafficMirrorFilterId">The ID of the filter that this rule is associated with.</param>
		/// <param name="TrafficDirection">The type of traffic (<code>ingress</code> | <code>egress</code>).</param>
		/// <param name="RuleNumber">The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.</param>
		/// <param name="RuleAction">The action to take (<code>accept</code> | <code>reject</code>) on the filtered traffic.</param>
		/// <param name="DestinationPortRange">The destination port range.</param>
		/// <param name="SourcePortRange">The source port range.</param>
		/// <param name="Protocol"><p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p></param>
		/// <param name="DestinationCidrBlock">The destination CIDR block to assign to the Traffic Mirror rule.</param>
		/// <param name="SourceCidrBlock">The source CIDR block to assign to the Traffic Mirror rule.</param>
		/// <param name="Description">The description of the Traffic Mirror rule.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTrafficMirrorFilterRuleAsync(string TrafficMirrorFilterId, TrafficDirection TrafficDirection, int RuleNumber, TrafficMirrorRuleAction RuleAction, string DestinationPortRange, string SourcePortRange, int Protocol, string DestinationCidrBlock, string SourceCidrBlock, string Description, bool DryRun, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorFilterRule?TrafficMirrorFilterId=" + (TrafficMirrorFilterId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterId))+"&TrafficDirection=" + TrafficDirection+"&RuleNumber="+RuleNumber+"&RuleAction=" + RuleAction+"&DestinationPortRange=" + (DestinationPortRange==null? "" : Uri.EscapeDataString(DestinationPortRange))+"&SourcePortRange=" + (SourcePortRange==null? "" : Uri.EscapeDataString(SourcePortRange))+"&Protocol="+Protocol+"&DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&SourceCidrBlock=" + (SourceCidrBlock==null? "" : Uri.EscapeDataString(SourceCidrBlock))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror filter rule. </p> <p>A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.</p> <p>You need the Traffic Mirror filter ID when you create the rule.</p>
		/// POST_CreateTrafficMirrorFilterRule #Action=CreateTrafficMirrorFilterRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTrafficMirrorFilterRuleAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorFilterRule?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror session.</p> <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.</p> <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p> <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a> to create filter rules that specify the traffic to mirror.</p>
		/// GET_CreateTrafficMirrorSession #Action=CreateTrafficMirrorSession
		/// </summary>
		/// <param name="NetworkInterfaceId">The ID of the source network interface.</param>
		/// <param name="TrafficMirrorTargetId">The ID of the Traffic Mirror target.</param>
		/// <param name="TrafficMirrorFilterId">The ID of the Traffic Mirror filter.</param>
		/// <param name="PacketLength"><p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target.</p> <p>If you do not want to mirror the entire packet, use the <code>PacketLength</code> parameter to specify the number of bytes in each packet to mirror.</p></param>
		/// <param name="SessionNumber"><p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p></param>
		/// <param name="VirtualNetworkId">The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see <a href="https://tools.ietf.org/html/rfc7348">RFC 7348</a>. If you do not specify a <code>VirtualNetworkId</code>, an account-wide unique id is chosen at random.</param>
		/// <param name="Description">The description of the Traffic Mirror session.</param>
		/// <param name="TagSpecification">The tags to assign to a Traffic Mirror session.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTrafficMirrorSessionAsync(string NetworkInterfaceId, string TrafficMirrorTargetId, string TrafficMirrorFilterId, int PacketLength, int SessionNumber, int VirtualNetworkId, string Description, TagSpecification[] TagSpecification, bool DryRun, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorSession?NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&TrafficMirrorTargetId=" + (TrafficMirrorTargetId==null? "" : Uri.EscapeDataString(TrafficMirrorTargetId))+"&TrafficMirrorFilterId=" + (TrafficMirrorFilterId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterId))+"&PacketLength="+PacketLength+"&SessionNumber="+SessionNumber+"&VirtualNetworkId="+VirtualNetworkId+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Traffic Mirror session.</p> <p>A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.</p> <p>The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. </p> <p>By default, no traffic is mirrored. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm">CreateTrafficMirrorFilter</a> to create filter rules that specify the traffic to mirror.</p>
		/// POST_CreateTrafficMirrorSession #Action=CreateTrafficMirrorSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTrafficMirrorSessionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorSession?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a target for your Traffic Mirror session.</p> <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.</p> <p>A Traffic Mirror target can be a network interface, or a Network Load Balancer.</p> <p>To use the target in a Traffic Mirror session, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
		/// GET_CreateTrafficMirrorTarget #Action=CreateTrafficMirrorTarget
		/// </summary>
		/// <param name="NetworkInterfaceId">The network interface ID that is associated with the target.</param>
		/// <param name="NetworkLoadBalancerArn">The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.</param>
		/// <param name="Description">The description of the Traffic Mirror target.</param>
		/// <param name="TagSpecification">The tags to assign to the Traffic Mirror target.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTrafficMirrorTargetAsync(string NetworkInterfaceId, string NetworkLoadBalancerArn, string Description, TagSpecification[] TagSpecification, bool DryRun, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorTarget?NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&NetworkLoadBalancerArn=" + (NetworkLoadBalancerArn==null? "" : Uri.EscapeDataString(NetworkLoadBalancerArn))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a target for your Traffic Mirror session.</p> <p>A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.</p> <p>A Traffic Mirror target can be a network interface, or a Network Load Balancer.</p> <p>To use the target in a Traffic Mirror session, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm">CreateTrafficMirrorSession</a>.</p>
		/// POST_CreateTrafficMirrorTarget #Action=CreateTrafficMirrorTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTrafficMirrorTargetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTrafficMirrorTarget?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a transit gateway.</p> <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN connections to the transit gateway.</p> <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p> <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to <a>CreateVpnConnection</a>.</p> <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
		/// GET_CreateTransitGateway #Action=CreateTransitGateway
		/// </summary>
		/// <param name="Description">A description of the transit gateway.</param>
		/// <param name="Options">The transit gateway options.</param>
		/// <param name="TagSpecification">The tags to apply to the transit gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayAsync(string Description, string Options, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGateway?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Options=" + (Options==null? "" : Uri.EscapeDataString(Options))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a transit gateway.</p> <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN connections to the transit gateway.</p> <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p> <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to <a>CreateVpnConnection</a>.</p> <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
		/// POST_CreateTransitGateway #Action=CreateTransitGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a multicast domain using the specified transit gateway.</p> <p>The transit gateway must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
		/// GET_CreateTransitGatewayMulticastDomain #Action=CreateTransitGatewayMulticastDomain
		/// </summary>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="TagSpecification">The tags for the transit gateway multicast domain.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayMulticastDomainAsync(string TransitGatewayId, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayMulticastDomain?TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a multicast domain using the specified transit gateway.</p> <p>The transit gateway must be in the available state before you create a domain. Use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html">DescribeTransitGateways</a> to see the state of transit gateway.</p>
		/// POST_CreateTransitGatewayMulticastDomain #Action=CreateTransitGatewayMulticastDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayMulticastDomainAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayMulticastDomain?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. </p> <p>After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.</p>
		/// GET_CreateTransitGatewayPeeringAttachment #Action=CreateTransitGatewayPeeringAttachment
		/// </summary>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="PeerTransitGatewayId">The ID of the peer transit gateway with which to create the peering attachment.</param>
		/// <param name="PeerAccountId">The AWS account ID of the owner of the peer transit gateway.</param>
		/// <param name="PeerRegion">The Region where the peer transit gateway is located.</param>
		/// <param name="TagSpecification">The tags to apply to the transit gateway peering attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayPeeringAttachmentAsync(string TransitGatewayId, string PeerTransitGatewayId, string PeerAccountId, string PeerRegion, TagSpecification[] TagSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayPeeringAttachment?TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&PeerTransitGatewayId=" + (PeerTransitGatewayId==null? "" : Uri.EscapeDataString(PeerTransitGatewayId))+"&PeerAccountId=" + (PeerAccountId==null? "" : Uri.EscapeDataString(PeerAccountId))+"&PeerRegion=" + (PeerRegion==null? "" : Uri.EscapeDataString(PeerRegion))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. </p> <p>After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.</p>
		/// POST_CreateTransitGatewayPeeringAttachment #Action=CreateTransitGatewayPeeringAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayPeeringAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayPeeringAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a static route for the specified transit gateway route table.
		/// GET_CreateTransitGatewayRoute #Action=CreateTransitGatewayRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR range used for destination matches. Routing decisions are based on the most specific match.</param>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="Blackhole">Indicates whether to drop traffic that matches this route.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayRouteAsync(string DestinationCidrBlock, string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool Blackhole, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&Blackhole="+Blackhole+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a static route for the specified transit gateway route table.
		/// POST_CreateTransitGatewayRoute #Action=CreateTransitGatewayRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a route table for the specified transit gateway.
		/// GET_CreateTransitGatewayRouteTable #Action=CreateTransitGatewayRouteTable
		/// </summary>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="TagSpecifications">The tags to apply to the transit gateway route table.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayRouteTableAsync(string TransitGatewayId, TagSpecification[] TagSpecifications, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayRouteTable?TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&"+String.Join("&", TagSpecifications.Select(z => $"TagSpecifications={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a route table for the specified transit gateway.
		/// POST_CreateTransitGatewayRouteTable #Action=CreateTransitGatewayRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified VPC to the specified transit gateway.</p> <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.</p> <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
		/// GET_CreateTransitGatewayVpcAttachment #Action=CreateTransitGatewayVpcAttachment
		/// </summary>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="SubnetIds">The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.</param>
		/// <param name="Options">The VPC attachment options.</param>
		/// <param name="TagSpecifications">The tags to apply to the VPC attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateTransitGatewayVpcAttachmentAsync(string TransitGatewayId, string VpcId, string[] SubnetIds, string Options, TagSpecification[] TagSpecifications, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayVpcAttachment?TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={Uri.EscapeDataString(z.ToString())}"))+"&Options=" + (Options==null? "" : Uri.EscapeDataString(Options))+"&"+String.Join("&", TagSpecifications.Select(z => $"TagSpecifications={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified VPC to the specified transit gateway.</p> <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.</p> <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
		/// POST_CreateTransitGatewayVpcAttachment #Action=CreateTransitGatewayVpcAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateTransitGatewayVpcAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateTransitGatewayVpcAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateVolume #Action=CreateVolume
		/// </summary>
		/// <param name="AvailabilityZone">The Availability Zone in which to create the volume.</param>
		/// <param name="Encrypted"><p>Specifies whether the volume should be encrypted. The effect of setting the encryption state to <code>true</code> depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">Encryption by Default</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p></param>
		/// <param name="Iops"><p>The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This parameter is valid only for Provisioned IOPS SSD (io1) volumes.</p></param>
		/// <param name="KmsKeyId"><p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p></param>
		/// <param name="OutpostArn">The Amazon Resource Name (ARN) of the Outpost.</param>
		/// <param name="Size"><p>The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size.</p> <p>Constraints: 1-16,384 for <code>gp2</code>, 4-16,384 for <code>io1</code>, 500-16,384 for <code>st1</code>, 500-16,384 for <code>sc1</code>, and 1-1,024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p></param>
		/// <param name="SnapshotId">The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.</param>
		/// <param name="VolumeType"><p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Default: <code>gp2</code> </p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="TagSpecification">The tags to apply to the volume during creation.</param>
		/// <param name="MultiAttachEnabled">Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instances</a> in the same Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html"> Amazon EBS Multi-Attach</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVolumeAsync(string AvailabilityZone, bool Encrypted, int Iops, string KmsKeyId, string OutpostArn, int Size, string SnapshotId, VolumeType VolumeType, bool DryRun, TagSpecification[] TagSpecification, bool MultiAttachEnabled, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVolume?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&Encrypted="+Encrypted+"&Iops="+Iops+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&OutpostArn=" + (OutpostArn==null? "" : Uri.EscapeDataString(OutpostArn))+"&Size="+Size+"&SnapshotId=" + (SnapshotId==null? "" : Uri.EscapeDataString(SnapshotId))+"&VolumeType=" + VolumeType+"&DryRun="+DryRun+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&MultiAttachEnabled="+MultiAttachEnabled+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateVolume #Action=CreateVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p> <p>By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_CreateVpc #Action=CreateVpc
		/// </summary>
		/// <param name="CidrBlock">The IPv4 network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code>.</param>
		/// <param name="AmazonProvidedIpv6CidrBlock">Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.</param>
		/// <param name="Ipv6Pool">The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.</param>
		/// <param name="Ipv6CidrBlock"><p>The IPv6 CIDR block from the IPv6 address pool. You must also specify <code>Ipv6Pool</code> in the request.</p> <p>To let Amazon choose the IPv6 CIDR block for you, omit this parameter.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceTenancy"><p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p></param>
		/// <param name="Ipv6CidrBlockNetworkBorderGroup"><p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpcAsync(string CidrBlock, bool AmazonProvidedIpv6CidrBlock, string Ipv6Pool, string Ipv6CidrBlock, bool DryRun, Tenancy InstanceTenancy, string Ipv6CidrBlockNetworkBorderGroup, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpc?CidrBlock=" + (CidrBlock==null? "" : Uri.EscapeDataString(CidrBlock))+"&AmazonProvidedIpv6CidrBlock="+AmazonProvidedIpv6CidrBlock+"&Ipv6Pool=" + (Ipv6Pool==null? "" : Uri.EscapeDataString(Ipv6Pool))+"&Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&DryRun="+DryRun+"&InstanceTenancy=" + InstanceTenancy+"&Ipv6CidrBlockNetworkBorderGroup=" + (Ipv6CidrBlockNetworkBorderGroup==null? "" : Uri.EscapeDataString(Ipv6CidrBlockNetworkBorderGroup))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">BYOIP</a>).</p> <p>By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_CreateVpc #Action=CreateVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace Partner, or another AWS account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint, which will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.</p> <p>An <code>interface</code> endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.</p> <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported services.</p>
		/// GET_CreateVpcEndpoint #Action=CreateVpcEndpoint
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcEndpointType"><p>The type of endpoint.</p> <p>Default: Gateway</p></param>
		/// <param name="VpcId">The ID of the VPC in which the endpoint will be used.</param>
		/// <param name="ServiceName">The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service provider.</param>
		/// <param name="PolicyDocument">A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.</param>
		/// <param name="RouteTableId">(Gateway endpoint) One or more route table IDs.</param>
		/// <param name="SubnetId">(Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.</param>
		/// <param name="SecurityGroupId">(Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="PrivateDnsEnabled"><p>(Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, <code>kinesis.us-east-1.amazonaws.com</code>), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.</p> <p>To use a private hosted zone, you must set the following VPC attributes to <code>true</code>: <code>enableDnsHostnames</code> and <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC attributes.</p> <p>Default: <code>true</code> </p></param>
		/// <param name="TagSpecification">The tags to associate with the endpoint.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpcEndpointAsync(bool DryRun, VpcEndpointType VpcEndpointType, string VpcId, string ServiceName, string PolicyDocument, string[] RouteTableId, string[] SubnetId, string[] SecurityGroupId, string ClientToken, bool PrivateDnsEnabled, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpoint?DryRun="+DryRun+"&VpcEndpointType=" + VpcEndpointType+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&ServiceName=" + (ServiceName==null? "" : Uri.EscapeDataString(ServiceName))+"&PolicyDocument=" + (PolicyDocument==null? "" : Uri.EscapeDataString(PolicyDocument))+"&"+String.Join("&", RouteTableId.Select(z => $"RouteTableId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SubnetId.Select(z => $"SubnetId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&PrivateDnsEnabled="+PrivateDnsEnabled+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace Partner, or another AWS account. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint, which will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.</p> <p>An <code>interface</code> endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.</p> <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported services.</p>
		/// POST_CreateVpcEndpoint #Action=CreateVpcEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpcEndpointAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpoint?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.</p> <p>You can create a connection notification for interface endpoints only.</p>
		/// GET_CreateVpcEndpointConnectionNotification #Action=CreateVpcEndpointConnectionNotification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the endpoint service.</param>
		/// <param name="VpcEndpointId">The ID of the endpoint.</param>
		/// <param name="ConnectionNotificationArn">The ARN of the SNS topic for the notifications.</param>
		/// <param name="ConnectionEvents">One or more endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpcEndpointConnectionNotificationAsync(bool DryRun, string ServiceId, string VpcEndpointId, string ConnectionNotificationArn, string[] ConnectionEvents, string ClientToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpointConnectionNotification?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&VpcEndpointId=" + (VpcEndpointId==null? "" : Uri.EscapeDataString(VpcEndpointId))+"&ConnectionNotificationArn=" + (ConnectionNotificationArn==null? "" : Uri.EscapeDataString(ConnectionNotificationArn))+"&"+String.Join("&", ConnectionEvents.Select(z => $"ConnectionEvents={Uri.EscapeDataString(z.ToString())}"))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.</p> <p>You can create a connection notification for interface endpoints only.</p>
		/// POST_CreateVpcEndpointConnectionNotification #Action=CreateVpcEndpointConnectionNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpcEndpointConnectionNotificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpointConnectionNotification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.</p> <p>To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC Endpoint Services</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. </p> <p>If you set the private DNS name, you must prove that you own the private DNS domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_CreateVpcEndpointServiceConfiguration #Action=CreateVpcEndpointServiceConfiguration
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="AcceptanceRequired">Indicates whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.</param>
		/// <param name="PrivateDnsName">The private DNS name to assign to the VPC endpoint service.</param>
		/// <param name="NetworkLoadBalancerArn">The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.</param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="TagSpecification">The tags to associate with the service.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpcEndpointServiceConfigurationAsync(bool DryRun, bool AcceptanceRequired, string PrivateDnsName, string[] NetworkLoadBalancerArn, string ClientToken, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpointServiceConfiguration?DryRun="+DryRun+"&AcceptanceRequired="+AcceptanceRequired+"&PrivateDnsName=" + (PrivateDnsName==null? "" : Uri.EscapeDataString(PrivateDnsName))+"&"+String.Join("&", NetworkLoadBalancerArn.Select(z => $"NetworkLoadBalancerArn={Uri.EscapeDataString(z.ToString())}"))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.</p> <p>To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC Endpoint Services</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. </p> <p>If you set the private DNS name, you must prove that you own the private DNS domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_CreateVpcEndpointServiceConfiguration #Action=CreateVpcEndpointServiceConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpcEndpointServiceConfigurationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcEndpointServiceConfiguration?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p> <note> <p>Limitations and rules apply to a VPC peering connection. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p> </note> <p>The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of <code>failed</code>.</p>
		/// GET_CreateVpcPeeringConnection #Action=CreateVpcPeeringConnection
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="PeerOwnerId"><p>The AWS account ID of the owner of the accepter VPC.</p> <p>Default: Your AWS account ID</p></param>
		/// <param name="PeerVpcId">The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.</param>
		/// <param name="VpcId">The ID of the requester VPC. You must specify this parameter in the request.</param>
		/// <param name="PeerRegion"><p>The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.</p> <p>Default: The Region in which you make the request.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpcPeeringConnectionAsync(bool DryRun, string PeerOwnerId, string PeerVpcId, string VpcId, string PeerRegion, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcPeeringConnection?DryRun="+DryRun+"&PeerOwnerId=" + (PeerOwnerId==null? "" : Uri.EscapeDataString(PeerOwnerId))+"&PeerVpcId=" + (PeerVpcId==null? "" : Uri.EscapeDataString(PeerVpcId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&PeerRegion=" + (PeerRegion==null? "" : Uri.EscapeDataString(PeerRegion))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p> <note> <p>Limitations and rules apply to a VPC peering connection. For more information, see the <a href="https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p> </note> <p>The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of <code>failed</code>.</p>
		/// POST_CreateVpcPeeringConnection #Action=CreateVpcPeeringConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpcPeeringConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpcPeeringConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is <code>ipsec.1</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_CreateVpnConnection #Action=CreateVpnConnection
		/// </summary>
		/// <param name="CustomerGatewayId">The ID of the customer gateway.</param>
		/// <param name="Type">The type of VPN connection (<code>ipsec.1</code>).</param>
		/// <param name="VpnGatewayId">The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.</param>
		/// <param name="TransitGatewayId">The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Options">The options for the VPN connection.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpnConnectionAsync(string CustomerGatewayId, string Type, string VpnGatewayId, string TransitGatewayId, bool DryRun, string Options, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnConnection?CustomerGatewayId=" + (CustomerGatewayId==null? "" : Uri.EscapeDataString(CustomerGatewayId))+"&Type=" + (Type==null? "" : Uri.EscapeDataString(Type))+"&VpnGatewayId=" + (VpnGatewayId==null? "" : Uri.EscapeDataString(VpnGatewayId))+"&TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&DryRun="+DryRun+"&Options=" + (Options==null? "" : Uri.EscapeDataString(Options))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is <code>ipsec.1</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_CreateVpnConnection #Action=CreateVpnConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpnConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_CreateVpnConnectionRoute #Action=CreateVpnConnectionRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR block associated with the local subnet of the customer network.</param>
		/// <param name="VpnConnectionId">The ID of the VPN connection.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpnConnectionRouteAsync(string DestinationCidrBlock, string VpnConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnConnectionRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_CreateVpnConnectionRoute #Action=CreateVpnConnectionRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpnConnectionRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnConnectionRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_CreateVpnGateway #Action=CreateVpnGateway
		/// </summary>
		/// <param name="AvailabilityZone">The Availability Zone for the virtual private gateway.</param>
		/// <param name="Type">The type of VPN connection this virtual private gateway supports.</param>
		/// <param name="AmazonSideAsn"><p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p> <p>Default: 64512</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateVpnGatewayAsync(string AvailabilityZone, string Type, int AmazonSideAsn, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnGateway?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&Type=" + (Type==null? "" : Uri.EscapeDataString(Type))+"&AmazonSideAsn="+AmazonSideAsn+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_CreateVpnGateway #Action=CreateVpnGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_CreateVpnGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVpnGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.
		/// GET_DeleteClientVpnEndpoint #Action=DeleteClientVpnEndpoint
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN to be deleted.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClientVpnEndpointAsync(string ClientVpnEndpointId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClientVpnEndpoint?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.
		/// POST_DeleteClientVpnEndpoint #Action=DeleteClientVpnEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteClientVpnEndpointAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClientVpnEndpoint?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.
		/// GET_DeleteClientVpnRoute #Action=DeleteClientVpnRoute
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint from which the route is to be deleted.</param>
		/// <param name="TargetVpcSubnetId">The ID of the target subnet used by the route.</param>
		/// <param name="DestinationCidrBlock">The IPv4 address range, in CIDR notation, of the route to be deleted.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteClientVpnRouteAsync(string ClientVpnEndpointId, string TargetVpcSubnetId, string DestinationCidrBlock, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClientVpnRoute?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&TargetVpcSubnetId=" + (TargetVpcSubnetId==null? "" : Uri.EscapeDataString(TargetVpcSubnetId))+"&DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.
		/// POST_DeleteClientVpnRoute #Action=DeleteClientVpnRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteClientVpnRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteClientVpnRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
		/// GET_DeleteCustomerGateway #Action=DeleteCustomerGateway
		/// </summary>
		/// <param name="CustomerGatewayId">The ID of the customer gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteCustomerGatewayAsync(string CustomerGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCustomerGateway?CustomerGatewayId=" + (CustomerGatewayId==null? "" : Uri.EscapeDataString(CustomerGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
		/// POST_DeleteCustomerGateway #Action=DeleteCustomerGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteCustomerGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteCustomerGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
		/// GET_DeleteDhcpOptions #Action=DeleteDhcpOptions
		/// </summary>
		/// <param name="DhcpOptionsId">The ID of the DHCP options set.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDhcpOptionsAsync(string DhcpOptionsId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDhcpOptions?DhcpOptionsId=" + (DhcpOptionsId==null? "" : Uri.EscapeDataString(DhcpOptionsId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
		/// POST_DeleteDhcpOptions #Action=DeleteDhcpOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteDhcpOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDhcpOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an egress-only internet gateway.
		/// GET_DeleteEgressOnlyInternetGateway #Action=DeleteEgressOnlyInternetGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EgressOnlyInternetGatewayId">The ID of the egress-only internet gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteEgressOnlyInternetGatewayAsync(bool DryRun, string EgressOnlyInternetGatewayId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEgressOnlyInternetGateway?DryRun="+DryRun+"&EgressOnlyInternetGatewayId=" + (EgressOnlyInternetGatewayId==null? "" : Uri.EscapeDataString(EgressOnlyInternetGatewayId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an egress-only internet gateway.
		/// POST_DeleteEgressOnlyInternetGateway #Action=DeleteEgressOnlyInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteEgressOnlyInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteEgressOnlyInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified EC2 Fleet.</p> <p>After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances continue to run until they are interrupted or you terminate them manually. </p>
		/// GET_DeleteFleets #Action=DeleteFleets
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FleetId">The IDs of the EC2 Fleets.</param>
		/// <param name="TerminateInstances">Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteFleetsAsync(bool DryRun, string[] FleetId, bool TerminateInstances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFleets?DryRun="+DryRun+"&"+String.Join("&", FleetId.Select(z => $"FleetId={Uri.EscapeDataString(z.ToString())}"))+"&TerminateInstances="+TerminateInstances+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified EC2 Fleet.</p> <p>After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances continue to run until they are interrupted or you terminate them manually. </p>
		/// POST_DeleteFleets #Action=DeleteFleets
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteFleetsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFleets?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more flow logs.
		/// GET_DeleteFlowLogs #Action=DeleteFlowLogs
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FlowLogId"><p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteFlowLogsAsync(bool DryRun, string[] FlowLogId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFlowLogs?DryRun="+DryRun+"&"+String.Join("&", FlowLogId.Select(z => $"FlowLogId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more flow logs.
		/// POST_DeleteFlowLogs #Action=DeleteFlowLogs
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteFlowLogsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFlowLogs?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon FPGA Image (AFI).
		/// GET_DeleteFpgaImage #Action=DeleteFpgaImage
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FpgaImageId">The ID of the AFI.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteFpgaImageAsync(bool DryRun, string FpgaImageId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFpgaImage?DryRun="+DryRun+"&FpgaImageId=" + (FpgaImageId==null? "" : Uri.EscapeDataString(FpgaImageId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon FPGA Image (AFI).
		/// POST_DeleteFpgaImage #Action=DeleteFpgaImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteFpgaImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteFpgaImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.
		/// GET_DeleteInternetGateway #Action=DeleteInternetGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InternetGatewayId">The ID of the internet gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteInternetGatewayAsync(bool DryRun, string InternetGatewayId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteInternetGateway?DryRun="+DryRun+"&InternetGatewayId=" + (InternetGatewayId==null? "" : Uri.EscapeDataString(InternetGatewayId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.
		/// POST_DeleteInternetGateway #Action=DeleteInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified key pair, by removing the public key from Amazon EC2.
		/// GET_DeleteKeyPair #Action=DeleteKeyPair
		/// </summary>
		/// <param name="KeyName">The name of the key pair.</param>
		/// <param name="KeyPairId">The ID of the key pair.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteKeyPairAsync(string KeyName, string KeyPairId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteKeyPair?KeyName=" + (KeyName==null? "" : Uri.EscapeDataString(KeyName))+"&KeyPairId=" + (KeyPairId==null? "" : Uri.EscapeDataString(KeyPairId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified key pair, by removing the public key from Amazon EC2.
		/// POST_DeleteKeyPair #Action=DeleteKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteKeyPairAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteKeyPair?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a launch template. Deleting a launch template deletes all of its versions.
		/// GET_DeleteLaunchTemplate #Action=DeleteLaunchTemplate
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LaunchTemplateId">The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateName">The name of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLaunchTemplateAsync(bool DryRun, string LaunchTemplateId, string LaunchTemplateName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLaunchTemplate?DryRun="+DryRun+"&LaunchTemplateId=" + (LaunchTemplateId==null? "" : Uri.EscapeDataString(LaunchTemplateId))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a launch template. Deleting a launch template deletes all of its versions.
		/// POST_DeleteLaunchTemplate #Action=DeleteLaunchTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteLaunchTemplateAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLaunchTemplate?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.
		/// GET_DeleteLaunchTemplateVersions #Action=DeleteLaunchTemplateVersions
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LaunchTemplateId">The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateName">The name of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateVersion">The version numbers of one or more launch template versions to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLaunchTemplateVersionsAsync(bool DryRun, string LaunchTemplateId, string LaunchTemplateName, string[] LaunchTemplateVersion, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLaunchTemplateVersions?DryRun="+DryRun+"&LaunchTemplateId=" + (LaunchTemplateId==null? "" : Uri.EscapeDataString(LaunchTemplateId))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&"+String.Join("&", LaunchTemplateVersion.Select(z => $"LaunchTemplateVersion={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.
		/// POST_DeleteLaunchTemplateVersions #Action=DeleteLaunchTemplateVersions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteLaunchTemplateVersionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLaunchTemplateVersions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified local gateway route table.
		/// GET_DeleteLocalGatewayRoute #Action=DeleteLocalGatewayRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR range for the route. This must match the CIDR for the route exactly.</param>
		/// <param name="LocalGatewayRouteTableId">The ID of the local gateway route table.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLocalGatewayRouteAsync(string DestinationCidrBlock, string LocalGatewayRouteTableId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLocalGatewayRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&LocalGatewayRouteTableId=" + (LocalGatewayRouteTableId==null? "" : Uri.EscapeDataString(LocalGatewayRouteTableId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified local gateway route table.
		/// POST_DeleteLocalGatewayRoute #Action=DeleteLocalGatewayRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteLocalGatewayRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLocalGatewayRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified association between a VPC and local gateway route table.
		/// GET_DeleteLocalGatewayRouteTableVpcAssociation #Action=DeleteLocalGatewayRouteTableVpcAssociation
		/// </summary>
		/// <param name="LocalGatewayRouteTableVpcAssociationId">The ID of the association.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLocalGatewayRouteTableVpcAssociationAsync(string LocalGatewayRouteTableVpcAssociationId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLocalGatewayRouteTableVpcAssociation?LocalGatewayRouteTableVpcAssociationId=" + (LocalGatewayRouteTableVpcAssociationId==null? "" : Uri.EscapeDataString(LocalGatewayRouteTableVpcAssociationId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified association between a VPC and local gateway route table.
		/// POST_DeleteLocalGatewayRouteTableVpcAssociation #Action=DeleteLocalGatewayRouteTableVpcAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteLocalGatewayRouteTableVpcAssociationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLocalGatewayRouteTableVpcAssociation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.
		/// GET_DeleteNatGateway #Action=DeleteNatGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NatGatewayId">The ID of the NAT gateway.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNatGatewayAsync(bool DryRun, string NatGatewayId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNatGateway?DryRun="+DryRun+"&NatGatewayId=" + (NatGatewayId==null? "" : Uri.EscapeDataString(NatGatewayId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.
		/// POST_DeleteNatGateway #Action=DeleteNatGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteNatGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNatGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
		/// GET_DeleteNetworkAcl #Action=DeleteNetworkAcl
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkAclId">The ID of the network ACL.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNetworkAclAsync(bool DryRun, string NetworkAclId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkAcl?DryRun="+DryRun+"&NetworkAclId=" + (NetworkAclId==null? "" : Uri.EscapeDataString(NetworkAclId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
		/// POST_DeleteNetworkAcl #Action=DeleteNetworkAcl
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteNetworkAclAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkAcl?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified ingress or egress entry (rule) from the specified network ACL.
		/// GET_DeleteNetworkAclEntry #Action=DeleteNetworkAclEntry
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Egress">Indicates whether the rule is an egress rule.</param>
		/// <param name="NetworkAclId">The ID of the network ACL.</param>
		/// <param name="RuleNumber">The rule number of the entry to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNetworkAclEntryAsync(bool DryRun, bool Egress, string NetworkAclId, int RuleNumber, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkAclEntry?DryRun="+DryRun+"&Egress="+Egress+"&NetworkAclId=" + (NetworkAclId==null? "" : Uri.EscapeDataString(NetworkAclId))+"&RuleNumber="+RuleNumber+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified ingress or egress entry (rule) from the specified network ACL.
		/// POST_DeleteNetworkAclEntry #Action=DeleteNetworkAclEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteNetworkAclEntryAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkAclEntry?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network interface. You must detach the network interface before you can delete it.
		/// GET_DeleteNetworkInterface #Action=DeleteNetworkInterface
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNetworkInterfaceAsync(bool DryRun, string NetworkInterfaceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkInterface?DryRun="+DryRun+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified network interface. You must detach the network interface before you can delete it.
		/// POST_DeleteNetworkInterface #Action=DeleteNetworkInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteNetworkInterfaceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkInterface?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.
		/// GET_DeleteNetworkInterfacePermission #Action=DeleteNetworkInterfacePermission
		/// </summary>
		/// <param name="NetworkInterfacePermissionId">The ID of the network interface permission.</param>
		/// <param name="Force">Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteNetworkInterfacePermissionAsync(string NetworkInterfacePermissionId, bool Force, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkInterfacePermission?NetworkInterfacePermissionId=" + (NetworkInterfacePermissionId==null? "" : Uri.EscapeDataString(NetworkInterfacePermissionId))+"&Force="+Force+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.
		/// POST_DeleteNetworkInterfacePermission #Action=DeleteNetworkInterfacePermission
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteNetworkInterfacePermissionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteNetworkInterfacePermission?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_DeletePlacementGroup #Action=DeletePlacementGroup
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupName">The name of the placement group.</param>
		/// <returns>Success</returns>
		public async Task GET_DeletePlacementGroupAsync(bool DryRun, string GroupName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePlacementGroup?DryRun="+DryRun+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_DeletePlacementGroup #Action=DeletePlacementGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeletePlacementGroupAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePlacementGroup?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the queued purchases for the specified Reserved Instances.
		/// GET_DeleteQueuedReservedInstances #Action=DeleteQueuedReservedInstances
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ReservedInstancesId">The IDs of the Reserved Instances.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteQueuedReservedInstancesAsync(bool DryRun, string[] ReservedInstancesId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteQueuedReservedInstances?DryRun="+DryRun+"&"+String.Join("&", ReservedInstancesId.Select(z => $"ReservedInstancesId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the queued purchases for the specified Reserved Instances.
		/// POST_DeleteQueuedReservedInstances #Action=DeleteQueuedReservedInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteQueuedReservedInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteQueuedReservedInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified route table.
		/// GET_DeleteRoute #Action=DeleteRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</param>
		/// <param name="DestinationIpv6CidrBlock">The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RouteTableId">The ID of the route table.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRouteAsync(string DestinationCidrBlock, string DestinationIpv6CidrBlock, bool DryRun, string RouteTableId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&DestinationIpv6CidrBlock=" + (DestinationIpv6CidrBlock==null? "" : Uri.EscapeDataString(DestinationIpv6CidrBlock))+"&DryRun="+DryRun+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified route table.
		/// POST_DeleteRoute #Action=DeleteRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
		/// GET_DeleteRouteTable #Action=DeleteRouteTable
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RouteTableId">The ID of the route table.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRouteTableAsync(bool DryRun, string RouteTableId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRouteTable?DryRun="+DryRun+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
		/// POST_DeleteRouteTable #Action=DeleteRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with <code>InvalidGroup.InUse</code> in EC2-Classic or <code>DependencyViolation</code> in EC2-VPC.</p>
		/// GET_DeleteSecurityGroup #Action=DeleteSecurityGroup
		/// </summary>
		/// <param name="GroupId">The ID of the security group. Required for a nondefault VPC.</param>
		/// <param name="GroupName">[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSecurityGroupAsync(string GroupId, string GroupName, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSecurityGroup?GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with <code>InvalidGroup.InUse</code> in EC2-Classic or <code>DependencyViolation</code> in EC2-VPC.</p>
		/// POST_DeleteSecurityGroup #Action=DeleteSecurityGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteSecurityGroupAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSecurityGroup?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DeleteSnapshot #Action=DeleteSnapshot
		/// </summary>
		/// <param name="SnapshotId">The ID of the EBS snapshot.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSnapshotAsync(string SnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSnapshot?SnapshotId=" + (SnapshotId==null? "" : Uri.EscapeDataString(SnapshotId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DeleteSnapshot #Action=DeleteSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteSnapshotAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSnapshot?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the data feed for Spot Instances.
		/// GET_DeleteSpotDatafeedSubscription #Action=DeleteSpotDatafeedSubscription
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSpotDatafeedSubscriptionAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSpotDatafeedSubscription?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the data feed for Spot Instances.
		/// POST_DeleteSpotDatafeedSubscription #Action=DeleteSpotDatafeedSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteSpotDatafeedSubscriptionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSpotDatafeedSubscription?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
		/// GET_DeleteSubnet #Action=DeleteSubnet
		/// </summary>
		/// <param name="SubnetId">The ID of the subnet.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSubnetAsync(string SubnetId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSubnet?SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
		/// POST_DeleteSubnet #Action=DeleteSubnet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteSubnetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSubnet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified set of tags from the specified set of resources.</p> <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DeleteTags #Action=DeleteTags
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ResourceId"><p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p></param>
		/// <param name="Tag"><p>The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string.</p> <p>If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the <code>aws:</code> prefix).</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTagsAsync(bool DryRun, string[] ResourceId, Tag[] Tag, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTags?DryRun="+DryRun+"&"+String.Join("&", ResourceId.Select(z => $"ResourceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Tag.Select(z => $"Tag={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified set of tags from the specified set of resources.</p> <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DeleteTags #Action=DeleteTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTagsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTags?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Traffic Mirror filter.</p> <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
		/// GET_DeleteTrafficMirrorFilter #Action=DeleteTrafficMirrorFilter
		/// </summary>
		/// <param name="TrafficMirrorFilterId">The ID of the Traffic Mirror filter.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTrafficMirrorFilterAsync(string TrafficMirrorFilterId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorFilter?TrafficMirrorFilterId=" + (TrafficMirrorFilterId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Traffic Mirror filter.</p> <p>You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.</p>
		/// POST_DeleteTrafficMirrorFilter #Action=DeleteTrafficMirrorFilter
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTrafficMirrorFilterAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorFilter?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Traffic Mirror rule.
		/// GET_DeleteTrafficMirrorFilterRule #Action=DeleteTrafficMirrorFilterRule
		/// </summary>
		/// <param name="TrafficMirrorFilterRuleId">The ID of the Traffic Mirror rule.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTrafficMirrorFilterRuleAsync(string TrafficMirrorFilterRuleId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorFilterRule?TrafficMirrorFilterRuleId=" + (TrafficMirrorFilterRuleId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterRuleId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Traffic Mirror rule.
		/// POST_DeleteTrafficMirrorFilterRule #Action=DeleteTrafficMirrorFilterRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTrafficMirrorFilterRuleAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorFilterRule?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Traffic Mirror session.
		/// GET_DeleteTrafficMirrorSession #Action=DeleteTrafficMirrorSession
		/// </summary>
		/// <param name="TrafficMirrorSessionId">The ID of the Traffic Mirror session.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTrafficMirrorSessionAsync(string TrafficMirrorSessionId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorSession?TrafficMirrorSessionId=" + (TrafficMirrorSessionId==null? "" : Uri.EscapeDataString(TrafficMirrorSessionId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Traffic Mirror session.
		/// POST_DeleteTrafficMirrorSession #Action=DeleteTrafficMirrorSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTrafficMirrorSessionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorSession?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Traffic Mirror target.</p> <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
		/// GET_DeleteTrafficMirrorTarget #Action=DeleteTrafficMirrorTarget
		/// </summary>
		/// <param name="TrafficMirrorTargetId">The ID of the Traffic Mirror target.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTrafficMirrorTargetAsync(string TrafficMirrorTargetId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorTarget?TrafficMirrorTargetId=" + (TrafficMirrorTargetId==null? "" : Uri.EscapeDataString(TrafficMirrorTargetId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified Traffic Mirror target.</p> <p>You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.</p>
		/// POST_DeleteTrafficMirrorTarget #Action=DeleteTrafficMirrorTarget
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTrafficMirrorTargetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTrafficMirrorTarget?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway.
		/// GET_DeleteTransitGateway #Action=DeleteTransitGateway
		/// </summary>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayAsync(string TransitGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGateway?TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway.
		/// POST_DeleteTransitGateway #Action=DeleteTransitGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway multicast domain.
		/// GET_DeleteTransitGatewayMulticastDomain #Action=DeleteTransitGatewayMulticastDomain
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayMulticastDomainAsync(string TransitGatewayMulticastDomainId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayMulticastDomain?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway multicast domain.
		/// POST_DeleteTransitGatewayMulticastDomain #Action=DeleteTransitGatewayMulticastDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayMulticastDomainAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayMulticastDomain?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a transit gateway peering attachment.
		/// GET_DeleteTransitGatewayPeeringAttachment #Action=DeleteTransitGatewayPeeringAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the transit gateway peering attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayPeeringAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayPeeringAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a transit gateway peering attachment.
		/// POST_DeleteTransitGatewayPeeringAttachment #Action=DeleteTransitGatewayPeeringAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayPeeringAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayPeeringAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified transit gateway route table.
		/// GET_DeleteTransitGatewayRoute #Action=DeleteTransitGatewayRoute
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="DestinationCidrBlock">The CIDR range for the route. This must match the CIDR for the route exactly.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayRouteAsync(string TransitGatewayRouteTableId, string DestinationCidrBlock, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayRoute?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified route from the specified transit gateway route table.
		/// POST_DeleteTransitGatewayRoute #Action=DeleteTransitGatewayRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.
		/// GET_DeleteTransitGatewayRouteTable #Action=DeleteTransitGatewayRouteTable
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayRouteTableAsync(string TransitGatewayRouteTableId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayRouteTable?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.
		/// POST_DeleteTransitGatewayRouteTable #Action=DeleteTransitGatewayRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified VPC attachment.
		/// GET_DeleteTransitGatewayVpcAttachment #Action=DeleteTransitGatewayVpcAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteTransitGatewayVpcAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayVpcAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified VPC attachment.
		/// POST_DeleteTransitGatewayVpcAttachment #Action=DeleteTransitGatewayVpcAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteTransitGatewayVpcAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteTransitGatewayVpcAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <p>The volume can remain in the <code>deleting</code> state for several minutes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DeleteVolume #Action=DeleteVolume
		/// </summary>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVolumeAsync(string VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVolume?VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <p>The volume can remain in the <code>deleting</code> state for several minutes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DeleteVolume #Action=DeleteVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.
		/// GET_DeleteVpc #Action=DeleteVpc
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpcAsync(string VpcId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpc?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.
		/// POST_DeleteVpc #Action=DeleteVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more VPC endpoint connection notifications.
		/// GET_DeleteVpcEndpointConnectionNotifications #Action=DeleteVpcEndpointConnectionNotifications
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ConnectionNotificationId">One or more notification IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpcEndpointConnectionNotificationsAsync(bool DryRun, string[] ConnectionNotificationId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpointConnectionNotifications?DryRun="+DryRun+"&"+String.Join("&", ConnectionNotificationId.Select(z => $"ConnectionNotificationId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more VPC endpoint connection notifications.
		/// POST_DeleteVpcEndpointConnectionNotifications #Action=DeleteVpcEndpointConnectionNotifications
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpcEndpointConnectionNotificationsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpointConnectionNotifications?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any <code>Available</code> or <code>PendingAcceptance</code> interface endpoint connections that are attached to the service.
		/// GET_DeleteVpcEndpointServiceConfigurations #Action=DeleteVpcEndpointServiceConfigurations
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The IDs of one or more services.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpcEndpointServiceConfigurationsAsync(bool DryRun, string[] ServiceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpointServiceConfigurations?DryRun="+DryRun+"&"+String.Join("&", ServiceId.Select(z => $"ServiceId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any <code>Available</code> or <code>PendingAcceptance</code> interface endpoint connections that are attached to the service.
		/// POST_DeleteVpcEndpointServiceConfigurations #Action=DeleteVpcEndpointServiceConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpcEndpointServiceConfigurationsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpointServiceConfigurations?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.
		/// GET_DeleteVpcEndpoints #Action=DeleteVpcEndpoints
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcEndpointId">One or more VPC endpoint IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpcEndpointsAsync(bool DryRun, string[] VpcEndpointId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpoints?DryRun="+DryRun+"&"+String.Join("&", VpcEndpointId.Select(z => $"VpcEndpointId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.
		/// POST_DeleteVpcEndpoints #Action=DeleteVpcEndpoints
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpcEndpointsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcEndpoints?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering connection that's in the <code>failed</code> state.
		/// GET_DeleteVpcPeeringConnection #Action=DeleteVpcPeeringConnection
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcPeeringConnectionId">The ID of the VPC peering connection.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpcPeeringConnectionAsync(bool DryRun, string VpcPeeringConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcPeeringConnection?DryRun="+DryRun+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering connection that's in the <code>failed</code> state.
		/// POST_DeleteVpcPeeringConnection #Action=DeleteVpcPeeringConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpcPeeringConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpcPeeringConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID.</p> <p>For certificate-based authentication, delete all AWS Certificate Manager (ACM) private certificates used for the AWS-side tunnel endpoints for the VPN connection before deleting the VPN connection.</p>
		/// GET_DeleteVpnConnection #Action=DeleteVpnConnection
		/// </summary>
		/// <param name="VpnConnectionId">The ID of the VPN connection.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpnConnectionAsync(string VpnConnectionId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnConnection?VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID.</p> <p>For certificate-based authentication, delete all AWS Certificate Manager (ACM) private certificates used for the AWS-side tunnel endpoints for the VPN connection before deleting the VPN connection.</p>
		/// POST_DeleteVpnConnection #Action=DeleteVpnConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpnConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
		/// GET_DeleteVpnConnectionRoute #Action=DeleteVpnConnectionRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR block associated with the local subnet of the customer network.</param>
		/// <param name="VpnConnectionId">The ID of the VPN connection.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpnConnectionRouteAsync(string DestinationCidrBlock, string VpnConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnConnectionRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
		/// POST_DeleteVpnConnectionRoute #Action=DeleteVpnConnectionRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpnConnectionRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnConnectionRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
		/// GET_DeleteVpnGateway #Action=DeleteVpnGateway
		/// </summary>
		/// <param name="VpnGatewayId">The ID of the virtual private gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVpnGatewayAsync(string VpnGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnGateway?VpnGatewayId=" + (VpnGatewayId==null? "" : Uri.EscapeDataString(VpnGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
		/// POST_DeleteVpnGateway #Action=DeleteVpnGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteVpnGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVpnGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p> <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its address range.</p>
		/// GET_DeprovisionByoipCidr #Action=DeprovisionByoipCidr
		/// </summary>
		/// <param name="Cidr">The address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeprovisionByoipCidrAsync(string Cidr, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeprovisionByoipCidr?Cidr=" + (Cidr==null? "" : Uri.EscapeDataString(Cidr))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p> <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its address range.</p>
		/// POST_DeprovisionByoipCidr #Action=DeprovisionByoipCidr
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeprovisionByoipCidrAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeprovisionByoipCidr?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them.</p> <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.</p>
		/// GET_DeregisterImage #Action=DeregisterImage
		/// </summary>
		/// <param name="ImageId">The ID of the AMI.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterImageAsync(string ImageId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterImage?ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them.</p> <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.</p>
		/// POST_DeregisterImage #Action=DeregisterImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeregisterImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters tag keys to prevent tags that have the specified tag keys from being included in scheduled event notifications for resources in the Region.
		/// GET_DeregisterInstanceEventNotificationAttributes #Action=DeregisterInstanceEventNotificationAttributes
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceTagAttribute">Information about the tag keys to deregister.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterInstanceEventNotificationAttributesAsync(bool DryRun, string InstanceTagAttribute, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterInstanceEventNotificationAttributes?DryRun="+DryRun+"&InstanceTagAttribute=" + (InstanceTagAttribute==null? "" : Uri.EscapeDataString(InstanceTagAttribute))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters tag keys to prevent tags that have the specified tag keys from being included in scheduled event notifications for resources in the Region.
		/// POST_DeregisterInstanceEventNotificationAttributes #Action=DeregisterInstanceEventNotificationAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeregisterInstanceEventNotificationAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterInstanceEventNotificationAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified members (network interfaces) from the transit gateway multicast group.
		/// GET_DeregisterTransitGatewayMulticastGroupMembers #Action=DeregisterTransitGatewayMulticastGroupMembers
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="GroupIpAddress">The IP address assigned to the transit gateway multicast group.</param>
		/// <param name="NetworkInterfaceIds">The IDs of the group members' network interfaces.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterTransitGatewayMulticastGroupMembersAsync(string TransitGatewayMulticastDomainId, string GroupIpAddress, string[] NetworkInterfaceIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterTransitGatewayMulticastGroupMembers?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&GroupIpAddress=" + (GroupIpAddress==null? "" : Uri.EscapeDataString(GroupIpAddress))+"&"+String.Join("&", NetworkInterfaceIds.Select(z => $"NetworkInterfaceIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified members (network interfaces) from the transit gateway multicast group.
		/// POST_DeregisterTransitGatewayMulticastGroupMembers #Action=DeregisterTransitGatewayMulticastGroupMembers
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeregisterTransitGatewayMulticastGroupMembersAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterTransitGatewayMulticastGroupMembers?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified sources (network interfaces) from the transit gateway multicast group.
		/// GET_DeregisterTransitGatewayMulticastGroupSources #Action=DeregisterTransitGatewayMulticastGroupSources
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="GroupIpAddress">The IP address assigned to the transit gateway multicast group.</param>
		/// <param name="NetworkInterfaceIds">The IDs of the group sources' network interfaces.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DeregisterTransitGatewayMulticastGroupSourcesAsync(string TransitGatewayMulticastDomainId, string GroupIpAddress, string[] NetworkInterfaceIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterTransitGatewayMulticastGroupSources?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&GroupIpAddress=" + (GroupIpAddress==null? "" : Uri.EscapeDataString(GroupIpAddress))+"&"+String.Join("&", NetworkInterfaceIds.Select(z => $"NetworkInterfaceIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters the specified sources (network interfaces) from the transit gateway multicast group.
		/// POST_DeregisterTransitGatewayMulticastGroupSources #Action=DeregisterTransitGatewayMulticastGroupSources
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeregisterTransitGatewayMulticastGroupSourcesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeregisterTransitGatewayMulticastGroupSources?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes attributes of your AWS account. The following are the supported account attributes:</p> <ul> <li> <p> <code>supported-platforms</code>: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p> </li> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. </p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.</p> </li> </ul>
		/// GET_DescribeAccountAttributes #Action=DescribeAccountAttributes
		/// </summary>
		/// <param name="AttributeName">The account attribute names.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAccountAttributesAsync(AccountAttributeName[] AttributeName, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountAttributes?"+String.Join("&", AttributeName.Select(z => $"AttributeName={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes attributes of your AWS account. The following are the supported account attributes:</p> <ul> <li> <p> <code>supported-platforms</code>: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p> </li> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits">On-Demand Instance Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. </p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.</p> </li> </ul>
		/// POST_DescribeAccountAttributes #Action=DescribeAccountAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAccountAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAccountAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeAddresses #Action=DescribeAddresses
		/// </summary>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-border-group</code> - The location from where the IP address is advertised.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="PublicIp"><p>One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p></param>
		/// <param name="AllocationId">[EC2-VPC] Information about the allocation IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAddressesAsync(Filter[] Filter, string[] PublicIp, string[] AllocationId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAddresses?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", PublicIp.Select(z => $"PublicIp={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", AllocationId.Select(z => $"AllocationId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeAddresses #Action=DescribeAddresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAddressesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAddresses?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).</p> <p>This request only returns information about resource types that support longer IDs.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
		/// GET_DescribeAggregateIdFormat #Action=DescribeAggregateIdFormat
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAggregateIdFormatAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAggregateIdFormat?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).</p> <p>This request only returns information about resource types that support longer IDs.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
		/// POST_DescribeAggregateIdFormat #Action=DescribeAggregateIdFormat
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAggregateIdFormatAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAggregateIdFormat?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.</p> <p>For more information about Availability Zones and Local Zones, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeAvailabilityZones #Action=DescribeAvailabilityZones
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>group-name</code> - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, <code>us-west-2-lax-1</code>).</p> </li> <li> <p> <code>message</code> - The Availability Zone or Local Zone message.</p> </li> <li> <p> <code>opt-in-status</code> - The opt in status (<code>opted-in</code>, and <code>not-opted-in</code> | <code>opt-in-not-required</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region for the Availability Zone or Local Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone or Local Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-id</code> - The ID of the Availability Zone (for example, <code>use1-az1</code>) or the Local Zone (for example, use <code>usw2-lax1-az1</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>) or the Local Zone (for example, use <code>us-west-2-lax-1a</code>).</p> </li> </ul></param>
		/// <param name="ZoneName">The names of the Availability Zones and Local Zones.</param>
		/// <param name="ZoneId">The IDs of the Availability Zones and Local Zones.</param>
		/// <param name="AllAvailabilityZones"><p>Include all Availability Zones and Local Zones regardless of your opt in status.</p> <p>If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeAvailabilityZonesAsync(Filter[] Filter, string[] ZoneName, string[] ZoneId, bool AllAvailabilityZones, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAvailabilityZones?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", ZoneName.Select(z => $"ZoneName={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", ZoneId.Select(z => $"ZoneId={Uri.EscapeDataString(z.ToString())}"))+"&AllAvailabilityZones="+AllAvailabilityZones+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.</p> <p>For more information about Availability Zones and Local Zones, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeAvailabilityZones #Action=DescribeAvailabilityZones
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeAvailabilityZonesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeAvailabilityZones?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note>
		/// GET_DescribeBundleTasks #Action=DescribeBundleTasks
		/// </summary>
		/// <param name="BundleId"><p>The bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p></param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeBundleTasksAsync(string[] BundleId, Filter[] Filter, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeBundleTasks?"+String.Join("&", BundleId.Select(z => $"BundleId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note>
		/// POST_DescribeBundleTasks #Action=DescribeBundleTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeBundleTasksAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeBundleTasks?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p> <p>To describe the address pools that were created when you provisioned the address ranges, use <a>DescribePublicIpv4Pools</a> or <a>DescribeIpv6Pools</a>.</p>
		/// GET_DescribeByoipCidrs #Action=DescribeByoipCidrs
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeByoipCidrsAsync(bool DryRun, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeByoipCidrs?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p> <p>To describe the address pools that were created when you provisioned the address ranges, use <a>DescribePublicIpv4Pools</a> or <a>DescribeIpv6Pools</a>.</p>
		/// POST_DescribeByoipCidrs #Action=DescribeByoipCidrs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeByoipCidrsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeByoipCidrs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.
		/// GET_DescribeCapacityReservations #Action=DescribeCapacityReservations
		/// </summary>
		/// <param name="CapacityReservationId">The ID of the Capacity Reservation.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>instance-type</code> - The type of instance for which the Capacity Reservation reserves capacity.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the Capacity Reservation.</p> </li> <li> <p> <code>availability-zone-id</code> - The Availability Zone ID of the Capacity Reservation.</p> </li> <li> <p> <code>instance-platform</code> - The type of operating system for which the Capacity Reservation reserves capacity.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone ID of the Capacity Reservation.</p> </li> <li> <p> <code>tenancy</code> - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul> </li> <li> <p> <code>state</code> - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code>- The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul> </li> <li> <p> <code>end-date</code> - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.</p> </li> <li> <p> <code>end-date-type</code> - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p> </li> </ul> </li> <li> <p> <code>instance-match-criteria</code> - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.</p> </li> </ul> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCapacityReservationsAsync(string[] CapacityReservationId, string NextToken, int MaxResults, Filter[] Filter, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCapacityReservations?"+String.Join("&", CapacityReservationId.Select(z => $"CapacityReservationId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.
		/// POST_DescribeCapacityReservations #Action=DescribeCapacityReservations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeCapacityReservationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCapacityReservations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.
		/// GET_DescribeClassicLinkInstances #Action=DescribeClassicLinkInstances
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC to which the instance is linked.</p> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</param>
		/// <param name="MaxResults"><p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClassicLinkInstancesAsync(Filter[] Filter, bool DryRun, string[] InstanceId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClassicLinkInstances?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.
		/// POST_DescribeClassicLinkInstances #Action=DescribeClassicLinkInstances
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClassicLinkInstancesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClassicLinkInstances?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the authorization rules for a specified Client VPN endpoint.
		/// GET_DescribeClientVpnAuthorizationRules #Action=DescribeClientVpnAuthorizationRules
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>description</code> - The description of the authorization rule.</p> </li> <li> <p> <code>destination-cidr</code> - The CIDR of the network to which the authorization rule applies.</p> </li> <li> <p> <code>group-id</code> - The ID of the Active Directory group to which the authorization rule grants access.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClientVpnAuthorizationRulesAsync(string ClientVpnEndpointId, bool DryRun, string NextToken, Filter[] Filter, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnAuthorizationRules?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&DryRun="+DryRun+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the authorization rules for a specified Client VPN endpoint.
		/// POST_DescribeClientVpnAuthorizationRules #Action=DescribeClientVpnAuthorizationRules
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClientVpnAuthorizationRulesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnAuthorizationRules?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.
		/// GET_DescribeClientVpnConnections #Action=DescribeClientVpnConnections
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>connection-id</code> - The ID of the connection.</p> </li> <li> <p> <code>username</code> - For Active Directory client authentication, the user name of the client who established the client connection.</p> </li> </ul></param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClientVpnConnectionsAsync(string ClientVpnEndpointId, Filter[] Filter, string NextToken, int MaxResults, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnConnections?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.
		/// POST_DescribeClientVpnConnections #Action=DescribeClientVpnConnections
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClientVpnConnectionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnConnections?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Client VPN endpoints in the account.
		/// GET_DescribeClientVpnEndpoints #Action=DescribeClientVpnEndpoints
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>endpoint-id</code> - The ID of the Client VPN endpoint.</p> </li> <li> <p> <code>transport-protocol</code> - The transport protocol (<code>tcp</code> | <code>udp</code>).</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClientVpnEndpointsAsync(string[] ClientVpnEndpointId, int MaxResults, string NextToken, Filter[] Filter, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnEndpoints?"+String.Join("&", ClientVpnEndpointId.Select(z => $"ClientVpnEndpointId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Client VPN endpoints in the account.
		/// POST_DescribeClientVpnEndpoints #Action=DescribeClientVpnEndpoints
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClientVpnEndpointsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnEndpoints?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the routes for the specified Client VPN endpoint.
		/// GET_DescribeClientVpnRoutes #Action=DescribeClientVpnRoutes
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>destination-cidr</code> - The CIDR of the route destination.</p> </li> <li> <p> <code>origin</code> - How the route was associated with the Client VPN endpoint (<code>associate</code> | <code>add-route</code>).</p> </li> <li> <p> <code>target-subnet</code> - The ID of the subnet through which traffic is routed.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClientVpnRoutesAsync(string ClientVpnEndpointId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnRoutes?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the routes for the specified Client VPN endpoint.
		/// POST_DescribeClientVpnRoutes #Action=DescribeClientVpnRoutes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClientVpnRoutesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnRoutes?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the target networks associated with the specified Client VPN endpoint.
		/// GET_DescribeClientVpnTargetNetworks #Action=DescribeClientVpnTargetNetworks
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="AssociationIds">The IDs of the target network associations.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>association-id</code> - The ID of the association.</p> </li> <li> <p> <code>target-network-id</code> - The ID of the subnet specified as the target network.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the target network is located.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeClientVpnTargetNetworksAsync(string ClientVpnEndpointId, string[] AssociationIds, int MaxResults, string NextToken, Filter[] Filter, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnTargetNetworks?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&"+String.Join("&", AssociationIds.Select(z => $"AssociationIds={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the target networks associated with the specified Client VPN endpoint.
		/// POST_DescribeClientVpnTargetNetworks #Action=DescribeClientVpnTargetNetworks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeClientVpnTargetNetworksAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeClientVpnTargetNetworks?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified customer-owned address pools or all of your customer-owned address pools.
		/// GET_DescribeCoipPools #Action=DescribeCoipPools
		/// </summary>
		/// <param name="PoolId">The IDs of the address pools.</param>
		/// <param name="Filter"><p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-pool.pool-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-pool.local-gateway-route-table-id</code> </p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCoipPoolsAsync(string[] PoolId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCoipPools?"+String.Join("&", PoolId.Select(z => $"PoolId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified customer-owned address pools or all of your customer-owned address pools.
		/// POST_DescribeCoipPools #Action=DescribeCoipPools
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeCoipPoolsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCoipPools?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// GET_DescribeConversionTasks #Action=DescribeConversionTasks
		/// </summary>
		/// <param name="ConversionTaskId">The conversion task IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeConversionTasksAsync(string[] ConversionTaskId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeConversionTasks?"+String.Join("&", ConversionTaskId.Select(z => $"ConversionTaskId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// POST_DescribeConversionTasks #Action=DescribeConversionTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeConversionTasksAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeConversionTasks?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your VPN customer gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_DescribeCustomerGateways #Action=DescribeCustomerGateways
		/// </summary>
		/// <param name="CustomerGatewayId"><p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p></param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway's Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeCustomerGatewaysAsync(string[] CustomerGatewayId, Filter[] Filter, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCustomerGateways?"+String.Join("&", CustomerGatewayId.Select(z => $"CustomerGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your VPN customer gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_DescribeCustomerGateways #Action=DescribeCustomerGateways
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeCustomerGatewaysAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeCustomerGateways?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your DHCP options sets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DescribeDhcpOptions #Action=DescribeDhcpOptions
		/// </summary>
		/// <param name="DhcpOptionsId"><p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p></param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a DHCP options set.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the DHCP options set.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeDhcpOptionsAsync(string[] DhcpOptionsId, Filter[] Filter, bool DryRun, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDhcpOptions?"+String.Join("&", DhcpOptionsId.Select(z => $"DhcpOptionsId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your DHCP options sets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DescribeDhcpOptions #Action=DescribeDhcpOptions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeDhcpOptionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeDhcpOptions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your egress-only internet gateways.
		/// GET_DescribeEgressOnlyInternetGateways #Action=DescribeEgressOnlyInternetGateways
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EgressOnlyInternetGatewayId">One or more egress-only internet gateway IDs.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeEgressOnlyInternetGatewaysAsync(bool DryRun, string[] EgressOnlyInternetGatewayId, int MaxResults, string NextToken, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEgressOnlyInternetGateways?DryRun="+DryRun+"&"+String.Join("&", EgressOnlyInternetGatewayId.Select(z => $"EgressOnlyInternetGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your egress-only internet gateways.
		/// POST_DescribeEgressOnlyInternetGateways #Action=DescribeEgressOnlyInternetGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeEgressOnlyInternetGatewaysAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeEgressOnlyInternetGateways?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.
		/// GET_DescribeElasticGpus #Action=DescribeElasticGpus
		/// </summary>
		/// <param name="ElasticGpuId">The Elastic Graphics accelerator IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone in which the Elastic Graphics accelerator resides.</p> </li> <li> <p> <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator (<code>OK</code> | <code>IMPAIRED</code>).</p> </li> <li> <p> <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator (<code>ATTACHED</code>).</p> </li> <li> <p> <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator; for example, <code>eg1.medium</code>.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance to which the Elastic Graphics accelerator is associated.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeElasticGpusAsync(string[] ElasticGpuId, bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeElasticGpus?"+String.Join("&", ElasticGpuId.Select(z => $"ElasticGpuId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.
		/// POST_DescribeElasticGpus #Action=DescribeElasticGpus
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeElasticGpusAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeElasticGpus?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified export image tasks or all your export image tasks.
		/// GET_DescribeExportImageTasks #Action=DescribeExportImageTasks
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter">Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</param>
		/// <param name="ExportImageTaskId">The IDs of the export image tasks.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call.</param>
		/// <param name="NextToken">A token that indicates the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeExportImageTasksAsync(bool DryRun, Filter[] Filter, string[] ExportImageTaskId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeExportImageTasks?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", ExportImageTaskId.Select(z => $"ExportImageTaskId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified export image tasks or all your export image tasks.
		/// POST_DescribeExportImageTasks #Action=DescribeExportImageTasks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeExportImageTasksAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeExportImageTasks?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified export instance tasks or all your export instance tasks.
		/// GET_DescribeExportTasks #Action=DescribeExportTasks
		/// </summary>
		/// <param name="ExportTaskId">The export task IDs.</param>
		/// <param name="Filter">the filters for the export tasks.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeExportTasksAsync(string[] ExportTaskId, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeExportTasks?"+String.Join("&", ExportTaskId.Select(z => $"ExportTaskId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified export instance tasks or all your export instance tasks.
		/// POST_DescribeExportTasks #Action=DescribeExportTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeExportTasksAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeExportTasks?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the state of fast snapshot restores for your snapshots.
		/// GET_DescribeFastSnapshotRestores #Action=DescribeFastSnapshotRestores
		/// </summary>
		/// <param name="Filter"><p>The filters. The possible values are:</p> <ul> <li> <p> <code>availability-zone</code>: The Availability Zone of the snapshot.</p> </li> <li> <p> <code>owner-id</code>: The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>snapshot-id</code>: The ID of the snapshot.</p> </li> <li> <p> <code>state</code>: The state of fast snapshot restores for the snapshot (<code>enabling</code> | <code>optimizing</code> | <code>enabled</code> | <code>disabling</code> | <code>disabled</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFastSnapshotRestoresAsync(Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFastSnapshotRestores?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the state of fast snapshot restores for your snapshots.
		/// POST_DescribeFastSnapshotRestores #Action=DescribeFastSnapshotRestores
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeFastSnapshotRestoresAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFastSnapshotRestores?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the events for the specified EC2 Fleet during the specified time.</p> <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.</p>
		/// GET_DescribeFleetHistory #Action=DescribeFleetHistory
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EventType">The type of events to describe. By default, all events are described.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="FleetId">The ID of the EC2 Fleet.</param>
		/// <param name="StartTime">The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFleetHistoryAsync(bool DryRun, string EventType, int MaxResults, string NextToken, string FleetId, System.DateTimeOffset StartTime, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleetHistory?DryRun="+DryRun+"&EventType=" + (EventType==null? "" : Uri.EscapeDataString(EventType))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&FleetId=" + (FleetId==null? "" : Uri.EscapeDataString(FleetId))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the events for the specified EC2 Fleet during the specified time.</p> <p>EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.</p>
		/// POST_DescribeFleetHistory #Action=DescribeFleetHistory
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeFleetHistoryAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleetHistory?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the running instances for the specified EC2 Fleet.
		/// GET_DescribeFleetInstances #Action=DescribeFleetInstances
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="FleetId">The ID of the EC2 Fleet.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFleetInstancesAsync(bool DryRun, int MaxResults, string NextToken, string FleetId, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleetInstances?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&FleetId=" + (FleetId==null? "" : Uri.EscapeDataString(FleetId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the running instances for the specified EC2 Fleet.
		/// POST_DescribeFleetInstances #Action=DescribeFleetInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeFleetInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleetInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified EC2 Fleets or all of your EC2 Fleets.
		/// GET_DescribeFleets #Action=DescribeFleets
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="FleetId">The ID of the EC2 Fleets.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> | <code>pending-fulfillment</code> | <code>pending-termination</code> | <code>fulfilled</code>).</p> </li> <li> <p> <code>excess-capacity-termination-policy</code> - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> | <code>active</code> | <code>deleted</code> | <code>failed</code> | <code>deleted-running</code> | <code>deleted-terminating</code> | <code>modifying</code>).</p> </li> <li> <p> <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace unhealthy instances (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>type</code> - The type of request (<code>instant</code> | <code>request</code> | <code>maintain</code>).</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFleetsAsync(bool DryRun, int MaxResults, string NextToken, string[] FleetId, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleets?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", FleetId.Select(z => $"FleetId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified EC2 Fleets or all of your EC2 Fleets.
		/// POST_DescribeFleets #Action=DescribeFleets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeFleetsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFleets?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.
		/// GET_DescribeFlowLogs #Action=DescribeFlowLogs
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>log-destination-type</code> - The type of destination to which the flow log publishes data. Possible destination types include <code>cloud-watch-logs</code> and <code>S3</code>.</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="FlowLogId"><p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFlowLogsAsync(bool DryRun, Filter[] Filter, string[] FlowLogId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFlowLogs?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", FlowLogId.Select(z => $"FlowLogId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.
		/// POST_DescribeFlowLogs #Action=DescribeFlowLogs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeFlowLogsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFlowLogs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified Amazon FPGA Image (AFI).
		/// GET_DescribeFpgaImageAttribute #Action=DescribeFpgaImageAttribute
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FpgaImageId">The ID of the AFI.</param>
		/// <param name="Attribute">The AFI attribute.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFpgaImageAttributeAsync(bool DryRun, string FpgaImageId, FpgaImageAttributeName Attribute, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFpgaImageAttribute?DryRun="+DryRun+"&FpgaImageId=" + (FpgaImageId==null? "" : Uri.EscapeDataString(FpgaImageId))+"&Attribute=" + Attribute+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified Amazon FPGA Image (AFI).
		/// POST_DescribeFpgaImageAttribute #Action=DescribeFpgaImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeFpgaImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFpgaImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.
		/// GET_DescribeFpgaImages #Action=DescribeFpgaImages
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FpgaImageId">The AFI IDs.</param>
		/// <param name="Owner">Filters the AFI by owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>create-time</code> - The creation time of the AFI.</p> </li> <li> <p> <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p> </li> <li> <p> <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p> </li> <li> <p> <code>name</code> - The name of the AFI.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the AFI owner.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>shell-version</code> - The version of the AWS Shell that was used to create the bitstream.</p> </li> <li> <p> <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update.</p> </li> </ul></param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeFpgaImagesAsync(bool DryRun, string[] FpgaImageId, string[] Owner, Filter[] Filter, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFpgaImages?DryRun="+DryRun+"&"+String.Join("&", FpgaImageId.Select(z => $"FpgaImageId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Owner.Select(z => $"Owner={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.
		/// POST_DescribeFpgaImages #Action=DescribeFpgaImages
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeFpgaImagesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeFpgaImages?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Dedicated Host reservations that are available to purchase.</p> <p>The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
		/// GET_DescribeHostReservationOfferings #Action=DescribeHostReservationOfferings
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> </ul></param>
		/// <param name="MaxDuration">This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</param>
		/// <param name="MinDuration">This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.</param>
		/// <param name="NextToken">The token to use to retrieve the next page of results.</param>
		/// <param name="OfferingId">The ID of the reservation offering.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHostReservationOfferingsAsync(Filter[] Filter, int MaxDuration, int MaxResults, int MinDuration, string NextToken, string OfferingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHostReservationOfferings?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxDuration="+MaxDuration+"&MaxResults="+MaxResults+"&MinDuration="+MinDuration+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&OfferingId=" + (OfferingId==null? "" : Uri.EscapeDataString(OfferingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Dedicated Host reservations that are available to purchase.</p> <p>The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
		/// POST_DescribeHostReservationOfferings #Action=DescribeHostReservationOfferings
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeHostReservationOfferingsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHostReservationOfferings?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes reservations that are associated with Dedicated Hosts in your account.
		/// GET_DescribeHostReservations #Action=DescribeHostReservations
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="HostReservationIdSet">The host reservation IDs.</param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</param>
		/// <param name="NextToken">The token to use to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHostReservationsAsync(Filter[] Filter, string[] HostReservationIdSet, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHostReservations?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", HostReservationIdSet.Select(z => $"HostReservationIdSet={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes reservations that are associated with Dedicated Hosts in your account.
		/// POST_DescribeHostReservations #Action=DescribeHostReservations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeHostReservationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHostReservations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state <code>released</code>.</p>
		/// GET_DescribeHosts #Action=DescribeHosts
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token that you provided when you allocated the host.</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>state</code> - The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="HostId">The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.</param>
		/// <param name="MaxResults"><p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> <p>You cannot specify this parameter and the host IDs parameter in the same request.</p></param>
		/// <param name="NextToken">The token to use to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeHostsAsync(Filter[] Filter, string[] HostId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHosts?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", HostId.Select(z => $"HostId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state <code>released</code>.</p>
		/// POST_DescribeHosts #Action=DescribeHosts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeHostsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeHosts?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your IAM instance profile associations.
		/// GET_DescribeIamInstanceProfileAssociations #Action=DescribeIamInstanceProfileAssociations
		/// </summary>
		/// <param name="AssociationId">The IAM instance profile associations.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIamInstanceProfileAssociationsAsync(string[] AssociationId, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIamInstanceProfileAssociations?"+String.Join("&", AssociationId.Select(z => $"AssociationId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your IAM instance profile associations.
		/// POST_DescribeIamInstanceProfileAssociations #Action=DescribeIamInstanceProfileAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeIamInstanceProfileAssociationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIamInstanceProfileAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// GET_DescribeIdFormat #Action=DescribeIdFormat
		/// </summary>
		/// <param name="Resource">The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIdFormatAsync(string Resource, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIdFormat?Resource=" + (Resource==null? "" : Uri.EscapeDataString(Resource))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// POST_DescribeIdFormat #Action=DescribeIdFormat
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeIdFormatAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIdFormat?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
		/// GET_DescribeIdentityIdFormat #Action=DescribeIdentityIdFormat
		/// </summary>
		/// <param name="PrincipalArn">The ARN of the principal, which can be an IAM role, IAM user, or the root user.</param>
		/// <param name="Resource">The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIdentityIdFormatAsync(string PrincipalArn, string Resource, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIdentityIdFormat?PrincipalArn=" + (PrincipalArn==null? "" : Uri.EscapeDataString(PrincipalArn))+"&Resource=" + (Resource==null? "" : Uri.EscapeDataString(Resource))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
		/// POST_DescribeIdentityIdFormat #Action=DescribeIdentityIdFormat
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeIdentityIdFormatAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIdentityIdFormat?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.
		/// GET_DescribeImageAttribute #Action=DescribeImageAttribute
		/// </summary>
		/// <param name="Attribute"><p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p></param>
		/// <param name="ImageId">The ID of the AMI.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeImageAttributeAsync(ImageAttributeName Attribute, string ImageId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImageAttribute?Attribute=" + Attribute+"&ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.
		/// POST_DescribeImageAttribute #Action=DescribeImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p> <p>The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.</p> <p>Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.</p>
		/// GET_DescribeImages #Action=DescribeImages
		/// </summary>
		/// <param name="ExecutableBy">Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the EBS volume is encrypted.</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>ena-support</code> - A Boolean that indicates whether enhanced networking with ENA is enabled.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>sriov-net-support</code> - A value of <code>simple</code> indicates that enhanced networking with the Intel 82599 VF interface is enabled.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul></param>
		/// <param name="ImageId"><p>The image IDs.</p> <p>Default: Describes all images available to you.</p></param>
		/// <param name="Owner">Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeImagesAsync(string[] ExecutableBy, Filter[] Filter, string[] ImageId, string[] Owner, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImages?"+String.Join("&", ExecutableBy.Select(z => $"ExecutableBy={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", ImageId.Select(z => $"ImageId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Owner.Select(z => $"Owner={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p> <p>The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.</p> <p>Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.</p>
		/// POST_DescribeImages #Action=DescribeImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeImagesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImages?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays details about an import virtual machine or import snapshot tasks that are already created.
		/// GET_DescribeImportImageTasks #Action=DescribeImportImageTasks
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filters">Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.</param>
		/// <param name="ImportTaskId">The IDs of the import image tasks.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call.</param>
		/// <param name="NextToken">A token that indicates the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeImportImageTasksAsync(bool DryRun, Filter[] Filters, string[] ImportTaskId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImportImageTasks?DryRun="+DryRun+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&"+String.Join("&", ImportTaskId.Select(z => $"ImportTaskId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Displays details about an import virtual machine or import snapshot tasks that are already created.
		/// POST_DescribeImportImageTasks #Action=DescribeImportImageTasks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeImportImageTasksAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImportImageTasks?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your import snapshot tasks.
		/// GET_DescribeImportSnapshotTasks #Action=DescribeImportSnapshotTasks
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filters">The filters.</param>
		/// <param name="ImportTaskId">A list of import snapshot task IDs.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">A token that indicates the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeImportSnapshotTasksAsync(bool DryRun, Filter[] Filters, string[] ImportTaskId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImportSnapshotTasks?DryRun="+DryRun+"&"+String.Join("&", Filters.Select(z => $"Filters={z}"))+"&"+String.Join("&", ImportTaskId.Select(z => $"ImportTaskId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your import snapshot tasks.
		/// POST_DescribeImportSnapshotTasks #Action=DescribeImportSnapshotTasks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeImportSnapshotTasksAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeImportSnapshotTasks?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> | <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code> | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> | <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> | <code>ebsOptimized</code> | <code>sriovNetSupport</code>
		/// GET_DescribeInstanceAttribute #Action=DescribeInstanceAttribute
		/// </summary>
		/// <param name="Attribute"><p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceAttributeAsync(InstanceAttributeName Attribute, bool DryRun, string InstanceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceAttribute?Attribute=" + Attribute+"&DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> | <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code> | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> | <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> | <code>ebsOptimized</code> | <code>sriovNetSupport</code>
		/// POST_DescribeInstanceAttribute #Action=DescribeInstanceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the <code>unlimited</code> credit option, as well as instances that were previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option. For example, if you resize a T2 instance, while it is configured as <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4 instance.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeInstanceCreditSpecifications #Action=DescribeInstanceCreditSpecifications
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> </ul></param>
		/// <param name="InstanceId"><p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceCreditSpecificationsAsync(bool DryRun, Filter[] Filter, string[] InstanceId, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceCreditSpecifications?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the <code>unlimited</code> credit option, as well as instances that were previously configured as T2, T3, and T3a with the <code>unlimited</code> credit option. For example, if you resize a T2 instance, while it is configured as <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4 instance.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeInstanceCreditSpecifications #Action=DescribeInstanceCreditSpecifications
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceCreditSpecificationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceCreditSpecifications?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tag keys that are registered to appear in scheduled event notifications for resources in the current Region.
		/// GET_DescribeInstanceEventNotificationAttributes #Action=DescribeInstanceEventNotificationAttributes
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceEventNotificationAttributesAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceEventNotificationAttributes?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the tag keys that are registered to appear in scheduled event notifications for resources in the current Region.
		/// POST_DescribeInstanceEventNotificationAttributes #Action=DescribeInstanceEventNotificationAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceEventNotificationAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceEventNotificationAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status Checks for Your Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> </ul>
		/// GET_DescribeInstanceStatus #Action=DescribeInstanceStatus
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.instance-event-id</code> - The ID of the event whose date and time you are modifying.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before-deadline</code> - The deadline for starting the event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul></param>
		/// <param name="InstanceId"><p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="IncludeAllInstances"><p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceStatusAsync(Filter[] Filter, string[] InstanceId, int MaxResults, string NextToken, bool DryRun, bool IncludeAllInstances, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceStatus?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&IncludeAllInstances="+IncludeAllInstances+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status Checks for Your Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> </ul>
		/// POST_DescribeInstanceStatus #Action=DescribeInstanceStatus
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceStatusAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceStatus?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.
		/// GET_DescribeInstanceTypeOfferings #Action=DescribeInstanceTypeOfferings
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LocationType">The location type.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>location</code> - This depends on the location type. For example, if the location type is <code>region</code> (default), the location is the Region code (for example, <code>us-east-2</code>.)</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceTypeOfferingsAsync(bool DryRun, string LocationType, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceTypeOfferings?DryRun="+DryRun+"&LocationType=" + (LocationType==null? "" : Uri.EscapeDataString(LocationType))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.
		/// POST_DescribeInstanceTypeOfferings #Action=DescribeInstanceTypeOfferings
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceTypeOfferingsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceTypeOfferings?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the details of the instance types that are offered in a location. The results can be filtered by the attributes of the instance types.
		/// GET_DescribeInstanceTypes #Action=DescribeInstanceTypes
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceType">The instance types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="Filter"><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>auto-recovery-supported</code> - Indicates whether auto recovery is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>bare-metal</code> - Indicates whether it is a bare metal instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>burstable-performance-supported</code> - Indicates whether it is a burstable performance instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>current-generation</code> - Indicates whether this instance type is the latest generation instance type of an instance family. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps</code> - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.baseline-throughput-in-mbps</code> - The baseline throughput performance for an EBS-optimized instance type, in MBps.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.baseline-iops</code> - The baseline input/output storage operations per second for an EBS-optimized instance type.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps</code> - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.maximum-throughput-in-mbps</code> - The maximum throughput performance for an EBS-optimized instance type, in MBps.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-info.maximum-iops</code> - The maximum input/output storage operations per second for an EBS-optimized instance type.</p> </li> <li> <p> <code>ebs-info.ebs-optimized-support</code> - Indicates whether the instance type is EBS-optimized. (<code>supported</code> | <code>unsupported</code> | <code>default</code>)</p> </li> <li> <p> <code>ebs-info.encryption-support</code> - Indicates whether EBS encryption is supported. (<code>supported</code> | <code>unsupported</code>)</p> </li> <li> <p> <code>free-tier-eligible</code> - Indicates whether the instance type is eligible to use in the free tier. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hibernation-supported</code> - Indicates whether On-Demand hibernation is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor used. (<code>nitro</code> | <code>xen</code>)</p> </li> <li> <p> <code>instance-storage-info.disk.count</code> - The number of local disks.</p> </li> <li> <p> <code>instance-storage-info.disk.size-in-gb</code> - The storage size of each instance storage disk, in GB.</p> </li> <li> <p> <code>instance-storage-info.disk.type</code> - The storage technology for the local instance storage disks. (<code>hdd</code> | <code>ssd</code>)</p> </li> <li> <p> <code>instance-storage-info.total-size-in-gb</code> - The total amount of storage available from all local instance storage, in GB.</p> </li> <li> <p> <code>instance-storage-supported</code> - Indicates whether the instance type has local instance storage. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>memory-info.size-in-mib</code> - The memory size.</p> </li> <li> <p> <code>network-info.ena-support</code> - Indicates whether Elastic Network Adapter (ENA) is supported or required. (<code>required</code> | <code>supported</code> | <code>unsupported</code>)</p> </li> <li> <p> <code>network-info.efa-supported</code> - Indicates whether the instance type supports Elastic Fabric Adapter (EFA). (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>network-info.ipv4-addresses-per-interface</code> - The maximum number of private IPv4 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-addresses-per-interface</code> - The maximum number of private IPv6 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-supported</code> - Indicates whether the instance type supports IPv6. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>network-info.maximum-network-interfaces</code> - The maximum number of network interfaces per instance.</p> </li> <li> <p> <code>network-info.network-performance</code> - Describes the network performance.</p> </li> <li> <p> <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock speed, in GHz.</p> </li> <li> <p> <code>vcpu-info.default-cores</code> - The default number of cores for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-threads-per-core</code> - The default number of threads per core for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the instance type.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstanceTypesAsync(bool DryRun, InstanceType[] InstanceType, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceTypes?DryRun="+DryRun+"&"+String.Join("&", InstanceType.Select(z => $"InstanceType={z}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the details of the instance types that are offered in a location. The results can be filtered by the attributes of the instance types.
		/// POST_DescribeInstanceTypes #Action=DescribeInstanceTypes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstanceTypesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstanceTypes?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified instances or all instances.</p> <p>If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.</p> <p>If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
		/// GET_DescribeInstances #Action=DescribeInstances
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>). The value <code>xen</code> is used for both Xen and Nitro hypervisors.</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> </ul></param>
		/// <param name="InstanceId"><p>The instance IDs.</p> <p>Default: Describes all your instances.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInstancesAsync(Filter[] Filter, string[] InstanceId, bool DryRun, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstances?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified instances or all instances.</p> <p>If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.</p> <p>If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
		/// POST_DescribeInstances #Action=DescribeInstances
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInstancesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInstances?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your internet gateways.
		/// GET_DescribeInternetGateways #Action=DescribeInternetGateways
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the internet gateway.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InternetGatewayId"><p>One or more internet gateway IDs.</p> <p>Default: Describes all your internet gateways.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeInternetGatewaysAsync(Filter[] Filter, bool DryRun, string[] InternetGatewayId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInternetGateways?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", InternetGatewayId.Select(z => $"InternetGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your internet gateways.
		/// POST_DescribeInternetGateways #Action=DescribeInternetGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeInternetGatewaysAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeInternetGateways?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your IPv6 address pools.
		/// GET_DescribeIpv6Pools #Action=DescribeIpv6Pools
		/// </summary>
		/// <param name="PoolId">The IDs of the IPv6 address pools.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeIpv6PoolsAsync(string[] PoolId, string NextToken, int MaxResults, bool DryRun, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIpv6Pools?"+String.Join("&", PoolId.Select(z => $"PoolId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your IPv6 address pools.
		/// POST_DescribeIpv6Pools #Action=DescribeIpv6Pools
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeIpv6PoolsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeIpv6Pools?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified key pairs or all of your key pairs.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeKeyPairs #Action=DescribeKeyPairs
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>key-pair-id</code> - The ID of the key pair.</p> </li> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> </ul></param>
		/// <param name="KeyName"><p>The key pair names.</p> <p>Default: Describes all your key pairs.</p></param>
		/// <param name="KeyPairId">The IDs of the key pairs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeKeyPairsAsync(Filter[] Filter, string[] KeyName, string[] KeyPairId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeKeyPairs?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", KeyName.Select(z => $"KeyName={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", KeyPairId.Select(z => $"KeyPairId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified key pairs or all of your key pairs.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeKeyPairs #Action=DescribeKeyPairs
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeKeyPairsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeKeyPairs?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.
		/// GET_DescribeLaunchTemplateVersions #Action=DescribeLaunchTemplateVersions
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LaunchTemplateId">The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateName">The name of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateVersion">One or more versions of the launch template.</param>
		/// <param name="MinVersion">The version number after which to describe launch template versions.</param>
		/// <param name="MaxVersion">The version number up to which to describe launch template versions.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li> <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li> <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li> <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLaunchTemplateVersionsAsync(bool DryRun, string LaunchTemplateId, string LaunchTemplateName, string[] LaunchTemplateVersion, string MinVersion, string MaxVersion, string NextToken, int MaxResults, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLaunchTemplateVersions?DryRun="+DryRun+"&LaunchTemplateId=" + (LaunchTemplateId==null? "" : Uri.EscapeDataString(LaunchTemplateId))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&"+String.Join("&", LaunchTemplateVersion.Select(z => $"LaunchTemplateVersion={Uri.EscapeDataString(z.ToString())}"))+"&MinVersion=" + (MinVersion==null? "" : Uri.EscapeDataString(MinVersion))+"&MaxVersion=" + (MaxVersion==null? "" : Uri.EscapeDataString(MaxVersion))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.
		/// POST_DescribeLaunchTemplateVersions #Action=DescribeLaunchTemplateVersions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLaunchTemplateVersionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLaunchTemplateVersions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more launch templates.
		/// GET_DescribeLaunchTemplates #Action=DescribeLaunchTemplates
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LaunchTemplateId">One or more launch template IDs.</param>
		/// <param name="LaunchTemplateName">One or more launch template names.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template was created.</p> </li> <li> <p> <code>launch-template-name</code> - The name of the launch template.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLaunchTemplatesAsync(bool DryRun, string[] LaunchTemplateId, string[] LaunchTemplateName, Filter[] Filter, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLaunchTemplates?DryRun="+DryRun+"&"+String.Join("&", LaunchTemplateId.Select(z => $"LaunchTemplateId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", LaunchTemplateName.Select(z => $"LaunchTemplateName={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more launch templates.
		/// POST_DescribeLaunchTemplates #Action=DescribeLaunchTemplates
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLaunchTemplatesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLaunchTemplates?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the associations between virtual interface groups and local gateway route tables.
		/// GET_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations #Action=DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
		/// </summary>
		/// <param name="LocalGatewayRouteTableVirtualInterfaceGroupAssociationId">The IDs of the associations.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>local-gateway-id</code> - The ID of a local gateway.</p> </li> <li> <p> <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p> </li> <li> <p> <code>local-gateway-route-table-virtual-interface-group-association-id</code> - The ID of the association.</p> </li> <li> <p> <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID of the virtual interface group.</p> </li> <li> <p> <code>state</code> - The state of the association.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(string[] LocalGatewayRouteTableVirtualInterfaceGroupAssociationId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations?"+String.Join("&", LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.Select(z => $"LocalGatewayRouteTableVirtualInterfaceGroupAssociationId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the associations between virtual interface groups and local gateway route tables.
		/// POST_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations #Action=DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified associations between VPCs and local gateway route tables.
		/// GET_DescribeLocalGatewayRouteTableVpcAssociations #Action=DescribeLocalGatewayRouteTableVpcAssociations
		/// </summary>
		/// <param name="LocalGatewayRouteTableVpcAssociationId">The IDs of the associations.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>local-gateway-id</code> - The ID of a local gateway.</p> </li> <li> <p> <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p> </li> <li> <p> <code>local-gateway-route-table-vpc-association-id</code> - The ID of the association.</p> </li> <li> <p> <code>state</code> - The state of the association.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewayRouteTableVpcAssociationsAsync(string[] LocalGatewayRouteTableVpcAssociationId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTableVpcAssociations?"+String.Join("&", LocalGatewayRouteTableVpcAssociationId.Select(z => $"LocalGatewayRouteTableVpcAssociationId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified associations between VPCs and local gateway route tables.
		/// POST_DescribeLocalGatewayRouteTableVpcAssociations #Action=DescribeLocalGatewayRouteTableVpcAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewayRouteTableVpcAssociationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTableVpcAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.
		/// GET_DescribeLocalGatewayRouteTables #Action=DescribeLocalGatewayRouteTables
		/// </summary>
		/// <param name="LocalGatewayRouteTableId">The IDs of the local gateway route tables.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>local-gateway-id</code> - The ID of a local gateway.</p> </li> <li> <p> <code>local-gateway-route-table-id</code> - The ID of a local gateway route table.</p> </li> <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> <li> <p> <code>state</code> - The state of the local gateway route table.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewayRouteTablesAsync(string[] LocalGatewayRouteTableId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTables?"+String.Join("&", LocalGatewayRouteTableId.Select(z => $"LocalGatewayRouteTableId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.
		/// POST_DescribeLocalGatewayRouteTables #Action=DescribeLocalGatewayRouteTables
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewayRouteTablesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayRouteTables?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified local gateway virtual interface groups.
		/// GET_DescribeLocalGatewayVirtualInterfaceGroups #Action=DescribeLocalGatewayVirtualInterfaceGroups
		/// </summary>
		/// <param name="LocalGatewayVirtualInterfaceGroupId">The IDs of the virtual interface groups.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>local-gateway-id</code> - The ID of a local gateway.</p> </li> <li> <p> <code>local-gateway-virtual-interface-id</code> - The ID of the virtual interface.</p> </li> <li> <p> <code>local-gateway-virtual-interface-group-id</code> - The ID of the virtual interface group.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewayVirtualInterfaceGroupsAsync(string[] LocalGatewayVirtualInterfaceGroupId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayVirtualInterfaceGroups?"+String.Join("&", LocalGatewayVirtualInterfaceGroupId.Select(z => $"LocalGatewayVirtualInterfaceGroupId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified local gateway virtual interface groups.
		/// POST_DescribeLocalGatewayVirtualInterfaceGroups #Action=DescribeLocalGatewayVirtualInterfaceGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewayVirtualInterfaceGroupsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayVirtualInterfaceGroups?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified local gateway virtual interfaces.
		/// GET_DescribeLocalGatewayVirtualInterfaces #Action=DescribeLocalGatewayVirtualInterfaces
		/// </summary>
		/// <param name="LocalGatewayVirtualInterfaceId">The IDs of the virtual interfaces.</param>
		/// <param name="Filter">One or more filters.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewayVirtualInterfacesAsync(string[] LocalGatewayVirtualInterfaceId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayVirtualInterfaces?"+String.Join("&", LocalGatewayVirtualInterfaceId.Select(z => $"LocalGatewayVirtualInterfaceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified local gateway virtual interfaces.
		/// POST_DescribeLocalGatewayVirtualInterfaces #Action=DescribeLocalGatewayVirtualInterfaces
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewayVirtualInterfacesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGatewayVirtualInterfaces?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.
		/// GET_DescribeLocalGateways #Action=DescribeLocalGateways
		/// </summary>
		/// <param name="LocalGatewayId"><p>One or more filters.</p> <ul> <li> <p> <code>local-gateway-id</code> - The ID of a local gateway.</p> </li> <li> <p> <code>local-gateway-route-table-id</code> - The ID of the local gateway route table.</p> </li> <li> <p> <code>local-gateway-route-table-virtual-interface-group-association-id</code> - The ID of the association.</p> </li> <li> <p> <code>local-gateway-route-table-virtual-interface-group-id</code> - The ID of the virtual interface group.</p> </li> <li> <p> <code>outpost-arn</code> - The Amazon Resource Name (ARN) of the Outpost.</p> </li> <li> <p> <code>state</code> - The state of the association.</p> </li> </ul></param>
		/// <param name="Filter">One or more filters.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeLocalGatewaysAsync(string[] LocalGatewayId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGateways?"+String.Join("&", LocalGatewayId.Select(z => $"LocalGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.
		/// POST_DescribeLocalGateways #Action=DescribeLocalGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeLocalGatewaysAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeLocalGateways?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.
		/// GET_DescribeMovingAddresses #Action=DescribeMovingAddresses
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults"><p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="PublicIp">One or more Elastic IP addresses.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeMovingAddressesAsync(Filter[] Filter, bool DryRun, int MaxResults, string NextToken, string[] PublicIp, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeMovingAddresses?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", PublicIp.Select(z => $"PublicIp={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.
		/// POST_DescribeMovingAddresses #Action=DescribeMovingAddresses
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeMovingAddressesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeMovingAddresses?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your NAT gateways.
		/// GET_DescribeNatGateways #Action=DescribeNatGateways
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NatGatewayId">One or more NAT gateway IDs.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNatGatewaysAsync(bool DryRun, Filter[] Filter, int MaxResults, string[] NatGatewayId, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNatGateways?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&"+String.Join("&", NatGatewayId.Select(z => $"NatGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your NAT gateways.
		/// POST_DescribeNatGateways #Action=DescribeNatGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeNatGatewaysAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNatGateways?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your network ACLs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DescribeNetworkAcls #Action=DescribeNetworkAcls
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the network ACL.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkAclId"><p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNetworkAclsAsync(Filter[] Filter, bool DryRun, string[] NetworkAclId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkAcls?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", NetworkAclId.Select(z => $"NetworkAclId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your network ACLs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DescribeNetworkAcls #Action=DescribeNetworkAcls
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeNetworkAclsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkAcls?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a network interface attribute. You can specify only one attribute at a time.
		/// GET_DescribeNetworkInterfaceAttribute #Action=DescribeNetworkInterfaceAttribute
		/// </summary>
		/// <param name="Attribute">The attribute of the network interface. This parameter is required.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNetworkInterfaceAttributeAsync(NetworkInterfaceAttribute Attribute, bool DryRun, string NetworkInterfaceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfaceAttribute?Attribute=" + Attribute+"&DryRun="+DryRun+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a network interface attribute. You can specify only one attribute at a time.
		/// POST_DescribeNetworkInterfaceAttribute #Action=DescribeNetworkInterfaceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeNetworkInterfaceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfaceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the permissions for your network interfaces.
		/// GET_DescribeNetworkInterfacePermissions #Action=DescribeNetworkInterfacePermissions
		/// </summary>
		/// <param name="NetworkInterfacePermissionId">One or more network interface permission IDs.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>network-interface-permission.network-interface-permission-id</code> - The ID of the permission.</p> </li> <li> <p> <code>network-interface-permission.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface-permission.aws-account-id</code> - The AWS account ID.</p> </li> <li> <p> <code>network-interface-permission.aws-service</code> - The AWS service.</p> </li> <li> <p> <code>network-interface-permission.permission</code> - The type of permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).</p> </li> </ul></param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNetworkInterfacePermissionsAsync(string[] NetworkInterfacePermissionId, Filter[] Filter, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfacePermissions?"+String.Join("&", NetworkInterfacePermissionId.Select(z => $"NetworkInterfacePermissionId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the permissions for your network interfaces.
		/// POST_DescribeNetworkInterfacePermissions #Action=DescribeNetworkInterfacePermissions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeNetworkInterfacePermissionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfacePermissions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your network interfaces.
		/// GET_DescribeNetworkInterfaces #Action=DescribeNetworkInterfaces
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IPv4 addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IPv4 address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface (IPv4).</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>; if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkInterfaceId"><p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p></param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeNetworkInterfacesAsync(Filter[] Filter, bool DryRun, string[] NetworkInterfaceId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfaces?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", NetworkInterfaceId.Select(z => $"NetworkInterfaceId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your network interfaces.
		/// POST_DescribeNetworkInterfaces #Action=DescribeNetworkInterfaces
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeNetworkInterfacesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeNetworkInterfaces?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified placement groups or all of your placement groups. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_DescribePlacementGroups #Action=DescribePlacementGroups
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code> | <code>spread</code> | <code>partition</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupName"><p>The names of the placement groups.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p></param>
		/// <param name="GroupId">The IDs of the placement groups.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribePlacementGroupsAsync(Filter[] Filter, bool DryRun, string[] GroupName, string[] GroupId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePlacementGroups?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", GroupName.Select(z => $"GroupName={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", GroupId.Select(z => $"GroupId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified placement groups or all of your placement groups. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_DescribePlacementGroups #Action=DescribePlacementGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribePlacementGroupsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePlacementGroups?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.
		/// GET_DescribePrefixLists #Action=DescribePrefixLists
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="PrefixListId">One or more prefix list IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribePrefixListsAsync(bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string[] PrefixListId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePrefixLists?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", PrefixListId.Select(z => $"PrefixListId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.
		/// POST_DescribePrefixLists #Action=DescribePrefixLists
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribePrefixListsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePrefixLists?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. </p> <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
		/// GET_DescribePrincipalIdFormat #Action=DescribePrincipalIdFormat
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Resource">The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. </param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribePrincipalIdFormatAsync(bool DryRun, string[] Resource, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePrincipalIdFormat?DryRun="+DryRun+"&"+String.Join("&", Resource.Select(z => $"Resource={Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. </p> <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
		/// POST_DescribePrincipalIdFormat #Action=DescribePrincipalIdFormat
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribePrincipalIdFormatAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePrincipalIdFormat?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified IPv4 address pools.
		/// GET_DescribePublicIpv4Pools #Action=DescribePublicIpv4Pools
		/// </summary>
		/// <param name="PoolId">The IDs of the address pools.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_DescribePublicIpv4PoolsAsync(string[] PoolId, string NextToken, int MaxResults, Filter[] Filter, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePublicIpv4Pools?"+String.Join("&", PoolId.Select(z => $"PoolId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified IPv4 address pools.
		/// POST_DescribePublicIpv4Pools #Action=DescribePublicIpv4Pools
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribePublicIpv4PoolsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribePublicIpv4Pools?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Regions that are enabled for your account, or all Regions.</p> <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region"> Regions and Endpoints</a>.</p> <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing AWS Regions</a> in the <i>AWS General Reference</i>.</p>
		/// GET_DescribeRegions #Action=DescribeRegions
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>opt-in-status</code> - The opt-in status of the Region (<code>opt-in-not-required</code> | <code>opted-in</code> | <code>not-opted-in</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p> </li> </ul></param>
		/// <param name="RegionName">The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="AllRegions">Indicates whether to display all Regions, including Regions that are disabled for your account.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeRegionsAsync(Filter[] Filter, string[] RegionName, bool DryRun, bool AllRegions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRegions?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", RegionName.Select(z => $"RegionName={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&AllRegions="+AllRegions+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Regions that are enabled for your account, or all Regions.</p> <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region"> Regions and Endpoints</a>.</p> <p>For information about enabling and disabling Regions for your account, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande-manage.html">Managing AWS Regions</a> in the <i>AWS General Reference</i>.</p>
		/// POST_DescribeRegions #Action=DescribeRegions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeRegionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRegions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeReservedInstances #Action=DescribeReservedInstances
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul></param>
		/// <param name="OfferingClass">Describes whether the Reserved Instance is Standard or Convertible.</param>
		/// <param name="ReservedInstancesId"><p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="OfferingType">The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedInstancesAsync(Filter[] Filter, OfferingClassType OfferingClass, string[] ReservedInstancesId, bool DryRun, string OfferingType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstances?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&OfferingClass=" + OfferingClass+"&"+String.Join("&", ReservedInstancesId.Select(z => $"ReservedInstancesId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&OfferingType=" + (OfferingType==null? "" : Uri.EscapeDataString(OfferingType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeReservedInstances #Action=DescribeReservedInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeReservedInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeReservedInstancesListings #Action=DescribeReservedInstancesListings
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul></param>
		/// <param name="ReservedInstancesId">One or more Reserved Instance IDs.</param>
		/// <param name="ReservedInstancesListingId">One or more Reserved Instance listing IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedInstancesListingsAsync(Filter[] Filter, string ReservedInstancesId, string ReservedInstancesListingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesListings?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&ReservedInstancesId=" + (ReservedInstancesId==null? "" : Uri.EscapeDataString(ReservedInstancesId))+"&ReservedInstancesListingId=" + (ReservedInstancesListingId==null? "" : Uri.EscapeDataString(ReservedInstancesListingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeReservedInstancesListings #Action=DescribeReservedInstancesListings
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeReservedInstancesListingsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesListings?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
		/// GET_DescribeReservedInstancesModifications #Action=DescribeReservedInstancesModifications
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul></param>
		/// <param name="ReservedInstancesModificationId">IDs for the submitted modification request.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedInstancesModificationsAsync(Filter[] Filter, string[] ReservedInstancesModificationId, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesModifications?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", ReservedInstancesModificationId.Select(z => $"ReservedInstancesModificationId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
		/// POST_DescribeReservedInstancesModifications #Action=DescribeReservedInstancesModifications
		/// </summary>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeReservedInstancesModificationsAsync(string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesModifications?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeReservedInstancesOfferings #Action=DescribeReservedInstancesOfferings
		/// </summary>
		/// <param name="AvailabilityZone">The Availability Zone in which the Reserved Instance can be used.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul></param>
		/// <param name="IncludeMarketplace">Include Reserved Instance Marketplace offerings in the response.</param>
		/// <param name="InstanceType">The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="MaxDuration"><p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p></param>
		/// <param name="MaxInstanceCount"><p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p></param>
		/// <param name="MinDuration"><p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p></param>
		/// <param name="OfferingClass">The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</param>
		/// <param name="ProductDescription">The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.</param>
		/// <param name="ReservedInstancesOfferingId">One or more Reserved Instances offering IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceTenancy"><p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p></param>
		/// <param name="MaxResults"><p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p></param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="OfferingType">The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type. </param>
		/// <returns>Success</returns>
		public async Task GET_DescribeReservedInstancesOfferingsAsync(
					string AvailabilityZone, 
					Filter[] Filter, 
					bool IncludeMarketplace, 
					string InstanceType, 
					int MaxDuration, 
					int MaxInstanceCount, 
					int MinDuration, 
					OfferingClassType OfferingClass, 
					string ProductDescription, 
					string[] ReservedInstancesOfferingId, 
					bool DryRun, 
					Tenancy InstanceTenancy, 
					int MaxResults, 
					string NextToken, 
					string OfferingType, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesOfferings?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&IncludeMarketplace="+IncludeMarketplace+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&MaxDuration="+MaxDuration+"&MaxInstanceCount="+MaxInstanceCount+"&MinDuration="+MinDuration+"&OfferingClass=" + OfferingClass+"&ProductDescription=" + (ProductDescription==null? "" : Uri.EscapeDataString(ProductDescription))+"&"+String.Join("&", ReservedInstancesOfferingId.Select(z => $"ReservedInstancesOfferingId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&InstanceTenancy=" + InstanceTenancy+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&OfferingType=" + (OfferingType==null? "" : Uri.EscapeDataString(OfferingType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeReservedInstancesOfferings #Action=DescribeReservedInstancesOfferings
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeReservedInstancesOfferingsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeReservedInstancesOfferings?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DescribeRouteTables #Action=DescribeRouteTables
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RouteTableId"><p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeRouteTablesAsync(Filter[] Filter, bool DryRun, string[] RouteTableId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRouteTables?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", RouteTableId.Select(z => $"RouteTableId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DescribeRouteTables #Action=DescribeRouteTables
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeRouteTablesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeRouteTables?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
		/// GET_DescribeScheduledInstanceAvailability #Action=DescribeScheduledInstanceAvailability
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul></param>
		/// <param name="FirstSlotStartTimeRange">The time period for the first schedule to start.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="MaxSlotDurationInHours">The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</param>
		/// <param name="MinSlotDurationInHours">The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="Recurrence">The schedule recurrence.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScheduledInstanceAvailabilityAsync(bool DryRun, Filter[] Filter, string FirstSlotStartTimeRange, int MaxResults, int MaxSlotDurationInHours, int MinSlotDurationInHours, string NextToken, string Recurrence, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledInstanceAvailability?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&FirstSlotStartTimeRange=" + (FirstSlotStartTimeRange==null? "" : Uri.EscapeDataString(FirstSlotStartTimeRange))+"&MaxResults="+MaxResults+"&MaxSlotDurationInHours="+MaxSlotDurationInHours+"&MinSlotDurationInHours="+MinSlotDurationInHours+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Recurrence=" + (Recurrence==null? "" : Uri.EscapeDataString(Recurrence))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
		/// POST_DescribeScheduledInstanceAvailability #Action=DescribeScheduledInstanceAvailability
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeScheduledInstanceAvailabilityAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledInstanceAvailability?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified Scheduled Instances or all your Scheduled Instances.
		/// GET_DescribeScheduledInstances #Action=DescribeScheduledInstances
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="ScheduledInstanceId">The Scheduled Instance IDs.</param>
		/// <param name="SlotStartTimeRange">The time period for the first schedule to start.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeScheduledInstancesAsync(bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string[] ScheduledInstanceId, string SlotStartTimeRange, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledInstances?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", ScheduledInstanceId.Select(z => $"ScheduledInstanceId={Uri.EscapeDataString(z.ToString())}"))+"&SlotStartTimeRange=" + (SlotStartTimeRange==null? "" : Uri.EscapeDataString(SlotStartTimeRange))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified Scheduled Instances or all your Scheduled Instances.
		/// POST_DescribeScheduledInstances #Action=DescribeScheduledInstances
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeScheduledInstancesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeScheduledInstances?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.
		/// GET_DescribeSecurityGroupReferences #Action=DescribeSecurityGroupReferences
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupId">The IDs of the security groups in your account.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSecurityGroupReferencesAsync(bool DryRun, string[] GroupId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSecurityGroupReferences?DryRun="+DryRun+"&"+String.Join("&", GroupId.Select(z => $"GroupId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.
		/// POST_DescribeSecurityGroupReferences #Action=DescribeSecurityGroupReferences
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeSecurityGroupReferencesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSecurityGroupReferences?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified security groups or all of your security groups.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DescribeSecurityGroups #Action=DescribeSecurityGroups
		/// </summary>
		/// <param name="Filter"><p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.from-port</code> - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>egress.ip-permission.group-id</code> - The ID of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.group-name</code> - The name of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which a security group rule allows outbound access.</p> </li> <li> <p> <code>egress.ip-permission.protocol</code> - The IP protocol for an outbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>egress.ip-permission.to-port</code> - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>egress.ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.from-port</code> - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service from which a security group rule allows inbound access.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for an inbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul></param>
		/// <param name="GroupId"><p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p></param>
		/// <param name="GroupName"><p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSecurityGroupsAsync(Filter[] Filter, string[] GroupId, string[] GroupName, bool DryRun, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSecurityGroups?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", GroupId.Select(z => $"GroupId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", GroupName.Select(z => $"GroupName={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified security groups or all of your security groups.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DescribeSecurityGroups #Action=DescribeSecurityGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSecurityGroupsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSecurityGroups?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeSnapshotAttribute #Action=DescribeSnapshotAttribute
		/// </summary>
		/// <param name="Attribute">The snapshot attribute you would like to view.</param>
		/// <param name="SnapshotId">The ID of the EBS snapshot.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotAttributeAsync(SnapshotAttributeName Attribute, string SnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshotAttribute?Attribute=" + Attribute+"&SnapshotId=" + (SnapshotId==null? "" : Uri.EscapeDataString(SnapshotId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeSnapshotAttribute #Action=DescribeSnapshotAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeSnapshotAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshotAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.</p> <p>The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All AWS accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific AWS account.</p> </li> <li> <p> <i>implicit</i>: An AWS account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining results.</p> <p>To get the state of fast snapshot restores for a snapshot, use <a>DescribeFastSnapshotRestores</a>.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeSnapshots #Action=DescribeSnapshots
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the snapshot is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>self</code> | <code>all</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.</param>
		/// <param name="NextToken">The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</param>
		/// <param name="Owner">Describes the snapshots owned by these owners.</param>
		/// <param name="RestorableBy">The IDs of the AWS accounts that can create volumes from the snapshot.</param>
		/// <param name="SnapshotId"><p>The snapshot IDs.</p> <p>Default: Describes the snapshots for which you have create volume permissions.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSnapshotsAsync(Filter[] Filter, int MaxResults, string NextToken, string[] Owner, string[] RestorableBy, string[] SnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshots?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", Owner.Select(z => $"Owner={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RestorableBy.Select(z => $"RestorableBy={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SnapshotId.Select(z => $"SnapshotId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.</p> <p>The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All AWS accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific AWS account.</p> </li> <li> <p> <i>implicit</i>: An AWS account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining results.</p> <p>To get the state of fast snapshot restores for a snapshot, use <a>DescribeFastSnapshotRestores</a>.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeSnapshots #Action=DescribeSnapshots
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSnapshotsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSnapshots?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// GET_DescribeSpotDatafeedSubscription #Action=DescribeSpotDatafeedSubscription
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotDatafeedSubscriptionAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotDatafeedSubscription?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
		/// POST_DescribeSpotDatafeedSubscription #Action=DescribeSpotDatafeedSubscription
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotDatafeedSubscriptionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotDatafeedSubscription?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the running instances for the specified Spot Fleet.
		/// GET_DescribeSpotFleetInstances #Action=DescribeSpotFleetInstances
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="SpotFleetRequestId">The ID of the Spot Fleet request.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotFleetInstancesAsync(bool DryRun, int MaxResults, string NextToken, string SpotFleetRequestId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetInstances?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&SpotFleetRequestId=" + (SpotFleetRequestId==null? "" : Uri.EscapeDataString(SpotFleetRequestId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the running instances for the specified Spot Fleet.
		/// POST_DescribeSpotFleetInstances #Action=DescribeSpotFleetInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotFleetInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the events for the specified Spot Fleet request during the specified time.</p> <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p>
		/// GET_DescribeSpotFleetRequestHistory #Action=DescribeSpotFleetRequestHistory
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EventType">The type of events to describe. By default, all events are described.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="SpotFleetRequestId">The ID of the Spot Fleet request.</param>
		/// <param name="StartTime">The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotFleetRequestHistoryAsync(bool DryRun, EventType EventType, int MaxResults, string NextToken, string SpotFleetRequestId, System.DateTimeOffset StartTime, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetRequestHistory?DryRun="+DryRun+"&EventType=" + EventType+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&SpotFleetRequestId=" + (SpotFleetRequestId==null? "" : Uri.EscapeDataString(SpotFleetRequestId))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the events for the specified Spot Fleet request during the specified time.</p> <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p>
		/// POST_DescribeSpotFleetRequestHistory #Action=DescribeSpotFleetRequestHistory
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotFleetRequestHistoryAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetRequestHistory?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes your Spot Fleet requests.</p> <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
		/// GET_DescribeSpotFleetRequests #Action=DescribeSpotFleetRequests
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="SpotFleetRequestId">The IDs of the Spot Fleet requests.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotFleetRequestsAsync(bool DryRun, int MaxResults, string NextToken, string[] SpotFleetRequestId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetRequests?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", SpotFleetRequestId.Select(z => $"SpotFleetRequestId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes your Spot Fleet requests.</p> <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
		/// POST_DescribeSpotFleetRequests #Action=DescribeSpotFleetRequests
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotFleetRequestsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotFleetRequests?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Spot Instance requests.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining results.</p> <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
		/// GET_DescribeSpotInstanceRequests #Action=DescribeSpotInstanceRequests
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li> <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Request Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SpotInstanceRequestId">One or more Spot Instance request IDs.</param>
		/// <param name="NextToken">The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotInstanceRequestsAsync(Filter[] Filter, bool DryRun, string[] SpotInstanceRequestId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotInstanceRequests?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", SpotInstanceRequestId.Select(z => $"SpotInstanceRequestId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified Spot Instance requests.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances">DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining results.</p> <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
		/// POST_DescribeSpotInstanceRequests #Action=DescribeSpotInstanceRequests
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotInstanceRequestsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotInstanceRequests?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance Pricing History</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.</p>
		/// GET_DescribeSpotPriceHistory #Action=DescribeSpotPriceHistory
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The time stamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul></param>
		/// <param name="AvailabilityZone">Filters the results by the specified Availability Zone.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EndTime">The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</param>
		/// <param name="InstanceType">Filters the results by the specified instance types.</param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token for the next set of results.</param>
		/// <param name="ProductDescription">Filters the results by the specified basic product descriptions.</param>
		/// <param name="StartTime">The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSpotPriceHistoryAsync(Filter[] Filter, string AvailabilityZone, bool DryRun, System.DateTimeOffset EndTime, InstanceType[] InstanceType, int MaxResults, string NextToken, string[] ProductDescription, System.DateTimeOffset StartTime, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotPriceHistory?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&DryRun="+DryRun+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", InstanceType.Select(z => $"InstanceType={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", ProductDescription.Select(z => $"ProductDescription={Uri.EscapeDataString(z.ToString())}"))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance Pricing History</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.</p>
		/// POST_DescribeSpotPriceHistory #Action=DescribeSpotPriceHistory
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSpotPriceHistoryAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSpotPriceHistory?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.
		/// GET_DescribeStaleSecurityGroups #Action=DescribeStaleSecurityGroups
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a prior call.)</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeStaleSecurityGroupsAsync(bool DryRun, int MaxResults, string NextToken, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStaleSecurityGroups?DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.
		/// POST_DescribeStaleSecurityGroups #Action=DescribeStaleSecurityGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeStaleSecurityGroupsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeStaleSecurityGroups?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DescribeSubnets #Action=DescribeSubnets
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for the subnet. You can also use <code>availabilityZone</code> as the filter name.</p> </li> <li> <p> <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet. You can also use <code>availabilityZoneId</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IPv4 addresses in the subnet that are available.</p> </li> <li> <p> <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidrBlock</code> as the filter names.</p> </li> <li> <p> <code>default-for-az</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>defaultForAz</code> as the filter name.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - An association ID for an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the subnet.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul></param>
		/// <param name="SubnetId"><p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeSubnetsAsync(Filter[] Filter, string[] SubnetId, bool DryRun, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSubnets?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", SubnetId.Select(z => $"SubnetId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DescribeSubnets #Action=DescribeSubnets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeSubnetsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeSubnets?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified tags for your EC2 resources.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeTags #Action=DescribeTags
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>host-reservation</code> | <code>image</code> | <code>instance</code> | <code>internet-gateway</code> | <code>key-pair</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>placement-group</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-endpoint</code> | <code>vpc-endpoint-service</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTagsAsync(bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTags?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified tags for your EC2 resources.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeTags #Action=DescribeTags
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTagsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTags?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Traffic Mirror filters.
		/// GET_DescribeTrafficMirrorFilters #Action=DescribeTrafficMirrorFilters
		/// </summary>
		/// <param name="TrafficMirrorFilterId">The ID of the Traffic Mirror filter.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror filter description.</p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTrafficMirrorFiltersAsync(string[] TrafficMirrorFilterId, bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorFilters?"+String.Join("&", TrafficMirrorFilterId.Select(z => $"TrafficMirrorFilterId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Traffic Mirror filters.
		/// POST_DescribeTrafficMirrorFilters #Action=DescribeTrafficMirrorFilters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTrafficMirrorFiltersAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorFilters?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
		/// GET_DescribeTrafficMirrorSessions #Action=DescribeTrafficMirrorSessions
		/// </summary>
		/// <param name="TrafficMirrorSessionId">The ID of the Traffic Mirror session.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror session description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>packet-length</code>: The assigned number of packets to mirror. </p> </li> <li> <p> <code>session-number</code>: The assigned session number. </p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> <li> <p> <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> <li> <p> <code>virtual-network-id</code>: The virtual network ID of the Traffic Mirror session.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTrafficMirrorSessionsAsync(string[] TrafficMirrorSessionId, bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorSessions?"+String.Join("&", TrafficMirrorSessionId.Select(z => $"TrafficMirrorSessionId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
		/// POST_DescribeTrafficMirrorSessions #Action=DescribeTrafficMirrorSessions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTrafficMirrorSessionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorSessions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information about one or more Traffic Mirror targets.
		/// GET_DescribeTrafficMirrorTargets #Action=DescribeTrafficMirrorTargets
		/// </summary>
		/// <param name="TrafficMirrorTargetId">The ID of the Traffic Mirror targets.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror target description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTrafficMirrorTargetsAsync(string[] TrafficMirrorTargetId, bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorTargets?"+String.Join("&", TrafficMirrorTargetId.Select(z => $"TrafficMirrorTargetId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Information about one or more Traffic Mirror targets.
		/// POST_DescribeTrafficMirrorTargets #Action=DescribeTrafficMirrorTargets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTrafficMirrorTargetsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTrafficMirrorTargets?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
		/// GET_DescribeTransitGatewayAttachments #Action=DescribeTransitGatewayAttachments
		/// </summary>
		/// <param name="TransitGatewayAttachmentIds">The IDs of the attachments.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li> <li> <p> <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-owner-id</code> - The ID of the AWS account that owns the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewayAttachmentsAsync(string[] TransitGatewayAttachmentIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayAttachments?"+String.Join("&", TransitGatewayAttachmentIds.Select(z => $"TransitGatewayAttachmentIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
		/// POST_DescribeTransitGatewayAttachments #Action=DescribeTransitGatewayAttachments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewayAttachmentsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayAttachments?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateway multicast domains.
		/// GET_DescribeTransitGatewayMulticastDomains #Action=DescribeTransitGatewayMulticastDomains
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainIds">The ID of the transit gateway multicast domain.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the transit gateway multicast domain. Valid values are <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-multicast-domain-id</code> - The ID of the transit gateway multicast domain.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewayMulticastDomainsAsync(string[] TransitGatewayMulticastDomainIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayMulticastDomains?"+String.Join("&", TransitGatewayMulticastDomainIds.Select(z => $"TransitGatewayMulticastDomainIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateway multicast domains.
		/// POST_DescribeTransitGatewayMulticastDomains #Action=DescribeTransitGatewayMulticastDomains
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewayMulticastDomainsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayMulticastDomains?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your transit gateway peering attachments.
		/// GET_DescribeTransitGatewayPeeringAttachments #Action=DescribeTransitGatewayPeeringAttachments
		/// </summary>
		/// <param name="TransitGatewayAttachmentIds">One or more IDs of the transit gateway peering attachments.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the transit gateway attachment.</p> </li> <li> <p> <code>local-owner-id</code> - The ID of your AWS account.</p> </li> <li> <p> <code>remote-owner-id</code> - The ID of the AWS account in the remote Region that owns the transit gateway.</p> </li> <li> <p> <code>state</code> - The state of the peering attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewayPeeringAttachmentsAsync(string[] TransitGatewayAttachmentIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayPeeringAttachments?"+String.Join("&", TransitGatewayAttachmentIds.Select(z => $"TransitGatewayAttachmentIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes your transit gateway peering attachments.
		/// POST_DescribeTransitGatewayPeeringAttachments #Action=DescribeTransitGatewayPeeringAttachments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewayPeeringAttachmentsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayPeeringAttachments?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
		/// GET_DescribeTransitGatewayRouteTables #Action=DescribeTransitGatewayRouteTables
		/// </summary>
		/// <param name="TransitGatewayRouteTableIds">The IDs of the transit gateway route tables.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>default-association-route-table</code> - Indicates whether this is the default association route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>default-propagation-route-table</code> - Indicates whether this is the default propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewayRouteTablesAsync(string[] TransitGatewayRouteTableIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayRouteTables?"+String.Join("&", TransitGatewayRouteTableIds.Select(z => $"TransitGatewayRouteTableIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
		/// POST_DescribeTransitGatewayRouteTables #Action=DescribeTransitGatewayRouteTables
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewayRouteTablesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayRouteTables?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
		/// GET_DescribeTransitGatewayVpcAttachments #Action=DescribeTransitGatewayVpcAttachments
		/// </summary>
		/// <param name="TransitGatewayAttachmentIds">The IDs of the attachments.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewayVpcAttachmentsAsync(string[] TransitGatewayAttachmentIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayVpcAttachments?"+String.Join("&", TransitGatewayAttachmentIds.Select(z => $"TransitGatewayAttachmentIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
		/// POST_DescribeTransitGatewayVpcAttachments #Action=DescribeTransitGatewayVpcAttachments
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewayVpcAttachmentsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGatewayVpcAttachments?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
		/// GET_DescribeTransitGateways #Action=DescribeTransitGateways
		/// </summary>
		/// <param name="TransitGatewayIds">The IDs of the transit gateways.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p> </li> <li> <p> <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p> </li> <li> <p> <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p> </li> <li> <p> <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically associated with the default association route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeTransitGatewaysAsync(string[] TransitGatewayIds, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGateways?"+String.Join("&", TransitGatewayIds.Select(z => $"TransitGatewayIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
		/// POST_DescribeTransitGateways #Action=DescribeTransitGateways
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeTransitGatewaysAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeTransitGateways?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeVolumeAttribute #Action=DescribeVolumeAttribute
		/// </summary>
		/// <param name="Attribute">The attribute of the volume. This parameter is required.</param>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVolumeAttributeAsync(VolumeAttributeName Attribute, string VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumeAttribute?Attribute=" + Attribute+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeVolumeAttribute #Action=DescribeVolumeAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVolumeAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumeAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring the Status of Your Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume by calling the <a>EnableVolumeIO</a> action and then check the volume for data consistency.</p> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p>
		/// GET_DescribeVolumeStatus #Action=DescribeVolumeStatus
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</param>
		/// <param name="NextToken">The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</param>
		/// <param name="VolumeId"><p>The IDs of the volumes.</p> <p>Default: Describes all your volumes.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVolumeStatusAsync(Filter[] Filter, int MaxResults, string NextToken, string[] VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumeStatus?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", VolumeId.Select(z => $"VolumeId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring the Status of Your Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume by calling the <a>EnableVolumeIO</a> action and then check the volume for data consistency.</p> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p>
		/// POST_DescribeVolumeStatus #Action=DescribeVolumeStatus
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVolumeStatusAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumeStatus?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified EBS volumes or all of your EBS volumes.</p> <p>If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining results.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeVolumes #Action=DescribeVolumes
		/// </summary>
		/// <param name="Filter"><p>The filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name specified in the block device mapping (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>multi-attach-enabled</code> - Indicates whether the volume is enabled for Multi-Attach (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>fast-restored</code> - Indicates whether the volume was created from a snapshot that is enabled for fast snapshot restore (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul></param>
		/// <param name="VolumeId">The volume IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="MaxResults">The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 500; if <code>MaxResults</code> is given a value larger than 500, only 500 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</param>
		/// <param name="NextToken">The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVolumesAsync(Filter[] Filter, string[] VolumeId, bool DryRun, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumes?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", VolumeId.Select(z => $"VolumeId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the specified EBS volumes or all of your EBS volumes.</p> <p>If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining results.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeVolumes #Action=DescribeVolumes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVolumesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumes?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Reports the current modification status of EBS volumes.</p> <p>Current-generation EBS volumes support modification of attributes including type, size, and (for <code>io1</code> volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be <code>modifying</code>, <code>optimizing</code>, <code>completed</code>, or <code>failed</code>. If a volume has never been modified, then certain elements of the returned <code>VolumeModification</code> objects are null. </p> <p> You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications"</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DescribeVolumesModifications #Action=DescribeVolumesModifications
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VolumeId">The IDs of the volumes for which in-progress modifications will be described.</param>
		/// <param name="Filter">The filters. Supported filters: <code>volume-id</code> | <code>modification-state</code> | <code>target-size</code> | <code>target-iops</code> | <code>target-volume-type</code> | <code>original-size</code> | <code>original-iops</code> | <code>original-volume-type</code> | <code>start-time</code> | <code>originalMultiAttachEnabled</code> | <code>targetMultiAttachEnabled</code>. </param>
		/// <param name="NextToken">The <code>nextToken</code> value returned by a previous paginated request.</param>
		/// <param name="MaxResults">The maximum number of results (up to a limit of 500) to be returned in a paginated request.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVolumesModificationsAsync(bool DryRun, string[] VolumeId, Filter[] Filter, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumesModifications?DryRun="+DryRun+"&"+String.Join("&", VolumeId.Select(z => $"VolumeId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Reports the current modification status of EBS volumes.</p> <p>Current-generation EBS volumes support modification of attributes including type, size, and (for <code>io1</code> volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be <code>modifying</code>, <code>optimizing</code>, <code>completed</code>, or <code>failed</code>. If a volume has never been modified, then certain elements of the returned <code>VolumeModification</code> objects are null. </p> <p> You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications"</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DescribeVolumesModifications #Action=DescribeVolumesModifications
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVolumesModificationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVolumesModifications?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
		/// GET_DescribeVpcAttribute #Action=DescribeVpcAttribute
		/// </summary>
		/// <param name="Attribute">The VPC attribute.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcAttributeAsync(VpcAttributeName Attribute, string VpcId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcAttribute?Attribute=" + Attribute+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
		/// POST_DescribeVpcAttribute #Action=DescribeVpcAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the ClassicLink status of one or more VPCs.
		/// GET_DescribeVpcClassicLink #Action=DescribeVpcClassicLink
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">One or more VPCs for which you want to describe the ClassicLink status.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcClassicLinkAsync(Filter[] Filter, bool DryRun, string[] VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcClassicLink?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", VpcId.Select(z => $"VpcId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the ClassicLink status of one or more VPCs.
		/// POST_DescribeVpcClassicLink #Action=DescribeVpcClassicLink
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcClassicLinkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcClassicLink?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_DescribeVpcClassicLinkDnsSupport #Action=DescribeVpcClassicLinkDnsSupport
		/// </summary>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="VpcIds">One or more VPC IDs.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcClassicLinkDnsSupportAsync(int MaxResults, string NextToken, string[] VpcIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcClassicLinkDnsSupport?MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&"+String.Join("&", VpcIds.Select(z => $"VpcIds={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_DescribeVpcClassicLinkDnsSupport #Action=DescribeVpcClassicLinkDnsSupport
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcClassicLinkDnsSupportAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcClassicLinkDnsSupport?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the connection notifications for VPC endpoints and VPC endpoint services.
		/// GET_DescribeVpcEndpointConnectionNotifications #Action=DescribeVpcEndpointConnectionNotifications
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ConnectionNotificationId">The ID of the notification.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>connection-notification-arn</code> - The ARN of the SNS topic for the notification.</p> </li> <li> <p> <code>connection-notification-id</code> - The ID of the notification.</p> </li> <li> <p> <code>connection-notification-state</code> - The state of the notification (<code>Enabled</code> | <code>Disabled</code>).</p> </li> <li> <p> <code>connection-notification-type</code> - The type of notification (<code>Topic</code>).</p> </li> <li> <p> <code>service-id</code> - The ID of the endpoint service.</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value.</param>
		/// <param name="NextToken">The token to request the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointConnectionNotificationsAsync(bool DryRun, string ConnectionNotificationId, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointConnectionNotifications?DryRun="+DryRun+"&ConnectionNotificationId=" + (ConnectionNotificationId==null? "" : Uri.EscapeDataString(ConnectionNotificationId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the connection notifications for VPC endpoints and VPC endpoint services.
		/// POST_DescribeVpcEndpointConnectionNotifications #Action=DescribeVpcEndpointConnectionNotifications
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointConnectionNotificationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointConnectionNotifications?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
		/// GET_DescribeVpcEndpointConnections #Action=DescribeVpcEndpointConnections
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>vpc-endpoint-owner</code> - The AWS account number of the owner of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the endpoint.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointConnectionsAsync(bool DryRun, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointConnections?DryRun="+DryRun+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
		/// POST_DescribeVpcEndpointConnections #Action=DescribeVpcEndpointConnections
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointConnectionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointConnections?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the VPC endpoint service configurations in your account (your services).
		/// GET_DescribeVpcEndpointServiceConfigurations #Action=DescribeVpcEndpointServiceConfigurations
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The IDs of one or more services.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>service-state</code> - The state of the service (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> | <code>Failed</code>). </p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointServiceConfigurationsAsync(bool DryRun, string[] ServiceId, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServiceConfigurations?DryRun="+DryRun+"&"+String.Join("&", ServiceId.Select(z => $"ServiceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the VPC endpoint service configurations in your account (your services).
		/// POST_DescribeVpcEndpointServiceConfigurations #Action=DescribeVpcEndpointServiceConfigurations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointServiceConfigurationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServiceConfigurations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
		/// GET_DescribeVpcEndpointServicePermissions #Action=DescribeVpcEndpointServicePermissions
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the service.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>principal</code> - The ARN of the principal.</p> </li> <li> <p> <code>principal-type</code> - The principal type (<code>All</code> | <code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code> | <code>User</code> | <code>Role</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1,000; if <code>MaxResults</code> is given a value larger than 1,000, only 1,000 results are returned.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointServicePermissionsAsync(bool DryRun, string ServiceId, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServicePermissions?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
		/// POST_DescribeVpcEndpointServicePermissions #Action=DescribeVpcEndpointServicePermissions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointServicePermissionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServicePermissions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes available services to which you can create a VPC endpoint.
		/// GET_DescribeVpcEndpointServices #Action=DescribeVpcEndpointServices
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceName">One or more service names.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="MaxResults"><p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p></param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a prior call.)</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointServicesAsync(bool DryRun, string[] ServiceName, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServices?DryRun="+DryRun+"&"+String.Join("&", ServiceName.Select(z => $"ServiceName={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes available services to which you can create a VPC endpoint.
		/// POST_DescribeVpcEndpointServices #Action=DescribeVpcEndpointServices
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointServicesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpointServices?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPC endpoints.
		/// GET_DescribeVpcEndpoints #Action=DescribeVpcEndpoints
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcEndpointId">One or more endpoint IDs.</param>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></param>
		/// <param name="MaxResults"><p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1,000, we return only 1,000 items.</p></param>
		/// <param name="NextToken">The token for the next set of items to return. (You received this token from a prior call.)</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcEndpointsAsync(bool DryRun, string[] VpcEndpointId, Filter[] Filter, int MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpoints?DryRun="+DryRun+"&"+String.Join("&", VpcEndpointId.Select(z => $"VpcEndpointId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPC endpoints.
		/// POST_DescribeVpcEndpoints #Action=DescribeVpcEndpoints
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcEndpointsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcEndpoints?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPC peering connections.
		/// GET_DescribeVpcPeeringConnections #Action=DescribeVpcPeeringConnections
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the requester's VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcPeeringConnectionId"><p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p></param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcPeeringConnectionsAsync(Filter[] Filter, bool DryRun, string[] VpcPeeringConnectionId, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcPeeringConnections?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&DryRun="+DryRun+"&"+String.Join("&", VpcPeeringConnectionId.Select(z => $"VpcPeeringConnectionId={Uri.EscapeDataString(z.ToString())}"))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPC peering connections.
		/// POST_DescribeVpcPeeringConnections #Action=DescribeVpcPeeringConnections
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcPeeringConnectionsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcPeeringConnections?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPCs.
		/// GET_DescribeVpcs #Action=DescribeVpcs
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.association-id</code> - The association ID for an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-pool</code> - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - The association ID for an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul></param>
		/// <param name="VpcId"><p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpcsAsync(Filter[] Filter, string[] VpcId, bool DryRun, string NextToken, int MaxResults, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcs?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", VpcId.Select(z => $"VpcId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your VPCs.
		/// POST_DescribeVpcs #Action=DescribeVpcs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpcsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpcs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your VPN connections.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_DescribeVpnConnections #Action=DescribeVpnConnections
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway associated with the VPN connection.</p> </li> </ul></param>
		/// <param name="VpnConnectionId"><p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpnConnectionsAsync(Filter[] Filter, string[] VpnConnectionId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpnConnections?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", VpnConnectionId.Select(z => $"VpnConnectionId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your VPN connections.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_DescribeVpnConnections #Action=DescribeVpnConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpnConnectionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpnConnections?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your virtual private gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// GET_DescribeVpnGateways #Action=DescribeVpnGateways
		/// </summary>
		/// <param name="Filter"><p>One or more filters.</p> <ul> <li> <p> <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the Amazon side of the gateway.</p> </li> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul></param>
		/// <param name="VpnGatewayId"><p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DescribeVpnGatewaysAsync(Filter[] Filter, string[] VpnGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpnGateways?"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&"+String.Join("&", VpnGatewayId.Select(z => $"VpnGatewayId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes one or more of your virtual private gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
		/// POST_DescribeVpnGateways #Action=DescribeVpnGateways
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DescribeVpnGatewaysAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DescribeVpnGateways?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.
		/// GET_DetachClassicLinkVpc #Action=DetachClassicLinkVpc
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance to unlink from the VPC.</param>
		/// <param name="VpcId">The ID of the VPC to which the instance is linked.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachClassicLinkVpcAsync(bool DryRun, string InstanceId, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachClassicLinkVpc?DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.
		/// POST_DetachClassicLinkVpc #Action=DetachClassicLinkVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DetachClassicLinkVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachClassicLinkVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.
		/// GET_DetachInternetGateway #Action=DetachInternetGateway
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InternetGatewayId">The ID of the internet gateway.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachInternetGatewayAsync(bool DryRun, string InternetGatewayId, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachInternetGateway?DryRun="+DryRun+"&InternetGatewayId=" + (InternetGatewayId==null? "" : Uri.EscapeDataString(InternetGatewayId))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.
		/// POST_DetachInternetGateway #Action=DetachInternetGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DetachInternetGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachInternetGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detaches a network interface from an instance.
		/// GET_DetachNetworkInterface #Action=DetachNetworkInterface
		/// </summary>
		/// <param name="AttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Force"><p>Specifies whether to force a detachment.</p> <note> <ul> <li> <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p> </li> <li> <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p> </li> <li> <p>If you force the detachment of a network interface, the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">instance metadata</a> might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.</p> </li> </ul> </note></param>
		/// <returns>Success</returns>
		public async Task GET_DetachNetworkInterfaceAsync(string AttachmentId, bool DryRun, bool Force, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachNetworkInterface?AttachmentId=" + (AttachmentId==null? "" : Uri.EscapeDataString(AttachmentId))+"&DryRun="+DryRun+"&Force="+Force+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detaches a network interface from an instance.
		/// POST_DetachNetworkInterface #Action=DetachNetworkInterface
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DetachNetworkInterfaceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachNetworkInterface?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DetachVolume #Action=DetachVolume
		/// </summary>
		/// <param name="Device">The device name.</param>
		/// <param name="Force">Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.</param>
		/// <param name="InstanceId">The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.</param>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachVolumeAsync(string Device, bool Force, string InstanceId, string VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachVolume?Device=" + (Device==null? "" : Uri.EscapeDataString(Device))+"&Force="+Force+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DetachVolume #Action=DetachVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DetachVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
		/// GET_DetachVpnGateway #Action=DetachVpnGateway
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="VpnGatewayId">The ID of the virtual private gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DetachVpnGatewayAsync(string VpcId, string VpnGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachVpnGateway?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&VpnGatewayId=" + (VpnGatewayId==null? "" : Uri.EscapeDataString(VpnGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
		/// POST_DetachVpnGateway #Action=DetachVpnGateway
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DetachVpnGatewayAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachVpnGateway?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables EBS encryption by default for your account in the current Region.</p> <p>After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.</p> <p>Disabling encryption by default does not change the encryption status of your existing volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_DisableEbsEncryptionByDefault #Action=DisableEbsEncryptionByDefault
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableEbsEncryptionByDefaultAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableEbsEncryptionByDefault?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables EBS encryption by default for your account in the current Region.</p> <p>After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.</p> <p>Disabling encryption by default does not change the encryption status of your existing volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_DisableEbsEncryptionByDefault #Action=DisableEbsEncryptionByDefault
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableEbsEncryptionByDefaultAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableEbsEncryptionByDefault?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.
		/// GET_DisableFastSnapshotRestores #Action=DisableFastSnapshotRestores
		/// </summary>
		/// <param name="AvailabilityZone">One or more Availability Zones. For example, <code>us-east-2a</code>.</param>
		/// <param name="SourceSnapshotId">The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableFastSnapshotRestoresAsync(string[] AvailabilityZone, string[] SourceSnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableFastSnapshotRestores?"+String.Join("&", AvailabilityZone.Select(z => $"AvailabilityZone={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SourceSnapshotId.Select(z => $"SourceSnapshotId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.
		/// POST_DisableFastSnapshotRestores #Action=DisableFastSnapshotRestores
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableFastSnapshotRestoresAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableFastSnapshotRestores?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specified resource attachment from propagating routes to the specified propagation route table.
		/// GET_DisableTransitGatewayRouteTablePropagation #Action=DisableTransitGatewayRouteTablePropagation
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the propagation route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableTransitGatewayRouteTablePropagationAsync(string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableTransitGatewayRouteTablePropagation?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables the specified resource attachment from propagating routes to the specified propagation route table.
		/// POST_DisableTransitGatewayRouteTablePropagation #Action=DisableTransitGatewayRouteTablePropagation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableTransitGatewayRouteTablePropagationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableTransitGatewayRouteTablePropagation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
		/// GET_DisableVgwRoutePropagation #Action=DisableVgwRoutePropagation
		/// </summary>
		/// <param name="GatewayId">The ID of the virtual private gateway.</param>
		/// <param name="RouteTableId">The ID of the route table.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableVgwRoutePropagationAsync(string GatewayId, string RouteTableId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVgwRoutePropagation?GatewayId=" + (GatewayId==null? "" : Uri.EscapeDataString(GatewayId))+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
		/// POST_DisableVgwRoutePropagation #Action=DisableVgwRoutePropagation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableVgwRoutePropagationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVgwRoutePropagation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
		/// GET_DisableVpcClassicLink #Action=DisableVpcClassicLink
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableVpcClassicLinkAsync(bool DryRun, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVpcClassicLink?DryRun="+DryRun+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
		/// POST_DisableVpcClassicLink #Action=DisableVpcClassicLink
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableVpcClassicLinkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVpcClassicLink?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify a VPC ID in the request.</p>
		/// GET_DisableVpcClassicLinkDnsSupport #Action=DisableVpcClassicLinkDnsSupport
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_DisableVpcClassicLinkDnsSupportAsync(string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVpcClassicLinkDnsSupport?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify a VPC ID in the request.</p>
		/// POST_DisableVpcClassicLinkDnsSupport #Action=DisableVpcClassicLinkDnsSupport
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisableVpcClassicLinkDnsSupportAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisableVpcClassicLinkDnsSupport?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
		/// GET_DisassociateAddress #Action=DisassociateAddress
		/// </summary>
		/// <param name="AssociationId">[EC2-VPC] The association ID. Required for EC2-VPC.</param>
		/// <param name="PublicIp">[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateAddressAsync(string AssociationId, string PublicIp, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateAddress?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&PublicIp=" + (PublicIp==null? "" : Uri.EscapeDataString(PublicIp))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
		/// POST_DisassociateAddress #Action=DisassociateAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateAddressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateAddress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:</p> <ul> <li> <p>The route that was automatically added for the VPC is deleted</p> </li> <li> <p>All active client connections are terminated</p> </li> <li> <p>New client connections are disallowed</p> </li> <li> <p>The Client VPN endpoint's status changes to <code>pending-associate</code> </p> </li> </ul>
		/// GET_DisassociateClientVpnTargetNetwork #Action=DisassociateClientVpnTargetNetwork
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint from which to disassociate the target network.</param>
		/// <param name="AssociationId">The ID of the target network association.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateClientVpnTargetNetworkAsync(string ClientVpnEndpointId, string AssociationId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateClientVpnTargetNetwork?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:</p> <ul> <li> <p>The route that was automatically added for the VPC is deleted</p> </li> <li> <p>All active client connections are terminated</p> </li> <li> <p>New client connections are disallowed</p> </li> <li> <p>The Client VPN endpoint's status changes to <code>pending-associate</code> </p> </li> </ul>
		/// POST_DisassociateClientVpnTargetNetwork #Action=DisassociateClientVpnTargetNetwork
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateClientVpnTargetNetworkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateClientVpnTargetNetwork?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates an IAM instance profile from a running or stopped instance.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
		/// GET_DisassociateIamInstanceProfile #Action=DisassociateIamInstanceProfile
		/// </summary>
		/// <param name="AssociationId">The ID of the IAM instance profile association.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateIamInstanceProfileAsync(string AssociationId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateIamInstanceProfile?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates an IAM instance profile from a running or stopped instance.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
		/// POST_DisassociateIamInstanceProfile #Action=DisassociateIamInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateIamInstanceProfileAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateIamInstanceProfile?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a subnet or gateway from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_DisassociateRouteTable #Action=DisassociateRouteTable
		/// </summary>
		/// <param name="AssociationId">The association ID representing the current association between the route table and subnet or gateway.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateRouteTableAsync(string AssociationId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateRouteTable?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a subnet or gateway from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_DisassociateRouteTable #Action=DisassociateRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.
		/// GET_DisassociateSubnetCidrBlock #Action=DisassociateSubnetCidrBlock
		/// </summary>
		/// <param name="AssociationId">The association ID for the CIDR block.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateSubnetCidrBlockAsync(string AssociationId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateSubnetCidrBlock?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.
		/// POST_DisassociateSubnetCidrBlock #Action=DisassociateSubnetCidrBlock
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateSubnetCidrBlockAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateSubnetCidrBlock?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified subnets from the transit gateway multicast domain.
		/// GET_DisassociateTransitGatewayMulticastDomain #Action=DisassociateTransitGatewayMulticastDomain
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="SubnetIds">The IDs of the subnets;</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateTransitGatewayMulticastDomainAsync(string TransitGatewayMulticastDomainId, string TransitGatewayAttachmentId, string[] SubnetIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateTransitGatewayMulticastDomain?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&"+String.Join("&", SubnetIds.Select(z => $"SubnetIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified subnets from the transit gateway multicast domain.
		/// POST_DisassociateTransitGatewayMulticastDomain #Action=DisassociateTransitGatewayMulticastDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateTransitGatewayMulticastDomainAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateTransitGatewayMulticastDomain?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a resource attachment from a transit gateway route table.
		/// GET_DisassociateTransitGatewayRouteTable #Action=DisassociateTransitGatewayRouteTable
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateTransitGatewayRouteTableAsync(string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateTransitGatewayRouteTable?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a resource attachment from a transit gateway route table.
		/// POST_DisassociateTransitGatewayRouteTable #Action=DisassociateTransitGatewayRouteTable
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateTransitGatewayRouteTableAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateTransitGatewayRouteTable?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p> <p>You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).</p>
		/// GET_DisassociateVpcCidrBlock #Action=DisassociateVpcCidrBlock
		/// </summary>
		/// <param name="AssociationId">The association ID for the CIDR block.</param>
		/// <returns>Success</returns>
		public async Task GET_DisassociateVpcCidrBlockAsync(string AssociationId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateVpcCidrBlock?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p> <p>You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).</p>
		/// POST_DisassociateVpcCidrBlock #Action=DisassociateVpcCidrBlock
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DisassociateVpcCidrBlockAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DisassociateVpcCidrBlock?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables EBS encryption by default for your account in the current Region.</p> <p>After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can specify the default CMK for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.</p> <p>Enabling encryption by default has no effect on the encryption status of your existing volumes.</p> <p>After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
		/// GET_EnableEbsEncryptionByDefault #Action=EnableEbsEncryptionByDefault
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableEbsEncryptionByDefaultAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableEbsEncryptionByDefault?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables EBS encryption by default for your account in the current Region.</p> <p>After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can specify the default CMK for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.</p> <p>Enabling encryption by default has no effect on the encryption status of your existing volumes.</p> <p>After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
		/// POST_EnableEbsEncryptionByDefault #Action=EnableEbsEncryptionByDefault
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableEbsEncryptionByDefaultAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableEbsEncryptionByDefault?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p> <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state. To get the current state of fast snapshot restores, use <a>DescribeFastSnapshotRestores</a>. To disable fast snapshot restores, use <a>DisableFastSnapshotRestores</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon EBS Fast Snapshot Restore</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_EnableFastSnapshotRestores #Action=EnableFastSnapshotRestores
		/// </summary>
		/// <param name="AvailabilityZone">One or more Availability Zones. For example, <code>us-east-2a</code>.</param>
		/// <param name="SourceSnapshotId">The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>. You can specify a snapshot that was shared with you from another AWS account.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableFastSnapshotRestoresAsync(string[] AvailabilityZone, string[] SourceSnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableFastSnapshotRestores?"+String.Join("&", AvailabilityZone.Select(z => $"AvailabilityZone={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SourceSnapshotId.Select(z => $"SourceSnapshotId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.</p> <p>You get the full benefit of fast snapshot restores after they enter the <code>enabled</code> state. To get the current state of fast snapshot restores, use <a>DescribeFastSnapshotRestores</a>. To disable fast snapshot restores, use <a>DisableFastSnapshotRestores</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-fast-snapshot-restore.html">Amazon EBS Fast Snapshot Restore</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_EnableFastSnapshotRestores #Action=EnableFastSnapshotRestores
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableFastSnapshotRestoresAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableFastSnapshotRestores?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified attachment to propagate routes to the specified propagation route table.
		/// GET_EnableTransitGatewayRouteTablePropagation #Action=EnableTransitGatewayRouteTablePropagation
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the propagation route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableTransitGatewayRouteTablePropagationAsync(string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableTransitGatewayRouteTablePropagation?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified attachment to propagate routes to the specified propagation route table.
		/// POST_EnableTransitGatewayRouteTablePropagation #Action=EnableTransitGatewayRouteTablePropagation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableTransitGatewayRouteTablePropagationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableTransitGatewayRouteTablePropagation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
		/// GET_EnableVgwRoutePropagation #Action=EnableVgwRoutePropagation
		/// </summary>
		/// <param name="GatewayId">The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with. </param>
		/// <param name="RouteTableId">The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to. </param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableVgwRoutePropagationAsync(string GatewayId, string RouteTableId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVgwRoutePropagation?GatewayId=" + (GatewayId==null? "" : Uri.EscapeDataString(GatewayId))+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
		/// POST_EnableVgwRoutePropagation #Action=EnableVgwRoutePropagation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableVgwRoutePropagationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVgwRoutePropagation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
		/// GET_EnableVolumeIO #Action=EnableVolumeIO
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableVolumeIOAsync(bool DryRun, string VolumeId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVolumeIO?DryRun="+DryRun+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
		/// POST_EnableVolumeIO #Action=EnableVolumeIO
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableVolumeIOAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVolumeIO?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_EnableVpcClassicLink #Action=EnableVpcClassicLink
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableVpcClassicLinkAsync(bool DryRun, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVpcClassicLink?DryRun="+DryRun+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_EnableVpcClassicLink #Action=EnableVpcClassicLink
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableVpcClassicLinkAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVpcClassicLink?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify a VPC ID in the request.</p>
		/// GET_EnableVpcClassicLinkDnsSupport #Action=EnableVpcClassicLinkDnsSupport
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_EnableVpcClassicLinkDnsSupportAsync(string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVpcClassicLinkDnsSupport?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You must specify a VPC ID in the request.</p>
		/// POST_EnableVpcClassicLinkDnsSupport #Action=EnableVpcClassicLinkDnsSupport
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_EnableVpcClassicLinkDnsSupportAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableVpcClassicLinkDnsSupport?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads the client certificate revocation list for the specified Client VPN endpoint.
		/// GET_ExportClientVpnClientCertificateRevocationList #Action=ExportClientVpnClientCertificateRevocationList
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ExportClientVpnClientCertificateRevocationListAsync(string ClientVpnEndpointId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportClientVpnClientCertificateRevocationList?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads the client certificate revocation list for the specified Client VPN endpoint.
		/// POST_ExportClientVpnClientCertificateRevocationList #Action=ExportClientVpnClientCertificateRevocationList
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ExportClientVpnClientCertificateRevocationListAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportClientVpnClientCertificateRevocationList?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.
		/// GET_ExportClientVpnClientConfiguration #Action=ExportClientVpnClientConfiguration
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ExportClientVpnClientConfigurationAsync(string ClientVpnEndpointId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportClientVpnClientConfiguration?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.
		/// POST_ExportClientVpnClientConfiguration #Action=ExportClientVpnClientConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ExportClientVpnClientConfigurationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportClientVpnClientConfiguration?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM Directory from an Amazon Machine Image (AMI)</a> in the <i>VM Import/Export User Guide</i>.
		/// GET_ExportImage #Action=ExportImage
		/// </summary>
		/// <param name="ClientToken">Token to enable idempotency for export image requests.</param>
		/// <param name="Description">A description of the image being exported. The maximum length is 255 bytes.</param>
		/// <param name="DiskImageFormat">The disk image format.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ImageId">The ID of the image.</param>
		/// <param name="S3ExportLocation">Information about the destination S3 bucket. The bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.</param>
		/// <param name="RoleName">The name of the role that grants VM Import/Export permission to export images to your S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.</param>
		/// <returns>Success</returns>
		public async Task GET_ExportImageAsync(string ClientToken, string Description, DiskImageFormat DiskImageFormat, bool DryRun, string ImageId, string S3ExportLocation, string RoleName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportImage?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DiskImageFormat=" + DiskImageFormat+"&DryRun="+DryRun+"&ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&S3ExportLocation=" + (S3ExportLocation==null? "" : Uri.EscapeDataString(S3ExportLocation))+"&RoleName=" + (RoleName==null? "" : Uri.EscapeDataString(RoleName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports an Amazon Machine Image (AMI) to a VM file. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html">Exporting a VM Directory from an Amazon Machine Image (AMI)</a> in the <i>VM Import/Export User Guide</i>.
		/// POST_ExportImage #Action=ExportImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ExportImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.</p> <p>The routes are saved to the specified bucket in a JSON file. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export Route Tables to Amazon S3</a> in <i>Transit Gateways</i>.</p>
		/// GET_ExportTransitGatewayRoutes #Action=ExportTransitGatewayRoutes
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the route table.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p> </li> <li> <p> <code>type</code> - The type of route (<code>active</code> | <code>blackhole</code>).</p> </li> </ul></param>
		/// <param name="S3Bucket">The name of the S3 bucket.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ExportTransitGatewayRoutesAsync(string TransitGatewayRouteTableId, Filter[] Filter, string S3Bucket, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportTransitGatewayRoutes?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&S3Bucket=" + (S3Bucket==null? "" : Uri.EscapeDataString(S3Bucket))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.</p> <p>The routes are saved to the specified bucket in a JSON file. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/tgw-route-tables.html#tgw-export-route-tables">Export Route Tables to Amazon S3</a> in <i>Transit Gateways</i>.</p>
		/// POST_ExportTransitGatewayRoutes #Action=ExportTransitGatewayRoutes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ExportTransitGatewayRoutesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ExportTransitGatewayRoutes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.
		/// GET_GetAssociatedIpv6PoolCidrs #Action=GetAssociatedIpv6PoolCidrs
		/// </summary>
		/// <param name="PoolId">The ID of the IPv6 address pool.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetAssociatedIpv6PoolCidrsAsync(string PoolId, string NextToken, int MaxResults, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAssociatedIpv6PoolCidrs?PoolId=" + (PoolId==null? "" : Uri.EscapeDataString(PoolId))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.
		/// POST_GetAssociatedIpv6PoolCidrs #Action=GetAssociatedIpv6PoolCidrs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_GetAssociatedIpv6PoolCidrsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAssociatedIpv6PoolCidrs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner's usage.
		/// GET_GetCapacityReservationUsage #Action=GetCapacityReservationUsage
		/// </summary>
		/// <param name="CapacityReservationId">The ID of the Capacity Reservation.</param>
		/// <param name="NextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults"><p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.</p> <p>Valid range: Minimum value of 1. Maximum value of 1000.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetCapacityReservationUsageAsync(string CapacityReservationId, string NextToken, int MaxResults, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCapacityReservationUsage?CapacityReservationId=" + (CapacityReservationId==null? "" : Uri.EscapeDataString(CapacityReservationId))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner's usage.
		/// POST_GetCapacityReservationUsage #Action=GetCapacityReservationUsage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetCapacityReservationUsageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCapacityReservationUsage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the allocations from the specified customer-owned address pool.
		/// GET_GetCoipPoolUsage #Action=GetCoipPoolUsage
		/// </summary>
		/// <param name="PoolId">The ID of the address pool.</param>
		/// <param name="Filter"><p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-address-usage.allocation-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-account-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-service</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.co-ip</code> </p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetCoipPoolUsageAsync(string PoolId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCoipPoolUsage?PoolId=" + (PoolId==null? "" : Uri.EscapeDataString(PoolId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the allocations from the specified customer-owned address pool.
		/// POST_GetCoipPoolUsage #Action=GetCoipPoolUsage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetCoipPoolUsageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCoipPoolUsage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.</p> <p>By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.</p> <p>You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance Console Output</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_GetConsoleOutput #Action=GetConsoleOutput
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Latest"><p>When enabled, retrieves the latest console output for the instance.</p> <p>Default: disabled (<code>false</code>)</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetConsoleOutputAsync(string InstanceId, bool DryRun, bool Latest, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetConsoleOutput?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&DryRun="+DryRun+"&Latest="+Latest+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.</p> <p>By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.</p> <p>You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance Console Output</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_GetConsoleOutput #Action=GetConsoleOutput
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetConsoleOutputAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetConsoleOutput?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p>
		/// GET_GetConsoleScreenshot #Action=GetConsoleScreenshot
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="WakeUp">When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.</param>
		/// <returns>Success</returns>
		public async Task GET_GetConsoleScreenshotAsync(bool DryRun, string InstanceId, bool WakeUp, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetConsoleScreenshot?DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&WakeUp="+WakeUp+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p>
		/// POST_GetConsoleScreenshot #Action=GetConsoleScreenshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetConsoleScreenshotAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetConsoleScreenshot?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default credit option for CPU usage of a burstable performance instance family.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_GetDefaultCreditSpecification #Action=GetDefaultCreditSpecification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceFamily">The instance family.</param>
		/// <returns>Success</returns>
		public async Task GET_GetDefaultCreditSpecificationAsync(bool DryRun, UnlimitedSupportedInstanceFamily InstanceFamily, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetDefaultCreditSpecification?DryRun="+DryRun+"&InstanceFamily=" + InstanceFamily+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default credit option for CPU usage of a burstable performance instance family.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_GetDefaultCreditSpecification #Action=GetDefaultCreditSpecification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetDefaultCreditSpecificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetDefaultCreditSpecification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_GetEbsDefaultKmsKeyId #Action=GetEbsDefaultKmsKeyId
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetEbsDefaultKmsKeyIdAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetEbsDefaultKmsKeyId?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using <a>ModifyEbsDefaultKmsKeyId</a> or <a>ResetEbsDefaultKmsKeyId</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_GetEbsDefaultKmsKeyId #Action=GetEbsDefaultKmsKeyId
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetEbsDefaultKmsKeyIdAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetEbsDefaultKmsKeyId?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes whether EBS encryption by default is enabled for your account in the current Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_GetEbsEncryptionByDefault #Action=GetEbsEncryptionByDefault
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetEbsEncryptionByDefaultAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetEbsEncryptionByDefault?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes whether EBS encryption by default is enabled for your account in the current Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_GetEbsEncryptionByDefault #Action=GetEbsEncryptionByDefault
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetEbsEncryptionByDefaultAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetEbsEncryptionByDefault?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
		/// GET_GetHostReservationPurchasePreview #Action=GetHostReservationPurchasePreview
		/// </summary>
		/// <param name="HostIdSet">The IDs of the Dedicated Hosts with which the reservation is associated.</param>
		/// <param name="OfferingId">The offering ID of the reservation.</param>
		/// <returns>Success</returns>
		public async Task GET_GetHostReservationPurchasePreviewAsync(string[] HostIdSet, string OfferingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetHostReservationPurchasePreview?"+String.Join("&", HostIdSet.Select(z => $"HostIdSet={Uri.EscapeDataString(z.ToString())}"))+"&OfferingId=" + (OfferingId==null? "" : Uri.EscapeDataString(OfferingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
		/// POST_GetHostReservationPurchasePreview #Action=GetHostReservationPurchasePreview
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetHostReservationPurchasePreviewAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetHostReservationPurchasePreview?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the configuration data of the specified instance. You can use this data to create a launch template.
		/// GET_GetLaunchTemplateData #Action=GetLaunchTemplateData
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_GetLaunchTemplateDataAsync(bool DryRun, string InstanceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetLaunchTemplateData?DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the configuration data of the specified instance. You can use this data to create a launch template.
		/// POST_GetLaunchTemplateData #Action=GetLaunchTemplateData
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetLaunchTemplateDataAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetLaunchTemplateData?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the encrypted administrator password for a running Windows instance.</p> <p>The Windows password is generated at boot by the <code>EC2Config</code> service or <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the Amazon Elastic Compute Cloud User Guide.</p> <p>For the <code>EC2Config</code> service, the password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
		/// GET_GetPasswordData #Action=GetPasswordData
		/// </summary>
		/// <param name="InstanceId">The ID of the Windows instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetPasswordDataAsync(string InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPasswordData?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the encrypted administrator password for a running Windows instance.</p> <p>The Windows password is generated at boot by the <code>EC2Config</code> service or <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the Amazon Elastic Compute Cloud User Guide.</p> <p>For the <code>EC2Config</code> service, the password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
		/// POST_GetPasswordData #Action=GetPasswordData
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetPasswordDataAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPasswordData?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.
		/// GET_GetReservedInstancesExchangeQuote #Action=GetReservedInstancesExchangeQuote
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ReservedInstanceId">The IDs of the Convertible Reserved Instances to exchange.</param>
		/// <param name="TargetConfiguration">The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.</param>
		/// <returns>Success</returns>
		public async Task GET_GetReservedInstancesExchangeQuoteAsync(bool DryRun, string[] ReservedInstanceId, TargetConfigurationRequest[] TargetConfiguration, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetReservedInstancesExchangeQuote?DryRun="+DryRun+"&"+String.Join("&", ReservedInstanceId.Select(z => $"ReservedInstanceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", TargetConfiguration.Select(z => $"TargetConfiguration={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.
		/// POST_GetReservedInstancesExchangeQuote #Action=GetReservedInstancesExchangeQuote
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetReservedInstancesExchangeQuoteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetReservedInstancesExchangeQuote?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the route tables to which the specified resource attachment propagates routes.
		/// GET_GetTransitGatewayAttachmentPropagations #Action=GetTransitGatewayAttachmentPropagations
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetTransitGatewayAttachmentPropagationsAsync(string TransitGatewayAttachmentId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayAttachmentPropagations?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the route tables to which the specified resource attachment propagates routes.
		/// POST_GetTransitGatewayAttachmentPropagations #Action=GetTransitGatewayAttachmentPropagations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_GetTransitGatewayAttachmentPropagationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayAttachmentPropagations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the associations for the transit gateway multicast domain.
		/// GET_GetTransitGatewayMulticastDomainAssociations #Action=GetTransitGatewayMulticastDomainAssociations
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. The valid value is: <code>vpc</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associating</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetTransitGatewayMulticastDomainAssociationsAsync(string TransitGatewayMulticastDomainId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayMulticastDomainAssociations?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the associations for the transit gateway multicast domain.
		/// POST_GetTransitGatewayMulticastDomainAssociations #Action=GetTransitGatewayMulticastDomainAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_GetTransitGatewayMulticastDomainAssociationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayMulticastDomainAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the associations for the specified transit gateway route table.
		/// GET_GetTransitGatewayRouteTableAssociations #Action=GetTransitGatewayRouteTableAssociations
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetTransitGatewayRouteTableAssociationsAsync(string TransitGatewayRouteTableId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayRouteTableAssociations?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the associations for the specified transit gateway route table.
		/// POST_GetTransitGatewayRouteTableAssociations #Action=GetTransitGatewayRouteTableAssociations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_GetTransitGatewayRouteTableAssociationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayRouteTableAssociations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the route table propagations for the specified transit gateway route table.
		/// GET_GetTransitGatewayRouteTablePropagations #Action=GetTransitGatewayRouteTablePropagations
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetTransitGatewayRouteTablePropagationsAsync(string TransitGatewayRouteTableId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayRouteTablePropagations?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the route table propagations for the specified transit gateway route table.
		/// POST_GetTransitGatewayRouteTablePropagations #Action=GetTransitGatewayRouteTablePropagations
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_GetTransitGatewayRouteTablePropagationsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetTransitGatewayRouteTablePropagations?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p> <p>Uploading a client certificate revocation list resets existing client connections.</p>
		/// GET_ImportClientVpnClientCertificateRevocationList #Action=ImportClientVpnClientCertificateRevocationList
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint to which the client certificate revocation list applies.</param>
		/// <param name="CertificateRevocationList">The client certificate revocation list file. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate">Generate a Client Certificate Revocation List</a> in the <i>AWS Client VPN Administrator Guide</i>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportClientVpnClientCertificateRevocationListAsync(string ClientVpnEndpointId, string CertificateRevocationList, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportClientVpnClientCertificateRevocationList?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&CertificateRevocationList=" + (CertificateRevocationList==null? "" : Uri.EscapeDataString(CertificateRevocationList))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p> <p>Uploading a client certificate revocation list resets existing client connections.</p>
		/// POST_ImportClientVpnClientCertificateRevocationList #Action=ImportClientVpnClientCertificateRevocationList
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportClientVpnClientCertificateRevocationListAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportClientVpnClientCertificateRevocationList?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.
		/// GET_ImportImage #Action=ImportImage
		/// </summary>
		/// <param name="Architecture"><p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code> </p></param>
		/// <param name="ClientData">The client-specific data.</param>
		/// <param name="ClientToken">The token to enable idempotency for VM import requests.</param>
		/// <param name="Description">A description string for the import image task.</param>
		/// <param name="DiskContainer">Information about the disk containers.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Encrypted">Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="Hypervisor"><p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p></param>
		/// <param name="KmsKeyId"><p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the AMI is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p></param>
		/// <param name="LicenseType"><p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify <code>AWS</code> to replace the source-system license with an AWS license, if appropriate. Specify <code>BYOL</code> to retain the source-system license, if appropriate.</p> <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p></param>
		/// <param name="Platform"><p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p></param>
		/// <param name="RoleName">The name of the role to use when not using the default role, 'vmimport'.</param>
		/// <param name="LicenseSpecifications">The ARNs of the license configurations.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportImageAsync(
					string Architecture, 
					string ClientData, 
					string ClientToken, 
					string Description, 
					ImageDiskContainer[] DiskContainer, 
					bool DryRun, 
					bool Encrypted, 
					string Hypervisor, 
					string KmsKeyId, 
					string LicenseType, 
					string Platform, 
					string RoleName, 
					ImportImageLicenseConfigurationRequest[] LicenseSpecifications, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportImage?Architecture=" + (Architecture==null? "" : Uri.EscapeDataString(Architecture))+"&ClientData=" + (ClientData==null? "" : Uri.EscapeDataString(ClientData))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", DiskContainer.Select(z => $"DiskContainer={z}"))+"&DryRun="+DryRun+"&Encrypted="+Encrypted+"&Hypervisor=" + (Hypervisor==null? "" : Uri.EscapeDataString(Hypervisor))+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&LicenseType=" + (LicenseType==null? "" : Uri.EscapeDataString(LicenseType))+"&Platform=" + (Platform==null? "" : Uri.EscapeDataString(Platform))+"&RoleName=" + (RoleName==null? "" : Uri.EscapeDataString(RoleName))+"&"+String.Join("&", LicenseSpecifications.Select(z => $"LicenseSpecifications={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.
		/// POST_ImportImage #Action=ImportImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an import instance task using metadata from the specified disk image. <code>ImportInstance</code> only supports single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// GET_ImportInstance #Action=ImportInstance
		/// </summary>
		/// <param name="Description">A description for the instance being imported.</param>
		/// <param name="DiskImage">The disk image.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LaunchSpecification">The launch specification.</param>
		/// <param name="Platform">The instance operating system.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportInstanceAsync(string Description, DiskImage[] DiskImage, bool DryRun, string LaunchSpecification, PlatformValues Platform, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportInstance?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", DiskImage.Select(z => $"DiskImage={z}"))+"&DryRun="+DryRun+"&LaunchSpecification=" + (LaunchSpecification==null? "" : Uri.EscapeDataString(LaunchSpecification))+"&Platform=" + Platform+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an import instance task using metadata from the specified disk image. <code>ImportInstance</code> only supports single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// POST_ImportInstance #Action=ImportInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportInstanceAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportInstance?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ImportKeyPair #Action=ImportKeyPair
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="KeyName">A unique name for the key pair.</param>
		/// <param name="PublicKeyMaterial">The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</param>
		/// <param name="TagSpecification">The tags to apply to the imported key pair.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportKeyPairAsync(bool DryRun, string KeyName, string PublicKeyMaterial, TagSpecification[] TagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportKeyPair?DryRun="+DryRun+"&KeyName=" + (KeyName==null? "" : Uri.EscapeDataString(KeyName))+"&PublicKeyMaterial=" + (PublicKeyMaterial==null? "" : Uri.EscapeDataString(PublicKeyMaterial))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ImportKeyPair #Action=ImportKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportKeyPairAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportKeyPair?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports a disk into an EBS snapshot.
		/// GET_ImportSnapshot #Action=ImportSnapshot
		/// </summary>
		/// <param name="ClientData">The client-specific data.</param>
		/// <param name="ClientToken">Token to enable idempotency for VM import requests.</param>
		/// <param name="Description">The description string for the import snapshot task.</param>
		/// <param name="DiskContainer">Information about the disk container.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Encrypted">Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="KmsKeyId"><p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p></param>
		/// <param name="RoleName">The name of the role to use when not using the default role, 'vmimport'.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportSnapshotAsync(string ClientData, string ClientToken, string Description, string DiskContainer, bool DryRun, bool Encrypted, string KmsKeyId, string RoleName, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportSnapshot?ClientData=" + (ClientData==null? "" : Uri.EscapeDataString(ClientData))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DiskContainer=" + (DiskContainer==null? "" : Uri.EscapeDataString(DiskContainer))+"&DryRun="+DryRun+"&Encrypted="+Encrypted+"&KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&RoleName=" + (RoleName==null? "" : Uri.EscapeDataString(RoleName))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Imports a disk into an EBS snapshot.
		/// POST_ImportSnapshot #Action=ImportSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportSnapshotAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportSnapshot?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an import volume task using metadata from the specified disk image.For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing Disks to Amazon EBS</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// GET_ImportVolume #Action=ImportVolume
		/// </summary>
		/// <param name="AvailabilityZone">The Availability Zone for the resulting EBS volume.</param>
		/// <param name="Description">A description of the volume.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Image">The disk image.</param>
		/// <param name="Volume">The volume size.</param>
		/// <returns>Success</returns>
		public async Task GET_ImportVolumeAsync(string AvailabilityZone, string Description, bool DryRun, string Image, string Volume, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportVolume?AvailabilityZone=" + (AvailabilityZone==null? "" : Uri.EscapeDataString(AvailabilityZone))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&Image=" + (Image==null? "" : Uri.EscapeDataString(Image))+"&Volume=" + (Volume==null? "" : Uri.EscapeDataString(Volume))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an import volume task using metadata from the specified disk image.For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing Disks to Amazon EBS</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
		/// POST_ImportVolume #Action=ImportVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ImportVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ImportVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables or disables an Availability Zone group for your account.</p> <p>Use <a href="https://docs.aws.amazon.com/AWSEC2ApiDocReef/build/server-root/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">describe-availability-zones</a> to view the value for <code>GroupName</code>.</p>
		/// GET_ModifyAvailabilityZoneGroup #Action=ModifyAvailabilityZoneGroup
		/// </summary>
		/// <param name="GroupName">The name of the Availability Zone Group.</param>
		/// <param name="OptInStatus">Indicates whether to enable or disable membership. The valid values are <code>opted-in</code>. You must contact <a href="https://console.aws.amazon.com/support/home#/case/create%3FissueType=customer-service%26serviceCode=general-info%26getting-started%26categoryCode=using-aws%26services">AWS Support</a> to disable an Availability Zone group.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyAvailabilityZoneGroupAsync(string GroupName, string OptInStatus, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyAvailabilityZoneGroup?GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&OptInStatus=" + (OptInStatus==null? "" : Uri.EscapeDataString(OptInStatus))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables or disables an Availability Zone group for your account.</p> <p>Use <a href="https://docs.aws.amazon.com/AWSEC2ApiDocReef/build/server-root/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html">describe-availability-zones</a> to view the value for <code>GroupName</code>.</p>
		/// POST_ModifyAvailabilityZoneGroup #Action=ModifyAvailabilityZoneGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyAvailabilityZoneGroupAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyAvailabilityZoneGroup?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.
		/// GET_ModifyCapacityReservation #Action=ModifyCapacityReservation
		/// </summary>
		/// <param name="CapacityReservationId">The ID of the Capacity Reservation.</param>
		/// <param name="InstanceCount">The number of instances for which to reserve capacity.</param>
		/// <param name="EndDate"><p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p></param>
		/// <param name="EndDateType"><p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>.</p> </li> </ul></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyCapacityReservationAsync(string CapacityReservationId, int InstanceCount, System.DateTimeOffset EndDate, EndDateType EndDateType, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCapacityReservation?CapacityReservationId=" + (CapacityReservationId==null? "" : Uri.EscapeDataString(CapacityReservationId))+"&InstanceCount="+InstanceCount+"&EndDate=" + EndDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&EndDateType=" + EndDateType+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.
		/// POST_ModifyCapacityReservation #Action=ModifyCapacityReservation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyCapacityReservationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyCapacityReservation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.
		/// GET_ModifyClientVpnEndpoint #Action=ModifyClientVpnEndpoint
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint to modify.</param>
		/// <param name="ServerCertificateArn">The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).</param>
		/// <param name="ConnectionLogOptions"><p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul></param>
		/// <param name="DnsServers">Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.</param>
		/// <param name="VpnPort"><p>The port number to assign to the Client VPN endpoint for TCP and UDP traffic.</p> <p>Valid Values: <code>443</code> | <code>1194</code> </p> <p>Default Value: <code>443</code> </p></param>
		/// <param name="Description">A brief description of the Client VPN endpoint.</param>
		/// <param name="SplitTunnel"><p>Indicates whether the VPN is split-tunnel.</p> <p>For information about split-tunnel VPN endpoints, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SecurityGroupId">The IDs of one or more security groups to apply to the target network.</param>
		/// <param name="VpcId">The ID of the VPC to associate with the Client VPN endpoint.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyClientVpnEndpointAsync(string ClientVpnEndpointId, string ServerCertificateArn, string ConnectionLogOptions, string DnsServers, int VpnPort, string Description, bool SplitTunnel, bool DryRun, string[] SecurityGroupId, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClientVpnEndpoint?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&ServerCertificateArn=" + (ServerCertificateArn==null? "" : Uri.EscapeDataString(ServerCertificateArn))+"&ConnectionLogOptions=" + (ConnectionLogOptions==null? "" : Uri.EscapeDataString(ConnectionLogOptions))+"&DnsServers=" + (DnsServers==null? "" : Uri.EscapeDataString(DnsServers))+"&VpnPort="+VpnPort+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&SplitTunnel="+SplitTunnel+"&DryRun="+DryRun+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.
		/// POST_ModifyClientVpnEndpoint #Action=ModifyClientVpnEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyClientVpnEndpointAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyClientVpnEndpoint?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.</p> <p> <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check <code>DefaultCreditSpecification</code> for updates.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifyDefaultCreditSpecification #Action=ModifyDefaultCreditSpecification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceFamily">The instance family.</param>
		/// <param name="CpuCredits"><p>The credit option for CPU usage of the instance family.</p> <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyDefaultCreditSpecificationAsync(bool DryRun, UnlimitedSupportedInstanceFamily InstanceFamily, string CpuCredits, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyDefaultCreditSpecification?DryRun="+DryRun+"&InstanceFamily=" + InstanceFamily+"&CpuCredits=" + (CpuCredits==null? "" : Uri.EscapeDataString(CpuCredits))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.</p> <p> <code>ModifyDefaultCreditSpecification</code> is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call <code>GetDefaultCreditSpecification</code> and check <code>DefaultCreditSpecification</code> for updates.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifyDefaultCreditSpecification #Action=ModifyDefaultCreditSpecification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyDefaultCreditSpecificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyDefaultCreditSpecification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.</p> <p>AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric CMKs.</p> <p>If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifyEbsDefaultKmsKeyId #Action=ModifyEbsDefaultKmsKeyId
		/// </summary>
		/// <param name="KmsKeyId"><p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p> <p>Amazon EBS does not support asymmetric CMKs.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyEbsDefaultKmsKeyIdAsync(string KmsKeyId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyEbsDefaultKmsKeyId?KmsKeyId=" + (KmsKeyId==null? "" : Uri.EscapeDataString(KmsKeyId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.</p> <p>AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use <a>ResetEbsDefaultKmsKeyId</a>. Amazon EBS does not support asymmetric CMKs.</p> <p>If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifyEbsDefaultKmsKeyId #Action=ModifyEbsDefaultKmsKeyId
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyEbsDefaultKmsKeyIdAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyEbsDefaultKmsKeyId?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified EC2 Fleet.</p> <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p> <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
		/// GET_ModifyFleet #Action=ModifyFleet
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ExcessCapacityTerminationPolicy">Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.</param>
		/// <param name="FleetId">The ID of the EC2 Fleet.</param>
		/// <param name="TargetCapacitySpecification">The size of the EC2 Fleet.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyFleetAsync(bool DryRun, string ExcessCapacityTerminationPolicy, string FleetId, string TargetCapacitySpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyFleet?DryRun="+DryRun+"&ExcessCapacityTerminationPolicy=" + (ExcessCapacityTerminationPolicy==null? "" : Uri.EscapeDataString(ExcessCapacityTerminationPolicy))+"&FleetId=" + (FleetId==null? "" : Uri.EscapeDataString(FleetId))+"&TargetCapacitySpecification=" + (TargetCapacitySpecification==null? "" : Uri.EscapeDataString(TargetCapacitySpecification))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified EC2 Fleet.</p> <p>You can only modify an EC2 Fleet request of type <code>maintain</code>.</p> <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowest-price</code>, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacity-optimized</code>, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
		/// POST_ModifyFleet #Action=ModifyFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyFleetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyFleet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
		/// GET_ModifyFpgaImageAttribute #Action=ModifyFpgaImageAttribute
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FpgaImageId">The ID of the AFI.</param>
		/// <param name="Attribute">The name of the attribute.</param>
		/// <param name="OperationType">The operation type.</param>
		/// <param name="UserId">The AWS account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</param>
		/// <param name="UserGroup">The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</param>
		/// <param name="ProductCode">The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</param>
		/// <param name="LoadPermission">The load permission for the AFI.</param>
		/// <param name="Description">A description for the AFI.</param>
		/// <param name="Name">A name for the AFI.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyFpgaImageAttributeAsync(bool DryRun, string FpgaImageId, FpgaImageAttributeName Attribute, OperationType OperationType, string[] UserId, string[] UserGroup, string[] ProductCode, string LoadPermission, string Description, string Name, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyFpgaImageAttribute?DryRun="+DryRun+"&FpgaImageId=" + (FpgaImageId==null? "" : Uri.EscapeDataString(FpgaImageId))+"&Attribute=" + Attribute+"&OperationType=" + OperationType+"&"+String.Join("&", UserId.Select(z => $"UserId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", UserGroup.Select(z => $"UserGroup={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", ProductCode.Select(z => $"ProductCode={Uri.EscapeDataString(z.ToString())}"))+"&LoadPermission=" + (LoadPermission==null? "" : Uri.EscapeDataString(LoadPermission))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
		/// POST_ModifyFpgaImageAttribute #Action=ModifyFpgaImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyFpgaImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyFpgaImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of <code>host</code> but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.</p> <p>You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.</p>
		/// GET_ModifyHosts #Action=ModifyHosts
		/// </summary>
		/// <param name="AutoPlacement">Specify whether to enable or disable auto-placement.</param>
		/// <param name="HostId">The IDs of the Dedicated Hosts to modify.</param>
		/// <param name="HostRecovery">Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="InstanceType"><p>Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type.</p> <p>If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p></param>
		/// <param name="InstanceFamily"><p>Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family.</p> <p>If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyHostsAsync(AutoPlacement AutoPlacement, string[] HostId, AutoPlacement HostRecovery, string InstanceType, string InstanceFamily, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyHosts?AutoPlacement=" + AutoPlacement+"&"+String.Join("&", HostId.Select(z => $"HostId={Uri.EscapeDataString(z.ToString())}"))+"&HostRecovery=" + HostRecovery+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&InstanceFamily=" + (InstanceFamily==null? "" : Uri.EscapeDataString(InstanceFamily))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of <code>host</code> but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.</p> <p>You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.</p>
		/// POST_ModifyHosts #Action=ModifyHosts
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyHostsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyHosts?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.</p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// GET_ModifyIdFormat #Action=ModifyIdFormat
		/// </summary>
		/// <param name="Resource"><p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p></param>
		/// <param name="UseLongIds">Indicate whether the resource should use longer IDs (17-character IDs).</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyIdFormatAsync(string Resource, bool UseLongIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyIdFormat?Resource=" + (Resource==null? "" : Uri.EscapeDataString(Resource))+"&UseLongIds="+UseLongIds+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.</p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// POST_ModifyIdFormat #Action=ModifyIdFormat
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyIdFormatAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyIdFormat?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// GET_ModifyIdentityIdFormat #Action=ModifyIdentityIdFormat
		/// </summary>
		/// <param name="PrincipalArn">The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account.</param>
		/// <param name="Resource"><p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p></param>
		/// <param name="UseLongIds">Indicates whether the resource should use longer IDs (17-character IDs)</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyIdentityIdFormatAsync(string PrincipalArn, string Resource, bool UseLongIds, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyIdentityIdFormat?PrincipalArn=" + (PrincipalArn==null? "" : Uri.EscapeDataString(PrincipalArn))+"&Resource=" + (Resource==null? "" : Uri.EscapeDataString(Resource))+"&UseLongIds="+UseLongIds+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
		/// POST_ModifyIdentityIdFormat #Action=ModifyIdentityIdFormat
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyIdentityIdFormatAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyIdentityIdFormat?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters: <code>Description</code>, <code>LaunchPermission</code>, or <code>ProductCode</code>.</p> <p>AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.</p> <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.</p>
		/// GET_ModifyImageAttribute #Action=ModifyImageAttribute
		/// </summary>
		/// <param name="Attribute">The name of the attribute to modify. The valid values are <code>description</code>, <code>launchPermission</code>, and <code>productCodes</code>.</param>
		/// <param name="Description">A new description for the AMI.</param>
		/// <param name="ImageId">The ID of the AMI.</param>
		/// <param name="LaunchPermission">A new launch permission for the AMI.</param>
		/// <param name="OperationType">The operation type. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</param>
		/// <param name="ProductCode">The DevPay product codes. After you add a product code to an AMI, it can't be removed.</param>
		/// <param name="UserGroup">The user groups. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</param>
		/// <param name="UserId">The AWS account IDs. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</param>
		/// <param name="Value">The value of the attribute being modified. This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code> or <code>productCodes</code>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyImageAttributeAsync(string Attribute, string Description, string ImageId, string LaunchPermission, OperationType OperationType, string[] ProductCode, string[] UserGroup, string[] UserId, string Value, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyImageAttribute?Attribute=" + (Attribute==null? "" : Uri.EscapeDataString(Attribute))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&LaunchPermission=" + (LaunchPermission==null? "" : Uri.EscapeDataString(LaunchPermission))+"&OperationType=" + OperationType+"&"+String.Join("&", ProductCode.Select(z => $"ProductCode={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", UserGroup.Select(z => $"UserGroup={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", UserId.Select(z => $"UserId={Uri.EscapeDataString(z.ToString())}"))+"&Value=" + (Value==null? "" : Uri.EscapeDataString(Value))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters: <code>Description</code>, <code>LaunchPermission</code>, or <code>ProductCode</code>.</p> <p>AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.</p> <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.</p>
		/// POST_ModifyImageAttribute #Action=ModifyImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p> <b>Note: </b>Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifyInstanceAttribute #Action=ModifyInstanceAttribute
		/// </summary>
		/// <param name="SourceDestCheck">Specifies whether source/destination checking is enabled. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</param>
		/// <param name="Attribute">The name of the attribute.</param>
		/// <param name="BlockDeviceMapping"><p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p></param>
		/// <param name="DisableApiTermination">If the value is <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EbsOptimized">Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</param>
		/// <param name="EnaSupport"><p>Set to <code>true</code> to enable enhanced networking with ENA for the instance.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p></param>
		/// <param name="GroupId">[EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="InstanceInitiatedShutdownBehavior">Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</param>
		/// <param name="InstanceType">Changes the instance type to the specified value. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>. If the instance type is not valid, the error returned is <code>InvalidInstanceAttributeValue</code>.</param>
		/// <param name="Kernel">Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</param>
		/// <param name="Ramdisk">Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</param>
		/// <param name="SriovNetSupport"><p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance.</p> <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p></param>
		/// <param name="UserData">Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.</param>
		/// <param name="Value">A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstanceAttributeAsync(
					string SourceDestCheck, 
					InstanceAttributeName Attribute, 
					InstanceBlockDeviceMappingSpecification[] BlockDeviceMapping, 
					string DisableApiTermination, 
					bool DryRun, 
					string EbsOptimized, 
					string EnaSupport, 
					string[] GroupId, 
					string InstanceId, 
					string InstanceInitiatedShutdownBehavior, 
					string InstanceType, 
					string Kernel, 
					string Ramdisk, 
					string SriovNetSupport, 
					string UserData, 
					string Value, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceAttribute?SourceDestCheck=" + (SourceDestCheck==null? "" : Uri.EscapeDataString(SourceDestCheck))+"&Attribute=" + Attribute+"&"+String.Join("&", BlockDeviceMapping.Select(z => $"BlockDeviceMapping={z}"))+"&DisableApiTermination=" + (DisableApiTermination==null? "" : Uri.EscapeDataString(DisableApiTermination))+"&DryRun="+DryRun+"&EbsOptimized=" + (EbsOptimized==null? "" : Uri.EscapeDataString(EbsOptimized))+"&EnaSupport=" + (EnaSupport==null? "" : Uri.EscapeDataString(EnaSupport))+"&"+String.Join("&", GroupId.Select(z => $"GroupId={Uri.EscapeDataString(z.ToString())}"))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&InstanceInitiatedShutdownBehavior=" + (InstanceInitiatedShutdownBehavior==null? "" : Uri.EscapeDataString(InstanceInitiatedShutdownBehavior))+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&Kernel=" + (Kernel==null? "" : Uri.EscapeDataString(Kernel))+"&Ramdisk=" + (Ramdisk==null? "" : Uri.EscapeDataString(Ramdisk))+"&SriovNetSupport=" + (SriovNetSupport==null? "" : Uri.EscapeDataString(SriovNetSupport))+"&UserData=" + (UserData==null? "" : Uri.EscapeDataString(UserData))+"&Value=" + (Value==null? "" : Uri.EscapeDataString(Value))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p> <b>Note: </b>Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifyInstanceAttribute #Action=ModifyInstanceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstanceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching attributes, or run On-Demand Instance capacity.
		/// GET_ModifyInstanceCapacityReservationAttributes #Action=ModifyInstanceCapacityReservationAttributes
		/// </summary>
		/// <param name="InstanceId">The ID of the instance to be modified.</param>
		/// <param name="CapacityReservationSpecification">Information about the Capacity Reservation targeting option.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstanceCapacityReservationAttributesAsync(string InstanceId, string CapacityReservationSpecification, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceCapacityReservationAttributes?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&CapacityReservationSpecification=" + (CapacityReservationSpecification==null? "" : Uri.EscapeDataString(CapacityReservationSpecification))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching attributes, or run On-Demand Instance capacity.
		/// POST_ModifyInstanceCapacityReservationAttributes #Action=ModifyInstanceCapacityReservationAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstanceCapacityReservationAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceCapacityReservationAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifyInstanceCreditSpecification #Action=ModifyInstanceCreditSpecification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken">A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="InstanceCreditSpecification">Information about the credit option for CPU usage.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstanceCreditSpecificationAsync(bool DryRun, string ClientToken, InstanceCreditSpecificationRequest[] InstanceCreditSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceCreditSpecification?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&"+String.Join("&", InstanceCreditSpecification.Select(z => $"InstanceCreditSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifyInstanceCreditSpecification #Action=ModifyInstanceCreditSpecification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstanceCreditSpecificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceCreditSpecification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the start time for a scheduled Amazon EC2 instance event.
		/// GET_ModifyInstanceEventStartTime #Action=ModifyInstanceEventStartTime
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance with the scheduled event.</param>
		/// <param name="InstanceEventId">The ID of the event whose date and time you are modifying.</param>
		/// <param name="NotBefore">The new date and time when the event will take place.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstanceEventStartTimeAsync(bool DryRun, string InstanceId, string InstanceEventId, System.DateTimeOffset NotBefore, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceEventStartTime?DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&InstanceEventId=" + (InstanceEventId==null? "" : Uri.EscapeDataString(InstanceEventId))+"&NotBefore=" + NotBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the start time for a scheduled Amazon EC2 instance event.
		/// POST_ModifyInstanceEventStartTime #Action=ModifyInstanceEventStartTime
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstanceEventStartTimeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceEventStartTime?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a>.
		/// GET_ModifyInstanceMetadataOptions #Action=ModifyInstanceMetadataOptions
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="HttpTokens"><p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p> <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.</p> <p>If the state is <code>required</code>, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.</p></param>
		/// <param name="HttpPutResponseHopLimit"><p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained.</p> <p>Possible values: Integers from 1 to 64</p></param>
		/// <param name="HttpEndpoint"><p>This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained.</p> <note> <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p> </note></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstanceMetadataOptionsAsync(string InstanceId, LaunchTemplateHttpTokensState HttpTokens, int HttpPutResponseHopLimit, LaunchTemplateInstanceMetadataEndpointState HttpEndpoint, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceMetadataOptions?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&HttpTokens=" + HttpTokens+"&HttpPutResponseHopLimit="+HttpPutResponseHopLimit+"&HttpEndpoint=" + HttpEndpoint+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a>.
		/// POST_ModifyInstanceMetadataOptions #Action=ModifyInstanceMetadataOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstanceMetadataOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstanceMetadataOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the placement attributes for a specified instance. You can do the following:</p> <ul> <li> <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Host</a>. When affinity is set to <code>host</code> and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.</p> </li> <li> <p>Change the Dedicated Host with which an instance is associated.</p> </li> <li> <p>Change the instance tenancy of an instance from <code>host</code> to <code>dedicated</code>, or from <code>dedicated</code> to <code>host</code>.</p> </li> <li> <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement group</a>.</p> </li> </ul> <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.</p> <p>To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the <code>stopped</code> state.</p>
		/// GET_ModifyInstancePlacement #Action=ModifyInstancePlacement
		/// </summary>
		/// <param name="Affinity">The affinity setting for the instance.</param>
		/// <param name="GroupName"><p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string ("").</p></param>
		/// <param name="HostId">The ID of the Dedicated Host with which to associate the instance.</param>
		/// <param name="InstanceId">The ID of the instance that you are modifying.</param>
		/// <param name="Tenancy">The tenancy for the instance.</param>
		/// <param name="PartitionNumber">Reserved for future use.</param>
		/// <param name="HostResourceGroupArn">The ARN of the host resource group in which to place the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyInstancePlacementAsync(Affinity Affinity, string GroupName, string HostId, string InstanceId, HostTenancy Tenancy, int PartitionNumber, string HostResourceGroupArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstancePlacement?Affinity=" + Affinity+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&HostId=" + (HostId==null? "" : Uri.EscapeDataString(HostId))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Tenancy=" + Tenancy+"&PartitionNumber="+PartitionNumber+"&HostResourceGroupArn=" + (HostResourceGroupArn==null? "" : Uri.EscapeDataString(HostResourceGroupArn))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the placement attributes for a specified instance. You can do the following:</p> <ul> <li> <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Host</a>. When affinity is set to <code>host</code> and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.</p> </li> <li> <p>Change the Dedicated Host with which an instance is associated.</p> </li> <li> <p>Change the instance tenancy of an instance from <code>host</code> to <code>dedicated</code>, or from <code>dedicated</code> to <code>host</code>.</p> </li> <li> <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement group</a>.</p> </li> </ul> <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.</p> <p>To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the <code>stopped</code> state.</p>
		/// POST_ModifyInstancePlacement #Action=ModifyInstancePlacement
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyInstancePlacementAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyInstancePlacement?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
		/// GET_ModifyLaunchTemplate #Action=ModifyLaunchTemplate
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p></param>
		/// <param name="LaunchTemplateId">The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="LaunchTemplateName">The name of the launch template. You must specify either the launch template ID or launch template name in the request.</param>
		/// <param name="SetDefaultVersion">The version number of the launch template to set as the default version.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyLaunchTemplateAsync(bool DryRun, string ClientToken, string LaunchTemplateId, string LaunchTemplateName, string SetDefaultVersion, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyLaunchTemplate?DryRun="+DryRun+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&LaunchTemplateId=" + (LaunchTemplateId==null? "" : Uri.EscapeDataString(LaunchTemplateId))+"&LaunchTemplateName=" + (LaunchTemplateName==null? "" : Uri.EscapeDataString(LaunchTemplateName))+"&SetDefaultVersion=" + (SetDefaultVersion==null? "" : Uri.EscapeDataString(SetDefaultVersion))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
		/// POST_ModifyLaunchTemplate #Action=ModifyLaunchTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyLaunchTemplateAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyLaunchTemplate?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.
		/// GET_ModifyNetworkInterfaceAttribute #Action=ModifyNetworkInterfaceAttribute
		/// </summary>
		/// <param name="Attachment">Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</param>
		/// <param name="Description">A description for the network interface.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SecurityGroupId">Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <param name="SourceDestCheck">Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyNetworkInterfaceAttributeAsync(string Attachment, string Description, bool DryRun, string[] SecurityGroupId, string NetworkInterfaceId, string SourceDestCheck, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyNetworkInterfaceAttribute?Attachment=" + (Attachment==null? "" : Uri.EscapeDataString(Attachment))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&SourceDestCheck=" + (SourceDestCheck==null? "" : Uri.EscapeDataString(SourceDestCheck))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.
		/// POST_ModifyNetworkInterfaceAttribute #Action=ModifyNetworkInterfaceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyNetworkInterfaceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyNetworkInterfaceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
		/// GET_ModifyReservedInstances #Action=ModifyReservedInstances
		/// </summary>
		/// <param name="ReservedInstancesId">The IDs of the Reserved Instances to modify.</param>
		/// <param name="ClientToken">A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="ReservedInstancesConfigurationSetItemType">The configuration settings for the Reserved Instances to modify.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyReservedInstancesAsync(string[] ReservedInstancesId, string ClientToken, ReservedInstancesConfiguration[] ReservedInstancesConfigurationSetItemType, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyReservedInstances?"+String.Join("&", ReservedInstancesId.Select(z => $"ReservedInstancesId={Uri.EscapeDataString(z.ToString())}"))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&"+String.Join("&", ReservedInstancesConfigurationSetItemType.Select(z => $"ReservedInstancesConfigurationSetItemType={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
		/// POST_ModifyReservedInstances #Action=ModifyReservedInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyReservedInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyReservedInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p> <p>Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifySnapshotAttribute #Action=ModifySnapshotAttribute
		/// </summary>
		/// <param name="Attribute">The snapshot attribute to modify. Only volume creation permissions can be modified.</param>
		/// <param name="CreateVolumePermission">A JSON representation of the snapshot attribute modification.</param>
		/// <param name="UserGroup">The group to modify for the snapshot.</param>
		/// <param name="OperationType">The type of operation to perform to the attribute.</param>
		/// <param name="SnapshotId">The ID of the snapshot.</param>
		/// <param name="UserId">The account ID to modify for the snapshot.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySnapshotAttributeAsync(SnapshotAttributeName Attribute, string CreateVolumePermission, string[] UserGroup, OperationType OperationType, string SnapshotId, string[] UserId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySnapshotAttribute?Attribute=" + Attribute+"&CreateVolumePermission=" + (CreateVolumePermission==null? "" : Uri.EscapeDataString(CreateVolumePermission))+"&"+String.Join("&", UserGroup.Select(z => $"UserGroup={Uri.EscapeDataString(z.ToString())}"))+"&OperationType=" + OperationType+"&SnapshotId=" + (SnapshotId==null? "" : Uri.EscapeDataString(SnapshotId))+"&"+String.Join("&", UserId.Select(z => $"UserId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.</p> <p>Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifySnapshotAttribute #Action=ModifySnapshotAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifySnapshotAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySnapshotAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified Spot Fleet request.</p> <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p> <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
		/// GET_ModifySpotFleetRequest #Action=ModifySpotFleetRequest
		/// </summary>
		/// <param name="ExcessCapacityTerminationPolicy">Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.</param>
		/// <param name="SpotFleetRequestId">The ID of the Spot Fleet request.</param>
		/// <param name="TargetCapacity">The size of the fleet.</param>
		/// <param name="OnDemandTargetCapacity">The number of On-Demand Instances in the fleet.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifySpotFleetRequestAsync(ExcessCapacityTerminationPolicy ExcessCapacityTerminationPolicy, string SpotFleetRequestId, int TargetCapacity, int OnDemandTargetCapacity, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySpotFleetRequest?ExcessCapacityTerminationPolicy=" + ExcessCapacityTerminationPolicy+"&SpotFleetRequestId=" + (SpotFleetRequestId==null? "" : Uri.EscapeDataString(SpotFleetRequestId))+"&TargetCapacity="+TargetCapacity+"&OnDemandTargetCapacity="+OnDemandTargetCapacity+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified Spot Fleet request.</p> <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p> <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p> <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>capacityOptimized</code>, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is <code>diversified</code>, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
		/// POST_ModifySpotFleetRequest #Action=ModifySpotFleetRequest
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifySpotFleetRequestAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySpotFleetRequest?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a subnet attribute. You can only modify one attribute at a time.
		/// GET_ModifySubnetAttribute #Action=ModifySubnetAttribute
		/// </summary>
		/// <param name="AssignIpv6AddressOnCreation"><p>Specify <code>true</code> to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). </p> <p>If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version <code>2016-11-15</code> or later of the Amazon EC2 API.</p></param>
		/// <param name="MapPublicIpOnLaunch">Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.</param>
		/// <param name="SubnetId">The ID of the subnet.</param>
		/// <param name="MapCustomerOwnedIpOnLaunch"><p>Specify <code>true</code> to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address.</p> <p>When this value is <code>true</code>, you must specify the customer-owned IP pool using <code>CustomerOwnedIpv4Pool</code>.</p></param>
		/// <param name="CustomerOwnedIpv4Pool"><p>The customer-owned IPv4 address pool associated with the subnet.</p> <p>You must set this value when you specify <code>true</code> for <code>MapCustomerOwnedIpOnLaunch</code>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifySubnetAttributeAsync(string AssignIpv6AddressOnCreation, string MapPublicIpOnLaunch, string SubnetId, string MapCustomerOwnedIpOnLaunch, string CustomerOwnedIpv4Pool, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySubnetAttribute?AssignIpv6AddressOnCreation=" + (AssignIpv6AddressOnCreation==null? "" : Uri.EscapeDataString(AssignIpv6AddressOnCreation))+"&MapPublicIpOnLaunch=" + (MapPublicIpOnLaunch==null? "" : Uri.EscapeDataString(MapPublicIpOnLaunch))+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&MapCustomerOwnedIpOnLaunch=" + (MapCustomerOwnedIpOnLaunch==null? "" : Uri.EscapeDataString(MapCustomerOwnedIpOnLaunch))+"&CustomerOwnedIpv4Pool=" + (CustomerOwnedIpv4Pool==null? "" : Uri.EscapeDataString(CustomerOwnedIpv4Pool))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a subnet attribute. You can only modify one attribute at a time.
		/// POST_ModifySubnetAttribute #Action=ModifySubnetAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifySubnetAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifySubnetAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows or restricts mirroring network services.</p> <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter. </p> <p>For information about filter rule properties, see <a href="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html">Network Services</a> in the <i>Traffic Mirroring User Guide </i>.</p>
		/// GET_ModifyTrafficMirrorFilterNetworkServices #Action=ModifyTrafficMirrorFilterNetworkServices
		/// </summary>
		/// <param name="TrafficMirrorFilterId">The ID of the Traffic Mirror filter.</param>
		/// <param name="AddNetworkService">The network service, for example Amazon DNS, that you want to mirror.</param>
		/// <param name="RemoveNetworkService">The network service, for example Amazon DNS, that you no longer want to mirror.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTrafficMirrorFilterNetworkServicesAsync(string TrafficMirrorFilterId, TrafficMirrorNetworkService[] AddNetworkService, TrafficMirrorNetworkService[] RemoveNetworkService, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorFilterNetworkServices?TrafficMirrorFilterId=" + (TrafficMirrorFilterId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterId))+"&"+String.Join("&", AddNetworkService.Select(z => $"AddNetworkService={z}"))+"&"+String.Join("&", RemoveNetworkService.Select(z => $"RemoveNetworkService={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Allows or restricts mirroring network services.</p> <p> By default, Amazon DNS network services are not eligible for Traffic Mirror. Use <code>AddNetworkServices</code> to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use <code>RemoveNetworkServices</code> to remove the network services from the Traffic Mirror filter. </p> <p>For information about filter rule properties, see <a href="https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html">Network Services</a> in the <i>Traffic Mirroring User Guide </i>.</p>
		/// POST_ModifyTrafficMirrorFilterNetworkServices #Action=ModifyTrafficMirrorFilterNetworkServices
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyTrafficMirrorFilterNetworkServicesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorFilterNetworkServices?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified Traffic Mirror rule.</p> <p> <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4 range or an IPv6 range.</p>
		/// GET_ModifyTrafficMirrorFilterRule #Action=ModifyTrafficMirrorFilterRule
		/// </summary>
		/// <param name="TrafficMirrorFilterRuleId">The ID of the Traffic Mirror rule.</param>
		/// <param name="TrafficDirection">The type of traffic (<code>ingress</code> | <code>egress</code>) to assign to the rule.</param>
		/// <param name="RuleNumber">The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.</param>
		/// <param name="RuleAction">The action to assign to the rule.</param>
		/// <param name="DestinationPortRange">The destination ports that are associated with the Traffic Mirror rule.</param>
		/// <param name="SourcePortRange">The port range to assign to the Traffic Mirror rule.</param>
		/// <param name="Protocol">The protocol, for example TCP, to assign to the Traffic Mirror rule.</param>
		/// <param name="DestinationCidrBlock">The destination CIDR block to assign to the Traffic Mirror rule.</param>
		/// <param name="SourceCidrBlock">The source CIDR block to assign to the Traffic Mirror rule.</param>
		/// <param name="Description">The description to assign to the Traffic Mirror rule.</param>
		/// <param name="RemoveField"><p>The properties that you want to remove from the Traffic Mirror filter rule.</p> <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTrafficMirrorFilterRuleAsync(string TrafficMirrorFilterRuleId, TrafficDirection TrafficDirection, int RuleNumber, TrafficMirrorRuleAction RuleAction, string DestinationPortRange, string SourcePortRange, int Protocol, string DestinationCidrBlock, string SourceCidrBlock, string Description, TrafficMirrorFilterRuleField[] RemoveField, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorFilterRule?TrafficMirrorFilterRuleId=" + (TrafficMirrorFilterRuleId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterRuleId))+"&TrafficDirection=" + TrafficDirection+"&RuleNumber="+RuleNumber+"&RuleAction=" + RuleAction+"&DestinationPortRange=" + (DestinationPortRange==null? "" : Uri.EscapeDataString(DestinationPortRange))+"&SourcePortRange=" + (SourcePortRange==null? "" : Uri.EscapeDataString(SourcePortRange))+"&Protocol="+Protocol+"&DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&SourceCidrBlock=" + (SourceCidrBlock==null? "" : Uri.EscapeDataString(SourceCidrBlock))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", RemoveField.Select(z => $"RemoveField={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the specified Traffic Mirror rule.</p> <p> <code>DestinationCidrBlock</code> and <code>SourceCidrBlock</code> must both be an IPv4 range or an IPv6 range.</p>
		/// POST_ModifyTrafficMirrorFilterRule #Action=ModifyTrafficMirrorFilterRule
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyTrafficMirrorFilterRuleAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorFilterRule?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a Traffic Mirror session.
		/// GET_ModifyTrafficMirrorSession #Action=ModifyTrafficMirrorSession
		/// </summary>
		/// <param name="TrafficMirrorSessionId">The ID of the Traffic Mirror session.</param>
		/// <param name="TrafficMirrorTargetId">The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.</param>
		/// <param name="TrafficMirrorFilterId">The ID of the Traffic Mirror filter.</param>
		/// <param name="PacketLength">The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.</param>
		/// <param name="SessionNumber"><p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p></param>
		/// <param name="VirtualNetworkId">The virtual network ID of the Traffic Mirror session.</param>
		/// <param name="Description">The description to assign to the Traffic Mirror session.</param>
		/// <param name="RemoveField"><p>The properties that you want to remove from the Traffic Mirror session.</p> <p>When you remove a property from a Traffic Mirror session, the property is set to the default.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTrafficMirrorSessionAsync(string TrafficMirrorSessionId, string TrafficMirrorTargetId, string TrafficMirrorFilterId, int PacketLength, int SessionNumber, int VirtualNetworkId, string Description, TrafficMirrorSessionField[] RemoveField, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorSession?TrafficMirrorSessionId=" + (TrafficMirrorSessionId==null? "" : Uri.EscapeDataString(TrafficMirrorSessionId))+"&TrafficMirrorTargetId=" + (TrafficMirrorTargetId==null? "" : Uri.EscapeDataString(TrafficMirrorTargetId))+"&TrafficMirrorFilterId=" + (TrafficMirrorFilterId==null? "" : Uri.EscapeDataString(TrafficMirrorFilterId))+"&PacketLength="+PacketLength+"&SessionNumber="+SessionNumber+"&VirtualNetworkId="+VirtualNetworkId+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&"+String.Join("&", RemoveField.Select(z => $"RemoveField={z}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a Traffic Mirror session.
		/// POST_ModifyTrafficMirrorSession #Action=ModifyTrafficMirrorSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyTrafficMirrorSessionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTrafficMirrorSession?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified VPC attachment.
		/// GET_ModifyTransitGatewayVpcAttachment #Action=ModifyTransitGatewayVpcAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="AddSubnetIds">The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.</param>
		/// <param name="RemoveSubnetIds">The IDs of one or more subnets to remove.</param>
		/// <param name="Options"><p>The new VPC attachment options.</p> <note> <p>You cannot modify the IPv6 options.</p> </note></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyTransitGatewayVpcAttachmentAsync(string TransitGatewayAttachmentId, string[] AddSubnetIds, string[] RemoveSubnetIds, string Options, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTransitGatewayVpcAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&"+String.Join("&", AddSubnetIds.Select(z => $"AddSubnetIds={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveSubnetIds.Select(z => $"RemoveSubnetIds={Uri.EscapeDataString(z.ToString())}"))+"&Options=" + (Options==null? "" : Uri.EscapeDataString(Options))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified VPC attachment.
		/// POST_ModifyTransitGatewayVpcAttachment #Action=ModifyTransitGatewayVpcAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyTransitGatewayVpcAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyTransitGatewayVpcAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a>. For more information about modifying an EBS volume running Windows, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>. </p> <p> When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extending a Linux File System</a>. For information about extending a Windows file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extending a Windows File System</a>. </p> <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a modification using <a>DescribeVolumesModifications</a>. For information about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications</a>. </p> <p>With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>.</p> <p>If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.</p>
		/// GET_ModifyVolume #Action=ModifyVolume
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <param name="Size"><p>The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a>.</p> <p>Default: If no size is specified, the existing size is retained.</p></param>
		/// <param name="VolumeType"><p>The target EBS volume type of the volume.</p> <p>Default: If no type is specified, the existing type is retained.</p></param>
		/// <param name="Iops"><p>The target IOPS rate of the volume.</p> <p>This is only valid for Provisioned IOPS SSD (<code>io1</code>) volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops">Provisioned IOPS SSD (io1) Volumes</a>.</p> <p>Default: If no IOPS value is specified, the existing value is retained.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVolumeAsync(bool DryRun, string VolumeId, int Size, VolumeType VolumeType, int Iops, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVolume?DryRun="+DryRun+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&Size="+Size+"&VolumeType=" + VolumeType+"&Iops="+Iops+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a>. For more information about modifying an EBS volume running Windows, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>. </p> <p> When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extending a Linux File System</a>. For information about extending a Windows file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extending a Windows File System</a>. </p> <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a modification using <a>DescribeVolumesModifications</a>. For information about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications</a>. </p> <p>With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>.</p> <p>If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.</p>
		/// POST_ModifyVolume #Action=ModifyVolume
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVolumeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVolume?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
		/// GET_ModifyVolumeAttribute #Action=ModifyVolumeAttribute
		/// </summary>
		/// <param name="AutoEnableIO">Indicates whether the volume should be auto-enabled for I/O operations.</param>
		/// <param name="VolumeId">The ID of the volume.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVolumeAttributeAsync(string AutoEnableIO, string VolumeId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVolumeAttribute?AutoEnableIO=" + (AutoEnableIO==null? "" : Uri.EscapeDataString(AutoEnableIO))+"&VolumeId=" + (VolumeId==null? "" : Uri.EscapeDataString(VolumeId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
		/// POST_ModifyVolumeAttribute #Action=ModifyVolumeAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVolumeAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVolumeAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attribute of the specified VPC.
		/// GET_ModifyVpcAttribute #Action=ModifyVpcAttribute
		/// </summary>
		/// <param name="EnableDnsHostnames"><p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p></param>
		/// <param name="EnableDnsSupport"><p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p></param>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcAttributeAsync(string EnableDnsHostnames, string EnableDnsSupport, string VpcId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcAttribute?EnableDnsHostnames=" + (EnableDnsHostnames==null? "" : Uri.EscapeDataString(EnableDnsHostnames))+"&EnableDnsSupport=" + (EnableDnsSupport==null? "" : Uri.EscapeDataString(EnableDnsSupport))+"&VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified attribute of the specified VPC.
		/// POST_ModifyVpcAttribute #Action=ModifyVpcAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// GET_ModifyVpcEndpoint #Action=ModifyVpcEndpoint
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcEndpointId">The ID of the endpoint.</param>
		/// <param name="ResetPolicy">(Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service.</param>
		/// <param name="PolicyDocument">A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.</param>
		/// <param name="AddRouteTableId">(Gateway endpoint) One or more route tables IDs to associate with the endpoint.</param>
		/// <param name="RemoveRouteTableId">(Gateway endpoint) One or more route table IDs to disassociate from the endpoint.</param>
		/// <param name="AddSubnetId">(Interface endpoint) One or more subnet IDs in which to serve the endpoint.</param>
		/// <param name="RemoveSubnetId">(Interface endpoint) One or more subnets IDs in which to remove the endpoint.</param>
		/// <param name="AddSecurityGroupId">(Interface endpoint) One or more security group IDs to associate with the network interface.</param>
		/// <param name="RemoveSecurityGroupId">(Interface endpoint) One or more security group IDs to disassociate from the network interface.</param>
		/// <param name="PrivateDnsEnabled">(Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcEndpointAsync(bool DryRun, string VpcEndpointId, bool ResetPolicy, string PolicyDocument, string[] AddRouteTableId, string[] RemoveRouteTableId, string[] AddSubnetId, string[] RemoveSubnetId, string[] AddSecurityGroupId, string[] RemoveSecurityGroupId, bool PrivateDnsEnabled, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpoint?DryRun="+DryRun+"&VpcEndpointId=" + (VpcEndpointId==null? "" : Uri.EscapeDataString(VpcEndpointId))+"&ResetPolicy="+ResetPolicy+"&PolicyDocument=" + (PolicyDocument==null? "" : Uri.EscapeDataString(PolicyDocument))+"&"+String.Join("&", AddRouteTableId.Select(z => $"AddRouteTableId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveRouteTableId.Select(z => $"RemoveRouteTableId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", AddSubnetId.Select(z => $"AddSubnetId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveSubnetId.Select(z => $"RemoveSubnetId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", AddSecurityGroupId.Select(z => $"AddSecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveSecurityGroupId.Select(z => $"RemoveSecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&PrivateDnsEnabled="+PrivateDnsEnabled+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// POST_ModifyVpcEndpoint #Action=ModifyVpcEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcEndpointAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpoint?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.
		/// GET_ModifyVpcEndpointConnectionNotification #Action=ModifyVpcEndpointConnectionNotification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ConnectionNotificationId">The ID of the notification.</param>
		/// <param name="ConnectionNotificationArn">The ARN for the SNS topic for the notification.</param>
		/// <param name="ConnectionEvents">One or more events for the endpoint. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcEndpointConnectionNotificationAsync(bool DryRun, string ConnectionNotificationId, string ConnectionNotificationArn, string[] ConnectionEvents, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointConnectionNotification?DryRun="+DryRun+"&ConnectionNotificationId=" + (ConnectionNotificationId==null? "" : Uri.EscapeDataString(ConnectionNotificationId))+"&ConnectionNotificationArn=" + (ConnectionNotificationArn==null? "" : Uri.EscapeDataString(ConnectionNotificationArn))+"&"+String.Join("&", ConnectionEvents.Select(z => $"ConnectionEvents={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.
		/// POST_ModifyVpcEndpointConnectionNotification #Action=ModifyVpcEndpointConnectionNotification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcEndpointConnectionNotificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointConnectionNotification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.</p> <p>If you set or modify the private DNS name, you must prove that you own the private DNS domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_ModifyVpcEndpointServiceConfiguration #Action=ModifyVpcEndpointServiceConfiguration
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the service.</param>
		/// <param name="PrivateDnsName">The private DNS name to assign to the endpoint service.</param>
		/// <param name="RemovePrivateDnsName">Removes the private DNS name of the endpoint service.</param>
		/// <param name="AcceptanceRequired">Indicates whether requests to create an endpoint to your service must be accepted.</param>
		/// <param name="AddNetworkLoadBalancerArn">The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.</param>
		/// <param name="RemoveNetworkLoadBalancerArn">The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcEndpointServiceConfigurationAsync(bool DryRun, string ServiceId, string PrivateDnsName, bool RemovePrivateDnsName, bool AcceptanceRequired, string[] AddNetworkLoadBalancerArn, string[] RemoveNetworkLoadBalancerArn, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointServiceConfiguration?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&PrivateDnsName=" + (PrivateDnsName==null? "" : Uri.EscapeDataString(PrivateDnsName))+"&RemovePrivateDnsName="+RemovePrivateDnsName+"&AcceptanceRequired="+AcceptanceRequired+"&"+String.Join("&", AddNetworkLoadBalancerArn.Select(z => $"AddNetworkLoadBalancerArn={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveNetworkLoadBalancerArn.Select(z => $"RemoveNetworkLoadBalancerArn={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.</p> <p>If you set or modify the private DNS name, you must prove that you own the private DNS domain name. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-services-dns-validation.html">VPC Endpoint Service Private DNS Name Verification</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_ModifyVpcEndpointServiceConfiguration #Action=ModifyVpcEndpointServiceConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcEndpointServiceConfigurationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointServiceConfiguration?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.</p> <p>If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.</p>
		/// GET_ModifyVpcEndpointServicePermissions #Action=ModifyVpcEndpointServicePermissions
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the service.</param>
		/// <param name="AddAllowedPrincipals">The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).</param>
		/// <param name="RemoveAllowedPrincipals">The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcEndpointServicePermissionsAsync(bool DryRun, string ServiceId, string[] AddAllowedPrincipals, string[] RemoveAllowedPrincipals, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointServicePermissions?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&"+String.Join("&", AddAllowedPrincipals.Select(z => $"AddAllowedPrincipals={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", RemoveAllowedPrincipals.Select(z => $"RemoveAllowedPrincipals={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.</p> <p>If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.</p>
		/// POST_ModifyVpcEndpointServicePermissions #Action=ModifyVpcEndpointServicePermissions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcEndpointServicePermissionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcEndpointServicePermissions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p> <ul> <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li> <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li> <li> <p>Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li> </ul> <p>If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
		/// GET_ModifyVpcPeeringConnectionOptions #Action=ModifyVpcPeeringConnectionOptions
		/// </summary>
		/// <param name="AccepterPeeringConnectionOptions">The VPC peering connection options for the accepter VPC.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RequesterPeeringConnectionOptions">The VPC peering connection options for the requester VPC.</param>
		/// <param name="VpcPeeringConnectionId">The ID of the VPC peering connection.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcPeeringConnectionOptionsAsync(string AccepterPeeringConnectionOptions, bool DryRun, string RequesterPeeringConnectionOptions, string VpcPeeringConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcPeeringConnectionOptions?AccepterPeeringConnectionOptions=" + (AccepterPeeringConnectionOptions==null? "" : Uri.EscapeDataString(AccepterPeeringConnectionOptions))+"&DryRun="+DryRun+"&RequesterPeeringConnectionOptions=" + (RequesterPeeringConnectionOptions==null? "" : Uri.EscapeDataString(RequesterPeeringConnectionOptions))+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p> <ul> <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li> <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li> <li> <p>Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li> </ul> <p>If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
		/// POST_ModifyVpcPeeringConnectionOptions #Action=ModifyVpcPeeringConnectionOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcPeeringConnectionOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcPeeringConnectionOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the instance tenancy attribute to <code>dedicated</code>.</p> <p>After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ModifyVpcTenancy #Action=ModifyVpcTenancy
		/// </summary>
		/// <param name="VpcId">The ID of the VPC.</param>
		/// <param name="InstanceTenancy">The instance tenancy attribute for the VPC. </param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpcTenancyAsync(string VpcId, VpcTenancy InstanceTenancy, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcTenancy?VpcId=" + (VpcId==null? "" : Uri.EscapeDataString(VpcId))+"&InstanceTenancy=" + InstanceTenancy+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the instance tenancy attribute to <code>dedicated</code>.</p> <p>After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ModifyVpcTenancy #Action=ModifyVpcTenancy
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpcTenancyAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpcTenancy?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the customer gateway or the target gateway of an AWS Site-to-Site VPN connection. To modify the target gateway, the following migration options are available:</p> <ul> <li> <p>An existing virtual private gateway to a new virtual private gateway</p> </li> <li> <p>An existing virtual private gateway to a transit gateway</p> </li> <li> <p>An existing transit gateway to a new transit gateway</p> </li> <li> <p>An existing transit gateway to a virtual private gateway</p> </li> </ul> <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p> <p>This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. </p> <p>You must delete the static routes before you migrate to the new gateway.</p> <p>Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.</p> <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN Gateway Target Modification Required VPC Route Table Updates</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <p> When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p> <p> If you deleted VPN static routes, you must add the static routes to the transit gateway route table.</p> <p>After you perform this operation, the AWS VPN endpoint's IP addresses on the AWS side and the tunnel options remain intact. Your AWS Site-to-Site VPN connection will be temporarily unavailable for a brief period while we provision the new endpoints.</p>
		/// GET_ModifyVpnConnection #Action=ModifyVpnConnection
		/// </summary>
		/// <param name="VpnConnectionId">The ID of the VPN connection.</param>
		/// <param name="TransitGatewayId">The ID of the transit gateway.</param>
		/// <param name="CustomerGatewayId">The ID of the customer gateway at your end of the VPN connection.</param>
		/// <param name="VpnGatewayId">The ID of the virtual private gateway at the AWS side of the VPN connection.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpnConnectionAsync(string VpnConnectionId, string TransitGatewayId, string CustomerGatewayId, string VpnGatewayId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnConnection?VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&CustomerGatewayId=" + (CustomerGatewayId==null? "" : Uri.EscapeDataString(CustomerGatewayId))+"&VpnGatewayId=" + (VpnGatewayId==null? "" : Uri.EscapeDataString(VpnGatewayId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the customer gateway or the target gateway of an AWS Site-to-Site VPN connection. To modify the target gateway, the following migration options are available:</p> <ul> <li> <p>An existing virtual private gateway to a new virtual private gateway</p> </li> <li> <p>An existing virtual private gateway to a transit gateway</p> </li> <li> <p>An existing transit gateway to a new transit gateway</p> </li> <li> <p>An existing transit gateway to a virtual private gateway</p> </li> </ul> <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p> <p>This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. </p> <p>You must delete the static routes before you migrate to the new gateway.</p> <p>Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.</p> <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN Gateway Target Modification Required VPC Route Table Updates</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <p> When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p> <p> If you deleted VPN static routes, you must add the static routes to the transit gateway route table.</p> <p>After you perform this operation, the AWS VPN endpoint's IP addresses on the AWS side and the tunnel options remain intact. Your AWS Site-to-Site VPN connection will be temporarily unavailable for a brief period while we provision the new endpoints.</p>
		/// POST_ModifyVpnConnection #Action=ModifyVpnConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpnConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the VPN tunnel endpoint certificate.
		/// GET_ModifyVpnTunnelCertificate #Action=ModifyVpnTunnelCertificate
		/// </summary>
		/// <param name="VpnConnectionId">The ID of the AWS Site-to-Site VPN connection.</param>
		/// <param name="VpnTunnelOutsideIpAddress">The external IP address of the VPN tunnel.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpnTunnelCertificateAsync(string VpnConnectionId, string VpnTunnelOutsideIpAddress, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnTunnelCertificate?VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&VpnTunnelOutsideIpAddress=" + (VpnTunnelOutsideIpAddress==null? "" : Uri.EscapeDataString(VpnTunnelOutsideIpAddress))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the VPN tunnel endpoint certificate.
		/// POST_ModifyVpnTunnelCertificate #Action=ModifyVpnTunnelCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpnTunnelCertificateAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnTunnelCertificate?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
		/// GET_ModifyVpnTunnelOptions #Action=ModifyVpnTunnelOptions
		/// </summary>
		/// <param name="VpnConnectionId">The ID of the AWS Site-to-Site VPN connection.</param>
		/// <param name="VpnTunnelOutsideIpAddress">The external IP address of the VPN tunnel.</param>
		/// <param name="TunnelOptions">The tunnel options to modify.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ModifyVpnTunnelOptionsAsync(string VpnConnectionId, string VpnTunnelOutsideIpAddress, string TunnelOptions, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnTunnelOptions?VpnConnectionId=" + (VpnConnectionId==null? "" : Uri.EscapeDataString(VpnConnectionId))+"&VpnTunnelOutsideIpAddress=" + (VpnTunnelOutsideIpAddress==null? "" : Uri.EscapeDataString(VpnTunnelOutsideIpAddress))+"&TunnelOptions=" + (TunnelOptions==null? "" : Uri.EscapeDataString(TunnelOptions))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html">Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection</a> in the <i>AWS Site-to-Site VPN User Guide</i>.
		/// POST_ModifyVpnTunnelOptions #Action=ModifyVpnTunnelOptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ModifyVpnTunnelOptionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ModifyVpnTunnelOptions?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>To disable detailed monitoring, see .</p>
		/// GET_MonitorInstances #Action=MonitorInstances
		/// </summary>
		/// <param name="InstanceId">The IDs of the instances.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_MonitorInstancesAsync(string[] InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=MonitorInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>To disable detailed monitoring, see .</p>
		/// POST_MonitorInstances #Action=MonitorInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_MonitorInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=MonitorInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.
		/// GET_MoveAddressToVpc #Action=MoveAddressToVpc
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="PublicIp">The Elastic IP address.</param>
		/// <returns>Success</returns>
		public async Task GET_MoveAddressToVpcAsync(bool DryRun, string PublicIp, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=MoveAddressToVpc?DryRun="+DryRun+"&PublicIp=" + (PublicIp==null? "" : Uri.EscapeDataString(PublicIp))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.
		/// POST_MoveAddressToVpc #Action=MoveAddressToVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_MoveAddressToVpcAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=MoveAddressToVpc?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions an IPv4 or IPv6 address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p> <p>AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from <code>pending-provision</code> to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your IPv4 address pool, use <a>AllocateAddress</a> with either the specific address from the address pool or the ID of the address pool.</p>
		/// GET_ProvisionByoipCidr #Action=ProvisionByoipCidr
		/// </summary>
		/// <param name="Cidr">The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region.</param>
		/// <param name="CidrAuthorizationContext">A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.</param>
		/// <param name="PubliclyAdvertisable"><p>(IPv6 only) Indicate whether the address range will be publicly advertised to the internet.</p> <p>Default: true</p></param>
		/// <param name="Description">A description for the address range and the address pool.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="PoolTagSpecification">The tags to apply to the address pool.</param>
		/// <returns>Success</returns>
		public async Task GET_ProvisionByoipCidrAsync(string Cidr, string CidrAuthorizationContext, bool PubliclyAdvertisable, string Description, bool DryRun, TagSpecification[] PoolTagSpecification, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ProvisionByoipCidr?Cidr=" + (Cidr==null? "" : Uri.EscapeDataString(Cidr))+"&CidrAuthorizationContext=" + (CidrAuthorizationContext==null? "" : Uri.EscapeDataString(CidrAuthorizationContext))+"&PubliclyAdvertisable="+PubliclyAdvertisable+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&"+String.Join("&", PoolTagSpecification.Select(z => $"PoolTagSpecification={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Provisions an IPv4 or IPv6 address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p> <p>AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from <code>pending-provision</code> to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your IPv4 address pool, use <a>AllocateAddress</a> with either the specific address from the address pool or the ID of the address pool.</p>
		/// POST_ProvisionByoipCidr #Action=ProvisionByoipCidr
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ProvisionByoipCidrAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ProvisionByoipCidr?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
		/// GET_PurchaseHostReservation #Action=PurchaseHostReservation
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</param>
		/// <param name="CurrencyCode">The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</param>
		/// <param name="HostIdSet">The IDs of the Dedicated Hosts with which the reservation will be associated.</param>
		/// <param name="LimitPrice">The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.</param>
		/// <param name="OfferingId">The ID of the offering.</param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseHostReservationAsync(string ClientToken, CurrencyCodeValues CurrencyCode, string[] HostIdSet, string LimitPrice, string OfferingId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseHostReservation?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&CurrencyCode=" + CurrencyCode+"&"+String.Join("&", HostIdSet.Select(z => $"HostIdSet={Uri.EscapeDataString(z.ToString())}"))+"&LimitPrice=" + (LimitPrice==null? "" : Uri.EscapeDataString(LimitPrice))+"&OfferingId=" + (OfferingId==null? "" : Uri.EscapeDataString(OfferingId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
		/// POST_PurchaseHostReservation #Action=PurchaseHostReservation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_PurchaseHostReservationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseHostReservation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_PurchaseReservedInstancesOffering #Action=PurchaseReservedInstancesOffering
		/// </summary>
		/// <param name="InstanceCount">The number of Reserved Instances to purchase.</param>
		/// <param name="ReservedInstancesOfferingId">The ID of the Reserved Instance offering to purchase.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="LimitPrice">Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</param>
		/// <param name="PurchaseTime">The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseReservedInstancesOfferingAsync(int InstanceCount, string ReservedInstancesOfferingId, bool DryRun, string LimitPrice, System.DateTimeOffset PurchaseTime, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseReservedInstancesOffering?InstanceCount="+InstanceCount+"&ReservedInstancesOfferingId=" + (ReservedInstancesOfferingId==null? "" : Uri.EscapeDataString(ReservedInstancesOfferingId))+"&DryRun="+DryRun+"&LimitPrice=" + (LimitPrice==null? "" : Uri.EscapeDataString(LimitPrice))+"&PurchaseTime=" + PurchaseTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_PurchaseReservedInstancesOffering #Action=PurchaseReservedInstancesOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_PurchaseReservedInstancesOfferingAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseReservedInstancesOffering?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Purchases the Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
		/// GET_PurchaseScheduledInstances #Action=PurchaseScheduledInstances
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="PurchaseRequest">The purchase requests.</param>
		/// <returns>Success</returns>
		public async Task GET_PurchaseScheduledInstancesAsync(string ClientToken, bool DryRun, PurchaseRequest[] PurchaseRequest, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseScheduledInstances?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&"+String.Join("&", PurchaseRequest.Select(z => $"PurchaseRequest={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Purchases the Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
		/// POST_PurchaseScheduledInstances #Action=PurchaseScheduledInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_PurchaseScheduledInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PurchaseScheduledInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting Console Output and Rebooting Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_RebootInstances #Action=RebootInstances
		/// </summary>
		/// <param name="InstanceId">The instance IDs.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RebootInstancesAsync(string[] InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebootInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting Console Output and Rebooting Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_RebootInstances #Action=RebootInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RebootInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RebootInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <note> <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI in a single request, so you don't have to register the AMI yourself.</p> </note> <p>You can also use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html">Launching a Linux Instance from a Backup</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.</p> <p>Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, instead of registering the AMI, do the following to preserve the billing product code association:</p> <ol> <li> <p>Launch an instance from an existing AMI with that billing product code.</p> </li> <li> <p>Customize the instance.</p> </li> <li> <p>Create an AMI from the instance using <a>CreateImage</a>.</p> </li> </ol> <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. For information about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Obtaining Billing Information</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p>
		/// GET_RegisterImage #Action=RegisterImage
		/// </summary>
		/// <param name="ImageLocation">The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the <code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.</param>
		/// <param name="Architecture"><p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p></param>
		/// <param name="BlockDeviceMapping">The block device mapping entries.</param>
		/// <param name="Description">A description for your AMI.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EnaSupport"><p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p></param>
		/// <param name="KernelId">The ID of the kernel.</param>
		/// <param name="Name"><p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p></param>
		/// <param name="BillingProduct">The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.</param>
		/// <param name="RamdiskId">The ID of the RAM disk.</param>
		/// <param name="RootDeviceName">The device name of the root device volume (for example, <code>/dev/sda1</code>).</param>
		/// <param name="SriovNetSupport"><p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p></param>
		/// <param name="VirtualizationType"><p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p> <p>Default: <code>paravirtual</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_RegisterImageAsync(
					string ImageLocation, 
					ArchitectureValues Architecture, 
					BlockDeviceMapping[] BlockDeviceMapping, 
					string Description, 
					bool DryRun, 
					bool EnaSupport, 
					string KernelId, 
					string Name, 
					string[] BillingProduct, 
					string RamdiskId, 
					string RootDeviceName, 
					string SriovNetSupport, 
					string VirtualizationType, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterImage?ImageLocation=" + (ImageLocation==null? "" : Uri.EscapeDataString(ImageLocation))+"&Architecture=" + Architecture+"&"+String.Join("&", BlockDeviceMapping.Select(z => $"BlockDeviceMapping={z}"))+"&Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&EnaSupport="+EnaSupport+"&KernelId=" + (KernelId==null? "" : Uri.EscapeDataString(KernelId))+"&Name=" + (Name==null? "" : Uri.EscapeDataString(Name))+"&"+String.Join("&", BillingProduct.Select(z => $"BillingProduct={Uri.EscapeDataString(z.ToString())}"))+"&RamdiskId=" + (RamdiskId==null? "" : Uri.EscapeDataString(RamdiskId))+"&RootDeviceName=" + (RootDeviceName==null? "" : Uri.EscapeDataString(RootDeviceName))+"&SriovNetSupport=" + (SriovNetSupport==null? "" : Uri.EscapeDataString(SriovNetSupport))+"&VirtualizationType=" + (VirtualizationType==null? "" : Uri.EscapeDataString(VirtualizationType))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <note> <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI in a single request, so you don't have to register the AMI yourself.</p> </note> <p>You can also use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html">Launching a Linux Instance from a Backup</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.</p> <p>Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, instead of registering the AMI, do the following to preserve the billing product code association:</p> <ol> <li> <p>Launch an instance from an existing AMI with that billing product code.</p> </li> <li> <p>Customize the instance.</p> </li> <li> <p>Create an AMI from the instance using <a>CreateImage</a>.</p> </li> </ol> <p>If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. For information about how to obtain the platform details and billing information of an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html">Obtaining Billing Information</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p>
		/// POST_RegisterImage #Action=RegisterImage
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RegisterImageAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterImage?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a set of tag keys to include in scheduled event notifications for your resources. </p> <p>To remove tags, use .</p>
		/// GET_RegisterInstanceEventNotificationAttributes #Action=RegisterInstanceEventNotificationAttributes
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceTagAttribute">Information about the tag keys to register.</param>
		/// <returns>Success</returns>
		public async Task GET_RegisterInstanceEventNotificationAttributesAsync(bool DryRun, string InstanceTagAttribute, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterInstanceEventNotificationAttributes?DryRun="+DryRun+"&InstanceTagAttribute=" + (InstanceTagAttribute==null? "" : Uri.EscapeDataString(InstanceTagAttribute))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a set of tag keys to include in scheduled event notifications for your resources. </p> <p>To remove tags, use .</p>
		/// POST_RegisterInstanceEventNotificationAttributes #Action=RegisterInstanceEventNotificationAttributes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RegisterInstanceEventNotificationAttributesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterInstanceEventNotificationAttributes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast Consideration</a> in <i>Amazon VPC Transit Gateways</i>.</p> <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added to the transit gateway multicast group.</p>
		/// GET_RegisterTransitGatewayMulticastGroupMembers #Action=RegisterTransitGatewayMulticastGroupMembers
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="GroupIpAddress">The IP address assigned to the transit gateway multicast group.</param>
		/// <param name="NetworkInterfaceIds">The group members' network interface IDs to register with the transit gateway multicast group.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RegisterTransitGatewayMulticastGroupMembersAsync(string TransitGatewayMulticastDomainId, string GroupIpAddress, string[] NetworkInterfaceIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterTransitGatewayMulticastGroupMembers?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&GroupIpAddress=" + (GroupIpAddress==null? "" : Uri.EscapeDataString(GroupIpAddress))+"&"+String.Join("&", NetworkInterfaceIds.Select(z => $"NetworkInterfaceIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast Consideration</a> in <i>Amazon VPC Transit Gateways</i>.</p> <p>After you add the members, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the members were added to the transit gateway multicast group.</p>
		/// POST_RegisterTransitGatewayMulticastGroupMembers #Action=RegisterTransitGatewayMulticastGroupMembers
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RegisterTransitGatewayMulticastGroupMembersAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterTransitGatewayMulticastGroupMembers?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers sources (network interfaces) with the specified transit gateway multicast group.</p> <p>A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast Considerations</a> in <i>Amazon VPC Transit Gateways</i>.</p> <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast group.</p>
		/// GET_RegisterTransitGatewayMulticastGroupSources #Action=RegisterTransitGatewayMulticastGroupSources
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="GroupIpAddress">The IP address assigned to the transit gateway multicast group.</param>
		/// <param name="NetworkInterfaceIds">The group sources' network interface IDs to register with the transit gateway multicast group.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RegisterTransitGatewayMulticastGroupSourcesAsync(string TransitGatewayMulticastDomainId, string GroupIpAddress, string[] NetworkInterfaceIds, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterTransitGatewayMulticastGroupSources?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&GroupIpAddress=" + (GroupIpAddress==null? "" : Uri.EscapeDataString(GroupIpAddress))+"&"+String.Join("&", NetworkInterfaceIds.Select(z => $"NetworkInterfaceIds={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers sources (network interfaces) with the specified transit gateway multicast group.</p> <p>A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits">Multicast Considerations</a> in <i>Amazon VPC Transit Gateways</i>.</p> <p>After you add the source, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html">SearchTransitGatewayMulticastGroups</a> to verify that the source was added to the multicast group.</p>
		/// POST_RegisterTransitGatewayMulticastGroupSources #Action=RegisterTransitGatewayMulticastGroupSources
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RegisterTransitGatewayMulticastGroupSourcesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RegisterTransitGatewayMulticastGroupSources?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects a transit gateway peering attachment request.
		/// GET_RejectTransitGatewayPeeringAttachment #Action=RejectTransitGatewayPeeringAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the transit gateway peering attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RejectTransitGatewayPeeringAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectTransitGatewayPeeringAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects a transit gateway peering attachment request.
		/// POST_RejectTransitGatewayPeeringAttachment #Action=RejectTransitGatewayPeeringAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RejectTransitGatewayPeeringAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectTransitGatewayPeeringAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Rejects a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
		/// GET_RejectTransitGatewayVpcAttachment #Action=RejectTransitGatewayVpcAttachment
		/// </summary>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RejectTransitGatewayVpcAttachmentAsync(string TransitGatewayAttachmentId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectTransitGatewayVpcAttachment?TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Rejects a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
		/// POST_RejectTransitGatewayVpcAttachment #Action=RejectTransitGatewayVpcAttachment
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RejectTransitGatewayVpcAttachmentAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectTransitGatewayVpcAttachment?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects one or more VPC endpoint connection requests to your VPC endpoint service.
		/// GET_RejectVpcEndpointConnections #Action=RejectVpcEndpointConnections
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the service.</param>
		/// <param name="VpcEndpointId">The IDs of one or more VPC endpoints.</param>
		/// <returns>Success</returns>
		public async Task GET_RejectVpcEndpointConnectionsAsync(bool DryRun, string ServiceId, string[] VpcEndpointId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectVpcEndpointConnections?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&"+String.Join("&", VpcEndpointId.Select(z => $"VpcEndpointId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects one or more VPC endpoint connection requests to your VPC endpoint service.
		/// POST_RejectVpcEndpointConnections #Action=RejectVpcEndpointConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RejectVpcEndpointConnectionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectVpcEndpointConnections?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.
		/// GET_RejectVpcPeeringConnection #Action=RejectVpcPeeringConnection
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="VpcPeeringConnectionId">The ID of the VPC peering connection.</param>
		/// <returns>Success</returns>
		public async Task GET_RejectVpcPeeringConnectionAsync(bool DryRun, string VpcPeeringConnectionId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectVpcPeeringConnection?DryRun="+DryRun+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.
		/// POST_RejectVpcPeeringConnection #Action=RejectVpcPeeringConnection
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RejectVpcPeeringConnectionAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RejectVpcPeeringConnection?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Releases the specified Elastic IP address.</p> <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use <a>DisassociateAddress</a>.</p> <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p> <p>After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another AWS account.</p> <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see <a>AllocateAddress</a>.</p>
		/// GET_ReleaseAddress #Action=ReleaseAddress
		/// </summary>
		/// <param name="AllocationId">[EC2-VPC] The allocation ID. Required for EC2-VPC.</param>
		/// <param name="PublicIp">[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</param>
		/// <param name="NetworkBorderGroup"><p>The location that the IP address is released from.</p> <p>If you provide an incorrect network border group, you will receive an <code>InvalidAddress.NotFound</code> error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p> </note></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ReleaseAddressAsync(string AllocationId, string PublicIp, string NetworkBorderGroup, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReleaseAddress?AllocationId=" + (AllocationId==null? "" : Uri.EscapeDataString(AllocationId))+"&PublicIp=" + (PublicIp==null? "" : Uri.EscapeDataString(PublicIp))+"&NetworkBorderGroup=" + (NetworkBorderGroup==null? "" : Uri.EscapeDataString(NetworkBorderGroup))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Releases the specified Elastic IP address.</p> <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use <a>DisassociateAddress</a>.</p> <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p> <p>After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another AWS account.</p> <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see <a>AllocateAddress</a>.</p>
		/// POST_ReleaseAddress #Action=ReleaseAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReleaseAddressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReleaseAddress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.</p> <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
		/// GET_ReleaseHosts #Action=ReleaseHosts
		/// </summary>
		/// <param name="HostId">The IDs of the Dedicated Hosts to release.</param>
		/// <returns>Success</returns>
		public async Task GET_ReleaseHostsAsync(string[] HostId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReleaseHosts?"+String.Join("&", HostId.Select(z => $"HostId={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.</p> <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
		/// POST_ReleaseHosts #Action=ReleaseHosts
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReleaseHostsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReleaseHosts?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
		/// GET_ReplaceIamInstanceProfileAssociation #Action=ReplaceIamInstanceProfileAssociation
		/// </summary>
		/// <param name="IamInstanceProfile">The IAM instance profile.</param>
		/// <param name="AssociationId">The ID of the existing IAM instance profile association.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceIamInstanceProfileAssociationAsync(string IamInstanceProfile, string AssociationId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceIamInstanceProfileAssociation?IamInstanceProfile=" + (IamInstanceProfile==null? "" : Uri.EscapeDataString(IamInstanceProfile))+"&AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
		/// POST_ReplaceIamInstanceProfileAssociation #Action=ReplaceIamInstanceProfileAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceIamInstanceProfileAssociationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceIamInstanceProfileAssociation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>This is an idempotent operation.</p>
		/// GET_ReplaceNetworkAclAssociation #Action=ReplaceNetworkAclAssociation
		/// </summary>
		/// <param name="AssociationId">The ID of the current association between the original network ACL and the subnet.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkAclId">The ID of the new network ACL to associate with the subnet.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceNetworkAclAssociationAsync(string AssociationId, bool DryRun, string NetworkAclId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceNetworkAclAssociation?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&DryRun="+DryRun+"&NetworkAclId=" + (NetworkAclId==null? "" : Uri.EscapeDataString(NetworkAclId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>This is an idempotent operation.</p>
		/// POST_ReplaceNetworkAclAssociation #Action=ReplaceNetworkAclAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceNetworkAclAssociationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceNetworkAclAssociation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// GET_ReplaceNetworkAclEntry #Action=ReplaceNetworkAclEntry
		/// </summary>
		/// <param name="CidrBlock">The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Egress"><p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p></param>
		/// <param name="Icmp">ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</param>
		/// <param name="Ipv6CidrBlock">The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:bd8:1234:1a00::/64</code>).</param>
		/// <param name="NetworkAclId">The ID of the ACL.</param>
		/// <param name="PortRange">TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</param>
		/// <param name="Protocol">The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</param>
		/// <param name="RuleAction">Indicates whether to allow or deny the traffic that matches the rule.</param>
		/// <param name="RuleNumber">The rule number of the entry to replace.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceNetworkAclEntryAsync(string CidrBlock, bool DryRun, bool Egress, string Icmp, string Ipv6CidrBlock, string NetworkAclId, string PortRange, string Protocol, RuleAction RuleAction, int RuleNumber, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceNetworkAclEntry?CidrBlock=" + (CidrBlock==null? "" : Uri.EscapeDataString(CidrBlock))+"&DryRun="+DryRun+"&Egress="+Egress+"&Icmp=" + (Icmp==null? "" : Uri.EscapeDataString(Icmp))+"&Ipv6CidrBlock=" + (Ipv6CidrBlock==null? "" : Uri.EscapeDataString(Ipv6CidrBlock))+"&NetworkAclId=" + (NetworkAclId==null? "" : Uri.EscapeDataString(NetworkAclId))+"&PortRange=" + (PortRange==null? "" : Uri.EscapeDataString(PortRange))+"&Protocol=" + (Protocol==null? "" : Uri.EscapeDataString(Protocol))+"&RuleAction=" + RuleAction+"&RuleNumber="+RuleNumber+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.
		/// POST_ReplaceNetworkAclEntry #Action=ReplaceNetworkAclEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceNetworkAclEntryAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceNetworkAclEntry?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_ReplaceRoute #Action=ReplaceRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</param>
		/// <param name="DestinationIpv6CidrBlock">The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EgressOnlyInternetGatewayId">[IPv6 traffic only] The ID of an egress-only internet gateway.</param>
		/// <param name="GatewayId">The ID of an internet gateway or virtual private gateway.</param>
		/// <param name="InstanceId">The ID of a NAT instance in your VPC.</param>
		/// <param name="LocalTarget">Specifies whether to reset the local route to its default target (<code>local</code>).</param>
		/// <param name="NatGatewayId">[IPv4 traffic only] The ID of a NAT gateway.</param>
		/// <param name="TransitGatewayId">The ID of a transit gateway.</param>
		/// <param name="LocalGatewayId">The ID of the local gateway.</param>
		/// <param name="NetworkInterfaceId">The ID of a network interface.</param>
		/// <param name="RouteTableId">The ID of the route table.</param>
		/// <param name="VpcPeeringConnectionId">The ID of a VPC peering connection.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceRouteAsync(
					string DestinationCidrBlock, 
					string DestinationIpv6CidrBlock, 
					bool DryRun, 
					string EgressOnlyInternetGatewayId, 
					string GatewayId, 
					string InstanceId, 
					bool LocalTarget, 
					string NatGatewayId, 
					string TransitGatewayId, 
					string LocalGatewayId, 
					string NetworkInterfaceId, 
					string RouteTableId, 
					string VpcPeeringConnectionId, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&DestinationIpv6CidrBlock=" + (DestinationIpv6CidrBlock==null? "" : Uri.EscapeDataString(DestinationIpv6CidrBlock))+"&DryRun="+DryRun+"&EgressOnlyInternetGatewayId=" + (EgressOnlyInternetGatewayId==null? "" : Uri.EscapeDataString(EgressOnlyInternetGatewayId))+"&GatewayId=" + (GatewayId==null? "" : Uri.EscapeDataString(GatewayId))+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&LocalTarget="+LocalTarget+"&NatGatewayId=" + (NatGatewayId==null? "" : Uri.EscapeDataString(NatGatewayId))+"&TransitGatewayId=" + (TransitGatewayId==null? "" : Uri.EscapeDataString(TransitGatewayId))+"&LocalGatewayId=" + (LocalGatewayId==null? "" : Uri.EscapeDataString(LocalGatewayId))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&VpcPeeringConnectionId=" + (VpcPeeringConnectionId==null? "" : Uri.EscapeDataString(VpcPeeringConnectionId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_ReplaceRoute #Action=ReplaceRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
		/// GET_ReplaceRouteTableAssociation #Action=ReplaceRouteTableAssociation
		/// </summary>
		/// <param name="AssociationId">The association ID.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="RouteTableId">The ID of the new route table to associate with the subnet.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceRouteTableAssociationAsync(string AssociationId, bool DryRun, string RouteTableId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceRouteTableAssociation?AssociationId=" + (AssociationId==null? "" : Uri.EscapeDataString(AssociationId))+"&DryRun="+DryRun+"&RouteTableId=" + (RouteTableId==null? "" : Uri.EscapeDataString(RouteTableId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.</p>
		/// POST_ReplaceRouteTableAssociation #Action=ReplaceRouteTableAssociation
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceRouteTableAssociationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceRouteTableAssociation?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the specified route in the specified transit gateway route table.
		/// GET_ReplaceTransitGatewayRoute #Action=ReplaceTransitGatewayRoute
		/// </summary>
		/// <param name="DestinationCidrBlock">The CIDR range used for the destination match. Routing decisions are based on the most specific match.</param>
		/// <param name="TransitGatewayRouteTableId">The ID of the route table.</param>
		/// <param name="TransitGatewayAttachmentId">The ID of the attachment.</param>
		/// <param name="Blackhole">Indicates whether traffic matching this route is to be dropped.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ReplaceTransitGatewayRouteAsync(string DestinationCidrBlock, string TransitGatewayRouteTableId, string TransitGatewayAttachmentId, bool Blackhole, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceTransitGatewayRoute?DestinationCidrBlock=" + (DestinationCidrBlock==null? "" : Uri.EscapeDataString(DestinationCidrBlock))+"&TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&TransitGatewayAttachmentId=" + (TransitGatewayAttachmentId==null? "" : Uri.EscapeDataString(TransitGatewayAttachmentId))+"&Blackhole="+Blackhole+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces the specified route in the specified transit gateway route table.
		/// POST_ReplaceTransitGatewayRoute #Action=ReplaceTransitGatewayRoute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReplaceTransitGatewayRouteAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReplaceTransitGatewayRoute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
		/// GET_ReportInstanceStatus #Action=ReportInstanceStatus
		/// </summary>
		/// <param name="Description">Descriptive text about the health state of your instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EndTime">The time at which the reported instance health state ended.</param>
		/// <param name="InstanceId">The instances.</param>
		/// <param name="ReasonCode"><p>The reason codes that describe the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems that I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems that I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems that I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul></param>
		/// <param name="StartTime">The time at which the reported instance health state began.</param>
		/// <param name="Status">The status of all instances listed.</param>
		/// <returns>Success</returns>
		public async Task GET_ReportInstanceStatusAsync(string Description, bool DryRun, System.DateTimeOffset EndTime, string[] InstanceId, ReportInstanceReasonCodes[] ReasonCode, System.DateTimeOffset StartTime, ReportStatusType Status, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReportInstanceStatus?Description=" + (Description==null? "" : Uri.EscapeDataString(Description))+"&DryRun="+DryRun+"&EndTime=" + EndTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", ReasonCode.Select(z => $"ReasonCode={z}"))+"&StartTime=" + StartTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Status=" + Status+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
		/// POST_ReportInstanceStatus #Action=ReportInstanceStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ReportInstanceStatusAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ReportInstanceStatus?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Spot Fleet request.</p> <p>The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>You can specify tags for the Spot Fleet request and instances launched by the fleet. You cannot tag other resource types in a Spot Fleet request because only the <code>spot-fleet-request</code> and <code>instance</code> resource types are supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
		/// GET_RequestSpotFleet #Action=RequestSpotFleet
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="SpotFleetRequestConfig">The configuration for the Spot Fleet request.</param>
		/// <returns>Success</returns>
		public async Task GET_RequestSpotFleetAsync(bool DryRun, string SpotFleetRequestConfig, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RequestSpotFleet?DryRun="+DryRun+"&SpotFleetRequestConfig=" + (SpotFleetRequestConfig==null? "" : Uri.EscapeDataString(SpotFleetRequestConfig))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Spot Fleet request.</p> <p>The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>You can specify tags for the Spot Fleet request and instances launched by the fleet. You cannot tag other resource types in a Spot Fleet request because only the <code>spot-fleet-request</code> and <code>instance</code> resource types are supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
		/// POST_RequestSpotFleet #Action=RequestSpotFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RequestSpotFleetAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RequestSpotFleet?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Spot Instance request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
		/// GET_RequestSpotInstances #Action=RequestSpotInstances
		/// </summary>
		/// <param name="AvailabilityZoneGroup"><p>The user-specified name for a logical grouping of requests.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p></param>
		/// <param name="BlockDurationMinutes"><p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>You can't specify an Availability Zone group or a launch group if you specify a duration.</p></param>
		/// <param name="ClientToken">Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceCount"><p>The maximum number of Spot Instances to launch.</p> <p>Default: 1</p></param>
		/// <param name="LaunchGroup"><p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p></param>
		/// <param name="LaunchSpecification">The launch specification.</param>
		/// <param name="SpotPrice">The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.</param>
		/// <param name="Type"><p>The Spot Instance request type.</p> <p>Default: <code>one-time</code> </p></param>
		/// <param name="ValidFrom"><p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p> <p>The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.</p></param>
		/// <param name="ValidUntil">The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.</param>
		/// <param name="InstanceInterruptionBehavior">The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RequestSpotInstancesAsync(string AvailabilityZoneGroup, int BlockDurationMinutes, string ClientToken, bool DryRun, int InstanceCount, string LaunchGroup, string LaunchSpecification, string SpotPrice, string Type, System.DateTimeOffset ValidFrom, System.DateTimeOffset ValidUntil, SpotInstanceInterruptionBehavior InstanceInterruptionBehavior, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RequestSpotInstances?AvailabilityZoneGroup=" + (AvailabilityZoneGroup==null? "" : Uri.EscapeDataString(AvailabilityZoneGroup))+"&BlockDurationMinutes="+BlockDurationMinutes+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&InstanceCount="+InstanceCount+"&LaunchGroup=" + (LaunchGroup==null? "" : Uri.EscapeDataString(LaunchGroup))+"&LaunchSpecification=" + (LaunchSpecification==null? "" : Uri.EscapeDataString(LaunchSpecification))+"&SpotPrice=" + (SpotPrice==null? "" : Uri.EscapeDataString(SpotPrice))+"&Type=" + (Type==null? "" : Uri.EscapeDataString(Type))+"&ValidFrom=" + ValidFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&ValidUntil=" + ValidUntil.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&InstanceInterruptionBehavior=" + InstanceInterruptionBehavior+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Spot Instance request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
		/// POST_RequestSpotInstances #Action=RequestSpotInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RequestSpotInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RequestSpotInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.</p> <p>After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ResetEbsDefaultKmsKeyId #Action=ResetEbsDefaultKmsKeyId
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetEbsDefaultKmsKeyIdAsync(bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetEbsDefaultKmsKeyId?DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.</p> <p>After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ResetEbsDefaultKmsKeyId #Action=ResetEbsDefaultKmsKeyId
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetEbsDefaultKmsKeyIdAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetEbsDefaultKmsKeyId?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.
		/// GET_ResetFpgaImageAttribute #Action=ResetFpgaImageAttribute
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="FpgaImageId">The ID of the AFI.</param>
		/// <param name="Attribute">The attribute.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetFpgaImageAttributeAsync(bool DryRun, string FpgaImageId, ResetFpgaImageAttributeName Attribute, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetFpgaImageAttribute?DryRun="+DryRun+"&FpgaImageId=" + (FpgaImageId==null? "" : Uri.EscapeDataString(FpgaImageId))+"&Attribute=" + Attribute+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.
		/// POST_ResetFpgaImageAttribute #Action=ResetFpgaImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetFpgaImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetFpgaImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets an attribute of an AMI to its default value.</p> <note> <p>The productCodes attribute can't be reset.</p> </note>
		/// GET_ResetImageAttribute #Action=ResetImageAttribute
		/// </summary>
		/// <param name="Attribute">The attribute to reset (currently you can only reset the launch permission attribute).</param>
		/// <param name="ImageId">The ID of the AMI.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetImageAttributeAsync(ResetImageAttributeName Attribute, string ImageId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetImageAttribute?Attribute=" + Attribute+"&ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets an attribute of an AMI to its default value.</p> <note> <p>The productCodes attribute can't be reset.</p> </note>
		/// POST_ResetImageAttribute #Action=ResetImageAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetImageAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetImageAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// GET_ResetInstanceAttribute #Action=ResetInstanceAttribute
		/// </summary>
		/// <param name="Attribute"><p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetInstanceAttributeAsync(InstanceAttributeName Attribute, bool DryRun, string InstanceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetInstanceAttribute?Attribute=" + Attribute+"&DryRun="+DryRun+"&InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
		/// POST_ResetInstanceAttribute #Action=ResetInstanceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetInstanceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetInstanceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a network interface attribute. You can specify only one attribute at a time.
		/// GET_ResetNetworkInterfaceAttribute #Action=ResetNetworkInterfaceAttribute
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <param name="SourceDestCheck">The source/destination checking attribute. Resets the value to <code>true</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetNetworkInterfaceAttributeAsync(bool DryRun, string NetworkInterfaceId, string SourceDestCheck, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetNetworkInterfaceAttribute?DryRun="+DryRun+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&SourceDestCheck=" + (SourceDestCheck==null? "" : Uri.EscapeDataString(SourceDestCheck))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets a network interface attribute. You can specify only one attribute at a time.
		/// POST_ResetNetworkInterfaceAttribute #Action=ResetNetworkInterfaceAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetNetworkInterfaceAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetNetworkInterfaceAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets permission settings for the specified snapshot.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_ResetSnapshotAttribute #Action=ResetSnapshotAttribute
		/// </summary>
		/// <param name="Attribute">The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.</param>
		/// <param name="SnapshotId">The ID of the snapshot.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_ResetSnapshotAttributeAsync(SnapshotAttributeName Attribute, string SnapshotId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetSnapshotAttribute?Attribute=" + Attribute+"&SnapshotId=" + (SnapshotId==null? "" : Uri.EscapeDataString(SnapshotId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Resets permission settings for the specified snapshot.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_ResetSnapshotAttribute #Action=ResetSnapshotAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_ResetSnapshotAttributeAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetSnapshotAttribute?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
		/// GET_RestoreAddressToClassic #Action=RestoreAddressToClassic
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="PublicIp">The Elastic IP address.</param>
		/// <returns>Success</returns>
		public async Task GET_RestoreAddressToClassicAsync(bool DryRun, string PublicIp, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreAddressToClassic?DryRun="+DryRun+"&PublicIp=" + (PublicIp==null? "" : Uri.EscapeDataString(PublicIp))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
		/// POST_RestoreAddressToClassic #Action=RestoreAddressToClassic
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RestoreAddressToClassicAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RestoreAddressToClassic?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an ingress authorization rule from a Client VPN endpoint.
		/// GET_RevokeClientVpnIngress #Action=RevokeClientVpnIngress
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint with which the authorization rule is associated.</param>
		/// <param name="TargetNetworkCidr">The IPv4 address range, in CIDR notation, of the network for which access is being removed.</param>
		/// <param name="AccessGroupId">The ID of the Active Directory group for which to revoke access. </param>
		/// <param name="RevokeAllGroups">Indicates whether access should be revoked for all clients.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeClientVpnIngressAsync(string ClientVpnEndpointId, string TargetNetworkCidr, string AccessGroupId, bool RevokeAllGroups, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeClientVpnIngress?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&TargetNetworkCidr=" + (TargetNetworkCidr==null? "" : Uri.EscapeDataString(TargetNetworkCidr))+"&AccessGroupId=" + (AccessGroupId==null? "" : Uri.EscapeDataString(AccessGroupId))+"&RevokeAllGroups="+RevokeAllGroups+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes an ingress authorization rule from a Client VPN endpoint.
		/// POST_RevokeClientVpnIngress #Action=RevokeClientVpnIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RevokeClientVpnIngressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeClientVpnIngress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <p>Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
		/// GET_RevokeSecurityGroupEgress #Action=RevokeSecurityGroupEgress
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupId">The ID of the security group.</param>
		/// <param name="IpPermissions">The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</param>
		/// <param name="CidrIp">Not supported. Use a set of IP permissions to specify the CIDR.</param>
		/// <param name="FromPort">Not supported. Use a set of IP permissions to specify the port.</param>
		/// <param name="IpProtocol">Not supported. Use a set of IP permissions to specify the protocol name or number.</param>
		/// <param name="ToPort">Not supported. Use a set of IP permissions to specify the port.</param>
		/// <param name="SourceSecurityGroupName">Not supported. Use a set of IP permissions to specify a destination security group.</param>
		/// <param name="SourceSecurityGroupOwnerId">Not supported. Use a set of IP permissions to specify a destination security group.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeSecurityGroupEgressAsync(bool DryRun, string GroupId, IpPermission[] IpPermissions, string CidrIp, int FromPort, string IpProtocol, int ToPort, string SourceSecurityGroupName, string SourceSecurityGroupOwnerId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeSecurityGroupEgress?DryRun="+DryRun+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&CidrIp=" + (CidrIp==null? "" : Uri.EscapeDataString(CidrIp))+"&FromPort="+FromPort+"&IpProtocol=" + (IpProtocol==null? "" : Uri.EscapeDataString(IpProtocol))+"&ToPort="+ToPort+"&SourceSecurityGroupName=" + (SourceSecurityGroupName==null? "" : Uri.EscapeDataString(SourceSecurityGroupName))+"&SourceSecurityGroupOwnerId=" + (SourceSecurityGroupOwnerId==null? "" : Uri.EscapeDataString(SourceSecurityGroupOwnerId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <p>Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
		/// POST_RevokeSecurityGroupEgress #Action=RevokeSecurityGroupEgress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RevokeSecurityGroupEgressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeSecurityGroupEgress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <note> <p>[EC2-Classic only] If the values you specify do not match the existing rule's values, no error is returned. Use <a>DescribeSecurityGroups</a> to verify that the rule has been removed.</p> </note> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
		/// GET_RevokeSecurityGroupIngress #Action=RevokeSecurityGroupIngress
		/// </summary>
		/// <param name="CidrIp">The CIDR IP address range. You can't specify this parameter when specifying a source security group.</param>
		/// <param name="FromPort">The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</param>
		/// <param name="GroupId">The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</param>
		/// <param name="GroupName">[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</param>
		/// <param name="IpPermissions">The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.</param>
		/// <param name="IpProtocol">The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). Use <code>-1</code> to specify all.</param>
		/// <param name="SourceSecurityGroupName">[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</param>
		/// <param name="SourceSecurityGroupOwnerId">[EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</param>
		/// <param name="ToPort">The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_RevokeSecurityGroupIngressAsync(string CidrIp, int FromPort, string GroupId, string GroupName, IpPermission[] IpPermissions, string IpProtocol, string SourceSecurityGroupName, string SourceSecurityGroupOwnerId, int ToPort, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeSecurityGroupIngress?CidrIp=" + (CidrIp==null? "" : Uri.EscapeDataString(CidrIp))+"&FromPort="+FromPort+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&IpProtocol=" + (IpProtocol==null? "" : Uri.EscapeDataString(IpProtocol))+"&SourceSecurityGroupName=" + (SourceSecurityGroupName==null? "" : Uri.EscapeDataString(SourceSecurityGroupName))+"&SourceSecurityGroupOwnerId=" + (SourceSecurityGroupOwnerId==null? "" : Uri.EscapeDataString(SourceSecurityGroupOwnerId))+"&ToPort="+ToPort+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <note> <p>[EC2-Classic only] If the values you specify do not match the existing rule's values, no error is returned. Use <a>DescribeSecurityGroups</a> to verify that the rule has been removed.</p> </note> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
		/// POST_RevokeSecurityGroupIngress #Action=RevokeSecurityGroupIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RevokeSecurityGroupIngressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RevokeSecurityGroupIngress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches the specified number of instances using an AMI for which you have permissions.</p> <p>You can specify a number of options, or leave the default options. The following rules apply:</p> <ul> <li> <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> <li> <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for you.</p> </li> <li> <p>Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance Types Available Only in a VPC</a>.</p> </li> <li> <p>[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>.</p> </li> <li> <p>If you don't specify a security group ID, we use the default security group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security Groups</a>.</p> </li> <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> </ul> <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify the launch template instead of specifying the launch parameters.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <a>DescribeInstances</a>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a>.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What To Do If An Instance Immediately Terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_RunInstances #Action=RunInstances
		/// </summary>
		/// <param name="BlockDeviceMapping">The block device mapping entries.</param>
		/// <param name="ImageId">The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</param>
		/// <param name="InstanceType"><p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p></param>
		/// <param name="Ipv6AddressCount"><p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p></param>
		/// <param name="Ipv6Address"><p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p></param>
		/// <param name="KernelId"><p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></param>
		/// <param name="KeyName"><p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important></param>
		/// <param name="MaxCount"><p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p></param>
		/// <param name="MinCount"><p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p></param>
		/// <param name="Monitoring">Specifies whether detailed monitoring is enabled for the instance.</param>
		/// <param name="Placement">The placement for the instance.</param>
		/// <param name="RamdiskId"><p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></param>
		/// <param name="SecurityGroupId"><p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p></param>
		/// <param name="SecurityGroup"><p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> <p>Default: Amazon EC2 uses the default security group.</p></param>
		/// <param name="SubnetId"><p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p></param>
		/// <param name="UserData">The user data to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding User Data</a> (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</param>
		/// <param name="AdditionalInfo">Reserved.</param>
		/// <param name="ClientToken"><p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p></param>
		/// <param name="DisableApiTermination"><p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="EbsOptimized"><p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p></param>
		/// <param name="IamInstanceProfile">The IAM instance profile.</param>
		/// <param name="InstanceInitiatedShutdownBehavior"><p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p></param>
		/// <param name="NetworkInterface">The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.</param>
		/// <param name="PrivateIpAddress"><p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p></param>
		/// <param name="ElasticGpuSpecification">An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html"> Amazon EC2 Elastic GPUs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="ElasticInferenceAccelerator"><p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p> <p>You cannot specify accelerators from different generations in the same request.</p></param>
		/// <param name="TagSpecification">The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</param>
		/// <param name="LaunchTemplate">The launch template to use to launch the instances. Any parameters that you specify in <a>RunInstances</a> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</param>
		/// <param name="InstanceMarketOptions"><p>The market (purchasing) option for the instances.</p> <p>For <a>RunInstances</a>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p></param>
		/// <param name="CreditSpecification"><p>The credit option for CPU usage of the burstable performance instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3/T3a instances)</p></param>
		/// <param name="CpuOptions">The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="CapacityReservationSpecification">Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</param>
		/// <param name="HibernationOptions">Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</param>
		/// <param name="LicenseSpecification">The license configurations.</param>
		/// <param name="MetadataOptions">The metadata options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">Instance Metadata and User Data</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_RunInstancesAsync(
					BlockDeviceMapping[] BlockDeviceMapping, 
					string ImageId, 
					string InstanceType, 
					int Ipv6AddressCount, 
					InstanceIpv6Address[] Ipv6Address, 
					string KernelId, 
					string KeyName, 
					int MaxCount, 
					int MinCount, 
					string Monitoring, 
					string Placement, 
					string RamdiskId, 
					string[] SecurityGroupId, 
					string[] SecurityGroup, 
					string SubnetId, 
					string UserData, 
					string AdditionalInfo, 
					string ClientToken, 
					bool DisableApiTermination, 
					bool DryRun, 
					bool EbsOptimized, 
					string IamInstanceProfile, 
					ShutdownBehavior InstanceInitiatedShutdownBehavior, 
					InstanceNetworkInterfaceSpecification[] NetworkInterface, 
					string PrivateIpAddress, 
					ElasticGpuSpecification[] ElasticGpuSpecification, 
					ElasticInferenceAccelerator[] ElasticInferenceAccelerator, 
					TagSpecification[] TagSpecification, 
					string LaunchTemplate, 
					string InstanceMarketOptions, 
					string CreditSpecification, 
					string CpuOptions, 
					string CapacityReservationSpecification, 
					string HibernationOptions, 
					LicenseConfigurationRequest[] LicenseSpecification, 
					string MetadataOptions, 
					string Action, 
					string Version, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RunInstances?"+String.Join("&", BlockDeviceMapping.Select(z => $"BlockDeviceMapping={z}"))+"&ImageId=" + (ImageId==null? "" : Uri.EscapeDataString(ImageId))+"&InstanceType=" + (InstanceType==null? "" : Uri.EscapeDataString(InstanceType))+"&Ipv6AddressCount="+Ipv6AddressCount+"&"+String.Join("&", Ipv6Address.Select(z => $"Ipv6Address={z}"))+"&KernelId=" + (KernelId==null? "" : Uri.EscapeDataString(KernelId))+"&KeyName=" + (KeyName==null? "" : Uri.EscapeDataString(KeyName))+"&MaxCount="+MaxCount+"&MinCount="+MinCount+"&Monitoring=" + (Monitoring==null? "" : Uri.EscapeDataString(Monitoring))+"&Placement=" + (Placement==null? "" : Uri.EscapeDataString(Placement))+"&RamdiskId=" + (RamdiskId==null? "" : Uri.EscapeDataString(RamdiskId))+"&"+String.Join("&", SecurityGroupId.Select(z => $"SecurityGroupId={Uri.EscapeDataString(z.ToString())}"))+"&"+String.Join("&", SecurityGroup.Select(z => $"SecurityGroup={Uri.EscapeDataString(z.ToString())}"))+"&SubnetId=" + (SubnetId==null? "" : Uri.EscapeDataString(SubnetId))+"&UserData=" + (UserData==null? "" : Uri.EscapeDataString(UserData))+"&AdditionalInfo=" + (AdditionalInfo==null? "" : Uri.EscapeDataString(AdditionalInfo))+"&ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DisableApiTermination="+DisableApiTermination+"&DryRun="+DryRun+"&EbsOptimized="+EbsOptimized+"&IamInstanceProfile=" + (IamInstanceProfile==null? "" : Uri.EscapeDataString(IamInstanceProfile))+"&InstanceInitiatedShutdownBehavior=" + InstanceInitiatedShutdownBehavior+"&"+String.Join("&", NetworkInterface.Select(z => $"NetworkInterface={z}"))+"&PrivateIpAddress=" + (PrivateIpAddress==null? "" : Uri.EscapeDataString(PrivateIpAddress))+"&"+String.Join("&", ElasticGpuSpecification.Select(z => $"ElasticGpuSpecification={z}"))+"&"+String.Join("&", ElasticInferenceAccelerator.Select(z => $"ElasticInferenceAccelerator={z}"))+"&"+String.Join("&", TagSpecification.Select(z => $"TagSpecification={z}"))+"&LaunchTemplate=" + (LaunchTemplate==null? "" : Uri.EscapeDataString(LaunchTemplate))+"&InstanceMarketOptions=" + (InstanceMarketOptions==null? "" : Uri.EscapeDataString(InstanceMarketOptions))+"&CreditSpecification=" + (CreditSpecification==null? "" : Uri.EscapeDataString(CreditSpecification))+"&CpuOptions=" + (CpuOptions==null? "" : Uri.EscapeDataString(CpuOptions))+"&CapacityReservationSpecification=" + (CapacityReservationSpecification==null? "" : Uri.EscapeDataString(CapacityReservationSpecification))+"&HibernationOptions=" + (HibernationOptions==null? "" : Uri.EscapeDataString(HibernationOptions))+"&"+String.Join("&", LicenseSpecification.Select(z => $"LicenseSpecification={z}"))+"&MetadataOptions=" + (MetadataOptions==null? "" : Uri.EscapeDataString(MetadataOptions))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches the specified number of instances using an AMI for which you have permissions.</p> <p>You can specify a number of options, or leave the default options. The following rules apply:</p> <ul> <li> <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> <li> <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for you.</p> </li> <li> <p>Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance Types Available Only in a VPC</a>.</p> </li> <li> <p>[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>.</p> </li> <li> <p>If you don't specify a security group ID, we use the default security group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security Groups</a>.</p> </li> <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> </ul> <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify the launch template instead of specifying the launch parameters.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <a>DescribeInstances</a>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a>.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What To Do If An Instance Immediately Terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_RunInstances #Action=RunInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RunInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RunInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_RunScheduledInstances #Action=RunScheduledInstances
		/// </summary>
		/// <param name="ClientToken">Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="InstanceCount"><p>The number of instances.</p> <p>Default: 1</p></param>
		/// <param name="LaunchSpecification">The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</param>
		/// <param name="ScheduledInstanceId">The Scheduled Instance ID.</param>
		/// <returns>Success</returns>
		public async Task GET_RunScheduledInstancesAsync(string ClientToken, bool DryRun, int InstanceCount, string LaunchSpecification, string ScheduledInstanceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RunScheduledInstances?ClientToken=" + (ClientToken==null? "" : Uri.EscapeDataString(ClientToken))+"&DryRun="+DryRun+"&InstanceCount="+InstanceCount+"&LaunchSpecification=" + (LaunchSpecification==null? "" : Uri.EscapeDataString(LaunchSpecification))+"&ScheduledInstanceId=" + (ScheduledInstanceId==null? "" : Uri.EscapeDataString(ScheduledInstanceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_RunScheduledInstances #Action=RunScheduledInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_RunScheduledInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RunScheduledInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for routes in the specified local gateway route table.
		/// GET_SearchLocalGatewayRoutes #Action=SearchLocalGatewayRoutes
		/// </summary>
		/// <param name="LocalGatewayRouteTableId">The ID of the local gateway route table.</param>
		/// <param name="Filter">One or more filters.</param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_SearchLocalGatewayRoutesAsync(string LocalGatewayRouteTableId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchLocalGatewayRoutes?LocalGatewayRouteTableId=" + (LocalGatewayRouteTableId==null? "" : Uri.EscapeDataString(LocalGatewayRouteTableId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for routes in the specified local gateway route table.
		/// POST_SearchLocalGatewayRoutes #Action=SearchLocalGatewayRoutes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_SearchLocalGatewayRoutesAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchLocalGatewayRoutes?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches one or more transit gateway multicast groups and returns the group membership information.
		/// GET_SearchTransitGatewayMulticastGroups #Action=SearchTransitGatewayMulticastGroups
		/// </summary>
		/// <param name="TransitGatewayMulticastDomainId">The ID of the transit gateway multicast domain.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>group-ip-address</code> - The IP address of the transit gateway multicast group.</p> </li> <li> <p> <code>is-group-member</code> - The resource is a group member. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>is-group-source</code> - The resource is a group source. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>member-type</code> - The member type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>tgw-peering</code>.</p> </li> <li> <p> <code>source-type</code> - The source type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associated</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="NextToken">The token for the next page of results.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_SearchTransitGatewayMulticastGroupsAsync(string TransitGatewayMulticastDomainId, Filter[] Filter, int MaxResults, string NextToken, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchTransitGatewayMulticastGroups?TransitGatewayMulticastDomainId=" + (TransitGatewayMulticastDomainId==null? "" : Uri.EscapeDataString(TransitGatewayMulticastDomainId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches one or more transit gateway multicast groups and returns the group membership information.
		/// POST_SearchTransitGatewayMulticastGroups #Action=SearchTransitGatewayMulticastGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task POST_SearchTransitGatewayMulticastGroupsAsync(string MaxResults, string NextToken, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchTransitGatewayMulticastGroups?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for routes in the specified transit gateway route table.
		/// GET_SearchTransitGatewayRoutes #Action=SearchTransitGatewayRoutes
		/// </summary>
		/// <param name="TransitGatewayRouteTableId">The ID of the transit gateway route table.</param>
		/// <param name="Filter"><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-type</code> - The attachment resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p> </li> <li> <p> <code>type</code> - The type of route (<code>propagated</code> | <code>static</code>).</p> </li> </ul></param>
		/// <param name="MaxResults">The maximum number of routes to return.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_SearchTransitGatewayRoutesAsync(string TransitGatewayRouteTableId, Filter[] Filter, int MaxResults, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchTransitGatewayRoutes?TransitGatewayRouteTableId=" + (TransitGatewayRouteTableId==null? "" : Uri.EscapeDataString(TransitGatewayRouteTableId))+"&"+String.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxResults="+MaxResults+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for routes in the specified transit gateway route table.
		/// POST_SearchTransitGatewayRoutes #Action=SearchTransitGatewayRoutes
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_SearchTransitGatewayRoutesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SearchTransitGatewayRoutes?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a <i>kernel panic</i> (on Linux instances), or a <i>blue screen</i>/<i>stop error</i> (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a <i>non-maskable interrupt</i> (NMI).</p> <p>In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.</p> <p>Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.</p> <p>For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a Diagnostic Interrupt</a> (Linux instances) or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send a Diagnostic Interrupt</a> (Windows instances).</p>
		/// GET_SendDiagnosticInterrupt #Action=SendDiagnosticInterrupt
		/// </summary>
		/// <param name="InstanceId">The ID of the instance.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_SendDiagnosticInterruptAsync(string InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SendDiagnosticInterrupt?InstanceId=" + (InstanceId==null? "" : Uri.EscapeDataString(InstanceId))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a <i>kernel panic</i> (on Linux instances), or a <i>blue screen</i>/<i>stop error</i> (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a <i>non-maskable interrupt</i> (NMI).</p> <p>In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.</p> <p>Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.</p> <p>For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html">Send a Diagnostic Interrupt</a> (Linux instances) or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html">Send a Diagnostic Interrupt</a> (Windows instances).</p>
		/// POST_SendDiagnosticInterrupt #Action=SendDiagnosticInterrupt
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_SendDiagnosticInterruptAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SendDiagnosticInterrupt?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_StartInstances #Action=StartInstances
		/// </summary>
		/// <param name="InstanceId">The IDs of the instances.</param>
		/// <param name="AdditionalInfo">Reserved.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_StartInstancesAsync(string[] InstanceId, string AdditionalInfo, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&AdditionalInfo=" + (AdditionalInfo==null? "" : Uri.EscapeDataString(AdditionalInfo))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_StartInstances #Action=StartInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_StartInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates the verification process to prove that the service provider owns the private DNS name domain for the endpoint service.</p> <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p> <p>Before the service provider runs this command, they must add a record to the DNS server. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html#add-dns-txt-record">Adding a TXT Record to Your Domain's DNS Server </a> in the <i>Amazon VPC User Guide</i>.</p>
		/// GET_StartVpcEndpointServicePrivateDnsVerification #Action=StartVpcEndpointServicePrivateDnsVerification
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="ServiceId">The ID of the endpoint service.</param>
		/// <returns>Success</returns>
		public async Task GET_StartVpcEndpointServicePrivateDnsVerificationAsync(bool DryRun, string ServiceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartVpcEndpointServicePrivateDnsVerification?DryRun="+DryRun+"&ServiceId=" + (ServiceId==null? "" : Uri.EscapeDataString(ServiceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates the verification process to prove that the service provider owns the private DNS name domain for the endpoint service.</p> <p>The service provider must successfully perform the verification before the consumer can use the name to access the service.</p> <p>Before the service provider runs this command, they must add a record to the DNS server. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html#add-dns-txt-record">Adding a TXT Record to Your Domain's DNS Server </a> in the <i>Amazon VPC User Guide</i>.</p>
		/// POST_StartVpcEndpointServicePrivateDnsVerification #Action=StartVpcEndpointServicePrivateDnsVerification
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_StartVpcEndpointServicePrivateDnsVerificationAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StartVpcEndpointServicePrivateDnsVerification?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Stops an Amazon EBS-backed instance.</p> <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate Spot Instances when they are interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating Interrupted Spot Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.</p> <p>Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_StopInstances #Action=StopInstances
		/// </summary>
		/// <param name="InstanceId">The IDs of the instances.</param>
		/// <param name="Hibernate"><p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> Default: <code>false</code> </p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="Force"><p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p></param>
		/// <returns>Success</returns>
		public async Task GET_StopInstancesAsync(string[] InstanceId, bool Hibernate, bool DryRun, bool Force, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StopInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&Hibernate="+Hibernate+"&DryRun="+DryRun+"&Force="+Force+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Stops an Amazon EBS-backed instance.</p> <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>You can't stop or hibernate instance store-backed instances. You can't use the Stop action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate Spot Instances when they are interrupted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating Interrupted Spot Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.</p> <p>Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_StopInstances #Action=StopInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_StopInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=StopInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
		/// GET_TerminateClientVpnConnections #Action=TerminateClientVpnConnections
		/// </summary>
		/// <param name="ClientVpnEndpointId">The ID of the Client VPN endpoint to which the client is connected.</param>
		/// <param name="ConnectionId">The ID of the client connection to be terminated.</param>
		/// <param name="Username">The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_TerminateClientVpnConnectionsAsync(string ClientVpnEndpointId, string ConnectionId, string Username, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TerminateClientVpnConnections?ClientVpnEndpointId=" + (ClientVpnEndpointId==null? "" : Uri.EscapeDataString(ClientVpnEndpointId))+"&ConnectionId=" + (ConnectionId==null? "" : Uri.EscapeDataString(ConnectionId))+"&Username=" + (Username==null? "" : Uri.EscapeDataString(Username))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
		/// POST_TerminateClientVpnConnections #Action=TerminateClientVpnConnections
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_TerminateClientVpnConnectionsAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TerminateClientVpnConnections?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// GET_TerminateInstances #Action=TerminateInstances
		/// </summary>
		/// <param name="InstanceId"><p>The IDs of the instances.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p></param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_TerminateInstancesAsync(string[] InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TerminateInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
		/// POST_TerminateInstances #Action=TerminateInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_TerminateInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TerminateInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassigns one or more IPv6 addresses from a network interface.
		/// GET_UnassignIpv6Addresses #Action=UnassignIpv6Addresses
		/// </summary>
		/// <param name="Ipv6Addresses">The IPv6 addresses to unassign from the network interface.</param>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <returns>Success</returns>
		public async Task GET_UnassignIpv6AddressesAsync(string[] Ipv6Addresses, string NetworkInterfaceId, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnassignIpv6Addresses?"+String.Join("&", Ipv6Addresses.Select(z => $"Ipv6Addresses={Uri.EscapeDataString(z.ToString())}"))+"&NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassigns one or more IPv6 addresses from a network interface.
		/// POST_UnassignIpv6Addresses #Action=UnassignIpv6Addresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_UnassignIpv6AddressesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnassignIpv6Addresses?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassigns one or more secondary private IP addresses from a network interface.
		/// GET_UnassignPrivateIpAddresses #Action=UnassignPrivateIpAddresses
		/// </summary>
		/// <param name="NetworkInterfaceId">The ID of the network interface.</param>
		/// <param name="PrivateIpAddress">The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</param>
		/// <returns>Success</returns>
		public async Task GET_UnassignPrivateIpAddressesAsync(string NetworkInterfaceId, string[] PrivateIpAddress, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnassignPrivateIpAddresses?NetworkInterfaceId=" + (NetworkInterfaceId==null? "" : Uri.EscapeDataString(NetworkInterfaceId))+"&"+String.Join("&", PrivateIpAddress.Select(z => $"PrivateIpAddress={Uri.EscapeDataString(z.ToString())}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unassigns one or more secondary private IP addresses from a network interface.
		/// POST_UnassignPrivateIpAddresses #Action=UnassignPrivateIpAddresses
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_UnassignPrivateIpAddressesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnassignPrivateIpAddresses?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// GET_UnmonitorInstances #Action=UnmonitorInstances
		/// </summary>
		/// <param name="InstanceId">The IDs of the instances.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_UnmonitorInstancesAsync(string[] InstanceId, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnmonitorInstances?"+String.Join("&", InstanceId.Select(z => $"InstanceId={Uri.EscapeDataString(z.ToString())}"))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
		/// POST_UnmonitorInstances #Action=UnmonitorInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_UnmonitorInstancesAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UnmonitorInstances?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
		/// GET_UpdateSecurityGroupRuleDescriptionsEgress #Action=UpdateSecurityGroupRuleDescriptionsEgress
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupId">The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</param>
		/// <param name="GroupName">[Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</param>
		/// <param name="IpPermissions">The IP permissions for the security group rule.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSecurityGroupRuleDescriptionsEgressAsync(bool DryRun, string GroupId, string GroupName, IpPermission[] IpPermissions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSecurityGroupRuleDescriptionsEgress?DryRun="+DryRun+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
		/// POST_UpdateSecurityGroupRuleDescriptionsEgress #Action=UpdateSecurityGroupRuleDescriptionsEgress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_UpdateSecurityGroupRuleDescriptionsEgressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSecurityGroupRuleDescriptionsEgress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
		/// GET_UpdateSecurityGroupRuleDescriptionsIngress #Action=UpdateSecurityGroupRuleDescriptionsIngress
		/// </summary>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <param name="GroupId">The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</param>
		/// <param name="GroupName">[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</param>
		/// <param name="IpPermissions">The IP permissions for the security group rule. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSecurityGroupRuleDescriptionsIngressAsync(bool DryRun, string GroupId, string GroupName, IpPermission[] IpPermissions, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSecurityGroupRuleDescriptionsIngress?DryRun="+DryRun+"&GroupId=" + (GroupId==null? "" : Uri.EscapeDataString(GroupId))+"&GroupName=" + (GroupName==null? "" : Uri.EscapeDataString(GroupName))+"&"+String.Join("&", IpPermissions.Select(z => $"IpPermissions={z}"))+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
		/// POST_UpdateSecurityGroupRuleDescriptionsIngress #Action=UpdateSecurityGroupRuleDescriptionsIngress
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_UpdateSecurityGroupRuleDescriptionsIngressAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSecurityGroupRuleDescriptionsIngress?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Stops advertising an address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>
		/// GET_WithdrawByoipCidr #Action=WithdrawByoipCidr
		/// </summary>
		/// <param name="Cidr">The address range, in CIDR notation.</param>
		/// <param name="DryRun">Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_WithdrawByoipCidrAsync(string Cidr, bool DryRun, string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=WithdrawByoipCidr?Cidr=" + (Cidr==null? "" : Uri.EscapeDataString(Cidr))+"&DryRun="+DryRun+"&Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Stops advertising an address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>
		/// POST_WithdrawByoipCidr #Action=WithdrawByoipCidr
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_WithdrawByoipCidrAsync(string Action, string Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=WithdrawByoipCidr?Action=" + (Action==null? "" : Uri.EscapeDataString(Action))+"&Version=" + (Version==null? "" : Uri.EscapeDataString(Version));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
