//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddInstanceFleetOutput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFleetId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddInstanceFleetInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// <p>The configuration that defines an instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetConfig InstanceFleet { get; set; }
	}
	
	/// <summary>
	/// Output from an AddInstanceGroups call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddInstanceGroupsOutput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string JobFlowId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] InstanceGroupIds { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
	}
	
	/// <summary>
	/// Input to an AddInstanceGroups call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddInstanceGroupsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupConfig[] InstanceGroups { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string JobFlowId { get; set; }
	}
	
	/// <summary>
	///  The output for the <a>AddJobFlowSteps</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddJobFlowStepsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] StepIds { get; set; }
	}
	
	/// <summary>
	///  The input argument to the <a>AddJobFlowSteps</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddJobFlowStepsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string JobFlowId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepConfig[] Steps { get; set; }
	}
	
	/// <summary>
	/// This input identifies a cluster and a list of tags to attach.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	///  The output for the <a>CancelSteps</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelStepsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CancelStepsInfo[] CancelStepsInfoList { get; set; }
	}
	
	/// <summary>
	/// The input argument to the <a>CancelSteps</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelStepsInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ClusterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] StepIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CancelStepsInputStepCancellationOption StepCancellationOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelStepsInputStepCancellationOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_INTERRUPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_PROCESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityConfigurationOutput
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSecurityConfigurationInput
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecurityConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSecurityConfigurationInput
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// This output contains the description of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterOutput
	{
		
		/// <summary>
		/// The detailed description of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	/// <summary>
	/// This input determines which cluster to describe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
	}
	
	/// <summary>
	///  The output for the <a>DescribeJobFlows</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobFlowsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobFlowDetail[] JobFlows { get; set; }
	}
	
	/// <summary>
	///  The input for the <a>DescribeJobFlows</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobFlowsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] JobFlowIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobFlowExecutionState[] JobFlowStates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityConfigurationOutput
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeSecurityConfigurationInput
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// This output contains the description of the cluster step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeStepOutput
	{
		
		/// <summary>
		/// This represents a step in a cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Step Step { get; set; }
	}
	
	/// <summary>
	/// This input determines which step to describe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeStepInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StepId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBlockPublicAccessConfigurationOutput
	{
		
		/// <summary>
		/// A configuration for Amazon EMR block public access. When <code>BlockPublicSecurityGroupRules</code> is set to <code>true</code>, Amazon EMR prevents cluster creation if one of the cluster's security groups has a rule that allows inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using <code>PermittedPublicSecurityGroupRuleRanges</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccessConfiguration BlockPublicAccessConfiguration { get; set; }
		
		/// <summary>
		/// Properties that describe the AWS principal that created the <code>BlockPublicAccessConfiguration</code> using the <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccessConfigurationMetadata BlockPublicAccessConfigurationMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetManagedScalingPolicyOutput
	{
		
		/// <summary>
		///  Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ManagedScalingPolicy ManagedScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetManagedScalingPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
	}
	
	/// <summary>
	/// This output contains the bootstrap actions detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBootstrapActionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Command[] BootstrapActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines which bootstrap actions to retrieve.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBootstrapActionsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This contains a ClusterSummaryList with the cluster details; for example, the cluster IDs, names, and status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClustersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterSummary[] Clusters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines how the ListClusters action filters the list of clusters that it returns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClustersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterState[] ClusterStates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceFleetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleet[] InstanceFleets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceFleetsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines which instance groups to retrieve.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroup[] InstanceGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines which instance groups to retrieve.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceGroupsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This output contains the list of instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstancesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines which instances to list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstancesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupType[] InstanceGroupTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFleetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListInstancesInputInstanceFleetType InstanceFleetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceState[] InstanceStates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListInstancesInputInstanceFleetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSecurityConfigurationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityConfigurationSummary[] SecurityConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSecurityConfigurationsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This output contains the list of steps returned in reverse order. This means that the last step is the first element in the list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListStepsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StepSummary[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// This input determines which steps to list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListStepsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepState[] StepStates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] StepIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepConcurrencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyClusterInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepConcurrencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceFleetInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// <p>Configuration parameters for an instance fleet modification request.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetModifyConfig InstanceFleet { get; set; }
	}
	
	/// <summary>
	/// Change the size of some instance groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyInstanceGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupModifyConfig[] InstanceGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAutoScalingPolicyOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupId { get; set; }
		
		/// <summary>
		/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyDescription AutoScalingPolicy { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAutoScalingPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupId { get; set; }
		
		/// <summary>
		/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicy AutoScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBlockPublicAccessConfigurationInput
	{
		
		/// <summary>
		/// A configuration for Amazon EMR block public access. When <code>BlockPublicSecurityGroupRules</code> is set to <code>true</code>, Amazon EMR prevents cluster creation if one of the cluster's security groups has a rule that allows inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using <code>PermittedPublicSecurityGroupRuleRanges</code>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BlockPublicAccessConfiguration BlockPublicAccessConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutManagedScalingPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		/// <summary>
		///  Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ManagedScalingPolicy ManagedScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveAutoScalingPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveManagedScalingPolicyInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterId { get; set; }
	}
	
	/// <summary>
	/// This input identifies a cluster and a list of tags to remove.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoveTagsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public String[] TagKeys { get; set; }
	}
	
	/// <summary>
	///  The result of the <a>RunJobFlow</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunJobFlowOutput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string JobFlowId { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
	}
	
	/// <summary>
	///  Input to the <a>RunJobFlow</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RunJobFlowInput
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LogUri { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LogEncryptionKmsKeyId { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string AdditionalInfo { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string AmiVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ReleaseLabel { get; set; }
		
		/// <summary>
		/// A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets, which is the recommended configuration. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobFlowInstancesConfig Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepConfig[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BootstrapActionConfig[] BootstrapActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] SupportedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedProductConfig[] NewSupportedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Application[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VisibleToAllUsers { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string JobFlowRole { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string SecurityConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string AutoScalingRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunJobFlowInputScaleDownBehavior ScaleDownBehavior { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string CustomAmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EbsRootVolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunJobFlowInputRepoUpgradeOnBoot RepoUpgradeOnBoot { get; set; }
		
		/// <summary>
		/// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a> in the <i>EMR Management Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KerberosAttributes KerberosAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepConcurrencyLevel { get; set; }
		
		/// <summary>
		///  Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ManagedScalingPolicy ManagedScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunJobFlowInputScaleDownBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_INSTANCE_HOUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_TASK_COMPLETION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunJobFlowInputRepoUpgradeOnBoot
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	///  The input argument to the <a>TerminationProtection</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetTerminationProtectionInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] JobFlowIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool TerminationProtected { get; set; }
	}
	
	/// <summary>
	/// The input to the SetVisibleToAllUsers action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SetVisibleToAllUsersInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] JobFlowIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool VisibleToAllUsers { get; set; }
	}
	
	/// <summary>
	///  Input to the <a>TerminateJobFlows</a> operation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateJobFlowsInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] JobFlowIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ActionOnFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_JOB_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_AND_WAIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 3,
	}
	
	/// <summary>
	/// <p>The configuration that defines an instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetConfigInstanceFleetType InstanceFleetType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetOnDemandCapacity { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetSpotCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTypeConfig[] InstanceTypeConfigs { get; set; }
		
		/// <summary>
		/// <p>The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetProvisioningSpecifications LaunchSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetConfigInstanceFleetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdjustmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_IN_CAPACITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_CHANGE_IN_CAPACITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT_CAPACITY = 2,
	}
	
	/// <summary>
	/// <p>With Amazon EMR release version 4.0 and later, the only accepted parameter is the application name. To pass arguments to applications, you use configuration classifications specified using configuration JSON objects. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html">Configuring Applications</a>.</p> <p>With earlier Amazon EMR releases, the application is any Amazon or third-party software that you can add to the cluster. This structure contains a list of strings that indicates the software to use with the cluster and accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action argument.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Application
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Args { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap AdditionalInfo { get; set; }
	}
	
	/// <summary>
	/// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingConstraints
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinCapacity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxCapacity { get; set; }
	}
	
	/// <summary>
	/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingPolicy
	{
		
		/// <summary>
		/// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingConstraints Constraints { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// The status of an automatic scaling policy. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingPolicyStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyStatusState State { get; set; }
		
		/// <summary>
		/// The reason for an <a>AutoScalingPolicyStatus</a> change.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyStateChangeReason StateChangeReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoScalingPolicyStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	/// <summary>
	/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingPolicyDescription
	{
		
		/// <summary>
		/// The status of an automatic scaling policy. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyStatus Status { get; set; }
		
		/// <summary>
		/// The upper and lower EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScalingConstraints Constraints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoScalingPolicyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoScalingPolicyStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REQUEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISION_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_FAILURE = 2,
	}
	
	/// <summary>
	/// The reason for an <a>AutoScalingPolicyStatus</a> change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoScalingPolicyStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoScalingPolicyStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REQUEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISION_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEANUP_FAILURE = 2,
	}
	
	/// <summary>
	/// A configuration for Amazon EMR block public access. When <code>BlockPublicSecurityGroupRules</code> is set to <code>true</code>, Amazon EMR prevents cluster creation if one of the cluster's security groups has a rule that allows inbound traffic from 0.0.0.0/0 or ::/0 on a port, unless the port is specified as an exception using <code>PermittedPublicSecurityGroupRuleRanges</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlockPublicAccessConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool BlockPublicSecurityGroupRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortRange[] PermittedPublicSecurityGroupRuleRanges { get; set; }
	}
	
	/// <summary>
	/// Properties that describe the AWS principal that created the <code>BlockPublicAccessConfiguration</code> using the <code>PutBlockPublicAccessConfiguration</code> action as well as the date and time that the configuration was created. Each time a configuration for block public access is updated, Amazon EMR updates this metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlockPublicAccessConfigurationMetadata
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CreatedByArn { get; set; }
	}
	
	/// <summary>
	/// Configuration of the script to run during a bootstrap action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScriptBootstrapActionConfig
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] Args { get; set; }
	}
	
	/// <summary>
	/// Configuration of a bootstrap action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BootstrapActionConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration of the script to run during a bootstrap action.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScriptBootstrapActionConfig ScriptBootstrapAction { get; set; }
	}
	
	/// <summary>
	/// Reports the configuration of a bootstrap action in a cluster (job flow).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BootstrapActionDetail
	{
		
		/// <summary>
		/// Configuration of a bootstrap action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BootstrapActionConfig BootstrapActionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelStepsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
	}
	
	/// <summary>
	/// Specification of the status of a CancelSteps request. Available only in Amazon EMR version 4.8.0 and later, excluding version 5.0.0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelStepsInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StepId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CancelStepsInfoStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CancelStepsInfoStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepCancellationOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_INTERRUPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_PROCESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Statistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Unit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICRO_SECONDS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLI_SECONDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BYTES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BYTES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BYTES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BYTES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BITS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BITS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BITS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BITS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES_PER_SECOND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BYTES_PER_SECOND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BYTES_PER_SECOND = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BYTES_PER_SECOND = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BYTES_PER_SECOND = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITS_PER_SECOND = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BITS_PER_SECOND = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BITS_PER_SECOND = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BITS_PER_SECOND = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BITS_PER_SECOND = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_PER_SECOND = 26,
	}
	
	/// <summary>
	/// The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchAlarmDefinition
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchAlarmDefinitionComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EvaluationPeriods { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchAlarmDefinitionStatistic Statistic { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public double Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchAlarmDefinitionUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudWatchAlarmDefinitionComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudWatchAlarmDefinitionStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_COUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudWatchAlarmDefinitionUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICRO_SECONDS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLI_SECONDS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BYTES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BYTES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BYTES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BYTES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BITS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BITS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BITS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BITS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYTES_PER_SECOND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BYTES_PER_SECOND = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BYTES_PER_SECOND = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BYTES_PER_SECOND = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BYTES_PER_SECOND = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITS_PER_SECOND = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KILO_BITS_PER_SECOND = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEGA_BITS_PER_SECOND = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GIGA_BITS_PER_SECOND = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERA_BITS_PER_SECOND = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT_PER_SECOND = 26,
	}
	
	/// <summary>
	/// The detailed status of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterStatusState State { get; set; }
		
		/// <summary>
		/// The reason that the cluster changed to its current state.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterStateChangeReason StateChangeReason { get; set; }
		
		/// <summary>
		/// Represents the timeline of the cluster's lifecycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterTimeline Timeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED_WITH_ERRORS = 6,
	}
	
	/// <summary>
	/// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ec2InstanceAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2KeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] RequestedEc2SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] RequestedEc2AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IamInstanceProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmrManagedMasterSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmrManagedSlaveSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceAccessSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AdditionalMasterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AdditionalSlaveSecurityGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceCollectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FLEET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScaleDownBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_INSTANCE_HOUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_TASK_COMPLETION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepoUpgradeOnBoot
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a> in the <i>EMR Management Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KerberosAttributes
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Realm { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string KdcAdminPassword { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string CrossRealmTrustPrincipalPassword { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ADDomainJoinUser { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ADDomainJoinPassword { get; set; }
	}
	
	/// <summary>
	/// The detailed description of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Cluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The detailed status of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterStatus Status { get; set; }
		
		/// <summary>
		/// Provides information about the EC2 instances in a cluster grouped by category. For example, key name, subnet ID, IAM instance profile, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ec2InstanceAttributes Ec2InstanceAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterInstanceCollectionType InstanceCollectionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogUri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogEncryptionKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestedAmiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RunningAmiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReleaseLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoTerminate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminationProtected { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VisibleToAllUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Application[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NormalizedInstanceHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterPublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string SecurityConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string AutoScalingRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterScaleDownBehavior ScaleDownBehavior { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string CustomAmiId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EbsRootVolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterRepoUpgradeOnBoot RepoUpgradeOnBoot { get; set; }
		
		/// <summary>
		/// Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html">Use Kerberos Authentication</a> in the <i>EMR Management Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KerberosAttributes KerberosAttributes { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string OutpostArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StepConcurrencyLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterInstanceCollectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FLEET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_GROUP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterScaleDownBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_INSTANCE_HOUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_TASK_COMPLETION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterRepoUpgradeOnBoot
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED_WITH_ERRORS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FLEET_TIMEOUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAP_FAILURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REQUEST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_STEPS_COMPLETED = 7,
	}
	
	/// <summary>
	/// The reason that the cluster changed to its current state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FLEET_TIMEOUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAP_FAILURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REQUEST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEP_FAILURE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_STEPS_COMPLETED = 7,
	}
	
	/// <summary>
	/// Represents the timeline of the cluster's lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterTimeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	/// <summary>
	/// The summary description of the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The detailed status of the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NormalizedInstanceHours { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string ClusterArn { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string OutpostArn { get; set; }
	}
	
	/// <summary>
	/// An entity describing an executable that runs on a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Command
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScriptPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Args { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeLimitsUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceFleetUnits = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instances = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCPU = 2,
	}
	
	/// <summary>
	///  The EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster can not be above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ComputeLimits
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ComputeLimitsUnitType UnitType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinimumCapacityUnits { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaximumCapacityUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaximumOnDemandCapacityUnits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeLimitsUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceFleetUnits = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instances = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCPU = 2,
	}
	
	/// <summary>
	/// <note> <p>Amazon EMR releases 4.x or later.</p> </note> <p>An optional configuration specification to be used when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html">Configuring Applications</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Configuration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Classification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap Properties { get; set; }
	}
	
	/// <summary>
	/// This represents a step in a cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Step
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A cluster step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HadoopStepConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepActionOnFailure ActionOnFailure { get; set; }
		
		/// <summary>
		/// The execution status details of the cluster step.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepActionOnFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_JOB_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_AND_WAIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 3,
	}
	
	/// <summary>
	/// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VolumeSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VolumeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SizeInGB { get; set; }
	}
	
	/// <summary>
	/// Configuration of requested EBS block device associated with the instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsBlockDevice
	{
		
		/// <summary>
		/// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VolumeSpecification VolumeSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Device { get; set; }
	}
	
	/// <summary>
	/// Configuration of requested EBS block device associated with the instance group with count of volumes that will be associated to every instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsBlockDeviceConfig
	{
		
		/// <summary>
		/// EBS volume specifications such as volume type, IOPS, and size (GiB) that will be requested for the EBS volume attached to an EC2 instance in the cluster.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VolumeSpecification VolumeSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumesPerInstance { get; set; }
	}
	
	/// <summary>
	/// The Amazon EBS configuration of a cluster instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EbsBlockDeviceConfig[] EbsBlockDeviceConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
	}
	
	/// <summary>
	/// EBS block device that's attached to an EC2 instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EbsVolume
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Device { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeId { get; set; }
	}
	
	/// <summary>
	/// The details of the step failure. The service attempts to detect the root cause for many common failures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FailureDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogFile { get; set; }
	}
	
	/// <summary>
	///  Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ManagedScalingPolicy
	{
		
		/// <summary>
		///  The EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster can not be above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ComputeLimits ComputeLimits { get; set; }
	}
	
	/// <summary>
	/// A job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HadoopJarStepConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyValue[] Properties { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Jar { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string MainClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] Args { get; set; }
	}
	
	/// <summary>
	/// A cluster step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HadoopStepConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Jar { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StringMap Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MainClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Args { get; set; }
	}
	
	/// <summary>
	/// The instance status details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatusState State { get; set; }
		
		/// <summary>
		/// The details of the status change reason for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceStateChangeReason StateChangeReason { get; set; }
		
		/// <summary>
		/// The timeline of the instance lifecycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTimeline Timeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_FULFILLMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MarketType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	/// <summary>
	/// Represents an EC2 instance provisioned as part of cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Instance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Ec2InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		/// <summary>
		/// The instance status details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFleetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceMarket Market { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsVolume[] EbsVolumes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceMarket
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	/// <summary>
	/// <p>The status of the instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetStatusState State { get; set; }
		
		/// <summary>
		/// <p>Provides status change reason details for the instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetStateChangeReason StateChangeReason { get; set; }
		
		/// <summary>
		/// <p>Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetTimeline Timeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	/// <summary>
	/// <p>The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetProvisioningSpecifications
	{
		
		/// <summary>
		/// <p>The launch specification for Spot instances in the instance fleet, which determines the defined duration and provisioning timeout behavior.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpotProvisioningSpecification SpotSpecification { get; set; }
	}
	
	/// <summary>
	/// <p>Describes an instance fleet, which is a group of EC2 instances that host a particular node type (master, core, or task) in an Amazon EMR cluster. Instance fleets can consist of a mix of instance types and On-Demand and Spot instances, which are provisioned to meet a defined target capacity. </p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>The status of the instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetInstanceFleetType InstanceFleetType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetOnDemandCapacity { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetSpotCapacity { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ProvisionedOnDemandCapacity { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ProvisionedSpotCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceTypeSpecification[] InstanceTypeSpecifications { get; set; }
		
		/// <summary>
		/// <p>The launch specification for Spot instances in the fleet, which determines the defined duration and provisioning timeout behavior.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetProvisioningSpecifications LaunchSpecifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetInstanceFleetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	/// <summary>
	/// <p>Configuration parameters for an instance fleet modification request.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetModifyConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceFleetId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetOnDemandCapacity { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TargetSpotCapacity { get; set; }
	}
	
	/// <summary>
	/// <p>The launch specification for Spot instances in the instance fleet, which determines the defined duration and provisioning timeout behavior.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpotProvisioningSpecification
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int TimeoutDurationMinutes { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpotProvisioningSpecificationTimeoutAction TimeoutAction { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BlockDurationMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotProvisioningSpecificationTimeoutAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH_TO_ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 3,
	}
	
	/// <summary>
	/// <p>Provides status change reason details for the instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceFleetStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 3,
	}
	
	/// <summary>
	/// <p>Provides historical timestamps for the instance fleet, including the time of creation, the time it became ready to run jobs, and the time of termination.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceFleetTimeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	/// <summary>
	/// The details of the instance group status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupStatusState State { get; set; }
		
		/// <summary>
		/// The status change reason details for the instance group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupStateChangeReason StateChangeReason { get; set; }
		
		/// <summary>
		/// The timeline of the instance group lifecycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupTimeline Timeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECONFIGURING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRESTED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTTING_DOWN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 10,
	}
	
	/// <summary>
	/// Policy for customizing shrink operations. Allows configuration of decommissioning timeout and targeted instance shrinking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ShrinkPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DecommissionTimeout { get; set; }
		
		/// <summary>
		/// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceResizePolicy InstanceResizePolicy { get; set; }
	}
	
	/// <summary>
	/// This entity represents an instance group, which is a group of instances that have common purpose. For example, CORE instance group is used for HDFS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupMarket Market { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupInstanceGroupType InstanceGroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BidPrice { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RequestedInstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RunningInstanceCount { get; set; }
		
		/// <summary>
		/// The details of the instance group status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConfigurationsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] LastSuccessfullyAppliedConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastSuccessfullyAppliedConfigurationsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsBlockDevice[] EbsBlockDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
		
		/// <summary>
		/// Policy for customizing shrink operations. Allows configuration of decommissioning timeout and targeted instance shrinking.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShrinkPolicy ShrinkPolicy { get; set; }
		
		/// <summary>
		/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicyDescription AutoScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupMarket
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupInstanceGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	/// <summary>
	/// Configuration defining a new instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupConfigMarket Market { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupConfigInstanceRole InstanceRole { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string BidPrice { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		/// <summary>
		/// The Amazon EBS configuration of a cluster instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsConfiguration EbsConfiguration { get; set; }
		
		/// <summary>
		/// An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoScalingPolicy AutoScalingPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupConfigMarket
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupConfigInstanceRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECONFIGURING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRESTED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTTING_DOWN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 10,
	}
	
	/// <summary>
	/// Detailed information about an instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupDetail
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string InstanceGroupId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupDetailMarket Market { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupDetailInstanceRole InstanceRole { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string BidPrice { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceRequestCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceRunningCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupDetailState State { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LastStateChangeReason { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupDetailMarket
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupDetailInstanceRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupDetailState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECONFIGURING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESIZING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARRESTED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTTING_DOWN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 10,
	}
	
	/// <summary>
	/// Modify the size or configurations of an instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupModifyConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string InstanceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceId[] EC2InstanceIdsToTerminate { get; set; }
		
		/// <summary>
		/// Policy for customizing shrink operations. Allows configuration of decommissioning timeout and targeted instance shrinking.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShrinkPolicy ShrinkPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 3,
	}
	
	/// <summary>
	/// The status change reason details for the instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceGroupStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 3,
	}
	
	/// <summary>
	/// The timeline of the instance group lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceGroupTimeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	/// <summary>
	/// Custom policy for requesting termination protection or termination of specific instances when shrinking an instance group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceResizePolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceId[] InstancesToTerminate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceId[] InstancesToProtect { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceTerminationTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_FULFILLMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAP_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 4,
	}
	
	/// <summary>
	/// The details of the status change reason for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_FAILURE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAP_FAILURE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLUSTER_TERMINATED = 4,
	}
	
	/// <summary>
	/// The timeline of the instance lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTimeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	/// <summary>
	/// <p>An instance type configuration for each instance type in an instance fleet, which determines the EC2 instances Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. There can be a maximum of 5 instance type configurations in a fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTypeConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WeightedCapacity { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string BidPrice { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> BidPriceAsPercentageOfOnDemandPrice { get; set; }
		
		/// <summary>
		/// The Amazon EBS configuration of a cluster instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EbsConfiguration EbsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
	}
	
	/// <summary>
	/// <p>The configuration specification for each instance type in an instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceTypeSpecification
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> WeightedCapacity { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string BidPrice { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Double.MaxValue)]
		public System.Nullable<System.Double> BidPriceAsPercentageOfOnDemandPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Configuration[] Configurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EbsBlockDevice[] EbsBlockDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EbsOptimized { get; set; }
	}
	
	/// <summary>
	/// Describes the status of the cluster (job flow).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobFlowExecutionStatusDetail
	{
		
		/// <summary>
		/// The type of instance.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobFlowExecutionStatusDetailState State { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReadyDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LastStateChangeReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobFlowExecutionStatusDetailState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTTING_DOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
	}
	
	/// <summary>
	/// Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobFlowInstancesDetail
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MasterInstanceType { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string MasterPublicDnsName { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string MasterInstanceId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SlaveInstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupDetail[] InstanceGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NormalizedInstanceHours { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Ec2KeyName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Ec2SubnetId { get; set; }
		
		/// <summary>
		/// The Amazon EC2 Availability Zone configuration of the cluster (job flow).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementType Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KeepJobFlowAliveWhenNoSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminationProtected { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string HadoopVersion { get; set; }
	}
	
	/// <summary>
	/// A description of a cluster (job flow).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobFlowDetail
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string JobFlowId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LogUri { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LogEncryptionKmsKeyId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string AmiVersion { get; set; }
		
		/// <summary>
		/// Describes the status of the cluster (job flow).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobFlowExecutionStatusDetail ExecutionStatusDetail { get; set; }
		
		/// <summary>
		/// Specify the type of Amazon EC2 instances that the cluster (job flow) runs on.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobFlowInstancesDetail Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepDetail[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BootstrapActionDetail[] BootstrapActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] SupportedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VisibleToAllUsers { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string JobFlowRole { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string AutoScalingRole { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobFlowDetailScaleDownBehavior ScaleDownBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobFlowDetailScaleDownBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_INSTANCE_HOUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_AT_TASK_COMPLETION = 1,
	}
	
	/// <summary>
	/// The type of instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobFlowExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOTSTRAPPING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAITING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHUTTING_DOWN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 7,
	}
	
	/// <summary>
	/// The Amazon EC2 Availability Zone configuration of the cluster (job flow).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PlacementType
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] AvailabilityZones { get; set; }
	}
	
	/// <summary>
	/// A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets, which is the recommended configuration. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobFlowInstancesConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string MasterInstanceType { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string SlaveInstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstanceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceGroupConfig[] InstanceGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceFleetConfig[] InstanceFleets { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Ec2KeyName { get; set; }
		
		/// <summary>
		/// The Amazon EC2 Availability Zone configuration of the cluster (job flow).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PlacementType Placement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> KeepJobFlowAliveWhenNoSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TerminationProtected { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string HadoopVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Ec2SubnetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] Ec2SubnetIds { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string EmrManagedMasterSecurityGroup { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string EmrManagedSlaveSecurityGroup { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ServiceAccessSecurityGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] AdditionalMasterSecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] AdditionalSlaveSecurityGroups { get; set; }
	}
	
	/// <summary>
	/// A key value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyValue
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A CloudWatch dimension, which is specified using a <code>Key</code> (known as a <code>Name</code> in CloudWatch), <code>Value</code> pair. By default, Amazon EMR uses one dimension whose <code>Key</code> is <code>JobFlowID</code> and <code>Value</code> is a variable representing the cluster ID, which is <code>${emr.clusterId}</code>. This enables the rule to bootstrap when the cluster ID becomes available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricDimension
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The list of supported product configurations which allow user-supplied arguments. EMR accepts these arguments and forwards them to the corresponding installation script as bootstrap action arguments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SupportedProductConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlString[] Args { get; set; }
	}
	
	/// <summary>
	/// A list of port ranges that are permitted to allow inbound traffic from all public IP addresses. To specify a single port, use the same value for <code>MinRange</code> and <code>MaxRange</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortRange
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int MinRange { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> MaxRange { get; set; }
	}
	
	/// <summary>
	/// An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SimpleScalingPolicyConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SimpleScalingPolicyConfigurationAdjustmentType AdjustmentType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingAdjustment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoolDown { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SimpleScalingPolicyConfigurationAdjustmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_IN_CAPACITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_CHANGE_IN_CAPACITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT_CAPACITY = 2,
	}
	
	/// <summary>
	/// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingActionMarket Market { get; set; }
		
		/// <summary>
		/// An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SimpleScalingPolicyConfiguration SimpleScalingPolicyConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingActionMarket
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPOT = 1,
	}
	
	/// <summary>
	/// The conditions that trigger an automatic scaling activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingTrigger
	{
		
		/// <summary>
		/// The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchAlarmDefinition CloudWatchAlarmDefinition { get; set; }
	}
	
	/// <summary>
	/// A scale-in or scale-out rule that defines scaling activity, including the CloudWatch metric alarm that triggers activity, how EC2 instances are added or removed, and the periodicity of adjustments. The automatic scaling policy for an instance group can comprise one or more automatic scaling rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingRule
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingAction Action { get; set; }
		
		/// <summary>
		/// The conditions that trigger an automatic scaling activity.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingTrigger Trigger { get; set; }
	}
	
	/// <summary>
	/// The creation date and time, and name, of a security configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SecurityConfigurationSummary
	{
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SpotProvisioningTimeoutAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH_TO_ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
	}
	
	/// <summary>
	/// The execution status details of the cluster step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StepStatusState State { get; set; }
		
		/// <summary>
		/// The details of the step state change reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StepStateChangeReason StateChangeReason { get; set; }
		
		/// <summary>
		/// The details of the step failure. The service attempts to detect the root cause for many common failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FailureDetails FailureDetails { get; set; }
		
		/// <summary>
		/// The timeline of the cluster step lifecycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StepTimeline Timeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERRUPTED = 6,
	}
	
	/// <summary>
	/// Specification of a cluster (job flow) step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepConfigActionOnFailure ActionOnFailure { get; set; }
		
		/// <summary>
		/// A job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HadoopJarStepConfig HadoopJarStep { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepConfigActionOnFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_JOB_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_AND_WAIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 3,
	}
	
	/// <summary>
	/// The execution state of a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepExecutionStatusDetail
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepExecutionStatusDetailState State { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Max length: 10280
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(10280, MinimumLength=0)]
		public string LastStateChangeReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepExecutionStatusDetailState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERRUPTED = 6,
	}
	
	/// <summary>
	/// Combines the execution state and configuration of a step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepDetail
	{
		
		/// <summary>
		/// Specification of a cluster (job flow) step.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepConfig StepConfig { get; set; }
		
		/// <summary>
		/// The execution state of a step.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StepExecutionStatusDetail ExecutionStatusDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepExecutionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERRUPTED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERRUPTED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
	}
	
	/// <summary>
	/// The details of the step state change reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepStateChangeReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StepStateChangeReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepStateChangeReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
	}
	
	/// <summary>
	/// The timeline of the cluster step lifecycle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepTimeline
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
	}
	
	/// <summary>
	/// The summary of the cluster step.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StepSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// A cluster step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HadoopStepConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StepSummaryActionOnFailure ActionOnFailure { get; set; }
		
		/// <summary>
		/// The execution status details of the cluster step.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StepStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StepSummaryActionOnFailure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_JOB_FLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE_CLUSTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCEL_AND_WAIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 3,
	}
	
	/// <summary>
	/// A key/value pair containing user-defined metadata that you can associate with an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds an instance fleet to a running cluster.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x.</p> </note>
		/// AddInstanceFleet /#X-Amz-Target=ElasticMapReduce.AddInstanceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddInstanceFleetOutput> AddInstanceFleetAsync(AddInstanceFleetInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.AddInstanceFleet";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddInstanceFleetOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds one or more instance groups to a running cluster.
		/// AddInstanceGroups /#X-Amz-Target=ElasticMapReduce.AddInstanceGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddInstanceGroupsOutput> AddInstanceGroupsAsync(AddInstanceGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.AddInstanceGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddInstanceGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>AddJobFlowSteps adds new steps to a running cluster. A maximum of 256 steps are allowed in each job flow.</p> <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using SSH to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For more information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p> <p>A step specifies the location of a JAR file stored either on the master node of the cluster or in Amazon S3. Each step is performed by the main function of the main class of the JAR file. The main class can be specified either in the manifest of the JAR or by using the MainFunction parameter of the step.</p> <p>Amazon EMR executes each step in the order listed. For a step to be considered complete, the main function must exit with a zero exit code and all Hadoop jobs started while the step was running must have completed and run successfully.</p> <p>You can only add steps to a cluster that is in one of the following states: STARTING, BOOTSTRAPPING, RUNNING, or WAITING.</p>
		/// AddJobFlowSteps /#X-Amz-Target=ElasticMapReduce.AddJobFlowSteps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddJobFlowStepsOutput> AddJobFlowStepsAsync(AddJobFlowStepsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.AddJobFlowSteps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddJobFlowStepsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds tags to an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>.
		/// AddTags /#X-Amz-Target=ElasticMapReduce.AddTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddTagsOutput> AddTagsAsync(AddTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.AddTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AddTagsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels a pending step or steps in a running cluster. Available only in Amazon EMR versions 4.8.0 and later, excluding version 5.0.0. A maximum of 256 steps are allowed in each CancelSteps request. CancelSteps is idempotent but asynchronous; it does not guarantee a step will be canceled, even if the request is successfully submitted. You can only cancel steps that are in a <code>PENDING</code> state.
		/// CancelSteps /#X-Amz-Target=ElasticMapReduce.CancelSteps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelStepsOutput> CancelStepsAsync(CancelStepsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.CancelSteps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelStepsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a security configuration, which is stored in the service and can be specified when a cluster is created.
		/// CreateSecurityConfiguration /#X-Amz-Target=ElasticMapReduce.CreateSecurityConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSecurityConfigurationOutput> CreateSecurityConfigurationAsync(CreateSecurityConfigurationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.CreateSecurityConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateSecurityConfigurationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a security configuration.
		/// DeleteSecurityConfiguration /#X-Amz-Target=ElasticMapReduce.DeleteSecurityConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSecurityConfigurationOutput> DeleteSecurityConfigurationAsync(DeleteSecurityConfigurationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.DeleteSecurityConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSecurityConfigurationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides cluster-level details including status, hardware and software configuration, VPC settings, and so on.
		/// DescribeCluster /#X-Amz-Target=ElasticMapReduce.DescribeCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeClusterOutput> DescribeClusterAsync(DescribeClusterInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.DescribeCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeClusterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>This API is deprecated and will eventually be removed. We recommend you use <a>ListClusters</a>, <a>DescribeCluster</a>, <a>ListSteps</a>, <a>ListInstanceGroups</a> and <a>ListBootstrapActions</a> instead.</p> <p>DescribeJobFlows returns a list of job flows that match all of the supplied parameters. The parameters can include a list of job flow IDs, job flow states, and restrictions on job flow creation date and time.</p> <p>Regardless of supplied parameters, only job flows created within the last two months are returned.</p> <p>If no parameters are supplied, then job flows matching either of the following criteria are returned:</p> <ul> <li> <p>Job flows created and completed in the last two weeks</p> </li> <li> <p> Job flows created within the last two months that are in one of the following states: <code>RUNNING</code>, <code>WAITING</code>, <code>SHUTTING_DOWN</code>, <code>STARTING</code> </p> </li> </ul> <p>Amazon EMR can return a maximum of 512 job flow descriptions.</p>
		/// DescribeJobFlows /#X-Amz-Target=ElasticMapReduce.DescribeJobFlows
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeJobFlowsOutput> DescribeJobFlowsAsync(DescribeJobFlowsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.DescribeJobFlows";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeJobFlowsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the details of a security configuration by returning the configuration JSON.
		/// DescribeSecurityConfiguration /#X-Amz-Target=ElasticMapReduce.DescribeSecurityConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSecurityConfigurationOutput> DescribeSecurityConfigurationAsync(DescribeSecurityConfigurationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.DescribeSecurityConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeSecurityConfigurationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides more detail about the cluster step.
		/// DescribeStep /#X-Amz-Target=ElasticMapReduce.DescribeStep
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeStepOutput> DescribeStepAsync(DescribeStepInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.DescribeStep";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeStepOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the Amazon EMR block public access configuration for your AWS account in the current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block Public Access for Amazon EMR</a> in the <i>Amazon EMR Management Guide</i>.
		/// GetBlockPublicAccessConfiguration /#X-Amz-Target=ElasticMapReduce.GetBlockPublicAccessConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBlockPublicAccessConfigurationOutput> GetBlockPublicAccessConfigurationAsync(GetBlockPublicAccessConfigurationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.GetBlockPublicAccessConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBlockPublicAccessConfigurationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Fetches the attached managed scaling policy for an Amazon EMR cluster.
		/// GetManagedScalingPolicy /#X-Amz-Target=ElasticMapReduce.GetManagedScalingPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetManagedScalingPolicyOutput> GetManagedScalingPolicyAsync(GetManagedScalingPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.GetManagedScalingPolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetManagedScalingPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides information about the bootstrap actions associated with a cluster.
		/// ListBootstrapActions /#X-Amz-Target=ElasticMapReduce.ListBootstrapActions
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBootstrapActionsOutput> ListBootstrapActionsAsync(string Marker, ListBootstrapActionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListBootstrapActions?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBootstrapActionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the status of all clusters visible to this AWS account. Allows you to filter the list of clusters based on certain criteria; for example, filtering by cluster creation date and time or by status. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListClusters calls.
		/// ListClusters /#X-Amz-Target=ElasticMapReduce.ListClusters
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListClustersOutput> ListClustersAsync(string Marker, ListClustersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListClusters?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListClustersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all available details about the instance fleets in a cluster.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// ListInstanceFleets /#X-Amz-Target=ElasticMapReduce.ListInstanceFleets
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInstanceFleetsOutput> ListInstanceFleetsAsync(string Marker, ListInstanceFleetsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListInstanceFleets?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInstanceFleetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides all available details about the instance groups in a cluster.
		/// ListInstanceGroups /#X-Amz-Target=ElasticMapReduce.ListInstanceGroups
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInstanceGroupsOutput> ListInstanceGroupsAsync(string Marker, ListInstanceGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListInstanceGroups?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInstanceGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides information for all active EC2 instances and EC2 instances terminated in the last 30 days, up to a maximum of 2,000. EC2 instances in any of the following states are considered active: AWAITING_FULFILLMENT, PROVISIONING, BOOTSTRAPPING, RUNNING.
		/// ListInstances /#X-Amz-Target=ElasticMapReduce.ListInstances
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInstancesOutput> ListInstancesAsync(string Marker, ListInstancesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListInstances?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInstancesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the security configurations visible to this account, providing their creation dates and times, and their names. This call returns a maximum of 50 clusters per call, but returns a marker to track the paging of the cluster list across multiple ListSecurityConfigurations calls.
		/// ListSecurityConfigurations /#X-Amz-Target=ElasticMapReduce.ListSecurityConfigurations
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSecurityConfigurationsOutput> ListSecurityConfigurationsAsync(string Marker, ListSecurityConfigurationsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListSecurityConfigurations?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSecurityConfigurationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides a list of steps for the cluster in reverse order unless you specify <code>stepIds</code> with the request of filter by <code>StepStates</code>. You can specify a maximum of ten <code>stepIDs</code>.
		/// ListSteps /#X-Amz-Target=ElasticMapReduce.ListSteps
		/// </summary>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListStepsOutput> ListStepsAsync(string Marker, ListStepsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ListSteps?Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListStepsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the number of steps that can be executed concurrently for the cluster specified using ClusterID.
		/// ModifyCluster /#X-Amz-Target=ElasticMapReduce.ModifyCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ModifyClusterOutput> ModifyClusterAsync(ModifyClusterInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ModifyCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ModifyClusterOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Modifies the target On-Demand and target Spot capacities for the instance fleet with the specified InstanceFleetID within the cluster specified using ClusterID. The call either succeeds or fails atomically.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions.</p> </note>
		/// ModifyInstanceFleet /#X-Amz-Target=ElasticMapReduce.ModifyInstanceFleet
		/// </summary>
		/// <returns>Success</returns>
		public async Task ModifyInstanceFleetAsync(ModifyInstanceFleetInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ModifyInstanceFleet";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// ModifyInstanceGroups modifies the number of nodes and configuration settings of an instance group. The input parameters include the new target instance count for the group and the instance group ID. The call will either succeed or fail atomically.
		/// ModifyInstanceGroups /#X-Amz-Target=ElasticMapReduce.ModifyInstanceGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task ModifyInstanceGroupsAsync(ModifyInstanceGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.ModifyInstanceGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates EC2 instances in response to the value of a CloudWatch metric.
		/// PutAutoScalingPolicy /#X-Amz-Target=ElasticMapReduce.PutAutoScalingPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAutoScalingPolicyOutput> PutAutoScalingPolicyAsync(PutAutoScalingPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.PutAutoScalingPolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAutoScalingPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates an Amazon EMR block public access configuration for your AWS account in the current Region. For more information see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/configure-block-public-access.html">Configure Block Public Access for Amazon EMR</a> in the <i>Amazon EMR Management Guide</i>.
		/// PutBlockPublicAccessConfiguration /#X-Amz-Target=ElasticMapReduce.PutBlockPublicAccessConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutBlockPublicAccessConfigurationOutput> PutBlockPublicAccessConfigurationAsync(PutBlockPublicAccessConfigurationInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.PutBlockPublicAccessConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutBlockPublicAccessConfigurationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a managed scaling policy for an Amazon EMR cluster. The managed scaling policy defines the limits for resources, such as EC2 instances that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
		/// PutManagedScalingPolicy /#X-Amz-Target=ElasticMapReduce.PutManagedScalingPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutManagedScalingPolicyOutput> PutManagedScalingPolicyAsync(PutManagedScalingPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.PutManagedScalingPolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutManagedScalingPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an automatic scaling policy from a specified instance group within an EMR cluster.
		/// RemoveAutoScalingPolicy /#X-Amz-Target=ElasticMapReduce.RemoveAutoScalingPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveAutoScalingPolicyOutput> RemoveAutoScalingPolicyAsync(RemoveAutoScalingPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.RemoveAutoScalingPolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveAutoScalingPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a managed scaling policy from a specified EMR cluster.
		/// RemoveManagedScalingPolicy /#X-Amz-Target=ElasticMapReduce.RemoveManagedScalingPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveManagedScalingPolicyOutput> RemoveManagedScalingPolicyAsync(RemoveManagedScalingPolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.RemoveManagedScalingPolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveManagedScalingPolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Removes tags from an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html">Tag Clusters</a>. </p> <p>The following example removes the stack tag with value Prod from a cluster:</p>
		/// RemoveTags /#X-Amz-Target=ElasticMapReduce.RemoveTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveTagsOutput> RemoveTagsAsync(RemoveTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.RemoveTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RemoveTagsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the steps specified. After the steps complete, the cluster stops and the HDFS partition is lost. To prevent loss of data, configure the last step of the job flow to store results in Amazon S3. If the <a>JobFlowInstancesConfig</a> <code>KeepJobFlowAliveWhenNoSteps</code> parameter is set to <code>TRUE</code>, the cluster transitions to the WAITING state rather than shutting down after the steps have completed. </p> <p>For additional protection, you can set the <a>JobFlowInstancesConfig</a> <code>TerminationProtected</code> parameter to <code>TRUE</code> to lock the cluster and prevent it from being terminated by API call, user intervention, or in the event of a job flow error.</p> <p>A maximum of 256 steps are allowed in each job flow.</p> <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using the SSH shell to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop. For more information on how to do this, see <a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/AddMoreThan256Steps.html">Add More than 256 Steps to a Cluster</a> in the <i>Amazon EMR Management Guide</i>.</p> <p>For long running clusters, we recommend that you periodically store your results.</p> <note> <p>The instance fleets configuration is available only in Amazon EMR versions 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets parameters or InstanceGroups parameters, but not both.</p> </note>
		/// RunJobFlow /#X-Amz-Target=ElasticMapReduce.RunJobFlow
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RunJobFlowOutput> RunJobFlowAsync(RunJobFlowInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.RunJobFlow";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RunJobFlowOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>SetTerminationProtection locks a cluster (job flow) so the EC2 instances in the cluster cannot be terminated by user intervention, an API call, or in the event of a job-flow error. The cluster still terminates upon successful completion of the job flow. Calling <code>SetTerminationProtection</code> on a cluster is similar to calling the Amazon EC2 <code>DisableAPITermination</code> API on all EC2 instances in a cluster.</p> <p> <code>SetTerminationProtection</code> is used to prevent accidental termination of a cluster and to ensure that in the event of an error, the instances persist so that you can recover any data stored in their ephemeral instance storage.</p> <p> To terminate a cluster that has been locked by setting <code>SetTerminationProtection</code> to <code>true</code>, you must first unlock the job flow by a subsequent call to <code>SetTerminationProtection</code> in which you set the value to <code>false</code>. </p> <p> For more information, see<a href="https://docs.aws.amazon.com/emr/latest/ManagementGuide/UsingEMR_TerminationProtection.html">Managing Cluster Termination</a> in the <i>Amazon EMR Management Guide</i>. </p>
		/// SetTerminationProtection /#X-Amz-Target=ElasticMapReduce.SetTerminationProtection
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetTerminationProtectionAsync(SetTerminationProtectionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.SetTerminationProtection";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets the <a>Cluster$VisibleToAllUsers</a> value, which determines whether the cluster is visible to all IAM users of the AWS account associated with the cluster. Only the IAM user who created the cluster or the AWS account root user can call this action. The default value, <code>true</code>, indicates that all IAM users in the AWS account can perform cluster actions if they have the proper IAM policy permissions. If set to <code>false</code>, only the IAM user that created the cluster can perform actions. This action works on running clusters. You can override the default <code>true</code> setting when you create a cluster by using the <code>VisibleToAllUsers</code> parameter with <code>RunJobFlow</code>.
		/// SetVisibleToAllUsers /#X-Amz-Target=ElasticMapReduce.SetVisibleToAllUsers
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetVisibleToAllUsersAsync(SetVisibleToAllUsersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.SetVisibleToAllUsers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>TerminateJobFlows shuts a list of clusters (job flows) down. When a job flow is shut down, any step not yet completed is canceled and the EC2 instances on which the cluster is running are stopped. Any log files not already saved are uploaded to Amazon S3 if a LogUri was specified when the cluster was created.</p> <p>The maximum number of clusters allowed is 10. The call to <code>TerminateJobFlows</code> is asynchronous. Depending on the configuration of the cluster, it may take up to 1-5 minutes for the cluster to completely terminate and release allocated resources, such as Amazon EC2 instances.</p>
		/// TerminateJobFlows /#X-Amz-Target=ElasticMapReduce.TerminateJobFlows
		/// </summary>
		/// <returns>Success</returns>
		public async Task TerminateJobFlowsAsync(TerminateJobFlowsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=ElasticMapReduce.TerminateJobFlows";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
