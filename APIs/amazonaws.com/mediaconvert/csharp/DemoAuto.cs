//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobResponse
	{
		
		/// <summary>
		/// Each job converts an input file into an output file or files. For more information, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Specify whether the service runs your job with accelerated transcoding. Choose DISABLED if you don't want accelerated transcoding. Choose ENABLED if you want your job to run with accelerated transcoding and to fail if your input files or your job settings aren't compatible with accelerated transcoding. Choose PREFERRED if you want your job to run with accelerated transcoding if the job is compatible with the feature and to run at standard speed if it's not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccelerationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED = 2,
	}
	
	/// <summary>
	/// Optional. Configuration for a destination queue to which the job can hop once a customer-defined minimum wait time has passed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HopDestination
	{
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WaitMinutes { get; set; }
	}
	
	/// <summary>
	/// Settings for Avail Blanking
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailBlanking
	{
		
		/// <summary>
		/// Min length: 14
		/// Pattern: ^((s3://(.*?)\.(bmp|BMP|png|PNG))|(https?://(.*?)\.(bmp|BMP|png|PNG)(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=14)]
		public string AvailBlankingImage { get; set; }
	}
	
	/// <summary>
	/// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EsamSettings
	{
		
		/// <summary>
		/// ESAM ManifestConfirmConditionNotification defined by OC-SP-ESAM-API-I03-131025.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EsamManifestConfirmConditionNotification ManifestConfirmConditionNotification { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30000)]
		public System.Nullable<System.Int32> ResponseSignalPreroll { get; set; }
		
		/// <summary>
		/// ESAM SignalProcessingNotification data defined by OC-SP-ESAM-API-I03-131025.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EsamSignalProcessingNotification SignalProcessingNotification { get; set; }
	}
	
	/// <summary>
	/// Overlay motion graphics on top of your video at the time that you specify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MotionImageInserter
	{
		
		/// <summary>
		/// For motion overlays that don't have a built-in frame rate, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. The overlay frame rate doesn't need to match the frame rate of the underlying video.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInsertionFramerate Framerate { get; set; }
		
		/// <summary>
		/// Max length: 1285
		/// Min length: 14
		/// Pattern: ^((s3://(.*)(\.mov|[0-9]+\.png))|(https?://(.*)(\.mov|[0-9]+\.png)(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1285, MinimumLength=14)]
		public string Input { get; set; }
		
		/// <summary>
		/// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInserterInsertionMode InsertionMode { get; set; }
		
		/// <summary>
		/// Specify the offset between the upper-left corner of the video frame and the top left corner of the overlay.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInsertionOffset Offset { get; set; }
		
		/// <summary>
		/// Specify whether your motion graphic overlay repeats on a loop or plays only once.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInserterPlayback Playback { get; set; }
		
		/// <summary>
		/// Max length: 11
		/// Min length: 11
		/// Pattern: ^((([0-1]\d)|(2[0-3]))(:[0-5]\d){2}([:;][0-5]\d))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength=11)]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MotionImageInserterInsertionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PNG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MotionImageInserterPlayback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEAT = 1,
	}
	
	/// <summary>
	/// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NielsenConfiguration
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 0)]
		public System.Nullable<System.Int32> BreakoutCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistributorId { get; set; }
	}
	
	/// <summary>
	/// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimecodeConfig
	{
		
		/// <summary>
		/// Pattern: ^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9][:;][0-9]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Anchor { get; set; }
		
		/// <summary>
		/// Use Source (TimecodeSource) to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded (EMBEDDED) - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 (ZEROBASED) instead. * Start at 0 (ZEROBASED) - Set the timecode of the initial frame to 00:00:00:00. * Specified Start (SPECIFIEDSTART) - Set the timecode of the initial frame to a value other than zero. You use Start timecode (Start) to provide this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfigSource Source { get; set; }
		
		/// <summary>
		/// Pattern: ^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9][:;][0-9]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Pattern: ^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimestampOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeConfigSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIEDSTART = 2,
	}
	
	/// <summary>
	/// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in your job. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimedMetadataInsertion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Id3Insertion[] Id3Insertions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobTemplateResponse
	{
		
		/// <summary>
		/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobTemplate JobTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetResponse
	{
		
		/// <summary>
		/// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Preset Preset { get; set; }
	}
	
	/// <summary>
	/// Container specific settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContainerSettings
	{
		
		/// <summary>
		/// Settings for MP4 segments in CMAF
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmfcSettings CmfcSettings { get; set; }
		
		/// <summary>
		/// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContainerSettingsContainer Container { get; set; }
		
		/// <summary>
		/// Settings for F4v container
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public F4vSettings F4vSettings { get; set; }
		
		/// <summary>
		/// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettings M2tsSettings { get; set; }
		
		/// <summary>
		/// Settings for TS segments in HLS
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8Settings M3u8Settings { get; set; }
		
		/// <summary>
		/// Settings for MOV Container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettings MovSettings { get; set; }
		
		/// <summary>
		/// Settings for MP4 container. You can create audio-only AAC outputs with this container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp4Settings Mp4Settings { get; set; }
		
		/// <summary>
		/// Settings for MP4 segments in DASH
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MpdSettings MpdSettings { get; set; }
		
		/// <summary>
		/// MXF settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MxfSettings MxfSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContainerSettingsContainer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F4V = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISMV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M2TS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M3U8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CMFC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXF = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 10,
	}
	
	/// <summary>
	/// Settings for video outputs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoDescription
	{
		
		/// <summary>
		/// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling (AfdSignaling) to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionAfdSignaling AfdSignaling { get; set; }
		
		/// <summary>
		/// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionAntiAlias AntiAlias { get; set; }
		
		/// <summary>
		/// Video codec settings, (CodecSettings) under (VideoDescription), contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * FRAME_CAPTURE, FrameCaptureSettings * AV1, Av1Settings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * VP8, Vp8Settings * VP9, Vp9Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoCodecSettings CodecSettings { get; set; }
		
		/// <summary>
		/// Choose Insert (INSERT) for this setting to include color metadata in this output. Choose Ignore (IGNORE) to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionColorMetadata ColorMetadata { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Crop { get; set; }
		
		/// <summary>
		/// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion (TimecodeInsertion) is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionDropFrameTimecode DropFrameTimecode { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> FixedAfd { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8192)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Position { get; set; }
		
		/// <summary>
		/// Use Respond to AFD (RespondToAfd) to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to (NONE). A preferred implementation of this workflow is to set RespondToAfd to (NONE) and set AfdSignaling to (AUTO). * Choose None to remove all input AFD values from this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionRespondToAfd RespondToAfd { get; set; }
		
		/// <summary>
		/// Specify how the service handles outputs that have a different aspect ratio from the input aspect ratio. Choose Stretch to output (STRETCH_TO_OUTPUT) to have the service stretch your video image to fit. Keep the setting Default (DEFAULT) to have the service letterbox your video instead. This setting overrides any value that you specify for the setting Selection placement (position) in this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionScalingBehavior ScalingBehavior { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Sharpness { get; set; }
		
		/// <summary>
		/// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion (VideoTimecodeInsertion) to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration (TimecodeConfig). In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings (InputTimecodeSource) does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration (TimecodeSource) does.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionTimecodeInsertion TimecodeInsertion { get; set; }
		
		/// <summary>
		/// Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoPreprocessor VideoPreprocessors { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8192
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8192)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionAfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionAntiAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionDropFrameTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionRespondToAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionScalingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRETCH_TO_OUTPUT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionTimecodeInsertion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateQueueResponse
	{
		
		/// <summary>
		/// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Queue Queue { get; set; }
	}
	
	/// <summary>
	/// The length of the term of your reserved queue pricing plan commitment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Commitment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
	}
	
	/// <summary>
	/// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RenewalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_RENEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndpointsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobResponse
	{
		
		/// <summary>
		/// Each job converts an input file into an output file or files. For more information, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobTemplateResponse
	{
		
		/// <summary>
		/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobTemplate JobTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPresetResponse
	{
		
		/// <summary>
		/// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Preset Preset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetQueueResponse
	{
		
		/// <summary>
		/// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Queue Queue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobTemplate[] JobTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Job[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPresetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Preset[] Presets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListQueuesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Queue[] Queues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceTags ResourceTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateJobTemplateResponse
	{
		
		/// <summary>
		/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobTemplate JobTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePresetResponse
	{
		
		/// <summary>
		/// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Preset Preset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateQueueResponse
	{
		
		/// <summary>
		/// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Queue Queue { get; set; }
	}
	
	/// <summary>
	/// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and  FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacAudioDescriptionBroadcasterMix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROADCASTER_MIXED_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// AAC Profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV2 = 2,
	}
	
	/// <summary>
	/// Mono (Audio Description), Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. "1.0 - Audio Description (Receiver Mix)" setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_RECEIVER_MIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_5_1 = 4,
	}
	
	/// <summary>
	/// Rate Control Mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	/// <summary>
	/// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacRawFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATM_LOAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG4 = 1,
	}
	
	/// <summary>
	/// VBR Quality Level - Only used if rate_control_mode is VBR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacVbrQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR".  In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AacSettings
	{
		
		/// <summary>
		/// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and  FollowInputAudioType. Choose NORMAL when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsAudioDescriptionBroadcasterMix AudioDescriptionBroadcasterMix { get; set; }
		
		/// <summary>
		/// Minimum: 6000
		/// Maximum: 1024000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(6000, 1024000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// AAC Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsCodecProfile CodecProfile { get; set; }
		
		/// <summary>
		/// Mono (Audio Description), Mono, Stereo, or 5.1 channel layout. Valid values depend on rate control mode and profile. "1.0 - Audio Description (Receiver Mix)" setting receives a stereo description plus control track and emits a mono AAC encode of the description track, with control data emitted in the PES header as per ETSI TS 101 154 Annex E.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Rate Control Mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Enables LATM/LOAS AAC output. Note that if you use LATM/LOAS AAC in an output, you must choose "No container" for the output container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsRawFormat RawFormat { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 96000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 96000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
		
		/// <summary>
		/// Use MPEG-2 AAC instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsSpecification Specification { get; set; }
		
		/// <summary>
		/// VBR Quality Level - Only used if rate_control_mode is VBR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsVbrQuality VbrQuality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsAudioDescriptionBroadcasterMix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROADCASTER_MIXED_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_RECEIVER_MIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_5_1 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsRawFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATM_LOAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG4 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsVbrQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
	}
	
	/// <summary>
	/// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIALOGUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_AND_EFFECTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE_OVER = 7,
	}
	
	/// <summary>
	/// Dolby Digital coding mode. Determines number of channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2_LFE = 3,
	}
	
	/// <summary>
	/// If set to FILM_STANDARD, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3DynamicRangeCompressionProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AC3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ac3Settings
	{
		
		/// <summary>
		/// Minimum: 64000
		/// Maximum: 640000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(64000, 640000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Specify the bitstream mode for the AC-3 stream that the encoder emits. For more information about the AC3 bitstream mode, see ATSC A/52-2012 (Annex E).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsBitstreamMode BitstreamMode { get; set; }
		
		/// <summary>
		/// Dolby Digital coding mode. Determines number of channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		/// <summary>
		/// If set to FILM_STANDARD, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsDynamicRangeCompressionProfile DynamicRangeCompressionProfile { get; set; }
		
		/// <summary>
		/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsLfeFilter LfeFilter { get; set; }
		
		/// <summary>
		/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsMetadataControl MetadataControl { get; set; }
		
		/// <summary>
		/// Minimum: 48000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(48000, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIALOGUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_AND_EFFECTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE_OVER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2_LFE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsDynamicRangeCompressionProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsLfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsMetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccelerationSettings
	{
		
		/// <summary>
		/// Specify whether the service runs your job with accelerated transcoding. Choose DISABLED if you don't want accelerated transcoding. Choose ENABLED if you want your job to run with accelerated transcoding and to fail if your input files or your job settings aren't compatible with accelerated transcoding. Choose PREFERRED if you want your job to run with accelerated transcoding if the job is compatible with the feature and to run at standard speed if it's not.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettingsMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccelerationSettingsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED = 2,
	}
	
	/// <summary>
	/// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccelerationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCELERATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ACCELERATED = 3,
	}
	
	/// <summary>
	/// This setting only applies to H.264, H.265, and MPEG2 outputs. Use Insert AFD signaling (AfdSignaling) to specify whether the service includes AFD values in the output video data and what those values are. * Choose None to remove all AFD values from this output. * Choose Fixed to ignore input AFD values and instead encode the value specified in the job. * Choose Auto to calculate output AFD values based on the input AFD scaler data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 2,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AIFF.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AiffSettings
	{
		
		/// <summary>
		/// Minimum: 16
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(16, 24)]
		public System.Nullable<System.Int32> BitDepth { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 64)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 192000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 192000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
	}
	
	/// <summary>
	/// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlphaBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMAP_TO_LUMA = 1,
	}
	
	/// <summary>
	/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AncillaryConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AncillaryTerminateCaptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END_OF_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Settings for ancillary captions source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AncillarySourceSettings
	{
		
		/// <summary>
		/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AncillarySourceSettingsConvert608To708 Convert608To708 { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> SourceAncillaryChannelNumber { get; set; }
		
		/// <summary>
		/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AncillarySourceSettingsTerminateCaptions TerminateCaptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AncillarySourceSettingsConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AncillarySourceSettingsTerminateCaptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END_OF_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// The anti-alias filter is automatically applied to all outputs. The service no longer accepts the value DISABLED for AntiAlias. If you specify that in your job, the service will ignore the setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AntiAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateCertificateRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Type of Audio codec.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIFF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AC3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAC3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAC3_ATMOS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VORBIS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 10,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Eac3AtmosSettings
	{
		
		/// <summary>
		/// Minimum: 384000
		/// Maximum: 768000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(384000, 768000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsBitstreamMode BitstreamMode { get; set; }
		
		/// <summary>
		/// The coding mode for Dolby Digital Plus JOC (Atmos) is always 9.1.6 (CODING_MODE_9_1_6).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsDialogueIntelligence DialogueIntelligence { get; set; }
		
		/// <summary>
		/// Specify the absolute peak level for a signal with dynamic range compression.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsDynamicRangeCompressionLine DynamicRangeCompressionLine { get; set; }
		
		/// <summary>
		/// Specify how the service limits the audio dynamic range when compressing the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsDynamicRangeCompressionRf DynamicRangeCompressionRf { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoSurroundMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtSurroundMixLevel { get; set; }
		
		/// <summary>
		/// Choose how the service meters the loudness of your audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsMeteringMode MeteringMode { get; set; }
		
		/// <summary>
		/// Minimum: 48000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(48000, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> SpeechThreshold { get; set; }
		
		/// <summary>
		/// Choose how the service does stereo downmixing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsStereoDownmix StereoDownmix { get; set; }
		
		/// <summary>
		/// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettingsSurroundExMode SurroundExMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_9_1_6 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsDialogueIntelligence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsDynamicRangeCompressionLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsDynamicRangeCompressionRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsMeteringMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEQ_A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsStereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEREO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SURROUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSettingsSurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Eac3Settings
	{
		
		/// <summary>
		/// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsAttenuationControl AttenuationControl { get; set; }
		
		/// <summary>
		/// Minimum: 64000
		/// Maximum: 640000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(64000, 640000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsBitstreamMode BitstreamMode { get; set; }
		
		/// <summary>
		/// Dolby Digital Plus coding mode. Determines number of channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Activates a DC highpass filter for all input channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDcFilter DcFilter { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		/// <summary>
		/// Specify the absolute peak level for a signal with dynamic range compression.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDynamicRangeCompressionLine DynamicRangeCompressionLine { get; set; }
		
		/// <summary>
		/// Specify how the service limits the audio dynamic range when compressing the audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDynamicRangeCompressionRf DynamicRangeCompressionRf { get; set; }
		
		/// <summary>
		/// When encoding 3/2 audio, controls whether the LFE channel is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsLfeControl LfeControl { get; set; }
		
		/// <summary>
		/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsLfeFilter LfeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoSurroundMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtCenterMixLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtSurroundMixLevel { get; set; }
		
		/// <summary>
		/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsMetadataControl MetadataControl { get; set; }
		
		/// <summary>
		/// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsPassthroughControl PassthroughControl { get; set; }
		
		/// <summary>
		/// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsPhaseControl PhaseControl { get; set; }
		
		/// <summary>
		/// Minimum: 48000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(48000, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
		
		/// <summary>
		/// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Stereo downmix (Eac3StereoDownmix).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsStereoDownmix StereoDownmix { get; set; }
		
		/// <summary>
		/// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsSurroundExMode SurroundExMode { get; set; }
		
		/// <summary>
		/// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsSurroundMode SurroundMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsAttenuationControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTENUATE_3_DB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDcFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDynamicRangeCompressionLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDynamicRangeCompressionRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsLfeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LFE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LFE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsLfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsMetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsPassthroughControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHEN_POSSIBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsPhaseControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIFT_90_DEGREES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SHIFT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsStereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LO_RO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT_RT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsSurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsSurroundMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value MP2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mp2Settings
	{
		
		/// <summary>
		/// Minimum: 32000
		/// Maximum: 384000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32000, 384000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// Minimum: 32000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32000, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
	}
	
	/// <summary>
	/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mp3Settings
	{
		
		/// <summary>
		/// Minimum: 16000
		/// Maximum: 320000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(16000, 320000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp3SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Minimum: 22050
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(22050, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 9)]
		public System.Nullable<System.Int32> VbrQuality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp3SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	/// <summary>
	/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpusSettings
	{
		
		/// <summary>
		/// Minimum: 32000
		/// Maximum: 192000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32000, 192000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// Minimum: 16000
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(16000, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
	}
	
	/// <summary>
	/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VorbisSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// Minimum: 22050
		/// Maximum: 48000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(22050, 48000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 10)]
		public System.Nullable<System.Int32> VbrQuality { get; set; }
	}
	
	/// <summary>
	/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value WAV.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WavSettings
	{
		
		/// <summary>
		/// Minimum: 16
		/// Maximum: 24
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(16, 24)]
		public System.Nullable<System.Int32> BitDepth { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 64)]
		public System.Nullable<System.Int32> Channels { get; set; }
		
		/// <summary>
		/// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WavSettingsFormat Format { get; set; }
		
		/// <summary>
		/// Minimum: 8000
		/// Maximum: 192000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(8000, 192000)]
		public System.Nullable<System.Int32> SampleRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WavSettingsFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RF64 = 1,
	}
	
	/// <summary>
	/// Audio codec settings (CodecSettings) under (AudioDescriptions) contains the group of settings related to audio encoding. The settings in this group vary depending on the value that you choose for Audio codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AAC, AacSettings * MP2, Mp2Settings * MP3, Mp3Settings * WAV, WavSettings * AIFF, AiffSettings * AC3, Ac3Settings * EAC3, Eac3Settings * EAC3_ATMOS, Eac3AtmosSettings * VORBIS, VorbisSettings * OPUS, OpusSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioCodecSettings
	{
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR".  In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettings AacSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AC3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3Settings Ac3Settings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AIFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AiffSettings AiffSettings { get; set; }
		
		/// <summary>
		/// Type of Audio codec.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioCodecSettingsCodec Codec { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3_ATMOS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3AtmosSettings Eac3AtmosSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value EAC3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3Settings Eac3Settings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value MP2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp2Settings Mp2Settings { get; set; }
		
		/// <summary>
		/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value MP3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp3Settings Mp3Settings { get; set; }
		
		/// <summary>
		/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value OPUS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OpusSettings OpusSettings { get; set; }
		
		/// <summary>
		/// Required when you set Codec, under AudioDescriptions>CodecSettings, to the value Vorbis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VorbisSettings VorbisSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value WAV.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WavSettings WavSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioCodecSettingsCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AIFF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AC3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAC3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAC3_ATMOS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VORBIS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 10,
	}
	
	/// <summary>
	/// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDefaultSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_DEFAULT = 1,
	}
	
	/// <summary>
	/// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioNormalizationSettings
	{
		
		/// <summary>
		/// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsAlgorithmControl AlgorithmControl { get; set; }
		
		/// <summary>
		/// Minimum: -70
		/// Maximum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-70, 0)]
		public System.Nullable<System.Int32> CorrectionGateLevel { get; set; }
		
		/// <summary>
		/// If set to LOG, log each output's audio track loudness to a CSV file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsLoudnessLogging LoudnessLogging { get; set; }
		
		/// <summary>
		/// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsPeakCalculation PeakCalculation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetLkfs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_4 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsAlgorithmControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRECT_AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASURE_ONLY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsLoudnessLogging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_LOG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsPeakCalculation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUE_PEAK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioTypeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	/// <summary>
	/// Specify which source for language code takes precedence for this audio track. When you choose Follow input (FOLLOW_INPUT), the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code (languageCode or customLanguageCode). When you choose Use configured (USE_CONFIGURED), the service uses the language code that you specify.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioLanguageCodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Use Manual audio remixing (RemixSettings) to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemixSettings
	{
		
		/// <summary>
		/// Channel mapping (ChannelMapping) contains the group of fields that hold the remixing value for each channel. Units are in dB. Acceptable values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelMapping ChannelMapping { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 64)]
		public System.Nullable<System.Int32> ChannelsIn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 64)]
		public System.Nullable<System.Int32> ChannelsOut { get; set; }
	}
	
	/// <summary>
	/// Description of audio output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioDescription
	{
		
		/// <summary>
		/// Advanced audio normalization settings. Ignore these settings unless you need to comply with a loudness standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettings AudioNormalizationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioSourceName { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> AudioType { get; set; }
		
		/// <summary>
		/// When set to FOLLOW_INPUT, if the input contains an ISO 639 audio_type, then that value is passed through to the output. If the input contains no ISO 639 audio_type, the value in Audio Type is included in the output. Otherwise the value in Audio Type is included in the output. Note that this field and audioType are both ignored if audioDescriptionBroadcasterMix is set to BROADCASTER_MIXED_AD.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl AudioTypeControl { get; set; }
		
		/// <summary>
		/// Audio codec settings (CodecSettings) under (AudioDescriptions) contains the group of settings related to audio encoding. The settings in this group vary depending on the value that you choose for Audio codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AAC, AacSettings * MP2, Mp2Settings * MP3, Mp3Settings * WAV, WavSettings * AIFF, AiffSettings * AC3, Ac3Settings * EAC3, Eac3Settings * EAC3_ATMOS, Eac3AtmosSettings * VORBIS, VorbisSettings * OPUS, OpusSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioCodecSettings CodecSettings { get; set; }
		
		/// <summary>
		/// Pattern: ^[A-Za-z]{2,3}(-[A-Za-z-]+)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Specify which source for language code takes precedence for this audio track. When you choose Follow input (FOLLOW_INPUT), the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code (languageCode or customLanguageCode). When you choose Use configured (USE_CONFIGURED), the service uses the language code that you specify.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionLanguageCodeControl LanguageCodeControl { get; set; }
		
		/// <summary>
		/// Use Manual audio remixing (RemixSettings) to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemixSettings RemixSettings { get; set; }
		
		/// <summary>
		/// Pattern: ^[\w\s]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionAudioTypeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionLanguageCodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Choose one of the following audio normalization algorithms: ITU-R BS.1770-1: Ungated loudness. A measurement of ungated average loudness for an entire piece of content, suitable for measurement of short-form content under ATSC recommendation A/85. Supports up to 5.1 audio channels. ITU-R BS.1770-2: Gated loudness. A measurement of gated average loudness compliant with the requirements of EBU-R128. Supports up to 5.1 audio channels. ITU-R BS.1770-3: Modified peak. The same loudness measurement algorithm as 1770-2, with an updated true peak measurement. ITU-R BS.1770-4: Higher channel count. Allows for more audio channels than the other algorithms, including configurations such as 7.1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_4 = 3,
	}
	
	/// <summary>
	/// When enabled the output audio is corrected using the chosen algorithm. If disabled, the audio will be measured but not adjusted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationAlgorithmControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRECT_AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEASURE_ONLY = 1,
	}
	
	/// <summary>
	/// If set to LOG, log each output's audio track loudness to a CSV file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationLoudnessLogging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONT_LOG = 1,
	}
	
	/// <summary>
	/// If set to TRUE_PEAK, calculate and log the TruePeak for each output's audio track loudness.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationPeakCalculation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUE_PEAK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Specifies the type of the audio selector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioSelectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE_CODE = 2,
	}
	
	/// <summary>
	/// Selector for Audio
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioSelector
	{
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Za-z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Enable this setting on one audio selector to set it as the default for the job. The service uses this default for outputs where it can't find the specified input audio. If you don't set a default, those outputs have no audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioSelectorDefaultSelection DefaultSelection { get; set; }
		
		/// <summary>
		/// Pattern: ^((s3://([^\/]+\/+)+([^\/\.]+|(([^\/]*)\.([wW][eE][bB][mM]|[mM]2[vV]|[mM][pP][eE][gG]|[mM][pP]3|[aA][vV][iI]|[mM][pP]4|[fF][lL][vV]|[mM][pP][tT]|[mM][pP][gG]|[mM]4[vV]|[tT][rR][pP]|[fF]4[vV]|[mM]2[tT][sS]|[tT][sS]|264|[hH]264|[mM][kK][vV]|[mM][oO][vV]|[mM][tT][sS]|[mM]2[tT]|[wW][mM][vV]|[aA][sS][fF]|[vV][oO][bB]|3[gG][pP]|3[gG][pP][pP]|[mM][xX][fF]|[dD][iI][vV][xX]|[xX][vV][iI][dD]|[rR][aA][wW]|[dD][vV]|[gG][xX][fF]|[mM]1[vV]|3[gG]2|[vV][mM][fF]|[mM]3[uU]8|[lL][cC][hH]|[gG][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF][hH][dD]|[wW][aA][vV]|[yY]4[mM]|[aA][aA][cC]|[aA][iI][fF][fF]|[mM][pP]2|[aA][cC]3|[eE][cC]3|[dD][tT][sS][eE]))))|(https?://([^\/]+\/+)+([^\/\.]+|(([^\/]*)\.([mM]2[vV]|[mM][pP][eE][gG]|[mM][pP]3|[aA][vV][iI]|[mM][pP]4|[fF][lL][vV]|[mM][pP][tT]|[mM][pP][gG]|[mM]4[vV]|[tT][rR][pP]|[fF]4[vV]|[mM]2[tT][sS]|[tT][sS]|264|[hH]264|[mM][kK][vV]|[mM][oO][vV]|[mM][tT][sS]|[mM]2[tT]|[wW][mM][vV]|[aA][sS][fF]|[vV][oO][bB]|3[gG][pP]|3[gG][pP][pP]|[mM][xX][fF]|[dD][iI][vV][xX]|[xX][vV][iI][dD]|[rR][aA][wW]|[dD][vV]|[gG][xX][fF]|[mM]1[vV]|3[gG]2|[vV][mM][fF]|[mM]3[uU]8|[lL][cC][hH]|[gG][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF][hH][dD]|[wW][aA][vV]|[yY]4[mM]|[aA][aA][cC]|[aA][iI][fF][fF]|[mM][pP]2|[aA][cC]3|[eE][cC]3|[dD][tT][sS][eE])))(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExternalAudioFileInput { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioSelectorLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMin1Max2147483647[] Pids { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 8)]
		public System.Nullable<System.Int32> ProgramSelection { get; set; }
		
		/// <summary>
		/// Use Manual audio remixing (RemixSettings) to adjust audio levels for each audio channel in each output of your job. With audio remixing, you can output more or fewer audio channels than your input audio source provides.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemixSettings RemixSettings { get; set; }
		
		/// <summary>
		/// Specifies the type of the audio selector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioSelectorSelectorType SelectorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMin1Max2147483647[] Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioSelectorDefaultSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_DEFAULT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioSelectorLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioSelectorSelectorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE_CODE = 2,
	}
	
	/// <summary>
	/// Group of Audio Selectors
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioSelectorGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin1[] AudioSelectorNames { get; set; }
	}
	
	/// <summary>
	/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// When set to INTERPOLATE, produces smoother motion during frame rate conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// Settings for quality-defined variable bitrate encoding with the AV1 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Av1QvbrSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> QvbrQualityLevelFineTune { get; set; }
	}
	
	/// <summary>
	/// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 0,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on spatial variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Av1Settings
	{
		
		/// <summary>
		/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// When set to INTERPOLATE, produces smoother motion during frame rate conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 7
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(7, 15)]
		public System.Nullable<System.Int32> NumberBFramesBetweenReferenceFrames { get; set; }
		
		/// <summary>
		/// Settings for quality-defined variable bitrate encoding with the AV1 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1QvbrSettings QvbrSettings { get; set; }
		
		/// <summary>
		/// 'With AV1 outputs, for rate control mode, MediaConvert supports only quality-defined variable bitrate (QVBR). You can''t use CBR or VBR.'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on spatial variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1SettingsSpatialAdaptiveQuantization SpatialAdaptiveQuantization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Av1SettingsSpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingTagsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TEMPLATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB = 3,
	}
	
	/// <summary>
	/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
	}
	
	/// <summary>
	/// Specifies the color of the rectangle behind the captions.
	///All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	/// <summary>
	/// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FontScript
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANT = 2,
	}
	
	/// <summary>
	/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	/// <summary>
	/// Specifies the color of the shadow cast by the captions.
	///All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninSubtitleTeletextSpacing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_GRID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPORTIONAL = 1,
	}
	
	/// <summary>
	/// Burn-In Destination Settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BurninDestinationSettings
	{
		
		/// <summary>
		/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsAlignment Alignment { get; set; }
		
		/// <summary>
		/// Specifies the color of the rectangle behind the captions.
		///All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsBackgroundColor BackgroundColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		/// <summary>
		/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsFontColor FontColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		/// <summary>
		/// Minimum: 96
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(96, 600)]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		/// <summary>
		/// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsFontScript FontScript { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 96
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 96)]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		/// <summary>
		/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsOutlineColor OutlineColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		/// <summary>
		/// Specifies the color of the shadow cast by the captions.
		///All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsShadowColor ShadowColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		/// <summary>
		/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettingsTeletextSpacing TeletextSpacing { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsFontScript
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurninDestinationSettingsTeletextSpacing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_GRID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPORTIONAL = 1,
	}
	
	/// <summary>
	/// Specific settings required by destination type. Note that burnin_destination_settings are not available if the source of the caption data is Embedded or Teletext.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionDestinationSettings
	{
		
		/// <summary>
		/// Burn-In Destination Settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurninDestinationSettings BurninDestinationSettings { get; set; }
		
		/// <summary>
		/// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Other options are embedded with SCTE-20, burn-in, DVB-sub, IMSC, SCC, SRT, teletext, TTML, and web-VTT. If you are using SCTE-20, choose SCTE-20 plus embedded (SCTE20_PLUS_EMBEDDED) to create an output that complies with the SCTE-43 spec. To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20 (EMBEDDED_PLUS_SCTE20).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDestinationSettingsDestinationType DestinationType { get; set; }
		
		/// <summary>
		/// DVB-Sub Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettings DvbSubDestinationSettings { get; set; }
		
		/// <summary>
		/// Settings specific to embedded/ancillary caption outputs, including 608/708 Channel destination number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedDestinationSettings EmbeddedDestinationSettings { get; set; }
		
		/// <summary>
		/// Settings specific to IMSC caption outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImscDestinationSettings ImscDestinationSettings { get; set; }
		
		/// <summary>
		/// Settings for SCC caption output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SccDestinationSettings SccDestinationSettings { get; set; }
		
		/// <summary>
		/// Settings for Teletext caption output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TeletextDestinationSettings TeletextDestinationSettings { get; set; }
		
		/// <summary>
		/// Settings specific to TTML caption outputs, including Pass style information (TtmlStylePassthrough).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationSettings TtmlDestinationSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionDestinationSettingsDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BURN_IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB_SUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED_PLUS_SCTE20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMSC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE20_PLUS_EMBEDDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELETEXT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTML = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBVTT = 11,
	}
	
	/// <summary>
	/// Description of Caption output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionDescription
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string CaptionSelectorName { get; set; }
		
		/// <summary>
		/// Pattern: ^[A-Za-z]{2,3}(-[A-Za-z-]+)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Specific settings required by destination type. Note that burnin_destination_settings are not available if the source of the caption data is Embedded or Teletext.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescriptionLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionDescriptionLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	/// <summary>
	/// Caption Description for preset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionDescriptionPreset
	{
		
		/// <summary>
		/// Pattern: ^[A-Za-z]{2,3}(-[A-Za-z-]+)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Specific settings required by destination type. Note that burnin_destination_settings are not available if the source of the caption data is Embedded or Teletext.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescriptionPresetLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionDescriptionPresetLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	/// <summary>
	/// Specify the format for this set of captions on this output. The default format is embedded without SCTE-20. Other options are embedded with SCTE-20, burn-in, DVB-sub, IMSC, SCC, SRT, teletext, TTML, and web-VTT. If you are using SCTE-20, choose SCTE-20 plus embedded (SCTE20_PLUS_EMBEDDED) to create an output that complies with the SCTE-43 spec. To create a non-compliant output where the embedded captions come first, choose Embedded plus SCTE-20 (EMBEDDED_PLUS_SCTE20).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionDestinationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BURN_IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB_SUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED_PLUS_SCTE20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMSC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE20_PLUS_EMBEDDED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELETEXT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTML = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBVTT = 11,
	}
	
	/// <summary>
	/// DVB-Sub Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSubDestinationSettings
	{
		
		/// <summary>
		/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsAlignment Alignment { get; set; }
		
		/// <summary>
		/// Specifies the color of the rectangle behind the captions.
		///All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsBackgroundColor BackgroundColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		/// <summary>
		/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsFontColor FontColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		/// <summary>
		/// Minimum: 96
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(96, 600)]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		/// <summary>
		/// Provide the font script, using an ISO 15924 script code, if the LanguageCode is not sufficient for determining the script type. Where LanguageCode or CustomLanguageCode is sufficient, use "AUTOMATIC" or leave unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsFontScript FontScript { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 96
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 96)]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		/// <summary>
		/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsOutlineColor OutlineColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		/// <summary>
		/// Specifies the color of the shadow cast by the captions.
		///All burn-in and DVB-Sub font settings must match.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsShadowColor ShadowColor { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		/// <summary>
		/// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsSubtitlingType SubtitlingType { get; set; }
		
		/// <summary>
		/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsTeletextSpacing TeletextSpacing { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsFontScript
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HANT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsSubtitlingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsTeletextSpacing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_GRID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPORTIONAL = 1,
	}
	
	/// <summary>
	/// Settings specific to embedded/ancillary caption outputs, including 608/708 Channel destination number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EmbeddedDestinationSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> Destination608ChannelNumber { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> Destination708ServiceNumber { get; set; }
	}
	
	/// <summary>
	/// Settings specific to IMSC caption outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImscDestinationSettings
	{
		
		/// <summary>
		/// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImscDestinationSettingsStylePassthrough StylePassthrough { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImscDestinationSettingsStylePassthrough
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Settings for SCC caption output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SccDestinationSettings
	{
		
		/// <summary>
		/// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SccDestinationSettingsFramerate Framerate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SccDestinationSettingsFramerate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_23_97 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_24 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_25 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_29_97_DROPFRAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_29_97_NON_DROPFRAME = 4,
	}
	
	/// <summary>
	/// Settings for Teletext caption output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TeletextDestinationSettings
	{
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[1-8][0-9a-fA-F][0-9a-eA-E]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TeletextPageType[] PageTypes { get; set; }
	}
	
	/// <summary>
	/// Settings specific to TTML caption outputs, including Pass style information (TtmlStylePassthrough).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TtmlDestinationSettings
	{
		
		/// <summary>
		/// Pass through style and position information from a TTML-like input source (TTML, SMPTE-TT) to the TTML output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationSettingsStylePassthrough StylePassthrough { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TtmlDestinationSettingsStylePassthrough
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSourceSettings
	{
		
		/// <summary>
		/// Settings for ancillary captions source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AncillarySourceSettings AncillarySourceSettings { get; set; }
		
		/// <summary>
		/// DVB Sub Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubSourceSettings DvbSubSourceSettings { get; set; }
		
		/// <summary>
		/// Settings for embedded captions Source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettings EmbeddedSourceSettings { get; set; }
		
		/// <summary>
		/// If your input captions are SCC, SMI, SRT, STL, TTML, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FileSourceSettings FileSourceSettings { get; set; }
		
		/// <summary>
		/// Use Source (SourceType) to identify the format of your input captions.  The service cannot auto-detect caption format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSourceSettingsSourceType SourceType { get; set; }
		
		/// <summary>
		/// Settings specific to Teletext caption sources, including Page number.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TeletextSourceSettings TeletextSourceSettings { get; set; }
		
		/// <summary>
		/// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrackSourceSettings TrackSourceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionSourceSettingsSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANCILLARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB_SUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTML = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELETEXT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_SOURCE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMSC = 11,
	}
	
	/// <summary>
	/// Set up captions in your outputs by first selecting them from your input here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSelector
	{
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Za-z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSelectorLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSourceSettings SourceSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionSelectorLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	/// <summary>
	/// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction, using the settings Framerate numerator (framerateNumerator) and Framerate denominator (framerateDenominator). For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSourceFramerate
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1001
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1001)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 60000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 60000)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
	}
	
	/// <summary>
	/// DVB Sub Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSubSourceSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Settings for embedded captions Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EmbeddedSourceSettings
	{
		
		/// <summary>
		/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettingsConvert608To708 Convert608To708 { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> Source608ChannelNumber { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1)]
		public System.Nullable<System.Int32> Source608TrackNumber { get; set; }
		
		/// <summary>
		/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettingsTerminateCaptions TerminateCaptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedSourceSettingsConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedSourceSettingsTerminateCaptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END_OF_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// If your input captions are SCC, SMI, SRT, STL, TTML, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FileSourceSettings
	{
		
		/// <summary>
		/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FileSourceSettingsConvert608To708 Convert608To708 { get; set; }
		
		/// <summary>
		/// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction, using the settings Framerate numerator (framerateNumerator) and Framerate denominator (framerateDenominator). For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSourceFramerate Framerate { get; set; }
		
		/// <summary>
		/// Min length: 14
		/// Pattern: ^((s3://(.*?)\.(scc|SCC|ttml|TTML|dfxp|DFXP|stl|STL|srt|SRT|xml|XML|smi|SMI))|(https?://(.*?)\.(scc|SCC|ttml|TTML|dfxp|DFXP|stl|STL|srt|SRT|xml|XML|smi|SMI)(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=14)]
		public string SourceFile { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> TimeDelta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileSourceSettingsConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Use Source (SourceType) to identify the format of your input captions.  The service cannot auto-detect caption format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CaptionSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANCILLARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB_SUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TTML = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMI = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELETEXT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_SOURCE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMSC = 11,
	}
	
	/// <summary>
	/// Settings specific to Teletext caption sources, including Page number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TeletextSourceSettings
	{
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[1-8][0-9a-fA-F][0-9a-eA-E]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string PageNumber { get; set; }
	}
	
	/// <summary>
	/// Settings specific to caption sources that are specified by track number. Currently, this is only IMSC captions in an IMF package. If your caption source is IMSC 1.1 in a separate xml file, use FileSourceSettings instead of TrackSourceSettings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrackSourceSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> TrackNumber { get; set; }
	}
	
	/// <summary>
	/// Channel mapping (ChannelMapping) contains the group of fields that hold the remixing value for each channel. Units are in dB. Acceptable values are within the range from -60 (mute) through 6. A setting of 0 passes the input channel unchanged to the output channel (no attenuation or amplification).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OutputChannelMapping[] OutputChannels { get; set; }
	}
	
	/// <summary>
	/// Specify the details for each pair of HLS and DASH additional manifests that you want the service to generate for this CMAF output group. Each pair of manifests can reference a different subset of outputs in the group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafAdditionalManifest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ManifestNameModifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin1[] SelectedOutputs { get; set; }
	}
	
	/// <summary>
	/// When set to ENABLED, sets #EXT-X-ALLOW-CACHE:no tag, which prevents client from saving media segments for later replay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 1,
	}
	
	/// <summary>
	/// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CTR = 1,
	}
	
	/// <summary>
	/// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafInitializationVectorInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpekeKeyProviderCmaf
	{
		
		/// <summary>
		/// Pattern: ^arn:aws(-us-gov)?:acm:
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12[] DashSignaledSystemIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin36Max36Pattern09aFAF809aFAF409aFAF409aFAF409aFAF12[] HlsSignaledSystemIds { get; set; }
		
		/// <summary>
		/// Pattern: ^[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Pattern: ^https:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Use these settings to set up encryption with a static key provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticKeyProvider
	{
		
		/// <summary>
		/// Pattern: ^(identity|[A-Za-z]{2,6}(\.[A-Za-z0-9-]{1,63})+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormat { get; set; }
		
		/// <summary>
		/// Pattern: ^(\d+(\/\d+)*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormatVersions { get; set; }
		
		/// <summary>
		/// Pattern: ^[A-Za-z0-9]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StaticKeyValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafKeyProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEKE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC_KEY = 1,
	}
	
	/// <summary>
	/// Settings for CMAF encryption
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafEncryptionSettings
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 32
		/// Pattern: ^[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=32)]
		public string ConstantInitializationVector { get; set; }
		
		/// <summary>
		/// Specify the encryption scheme that you want the service to use when encrypting your CMAF segments. Choose AES-CBC subsample (SAMPLE-AES) or AES_CTR (AES-CTR).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryptionSettingsEncryptionMethod EncryptionMethod { get; set; }
		
		/// <summary>
		/// When you use DRM with CMAF outputs, choose whether the service writes the 128-bit encryption initialization vector in the HLS and DASH manifests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryptionSettingsInitializationVectorInManifest InitializationVectorInManifest { get; set; }
		
		/// <summary>
		/// If your output group type is CMAF, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is HLS, DASH, or Microsoft Smooth, use the SpekeKeyProvider settings instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProviderCmaf SpekeKeyProvider { get; set; }
		
		/// <summary>
		/// Use these settings to set up encryption with a static key provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticKeyProvider StaticKeyProvider { get; set; }
		
		/// <summary>
		/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryptionSettingsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafEncryptionSettingsEncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CTR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafEncryptionSettingsInitializationVectorInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafEncryptionSettingsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEKE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC_KEY = 1,
	}
	
	/// <summary>
	/// Settings associated with the destination. Will vary based on the type of destination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DestinationSettings
	{
		
		/// <summary>
		/// Settings associated with S3 destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationSettings S3Settings { get; set; }
	}
	
	/// <summary>
	/// When set to GZIP, compresses HLS playlist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Indicates whether the output manifest should use floating point values for segment duration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	/// <summary>
	/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafMpdProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_PROFILE = 1,
	}
	
	/// <summary>
	/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	/// <summary>
	/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// When set to ENABLED, a DASH MPD manifest will be generated for this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafWriteDASHManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// When set to ENABLED, an Apple HLS manifest will be generated for this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafWriteHLSManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// When you enable Precise segment duration in DASH manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafWriteSegmentTimelineInRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to CMAF_GROUP_SETTINGS. Each output in a CMAF Output Group may only contain a single video, audio, or caption output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CmafAdditionalManifest[] AdditionalManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// When set to ENABLED, sets #EXT-X-ALLOW-CACHE:no tag, which prevents client from saving media segments for later replay.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsClientCache ClientCache { get; set; }
		
		/// <summary>
		/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsCodecSpecification CodecSpecification { get; set; }
		
		/// <summary>
		/// Pattern: ^s3:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Settings associated with the destination. Will vary based on the type of destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Settings for CMAF encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryptionSettings Encryption { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FragmentLength { get; set; }
		
		/// <summary>
		/// When set to GZIP, compresses HLS playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsManifestCompression ManifestCompression { get; set; }
		
		/// <summary>
		/// Indicates whether the output manifest should use floating point values for segment duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsManifestDurationFormat ManifestDurationFormat { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> MinBufferTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinFinalSegmentLength { get; set; }
		
		/// <summary>
		/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsMpdProfile MpdProfile { get; set; }
		
		/// <summary>
		/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsSegmentControl SegmentControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> SegmentLength { get; set; }
		
		/// <summary>
		/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsStreamInfResolution StreamInfResolution { get; set; }
		
		/// <summary>
		/// When set to ENABLED, a DASH MPD manifest will be generated for this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsWriteDashManifest WriteDashManifest { get; set; }
		
		/// <summary>
		/// When set to ENABLED, an Apple HLS manifest will be generated for this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsWriteHlsManifest WriteHlsManifest { get; set; }
		
		/// <summary>
		/// When you enable Precise segment duration in DASH manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettingsWriteSegmentTimelineInRepresentation WriteSegmentTimelineInRepresentation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsMpdProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_PROFILE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsWriteDashManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsWriteHlsManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmafGroupSettingsWriteSegmentTimelineInRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmfcScte35Esam
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmfcScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Settings for MP4 segments in CMAF
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmfcSettings
	{
		
		/// <summary>
		/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmfcSettingsScte35Esam Scte35Esam { get; set; }
		
		/// <summary>
		/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmfcSettingsScte35Source Scte35Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmfcSettingsScte35Esam
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CmfcSettingsScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColorSpaceConversion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_709 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_HDR10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_HLG_2020 = 4,
	}
	
	/// <summary>
	/// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Hdr10Metadata
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> BluePrimaryX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> BluePrimaryY { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> GreenPrimaryX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> GreenPrimaryY { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> MaxContentLightLevel { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> MaxFrameAverageLightLevel { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> MaxLuminance { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> MinLuminance { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> RedPrimaryX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> RedPrimaryY { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> WhitePointX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 50000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 50000)]
		public System.Nullable<System.Int32> WhitePointY { get; set; }
	}
	
	/// <summary>
	/// Settings for color correction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ColorCorrector
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Brightness { get; set; }
		
		/// <summary>
		/// Specify the color space you want for this output. The service supports conversion between HDR formats, between SDR formats, from SDR to HDR, and from HDR to SDR. SDR to HDR conversion doesn't upgrade the dynamic range. The converted video has an HDR format, but visually appears the same as an unconverted output. HDR to SDR conversion uses Elemental tone mapping technology to approximate the outcome of manually regrading from HDR to SDR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ColorCorrectorColorSpaceConversion ColorSpaceConversion { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Contrast { get; set; }
		
		/// <summary>
		/// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Hdr10Metadata Hdr10Metadata { get; set; }
		
		/// <summary>
		/// Minimum: -180
		/// Maximum: 180
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-180, 180)]
		public System.Nullable<System.Int32> Hue { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Saturation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColorCorrectorColorSpaceConversion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_709 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_HDR10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_HLG_2020 = 4,
	}
	
	/// <summary>
	/// Choose Insert (INSERT) for this setting to include color metadata in this output. Choose Ignore (IGNORE) to exclude color metadata from this output. If you don't specify a value, the service sets this to Insert by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	/// <summary>
	/// If your input video has accurate color space metadata, or if you don't know about color space, leave this set to the default value Follow (FOLLOW). The service will automatically detect your input color space. If your input video has metadata indicating the wrong color space, specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate, choose Force HDR 10 (FORCE_HDR10) here and specify correct values in the input HDR 10 metadata (Hdr10Metadata) settings. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_709 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDR10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HLG_2020 = 4,
	}
	
	/// <summary>
	/// There are two sources for color metadata, the input file and the job input settings Color space (ColorSpace) and HDR master display information settings(Hdr10Metadata). The Color space usage setting determines which takes precedence. Choose Force (FORCE) to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback (FALLBACK) to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ColorSpaceUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALLBACK = 1,
	}
	
	/// <summary>
	/// Container for this output. Some containers require a container settings object. If not specified, the default object will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F4V = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISMV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M2TS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M3U8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CMFC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOV = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MXF = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 10,
	}
	
	/// <summary>
	/// Settings for F4v container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class F4vSettings
	{
		
		/// <summary>
		/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public F4vSettingsMoovPlacement MoovPlacement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum F4vSettingsMoovPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE_DOWNLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class M2tsSettings
	{
		
		/// <summary>
		/// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsAudioBufferModel AudioBufferModel { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMin32Max8182[] AudioPids { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex  buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsBufferModel BufferModel { get; set; }
		
		/// <summary>
		/// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbNitSettings DvbNitSettings { get; set; }
		
		/// <summary>
		/// Inserts DVB Service Description Table (NIT) at the specified table repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtSettings DvbSdtSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMin32Max8182[] DvbSubPids { get; set; }
		
		/// <summary>
		/// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbTdtSettings DvbTdtSettings { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> DvbTeletextPid { get; set; }
		
		/// <summary>
		/// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEbpAudioInterval EbpAudioInterval { get; set; }
		
		/// <summary>
		/// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEbpPlacement EbpPlacement { get; set; }
		
		/// <summary>
		/// Controls whether to include the ES Rate field in the PES header.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEsRateInPes EsRateInPes { get; set; }
		
		/// <summary>
		/// Keep the default value (DEFAULT) unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force (FORCE).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsForceTsVideoEbpOrder ForceTsVideoEbpOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FragmentTime { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 500)]
		public System.Nullable<System.Int32> MaxPcrInterval { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MinEbpInterval { get; set; }
		
		/// <summary>
		/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsNielsenId3 NielsenId3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NullPacketBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		/// <summary>
		/// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsPcrControl PcrControl { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PcrPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PmtPid { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PrivateMetadataPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		/// <summary>
		/// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsRateMode RateMode { get; set; }
		
		/// <summary>
		/// Settings for SCTE-35 signals from ESAM. Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsScte35Esam Scte35Esam { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> Scte35Pid { get; set; }
		
		/// <summary>
		/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE). Also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml). Also enable ESAM SCTE-35 (include the property scte35Esam).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsScte35Source Scte35Source { get; set; }
		
		/// <summary>
		/// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsSegmentationMarkers SegmentationMarkers { get; set; }
		
		/// <summary>
		/// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsSegmentationStyle SegmentationStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SegmentationTime { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> TimedMetadataPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> VideoPid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsAudioBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEbpAudioInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_FIXED_INTERVALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_INTERVAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEbpPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_AUDIO_PIDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEsRateInPes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsForceTsVideoEbpOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsNielsenId3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsRateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsSegmentationMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_SEGSTART = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_ADAPT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSI_SEGSTART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP_LEGACY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsSegmentationStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTAIN_CADENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_CADENCE = 1,
	}
	
	/// <summary>
	/// Settings for TS segments in HLS
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class M3u8Settings
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMin32Max8182[] AudioPids { get; set; }
		
		/// <summary>
		/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsNielsenId3 NielsenId3 { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		/// <summary>
		/// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsPcrControl PcrControl { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PcrPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PmtPid { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> PrivateMetadataPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> Scte35Pid { get; set; }
		
		/// <summary>
		/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsScte35Source Scte35Source { get; set; }
		
		/// <summary>
		/// Applies only to HLS outputs. Use this setting to specify whether the service inserts the ID3 timed metadata from the input in this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsTimedMetadata TimedMetadata { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> TimedMetadataPid { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> VideoPid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsNielsenId3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsTimedMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Settings for MOV Container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MovSettings
	{
		
		/// <summary>
		/// When enabled, include 'clap' atom if appropriate for the video output settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettingsClapAtom ClapAtom { get; set; }
		
		/// <summary>
		/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettingsCslgAtom CslgAtom { get; set; }
		
		/// <summary>
		/// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettingsMpeg2FourCCControl Mpeg2FourCCControl { get; set; }
		
		/// <summary>
		/// If set to OMNEON, inserts Omneon-compatible padding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettingsPaddingControl PaddingControl { get; set; }
		
		/// <summary>
		/// Always keep the default value (SELF_CONTAINED) for this setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MovSettingsReference Reference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovSettingsClapAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovSettingsCslgAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovSettingsMpeg2FourCCControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XDCAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovSettingsPaddingControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMNEON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovSettingsReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_CONTAINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	/// <summary>
	/// Settings for MP4 container. You can create audio-only AAC outputs with this container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mp4Settings
	{
		
		/// <summary>
		/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp4SettingsCslgAtom CslgAtom { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Int32> CttsVersion { get; set; }
		
		/// <summary>
		/// Inserts a free-space box immediately after the moov box.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp4SettingsFreeSpaceBox FreeSpaceBox { get; set; }
		
		/// <summary>
		/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp4SettingsMoovPlacement MoovPlacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Mp4MajorBrand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4SettingsCslgAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4SettingsFreeSpaceBox
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4SettingsMoovPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE_DOWNLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Settings for MP4 segments in DASH
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MpdSettings
	{
		
		/// <summary>
		/// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions.  You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MpdSettingsCaptionContainerType CaptionContainerType { get; set; }
		
		/// <summary>
		/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MpdSettingsScte35Esam Scte35Esam { get; set; }
		
		/// <summary>
		/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MpdSettingsScte35Source Scte35Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdSettingsCaptionContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAGMENTED_MP4 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdSettingsScte35Esam
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdSettingsScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// MXF settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MxfSettings
	{
		
		/// <summary>
		/// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy (NO_COPY) to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream (COPY_FROM_VIDEO) to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MxfSettingsAfdSignaling AfdSignaling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MxfSettingsAfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_COPY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_FROM_VIDEO = 1,
	}
	
	/// <summary>
	/// JobSettings contains all the transcode settings for a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobSettings
	{
		
		/// <summary>
		/// Minimum: -1000
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1000, 1000)]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		/// <summary>
		/// Settings for Avail Blanking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		/// <summary>
		/// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EsamSettings Esam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Input[] Inputs { get; set; }
		
		/// <summary>
		/// Overlay motion graphics on top of your video at the time that you specify.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInserter MotionImageInserter { get; set; }
		
		/// <summary>
		/// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		/// <summary>
		/// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		/// <summary>
		/// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in your job. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimedMetadataInsertion TimedMetadataInsertion { get; set; }
	}
	
	/// <summary>
	/// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SimulateReservedQueue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobRequest
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettings AccelerationSettings { get; set; }
		
		/// <summary>
		/// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestBillingTagsSource BillingTagsSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTemplate { get; set; }
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// JobSettings contains all the transcode settings for a job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSettings Settings { get; set; }
		
		/// <summary>
		/// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestSimulateReservedQueue SimulateReservedQueue { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string UserMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestBillingTagsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TEMPLATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestSimulateReservedQueue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	/// <summary>
	/// Each job converts an input file into an output file or files. For more information, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettings AccelerationSettings { get; set; }
		
		/// <summary>
		/// Describes whether the current job is running with accelerated transcoding. For jobs that have Acceleration (AccelerationMode) set to DISABLED, AccelerationStatus is always NOT_APPLICABLE. For jobs that have Acceleration (AccelerationMode) set to ENABLED or PREFERRED, AccelerationStatus is one of the other states. AccelerationStatus is IN_PROGRESS initially, while the service determines whether the input files and job settings are compatible with accelerated transcoding. If they are, AcclerationStatus is ACCELERATED. If your input files and job settings aren't compatible with accelerated transcoding, the service either fails your job or runs it without accelerated transcoding, depending on how you set Acceleration (AccelerationMode). When the service runs your job without accelerated transcoding, AccelerationStatus is NOT_ACCELERATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobAccelerationStatus AccelerationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobBillingTagsSource BillingTagsSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A job's phase can be PROBING, TRANSCODING OR UPLOADING
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobCurrentPhase CurrentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobPercentComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobTemplate { get; set; }
		
		/// <summary>
		/// Provides messages from the service about jobs that you have already successfully submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobMessages Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputGroupDetail[] OutputGroupDetails { get; set; }
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueueTransition[] QueueTransitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RetryCount { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// JobSettings contains all the transcode settings for a job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobSettings Settings { get; set; }
		
		/// <summary>
		/// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobSimulateReservedQueue SimulateReservedQueue { get; set; }
		
		/// <summary>
		/// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		/// <summary>
		/// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Timing Timing { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string UserMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobAccelerationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_APPLICABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCELERATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_ACCELERATED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobBillingTagsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TEMPLATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobCurrentPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSCODING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOADING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobSimulateReservedQueue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	/// <summary>
	/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobTemplateSettings
	{
		
		/// <summary>
		/// Minimum: -1000
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1000, 1000)]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		/// <summary>
		/// Settings for Avail Blanking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		/// <summary>
		/// Settings for Event Signaling And Messaging (ESAM). If you don't do ad insertion, you can ignore these settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EsamSettings Esam { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputTemplate[] Inputs { get; set; }
		
		/// <summary>
		/// Overlay motion graphics on top of your video at the time that you specify.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MotionImageInserter MotionImageInserter { get; set; }
		
		/// <summary>
		/// Settings for your Nielsen configuration. If you don't do Nielsen measurement and analytics, ignore these settings. When you enable Nielsen configuration (nielsenConfiguration), MediaConvert enables PCM to ID3 tagging for all outputs in the job. To enable Nielsen configuration programmatically, include an instance of nielsenConfiguration in your JSON job specification. Even if you don't include any children of nielsenConfiguration, you still enable the setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		/// <summary>
		/// These settings control how the service handles timecodes throughout the job. These settings don't affect input clipping.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		/// <summary>
		/// Enable Timed metadata insertion (TimedMetadataInsertion) to include ID3 tags in your job. To include timed metadata, you must enable it here, enable it in each output container, and specify tags and timecodes in ID3 insertion (Id3Insertion) objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimedMetadataInsertion TimedMetadataInsertion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobTemplateRequest
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettings AccelerationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobTemplateSettings Settings { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobTemplateRequestStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobTemplateRequestStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	/// <summary>
	/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobTemplate
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettings AccelerationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobTemplateSettings Settings { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobTemplateStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobTemplateType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobTemplateStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobTemplateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// Settings for preset
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PresetSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescriptionPreset[] CaptionDescriptions { get; set; }
		
		/// <summary>
		/// Container specific settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// Settings for video outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription VideoDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings for preset
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PresetSettings Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Preset
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings for preset
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PresetSettings Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PresetType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PresetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PricingPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 1,
	}
	
	/// <summary>
	/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPlanSettings
	{
		
		/// <summary>
		/// The length of the term of your reserved queue pricing plan commitment.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanSettingsCommitment Commitment { get; set; }
		
		/// <summary>
		/// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanSettingsRenewalType RenewalType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ReservedSlots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanSettingsCommitment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanSettingsRenewalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_RENEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE = 1,
	}
	
	/// <summary>
	/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateQueueRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateQueueRequestPricingPlan PricingPlan { get; set; }
		
		/// <summary>
		/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanSettings ReservationPlanSettings { get; set; }
		
		/// <summary>
		/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateQueueRequestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateQueueRequestPricingPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateQueueRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	/// <summary>
	/// You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Queue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueuePricingPlan PricingPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgressingJobsCount { get; set; }
		
		/// <summary>
		/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlan ReservationPlan { get; set; }
		
		/// <summary>
		/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueueStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SubmittedJobsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueueType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueuePricingPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// Specify the details for each additional DASH manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashAdditionalManifest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ManifestNameModifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin1[] SelectedOutputs { get; set; }
	}
	
	/// <summary>
	/// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI (UNENCRYPTED_SEI) only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1 (CENC_V1). If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoPlaybackDeviceCompatibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENC_V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNENCRYPTED_SEI = 1,
	}
	
	/// <summary>
	/// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpekeKeyProvider
	{
		
		/// <summary>
		/// Pattern: ^arn:aws(-us-gov)?:acm:
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12[] SystemIds { get; set; }
		
		/// <summary>
		/// Pattern: ^https:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Specifies DRM settings for DASH outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashIsoEncryptionSettings
	{
		
		/// <summary>
		/// This setting can improve the compatibility of your output with video players on obsolete devices. It applies only to DASH H.264 outputs with DRM encryption. Choose Unencrypted SEI (UNENCRYPTED_SEI) only to correct problems with playback on older devices. Otherwise, keep the default setting CENC v1 (CENC_V1). If you choose Unencrypted SEI, for that output, the service will exclude the access unit delimiter and will leave the SEI NAL units unencrypted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoEncryptionSettingsPlaybackDeviceCompatibility PlaybackDeviceCompatibility { get; set; }
		
		/// <summary>
		/// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoEncryptionSettingsPlaybackDeviceCompatibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENC_V1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNENCRYPTED_SEI = 1,
	}
	
	/// <summary>
	/// Supports HbbTV specification as indicated
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoHbbtvCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HBBTV_1_5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoMpdProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_PROFILE = 1,
	}
	
	/// <summary>
	/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	/// <summary>
	/// When you enable Precise segment duration in manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoWriteSegmentTimelineInRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to DASH_ISO_GROUP_SETTINGS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashIsoGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DashAdditionalManifest[] AdditionalManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// Pattern: ^s3:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Settings associated with the destination. Will vary based on the type of destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Specifies DRM settings for DASH outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoEncryptionSettings Encryption { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FragmentLength { get; set; }
		
		/// <summary>
		/// Supports HbbTV specification as indicated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoGroupSettingsHbbtvCompliance HbbtvCompliance { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> MinBufferTime { get; set; }
		
		/// <summary>
		/// Specify whether your DASH profile is on-demand or main. When you choose Main profile (MAIN_PROFILE), the service signals  urn:mpeg:dash:profile:isoff-main:2011 in your .mpd DASH manifest. When you choose On-demand (ON_DEMAND_PROFILE), the service signals urn:mpeg:dash:profile:isoff-on-demand:2011 in your .mpd. When you choose On-demand, you must also set the output group setting Segment control (SegmentControl) to Single file (SINGLE_FILE).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoGroupSettingsMpdProfile MpdProfile { get; set; }
		
		/// <summary>
		/// When set to SINGLE_FILE, a single output file is generated, which is internally segmented using the Fragment Length and Segment Length. When set to SEGMENTED_FILES, separate segment files will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoGroupSettingsSegmentControl SegmentControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> SegmentLength { get; set; }
		
		/// <summary>
		/// When you enable Precise segment duration in manifests (writeSegmentTimelineInRepresentation), your DASH manifest shows precise segment durations. The segment duration information appears inside the SegmentTimeline element, inside SegmentTemplate at the Representation level. When this feature isn't enabled, the segment durations in your DASH manifest are approximate. The segment duration information appears in the duration attribute of the SegmentTemplate element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoGroupSettingsWriteSegmentTimelineInRepresentation WriteSegmentTimelineInRepresentation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoGroupSettingsHbbtvCompliance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HBBTV_1_5 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoGroupSettingsMpdProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_PROFILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND_PROFILE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoGroupSettingsSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashIsoGroupSettingsWriteSegmentTimelineInRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Specify the encryption mode that you used to encrypt your input files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DecryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CTR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CBC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_GCM = 2,
	}
	
	/// <summary>
	/// Only applies when you set Deinterlacer (DeinterlaceMode) to Deinterlace (DEINTERLACE) or Adaptive (ADAPTIVE). Motion adaptive interpolate (INTERPOLATE) produces sharper pictures, while blend (BLEND) produces smoother motion. Use (INTERPOLATE_TICKER) OR (BLEND_TICKER) if your source file includes a ticker, such as a scrolling headline at the bottom of the frame.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlaceAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE_TICKER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLEND_TICKER = 3,
	}
	
	/// <summary>
	/// - When set to NORMAL (default), the deinterlacer does not convert frames that are tagged  in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is  a good chance that the metadata has tagged frames as progressive when they are not  progressive. Do not turn on otherwise; processing frames that are already progressive  into progressive will probably result in lower quality video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlacerControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_ALL_FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlacerMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEINTERLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVERSE_TELECINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 2,
	}
	
	/// <summary>
	/// Settings for deinterlacer
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Deinterlacer
	{
		
		/// <summary>
		/// Only applies when you set Deinterlacer (DeinterlaceMode) to Deinterlace (DEINTERLACE) or Adaptive (ADAPTIVE). Motion adaptive interpolate (INTERPOLATE) produces sharper pictures, while blend (BLEND) produces smoother motion. Use (INTERPOLATE_TICKER) OR (BLEND_TICKER) if your source file includes a ticker, such as a scrolling headline at the bottom of the frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeinterlacerAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// - When set to NORMAL (default), the deinterlacer does not convert frames that are tagged  in metadata as progressive. It will only convert those that are tagged as some other type. - When set to FORCE_ALL_FRAMES, the deinterlacer converts every frame to progressive - even those that are already tagged as progressive. Turn Force mode on only if there is  a good chance that the metadata has tagged frames as progressive when they are not  progressive. Do not turn on otherwise; processing frames that are already progressive  into progressive will probably result in lower quality video.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeinterlacerControl Control { get; set; }
		
		/// <summary>
		/// Use Deinterlacer (DeinterlaceMode) to choose how the service will do deinterlacing. Default is Deinterlace. - Deinterlace converts interlaced to progressive. - Inverse telecine converts Hard Telecine 29.97i to progressive 23.976p. - Adaptive auto-detects and converts to progressive.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeinterlacerMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlacerAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE_TICKER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLEND_TICKER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlacerControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_ALL_FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeinterlacerMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEINTERLACE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVERSE_TELECINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 2,
	}
	
	/// <summary>
	/// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEndpointsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_ONLY = 1,
	}
	
	/// <summary>
	/// DescribeEndpointsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndpointsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeEndpointsRequestMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEndpointsRequestMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_ONLY = 1,
	}
	
	/// <summary>
	/// Settings associated with S3 destination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationSettings
	{
		
		/// <summary>
		/// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationAccessControl AccessControl { get; set; }
		
		/// <summary>
		/// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3EncryptionSettings Encryption { get; set; }
	}
	
	/// <summary>
	/// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DolbyVisionLevel6Metadata
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> MaxCll { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> MaxFall { get; set; }
	}
	
	/// <summary>
	/// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DolbyVisionLevel6Mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECALCULATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFY = 2,
	}
	
	/// <summary>
	/// In the current MediaConvert implementation, the Dolby Vision profile is always 5 (PROFILE_5). Therefore, all of your inputs must contain Dolby Vision frame interleaved data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DolbyVisionProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE_5 = 0,
	}
	
	/// <summary>
	/// Settings for Dolby Vision
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DolbyVision
	{
		
		/// <summary>
		/// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DolbyVisionLevel6Metadata L6Metadata { get; set; }
		
		/// <summary>
		/// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DolbyVisionL6Mode L6Mode { get; set; }
		
		/// <summary>
		/// In the current MediaConvert implementation, the Dolby Vision profile is always 5 (PROFILE_5). Therefore, all of your inputs must contain Dolby Vision frame interleaved data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DolbyVisionProfile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DolbyVisionL6Mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECALCULATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DolbyVisionProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE_5 = 0,
	}
	
	/// <summary>
	/// Applies only to 29.97 fps outputs. When this feature is enabled, the service will use drop-frame timecode on outputs. If it is not possible to use drop-frame timecode, the system will fall back to non-drop-frame. This setting is enabled by default when Timecode insertion (TimecodeInsertion) is enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DropFrameTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Inserts DVB Network Information Table (NIT) at the specified table repetition interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbNitSettings
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> NetworkId { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Minimum: 25
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(25, 10000)]
		public System.Nullable<System.Int32> NitInterval { get; set; }
	}
	
	/// <summary>
	/// Selects method of inserting SDT information into output stream.  "Follow input SDT" copies SDT information from input stream to  output stream. "Follow input SDT if present" copies SDT information from  input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT  Manually" means user will enter the SDT information. "No SDT" means output  stream will not contain SDT information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputSdt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW_IF_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_NONE = 3,
	}
	
	/// <summary>
	/// Inserts DVB Service Description Table (NIT) at the specified table repetition interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSdtSettings
	{
		
		/// <summary>
		/// Selects method of inserting SDT information into output stream.  "Follow input SDT" copies SDT information from input stream to  output stream. "Follow input SDT if present" copies SDT information from  input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT  Manually" means user will enter the SDT information. "No SDT" means output  stream will not contain SDT information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtSettingsOutputSdt OutputSdt { get; set; }
		
		/// <summary>
		/// Minimum: 25
		/// Maximum: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(25, 2000)]
		public System.Nullable<System.Int32> SdtInterval { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ServiceProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSdtSettingsOutputSdt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW_IF_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_NONE = 3,
	}
	
	/// <summary>
	/// If no explicit x_position or y_position is provided, setting alignment to centered will place the captions at the bottom center of the output. Similarly, setting a left alignment will align captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
	}
	
	/// <summary>
	/// Specifies the color of the rectangle behind the captions.
	///All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Specifies the color of the burned-in captions. This option is not valid for source captions that are STL, 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	/// <summary>
	/// Specifies font outline color. This option is not valid for source captions that are either 608/embedded or teletext. These source settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 5,
	}
	
	/// <summary>
	/// Specifies the color of the shadow cast by the captions.
	///All burn-in and DVB-Sub font settings must match.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Specify whether your DVB subtitles are standard or for hearing impaired. Choose hearing impaired if your subtitles include audio descriptions and dialogue. Choose standard if your subtitles include only dialogue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitlingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	/// <summary>
	/// Only applies to jobs with input captions in Teletext or STL formats. Specify whether the spacing between letters in your captions is set by the captions grid or varies depending on letter width. Choose fixed grid to conform to the spacing specified in the captions file more accurately. Choose proportional to make the text easier to read if the captions are closed caption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubtitleTeletextSpacing
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_GRID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPORTIONAL = 1,
	}
	
	/// <summary>
	/// Inserts DVB Time and Date Table (TDT) at the specified table repetition interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbTdtSettings
	{
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 30000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 30000)]
		public System.Nullable<System.Int32> TdtInterval { get; set; }
	}
	
	/// <summary>
	/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
	}
	
	/// <summary>
	/// The coding mode for Dolby Digital Plus JOC (Atmos) is always 9.1.6 (CODING_MODE_9_1_6).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_9_1_6 = 0,
	}
	
	/// <summary>
	/// Enable Dolby Dialogue Intelligence to adjust loudness based on dialogue analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosDialogueIntelligence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Specify the absolute peak level for a signal with dynamic range compression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosDynamicRangeCompressionLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Specify how the service limits the audio dynamic range when compressing the audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosDynamicRangeCompressionRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Choose how the service meters the loudness of your audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosMeteringMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEQ_A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_BS_1770_4 = 4,
	}
	
	/// <summary>
	/// Choose how the service does stereo downmixing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosStereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEREO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SURROUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 3,
	}
	
	/// <summary>
	/// Specify whether your input audio has an additional center rear surround channel matrix encoded into your left and right surround channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AtmosSurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// If set to ATTENUATE_3_DB, applies a 3 dB attenuation to the surround channels. Only used for 3/2 coding mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AttenuationControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTENUATE_3_DB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Specify the bitstream mode for the E-AC-3 stream that the encoder emits. For more information about the EAC3 bitstream mode, see ATSC A/52-2012 (Annex E).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 4,
	}
	
	/// <summary>
	/// Dolby Digital Plus coding mode. Determines number of channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2 = 2,
	}
	
	/// <summary>
	/// Activates a DC highpass filter for all input channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DcFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Specify the absolute peak level for a signal with dynamic range compression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DynamicRangeCompressionLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Specify how the service limits the audio dynamic range when compressing the audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DynamicRangeCompressionRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// When encoding 3/2 audio, controls whether the LFE channel is enabled
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3LfeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LFE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LFE = 1,
	}
	
	/// <summary>
	/// Applies a 120Hz lowpass filter to the LFE channel prior to encoding. Only valid with 3_2_LFE coding mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// When set to FOLLOW_INPUT, encoder metadata will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was not supplied from one of these streams, then the static metadata settings will be used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// When set to WHEN_POSSIBLE, input DD+ audio will be passed through if it is present on the input. this detection is dynamic over the life of the transcode. Inputs that alternate between DD+ and non-DD+ content will have a consistent DD+ output as the system alternates between passthrough and encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3PassthroughControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHEN_POSSIBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Controls the amount of phase-shift applied to the surround channels. Only used for 3/2 coding mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3PhaseControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIFT_90_DEGREES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SHIFT = 1,
	}
	
	/// <summary>
	/// Choose how the service does stereo downmixing. This setting only applies if you keep the default value of 3/2 - L, R, C, Ls, Rs (CODING_MODE_3_2) for the setting Coding mode (Eac3CodingMode). If you choose a different value for Coding mode, the service ignores Stereo downmix (Eac3StereoDownmix).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3StereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LO_RO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT_RT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 3,
	}
	
	/// <summary>
	/// When encoding 3/2 audio, sets whether an extra center back surround channel is matrix encoded into the left and right surround channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// When encoding 2/0 audio, sets whether Dolby Surround is matrix encoded into the two channels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SurroundMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// By default, the service terminates any unterminated captions at the end of each input. If you want the caption to continue onto your next input, disable this setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedTerminateCaptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END_OF_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Describes an account-specific API endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// ESAM ManifestConfirmConditionNotification defined by OC-SP-ESAM-API-I03-131025.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EsamManifestConfirmConditionNotification
	{
		
		/// <summary>
		/// Pattern: ^\s*<(.|\n)*ManifestConfirmConditionNotification(.|\n)*>\s*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MccXml { get; set; }
	}
	
	/// <summary>
	/// ESAM SignalProcessingNotification data defined by OC-SP-ESAM-API-I03-131025.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EsamSignalProcessingNotification
	{
		
		/// <summary>
		/// Pattern: ^\s*<(.|\n)*SignalProcessingNotification(.|\n)*>\s*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SccXml { get; set; }
	}
	
	/// <summary>
	/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum F4vMoovPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE_DOWNLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to FILE_GROUP_SETTINGS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FileGroupSettings
	{
		
		/// <summary>
		/// Pattern: ^s3:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Settings associated with the destination. Will vary based on the type of destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationSettings DestinationSettings { get; set; }
	}
	
	/// <summary>
	/// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert (UPCONVERT), MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileSourceConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value FRAME_CAPTURE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FrameCaptureSettings
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000000)]
		public System.Nullable<System.Int32> MaxCaptures { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> Quality { get; set; }
	}
	
	/// <summary>
	/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	/// <summary>
	/// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto (AUTO).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264CodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_2 = 16,
	}
	
	/// <summary>
	/// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264CodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_10BIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422_10BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 5,
	}
	
	/// <summary>
	/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264DynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	/// <summary>
	/// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264EntropyEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CABAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAVLC = 1,
	}
	
	/// <summary>
	/// Choosing FORCE_FIELD disables PAFF encoding for interlaced outputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FieldEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_FIELD = 1,
	}
	
	/// <summary>
	/// Adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FlickerAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// If enable, use reference B frames for GOP structures that have B frames > 1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264GopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Indicates if the GOP Size in H264 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type, as follows.
	///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
	///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264InterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264QualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 2,
	}
	
	/// <summary>
	/// Settings for quality-defined variable bitrate encoding with the H.264 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H264QvbrSettings
	{
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> MaxAverageBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> QvbrQualityLevelFineTune { get; set; }
	}
	
	/// <summary>
	/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	/// <summary>
	/// Places a PPS header on each encoded picture, even if repeated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264RepeatPps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSITION_DETECTION = 2,
	}
	
	/// <summary>
	/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on spatial variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Produces a bitstream compliant with SMPTE RP-2027.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264Syntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RP2027 = 1,
	}
	
	/// <summary>
	/// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264Telecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on temporal variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264TemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264UnregisteredSeiTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value H_264.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H264Settings
	{
		
		/// <summary>
		/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Specify an H.264 level that is consistent with your output video settings. If you aren't sure what level to specify, choose Auto (AUTO).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsCodecLevel CodecLevel { get; set; }
		
		/// <summary>
		/// H.264 Profile. High 4:2:2 and 10-bit profiles are only available with the AVC-I License.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsCodecProfile CodecProfile { get; set; }
		
		/// <summary>
		/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsDynamicSubGop DynamicSubGop { get; set; }
		
		/// <summary>
		/// Entropy encoding mode. Use CABAC (must be in Main or High profile) or CAVLC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsEntropyEncoding EntropyEncoding { get; set; }
		
		/// <summary>
		/// Choosing FORCE_FIELD disables PAFF encoding for interlaced outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFieldEncoding FieldEncoding { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFlickerAdaptiveQuantization FlickerAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// If enable, use reference B frames for GOP structures that have B frames > 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsGopBReference GopBReference { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Indicates if the GOP Size in H264 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsGopSizeUnits GopSizeUnits { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> HrdBufferInitialFillPercentage { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1152000000)]
		public System.Nullable<System.Int32> HrdBufferSize { get; set; }
		
		/// <summary>
		/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type, as follows.
		///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
		///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsInterlaceMode InterlaceMode { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> NumberBFramesBetweenReferenceFrames { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> NumberReferenceFrames { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsQualityTuningLevel QualityTuningLevel { get; set; }
		
		/// <summary>
		/// Settings for quality-defined variable bitrate encoding with the H.264 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264QvbrSettings QvbrSettings { get; set; }
		
		/// <summary>
		/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Places a PPS header on each encoded picture, even if repeated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsRepeatPps RepeatPps { get; set; }
		
		/// <summary>
		/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSceneChangeDetect SceneChangeDetect { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		/// <summary>
		/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSlowPal SlowPal { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 128)]
		public System.Nullable<System.Int32> Softness { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on spatial variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSpatialAdaptiveQuantization SpatialAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Produces a bitstream compliant with SMPTE RP-2027.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSyntax Syntax { get; set; }
		
		/// <summary>
		/// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsTelecine Telecine { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on temporal variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsTemporalAdaptiveQuantization TemporalAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsUnregisteredSeiTimecode UnregisteredSeiTimecode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsCodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1_3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_2 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_2 = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_10BIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422_10BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsDynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsEntropyEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CABAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAVLC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFieldEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_FIELD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFlickerAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsGopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsGopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsInterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsQualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsRepeatPps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSITION_DETECTION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSyntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RP2027 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsTelecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsTemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsUnregisteredSeiTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	/// <summary>
	/// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265AlternateTransferFunctionSei
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H.265 Level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265CodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6_1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6_2 = 13,
	}
	
	/// <summary>
	/// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265CodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN10_MAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN10_HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_8BIT_MAIN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_8BIT_HIGH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_10BIT_MAIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_10BIT_HIGH = 7,
	}
	
	/// <summary>
	/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265DynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	/// <summary>
	/// Adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265FlickerAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// When set to INTERPOLATE, produces smoother motion during frame rate conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// If enable, use reference B frames for GOP structures that have B frames > 1.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265GopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Indicates if the GOP Size in H265 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Choose the scan line type for the output. Choose Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Choose Top Field First (TOP_FIELD) or Bottom Field First (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Choose Follow, Default Top (FOLLOW_TOP_FIELD) or Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) to create an interlaced output with the same field polarity as the source. If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first". If the source is progressive, your output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose. If you don't choose a value, the service will default to Progressive (PROGRESSIVE).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265InterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265QualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 2,
	}
	
	/// <summary>
	/// Settings for quality-defined variable bitrate encoding with the H.265 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H265QvbrSettings
	{
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1466400000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1466400000)]
		public System.Nullable<System.Int32> MaxAverageBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> QvbrQualityLevelFineTune { get; set; }
	}
	
	/// <summary>
	/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	/// <summary>
	/// Specify Sample Adaptive Offset (SAO) filter strength.  Adaptive mode dynamically selects best strength based on content
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SampleAdaptiveOffsetFilterMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 2,
	}
	
	/// <summary>
	/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSITION_DETECTION = 2,
	}
	
	/// <summary>
	/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on spatial variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265Telecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on temporal variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265TemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265TemporalIds
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265Tiles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265UnregisteredSeiTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265WriteMp4PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 1,
	}
	
	/// <summary>
	/// Settings for H265 codec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H265Settings
	{
		
		/// <summary>
		/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Enables Alternate Transfer Function SEI message for outputs using Hybrid Log Gamma (HLG) Electro-Optical Transfer Function (EOTF).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsAlternateTransferFunctionSei AlternateTransferFunctionSei { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1466400000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1466400000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// H.265 Level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsCodecLevel CodecLevel { get; set; }
		
		/// <summary>
		/// Represents the Profile and Tier, per the HEVC (H.265) specification. Selections are grouped as [Profile] / [Tier], so "Main/High" represents Main Profile with High Tier. 4:2:2 profiles are only available with the HEVC 4:2:2 License.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsCodecProfile CodecProfile { get; set; }
		
		/// <summary>
		/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsDynamicSubGop DynamicSubGop { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame to reduce flicker or 'pop' on I-frames.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsFlickerAdaptiveQuantization FlickerAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// When set to INTERPOLATE, produces smoother motion during frame rate conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// If enable, use reference B frames for GOP structures that have B frames > 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsGopBReference GopBReference { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Indicates if the GOP Size in H265 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsGopSizeUnits GopSizeUnits { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> HrdBufferInitialFillPercentage { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 1466400000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1466400000)]
		public System.Nullable<System.Int32> HrdBufferSize { get; set; }
		
		/// <summary>
		/// Choose the scan line type for the output. Choose Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Choose Top Field First (TOP_FIELD) or Bottom Field First (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Choose Follow, Default Top (FOLLOW_TOP_FIELD) or Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) to create an interlaced output with the same field polarity as the source. If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first". If the source is progressive, your output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose. If you don't choose a value, the service will default to Progressive (PROGRESSIVE).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsInterlaceMode InterlaceMode { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1466400000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1466400000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> NumberBFramesBetweenReferenceFrames { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> NumberReferenceFrames { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsQualityTuningLevel QualityTuningLevel { get; set; }
		
		/// <summary>
		/// Settings for quality-defined variable bitrate encoding with the H.265 codec. Required when you set Rate control mode to QVBR. Not valid when you set Rate control mode to a value other than QVBR, or when you don't define Rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265QvbrSettings QvbrSettings { get; set; }
		
		/// <summary>
		/// Use this setting to specify whether this output has a variable bitrate (VBR), constant bitrate (CBR) or quality-defined variable bitrate (QVBR).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Specify Sample Adaptive Offset (SAO) filter strength.  Adaptive mode dynamically selects best strength based on content
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsSampleAdaptiveOffsetFilterMode SampleAdaptiveOffsetFilterMode { get; set; }
		
		/// <summary>
		/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default. If this output uses QVBR, choose Transition detection (TRANSITION_DETECTION) for further video quality improvement. For more information about QVBR, see https://docs.aws.amazon.com/console/mediaconvert/cbr-vbr-qvbr.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsSceneChangeDetect SceneChangeDetect { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		/// <summary>
		/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsSlowPal SlowPal { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on spatial variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsSpatialAdaptiveQuantization SpatialAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// This field applies only if the Streams > Advanced > Framerate (framerate) field  is set to 29.970. This field works with the Streams > Advanced > Preprocessors > Deinterlacer  field (deinterlace_mode) and the Streams > Advanced > Interlaced Mode field (interlace_mode)  to identify the scan type for the output: Progressive, Interlaced, Hard Telecine or Soft Telecine. - Hard: produces 29.97i output from 23.976 input. - Soft: produces 23.976; the player converts this output to 29.97i.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTelecine Telecine { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on temporal variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTemporalAdaptiveQuantization TemporalAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Enables temporal layer identifiers in the encoded bitstream. Up to 3 layers are supported depending on GOP structure: I- and P-frames form one layer, reference B-frames can form a second layer and non-reference b-frames can form a third layer. Decoders can optionally decode only the lower temporal layers to generate a lower frame rate output. For example, given a bitstream with temporal IDs and with b-frames = 1 (i.e. IbPbPb display order), a decoder could decode all the frames for full frame rate output or only the I and P frames (lowest temporal layer) for a half frame rate output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTemporalIds TemporalIds { get; set; }
		
		/// <summary>
		/// Enable use of tiles, allowing horizontal as well as vertical subdivision of the encoded pictures.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTiles Tiles { get; set; }
		
		/// <summary>
		/// Inserts timecode for each frame as 4 bytes of an unregistered SEI message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsUnregisteredSeiTimecode UnregisteredSeiTimecode { get; set; }
		
		/// <summary>
		/// If the location of parameter set NAL units doesn't matter in your workflow, ignore this setting. Use this setting only with CMAF or DASH outputs, or with standalone file outputs in an MPEG-4 container (MP4 outputs). Choose HVC1 to mark your output as HVC1. This makes your output compliant with the following specification: ISO IECJTC1 SC29 N13798 Text ISO/IEC FDIS 14496-15 3rd Edition. For these outputs, the service stores parameter set NAL units in the sample headers but not in the samples directly. For MP4 outputs, when you choose HVC1, your output video might not work properly with some downstream systems and video players. The service defaults to marking your output as HEV1. For these outputs, the service writes parameter set NAL units directly into the samples.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsWriteMp4PackagingType WriteMp4PackagingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsAlternateTransferFunctionSei
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsCodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_2_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_3_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_4_1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_5_2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6_1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_6_2 = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN10_MAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN10_HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_8BIT_MAIN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_8BIT_HIGH = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_10BIT_MAIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_422_10BIT_HIGH = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsDynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsFlickerAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsGopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsGopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsInterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsQualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsSampleAdaptiveOffsetFilterMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsSceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSITION_DETECTION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsSlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsSpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTelecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTemporalIds
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTiles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsUnregisteredSeiTimecode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsWriteMp4PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELEMENTAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELEMENTAL_SCTE35 = 1,
	}
	
	/// <summary>
	/// Specify the details for each additional HLS manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsAdditionalManifest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ManifestNameModifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin1[] SelectedOutputs { get; set; }
	}
	
	/// <summary>
	/// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic (AUTOMATIC) to create a raw audio-only file with no container. Regardless of the value that you specify here, if this output has video, the service will place outputs into an MPEG2-TS container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAudioOnlyContainer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M2TS = 1,
	}
	
	/// <summary>
	/// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAudioTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_NOT_AUTO_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_ONLY_VARIANT_STREAM = 3,
	}
	
	/// <summary>
	/// Caption Language Mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsCaptionLanguageMapping
	{
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> CaptionChannel { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Za-z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string CustomLanguageCode { get; set; }
		
		/// <summary>
		/// Specify the language, using the ISO 639-2 three-letter code listed at https://www.loc.gov/standards/iso639-2/php/code_list.php.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsCaptionLanguageMappingLanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsCaptionLanguageMappingLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENG = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHO = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITA = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URD = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOR = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAN = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABK = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAR = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKA = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMH = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASM = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVA = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AYM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZE = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAK = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUS = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEL = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIH = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIS = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUL = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYA = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAT = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KHM = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHA = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHE = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NYA = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHU = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHV = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COR = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRE = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HRV = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CES = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAN = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIV = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NLD = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DZO = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENM = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPO = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EST = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EWE = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAO = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIJ = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIN = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRM = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUL = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLA = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLG = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUG = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAT = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELL = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRN = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUJ = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HAU = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEB = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HER = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HUN = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISL = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDO = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IBO = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IND = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INA = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILE = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IKU = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPK = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLE = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAV = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAL = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAN = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAU = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAS = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KAZ = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIK = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIN = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIR = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KOM = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KON = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUA = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KUR = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAO = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAT = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAV = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIM = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIN = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LUB = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LTZ = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MKD = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLG = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MSA = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAL = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MLT = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLV = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MRI = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAR = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAH = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MON = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAU = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAV = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDE = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NBL = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NDO = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEP = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SME = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOR = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOB = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NNO = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OCI = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OJI = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORI = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORM = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OSS = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLI = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAS = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POL = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUS = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUE = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QAA = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RON = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROH = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUN = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMO = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAG = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAN = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRD = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SRB = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNA = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		III = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SND = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIN = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLK = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLV = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOM = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOT = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUN = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWA = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSW = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWE = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGL = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAH = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TGK = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAM = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAT = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEL = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THA = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOD = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIR = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TON = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSO = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TSN = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUR = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUK = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWI = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIG = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UKR = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UZB = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEN = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOL = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WLN = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYM = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRY = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WOL = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XHO = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YID = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOR = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZHA = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZUL = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORJ = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QPC = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TNG = 190,
	}
	
	/// <summary>
	/// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsCaptionLanguageSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	/// <summary>
	/// When set to ENABLED, sets #EXT-X-ALLOW-CACHE:no tag, which prevents client from saving media segments for later replay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 1,
	}
	
	/// <summary>
	/// Indicates whether segments should be placed in subdirectories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsDirectoryStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBDIRECTORY_PER_STREAM = 1,
	}
	
	/// <summary>
	/// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	/// <summary>
	/// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsInitializationVectorInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsOfflineEncrypted
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsKeyProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEKE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC_KEY = 1,
	}
	
	/// <summary>
	/// Settings for HLS encryption
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsEncryptionSettings
	{
		
		/// <summary>
		/// Max length: 32
		/// Min length: 32
		/// Pattern: ^[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=32)]
		public string ConstantInitializationVector { get; set; }
		
		/// <summary>
		/// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionSettingsEncryptionMethod EncryptionMethod { get; set; }
		
		/// <summary>
		/// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionSettingsInitializationVectorInManifest InitializationVectorInManifest { get; set; }
		
		/// <summary>
		/// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionSettingsOfflineEncrypted OfflineEncrypted { get; set; }
		
		/// <summary>
		/// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
		
		/// <summary>
		/// Use these settings to set up encryption with a static key provider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticKeyProvider StaticKeyProvider { get; set; }
		
		/// <summary>
		/// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionSettingsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionSettingsEncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionSettingsInitializationVectorInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionSettingsOfflineEncrypted
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionSettingsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEKE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC_KEY = 1,
	}
	
	/// <summary>
	/// When set to GZIP, compresses HLS playlist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Indicates whether the output manifest should use floating point values for segment duration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	/// <summary>
	/// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsOutputSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANIFESTS_AND_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTS_ONLY = 1,
	}
	
	/// <summary>
	/// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsProgramDateTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	/// <summary>
	/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Indicates ID3 frame that has the timecode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	/// <summary>
	/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to HLS_GROUP_SETTINGS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAdMarkers[] AdMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsAdditionalManifest[] AdditionalManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsCaptionLanguageMapping[] CaptionLanguageMappings { get; set; }
		
		/// <summary>
		/// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsCaptionLanguageSetting CaptionLanguageSetting { get; set; }
		
		/// <summary>
		/// When set to ENABLED, sets #EXT-X-ALLOW-CACHE:no tag, which prevents client from saving media segments for later replay.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsClientCache ClientCache { get; set; }
		
		/// <summary>
		/// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsCodecSpecification CodecSpecification { get; set; }
		
		/// <summary>
		/// Pattern: ^s3:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Settings associated with the destination. Will vary based on the type of destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Indicates whether segments should be placed in subdirectories.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsDirectoryStructure DirectoryStructure { get; set; }
		
		/// <summary>
		/// Settings for HLS encryption
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionSettings Encryption { get; set; }
		
		/// <summary>
		/// When set to GZIP, compresses HLS playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsManifestCompression ManifestCompression { get; set; }
		
		/// <summary>
		/// Indicates whether the output manifest should use floating point values for segment duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsManifestDurationFormat ManifestDurationFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MinFinalSegmentLength { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> MinSegmentLength { get; set; }
		
		/// <summary>
		/// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsOutputSelection OutputSelection { get; set; }
		
		/// <summary>
		/// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsProgramDateTime ProgramDateTime { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3600)]
		public System.Nullable<System.Int32> ProgramDateTimePeriod { get; set; }
		
		/// <summary>
		/// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsSegmentControl SegmentControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> SegmentLength { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> SegmentsPerSubdirectory { get; set; }
		
		/// <summary>
		/// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsStreamInfResolution StreamInfResolution { get; set; }
		
		/// <summary>
		/// Indicates ID3 frame that has the timecode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsTimedMetadataId3Frame TimedMetadataId3Frame { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> TimedMetadataId3Period { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> TimestampDeltaMilliseconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsCaptionLanguageSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsDirectoryStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBDIRECTORY_PER_STREAM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsOutputSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANIFESTS_AND_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTS_ONLY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsProgramDateTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsSegmentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	/// <summary>
	/// When set to INCLUDE, writes I-Frame Only Manifest in addition to the HLS manifest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsIFrameOnlyManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Settings for HLS output groups
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioGroupId { get; set; }
		
		/// <summary>
		/// Use this setting only in audio-only outputs. Choose MPEG-2 Transport Stream (M2TS) to create a file in an MPEG2-TS container. Keep the default value Automatic (AUTOMATIC) to create a raw audio-only file with no container. Regardless of the value that you specify here, if this output has video, the service will place outputs into an MPEG2-TS container.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsSettingsAudioOnlyContainer AudioOnlyContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AudioRenditionSets { get; set; }
		
		/// <summary>
		/// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsSettingsAudioTrackType AudioTrackType { get; set; }
		
		/// <summary>
		/// When set to INCLUDE, writes I-Frame Only Manifest in addition to the HLS manifest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsSettingsIFrameOnlyManifest IFrameOnlyManifest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentModifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsSettingsAudioOnlyContainer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		M2TS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsSettingsAudioTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_NOT_AUTO_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_ONLY_VARIANT_STREAM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsSettingsIFrameOnlyManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// To insert ID3 tags in your output, specify two values. Use ID3 tag (Id3) to specify the base 64 encoded string and use Timecode (TimeCode) to specify the time when the tag should be inserted. To insert multiple ID3 tags in your output, create multiple instances of ID3 insertion (Id3Insertion).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Id3Insertion
	{
		
		/// <summary>
		/// Pattern: ^[A-Za-z0-9+\/]+={0,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id3 { get; set; }
		
		/// <summary>
		/// Pattern: ^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9][:;][0-9]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timecode { get; set; }
	}
	
	/// <summary>
	/// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. This setting is disabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImageInserter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InsertableImage[] InsertableImages { get; set; }
	}
	
	/// <summary>
	/// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImscStylePassthrough
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Use Rectangle to identify a specific area of the video frame.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Rectangle
	{
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 2147483647)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Minimum: 2
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2, 2147483647)]
		public System.Nullable<System.Int32> Width { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> X { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	/// <summary>
	/// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDecryptionSettings
	{
		
		/// <summary>
		/// Specify the encryption mode that you used to encrypt your input files.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDecryptionSettingsDecryptionMode DecryptionMode { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// Min length: 24
		/// Pattern: ^[A-Za-z0-9+\/]+={0,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength=24)]
		public string EncryptedDecryptionKey { get; set; }
		
		/// <summary>
		/// Max length: 24
		/// Min length: 16
		/// Pattern: ^[A-Za-z0-9+\/]{22}==$|^[A-Za-z0-9+\/]{16}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(24, MinimumLength=16)]
		public string InitializationVector { get; set; }
		
		/// <summary>
		/// Max length: 19
		/// Min length: 9
		/// Pattern: ^[a-z-]{2,6}-(east|west|central|((north|south)(east|west)?))-[1-9]{1,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(19, MinimumLength=9)]
		public string KmsKeyRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDecryptionSettingsDecryptionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CTR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_CBC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_GCM = 2,
	}
	
	/// <summary>
	/// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Use Filter enable (InputFilterEnable) to specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The in put is filtered regardless of input type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputFilterEnable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 2,
	}
	
	/// <summary>
	/// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputPsiControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE_PSI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_PSI = 1,
	}
	
	/// <summary>
	/// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIEDSTART = 2,
	}
	
	/// <summary>
	/// Selector for video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoSelector
	{
		
		/// <summary>
		/// Ignore this setting unless this input is a QuickTime animation with an alpha channel. Use this setting to create separate Key and Fill outputs. In each output, specify which part of the input MediaConvert uses. Leave this setting at the default value DISCARD to delete the alpha channel and preserve the video. Set it to REMAP_TO_LUMA to delete the video and map the alpha channel to the luma channel of your outputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorAlphaBehavior AlphaBehavior { get; set; }
		
		/// <summary>
		/// If your input video has accurate color space metadata, or if you don't know about color space, leave this set to the default value Follow (FOLLOW). The service will automatically detect your input color space. If your input video has metadata indicating the wrong color space, specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate, choose Force HDR 10 (FORCE_HDR10) here and specify correct values in the input HDR 10 metadata (Hdr10Metadata) settings. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpace ColorSpace { get; set; }
		
		/// <summary>
		/// There are two sources for color metadata, the input file and the job input settings Color space (ColorSpace) and HDR master display information settings(Hdr10Metadata). The Color space usage setting determines which takes precedence. Choose Force (FORCE) to use color metadata from the input job settings. If you don't specify values for those settings, the service defaults to using metadata from your input. FALLBACK - Choose Fallback (FALLBACK) to use color metadata from the source when it is present. If there's no color metadata in your input file, the service defaults to using values you specify in the input settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpaceUsage ColorSpaceUsage { get; set; }
		
		/// <summary>
		/// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Hdr10Metadata Hdr10Metadata { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> Pid { get; set; }
		
		/// <summary>
		/// Minimum: -2147483648
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		/// <summary>
		/// Use Rotate (InputRotate) to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorRotate Rotate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorAlphaBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMAP_TO_LUMA = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_709 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDR10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HLG_2020 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpaceUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALLBACK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorRotate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREE_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_90 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_180 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_270 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 4,
	}
	
	/// <summary>
	/// Specifies media input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Input
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfAudioSelectorGroup AudioSelectorGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfAudioSelector AudioSelectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfCaptionSelector CaptionSelectors { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Crop { get; set; }
		
		/// <summary>
		/// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeblockFilter DeblockFilter { get; set; }
		
		/// <summary>
		/// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDecryptionSettings DecryptionSettings { get; set; }
		
		/// <summary>
		/// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDenoiseFilter DenoiseFilter { get; set; }
		
		/// <summary>
		/// Pattern: ^((s3://([^\/]+\/+)+([^\/\.]+|(([^\/]*)\.([mM]2[vV]|[mM][pP][eE][gG]|[mM][pP]3|[aA][vV][iI]|[mM][pP]4|[fF][lL][vV]|[mM][pP][tT]|[mM][pP][gG]|[mM]4[vV]|[tT][rR][pP]|[fF]4[vV]|[mM]2[tT][sS]|[tT][sS]|264|[hH]264|[mM][kK][vV]|[mM][oO][vV]|[mM][tT][sS]|[mM]2[tT]|[wW][mM][vV]|[aA][sS][fF]|[vV][oO][bB]|3[gG][pP]|3[gG][pP][pP]|[mM][xX][fF]|[dD][iI][vV][xX]|[xX][vV][iI][dD]|[rR][aA][wW]|[dD][vV]|[gG][xX][fF]|[mM]1[vV]|3[gG]2|[vV][mM][fF]|[mM]3[uU]8|[wW][eE][bB][mM]|[lL][cC][hH]|[gG][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF][hH][dD]|[wW][aA][vV]|[yY]4[mM]|[xX][mM][lL]))))|(https?://([^\/]+\/+)+([^\/\.]+|(([^\/]*)\.([mM]2[vV]|[mM][pP][eE][gG]|[mM][pP]3|[aA][vV][iI]|[mM][pP]4|[fF][lL][vV]|[mM][pP][tT]|[mM][pP][gG]|[mM]4[vV]|[tT][rR][pP]|[fF]4[vV]|[mM]2[tT][sS]|[tT][sS]|264|[hH]264|[mM][kK][vV]|[mM][oO][vV]|[mM][tT][sS]|[mM]2[tT]|[wW][mM][vV]|[aA][sS][fF]|[vV][oO][bB]|3[gG][pP]|3[gG][pP][pP]|[mM][xX][fF]|[dD][iI][vV][xX]|[xX][vV][iI][dD]|[rR][aA][wW]|[dD][vV]|[gG][xX][fF]|[mM]1[vV]|3[gG]2|[vV][mM][fF]|[mM]3[uU]8|[wW][eE][bB][mM]|[lL][cC][hH]|[gG][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF]_[mM][pP][eE][gG]2|[mM][xX][fF][hH][dD]|[wW][aA][vV]|[yY]4[mM]|[xX][mM][lL])))(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FileInput { get; set; }
		
		/// <summary>
		/// Use Filter enable (InputFilterEnable) to specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The in put is filtered regardless of input type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputFilterEnable FilterEnable { get; set; }
		
		/// <summary>
		/// Minimum: -5
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-5, 5)]
		public System.Nullable<System.Int32> FilterStrength { get; set; }
		
		/// <summary>
		/// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImageInserter ImageInserter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputClipping[] InputClippings { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Position { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		/// <summary>
		/// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputPsiControl PsiControl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringPatternS3ASSETMAPXml[] SupplementalImps { get; set; }
		
		/// <summary>
		/// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTimecodeSource TimecodeSource { get; set; }
		
		/// <summary>
		/// Max length: 11
		/// Min length: 11
		/// Pattern: ^((([0-1]\d)|(2[0-3]))(:[0-5]\d){2}([:;][0-5]\d))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength=11)]
		public string TimecodeStart { get; set; }
		
		/// <summary>
		/// Selector for video.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelector VideoSelector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputFilterEnable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputPsiControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE_PSI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_PSI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIEDSTART = 2,
	}
	
	/// <summary>
	/// To transcode only portions of your input (clips), include one Input clipping (one instance of InputClipping in the JSON job file) for each input clip. All input clips you specify will be included in every output of the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputClipping
	{
		
		/// <summary>
		/// Pattern: ^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9][:;][0-9]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EndTimecode { get; set; }
		
		/// <summary>
		/// Pattern: ^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9][:;][0-9]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StartTimecode { get; set; }
	}
	
	/// <summary>
	/// Use Rotate (InputRotate) to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputRotate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREE_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_90 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_180 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEGREES_270 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 4,
	}
	
	/// <summary>
	/// Specified video input in a template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfAudioSelectorGroup AudioSelectorGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfAudioSelector AudioSelectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOfCaptionSelector CaptionSelectors { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Crop { get; set; }
		
		/// <summary>
		/// Enable Deblock (InputDeblockFilter) to produce smoother motion in the output. Default is disabled. Only manually controllable for MPEG2 and uncompressed video inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTemplateDeblockFilter DeblockFilter { get; set; }
		
		/// <summary>
		/// Enable Denoise (InputDenoiseFilter) to filter noise from the input.  Default is disabled. Only applicable to MPEG2, H.264, H.265, and uncompressed video inputs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTemplateDenoiseFilter DenoiseFilter { get; set; }
		
		/// <summary>
		/// Use Filter enable (InputFilterEnable) to specify how the transcoding service applies the denoise and deblock filters. You must also enable the filters separately, with Denoise (InputDenoiseFilter) and Deblock (InputDeblockFilter). * Auto - The transcoding service determines whether to apply filtering, depending on input type and quality. * Disable - The input is not filtered. This is true even if you use the API to enable them in (InputDeblockFilter) and (InputDeblockFilter). * Force - The in put is filtered regardless of input type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTemplateFilterEnable FilterEnable { get; set; }
		
		/// <summary>
		/// Minimum: -5
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-5, 5)]
		public System.Nullable<System.Int32> FilterStrength { get; set; }
		
		/// <summary>
		/// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImageInserter ImageInserter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputClipping[] InputClippings { get; set; }
		
		/// <summary>
		/// Use Rectangle to identify a specific area of the video frame.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rectangle Position { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ProgramNumber { get; set; }
		
		/// <summary>
		/// Set PSI control (InputPsiControl) for transport stream inputs to specify which data the demux process to scans. * Ignore PSI - Scan all PIDs for audio and video. * Use PSI - Scan only PSI data.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTemplatePsiControl PsiControl { get; set; }
		
		/// <summary>
		/// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputTemplateTimecodeSource TimecodeSource { get; set; }
		
		/// <summary>
		/// Max length: 11
		/// Min length: 11
		/// Pattern: ^((([0-1]\d)|(2[0-3]))(:[0-5]\d){2}([:;][0-5]\d))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength=11)]
		public string TimecodeStart { get; set; }
		
		/// <summary>
		/// Selector for video.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelector VideoSelector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTemplateDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTemplateDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTemplateFilterEnable
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTemplatePsiControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE_PSI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_PSI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTemplateTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIEDSTART = 2,
	}
	
	/// <summary>
	/// Settings that specify how your still graphic overlay appears.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InsertableImage
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> FadeIn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> FadeOut { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Min length: 14
		/// Pattern: ^((s3://(.*?)\.(bmp|BMP|png|PNG|tga|TGA))|(https?://(.*?)\.(bmp|BMP|png|PNG|tga|TGA)(\?([^&=]+=[^&]+&)*[^&=]+=[^&]+)?))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=14)]
		public string ImageInserterInput { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> ImageX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> ImageY { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 99)]
		public System.Nullable<System.Int32> Layer { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Opacity { get; set; }
		
		/// <summary>
		/// Pattern: ^((([0-1]\d)|(2[0-3]))(:[0-5]\d){2}([:;][0-5]\d))$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// A job's phase can be PROBING, TRANSCODING OR UPLOADING
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSCODING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOADING = 2,
	}
	
	/// <summary>
	/// Provides messages from the service about jobs that you have already successfully submitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobMessages
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Warning { get; set; }
	}
	
	/// <summary>
	/// A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 4,
	}
	
	/// <summary>
	/// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Timing
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinishTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> SubmitTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
	}
	
	/// <summary>
	/// Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobTemplateListBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 2,
	}
	
	/// <summary>
	/// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	/// <summary>
	/// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PresetListBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 2,
	}
	
	/// <summary>
	/// Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueListBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATION_DATE = 1,
	}
	
	/// <summary>
	/// The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceTags
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// Selects between the DVB and ATSC buffer models for Dolby Digital audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAudioBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 1,
	}
	
	/// <summary>
	/// Controls what buffer model to use for accurate interleaving. If set to MULTIPLEX, use multiplex  buffer model. If set to NONE, this can lead to lower latency, but low-memory devices may not be able to play back the stream without interruptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// When set to VIDEO_AND_FIXED_INTERVALS, audio EBP markers will be added to partitions 3 and 4. The interval between these additional markers will be fixed, and will be slightly shorter than the video EBP marker interval. When set to VIDEO_INTERVAL, these additional markers will not be inserted. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEbpAudioInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_FIXED_INTERVALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_INTERVAL = 1,
	}
	
	/// <summary>
	/// Selects which PIDs to place EBP markers on. They can either be placed only on the video PID, or on both the video PID and all audio PIDs. Only applicable when EBP segmentation markers are is selected (segmentationMarkers is EBP or EBP_LEGACY).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEbpPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_AUDIO_PIDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PID = 1,
	}
	
	/// <summary>
	/// Controls whether to include the ES Rate field in the PES header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEsRateInPes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Keep the default value (DEFAULT) unless you know that your audio EBP markers are incorrectly appearing before your video EBP markers. To correct this problem, set this value to Force (FORCE).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsForceTsVideoEbpOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
	}
	
	/// <summary>
	/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsNielsenId3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// When set to PCR_EVERY_PES_PACKET, a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This is effective only when the PCR PID is the same as the video or audio elementary stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 1,
	}
	
	/// <summary>
	/// When set to CBR, inserts null packets into transport stream to fill specified bitrate. When set to VBR, the bitrate setting acts as the maximum bitrate, but the output will not be padded up to that bitrate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsRateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
	}
	
	/// <summary>
	/// Settings for SCTE-35 signals from ESAM. Include this in your job settings to put SCTE-35 markers in your HLS and transport stream outputs at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class M2tsScte35Esam
	{
		
		/// <summary>
		/// Minimum: 32
		/// Maximum: 8182
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(32, 8182)]
		public System.Nullable<System.Int32> Scte35EsamPid { get; set; }
	}
	
	/// <summary>
	/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE). Also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml). Also enable ESAM SCTE-35 (include the property scte35Esam).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Inserts segmentation markers at each segmentation_time period. rai_segstart sets the Random Access Indicator bit in the adaptation field. rai_adapt sets the RAI bit and adds the current timecode in the private data bytes. psi_segstart inserts PAT and PMT tables at the start of segments. ebp adds Encoder Boundary Point information to the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118. ebp_legacy adds Encoder Boundary Point information to the adaptation field using a legacy proprietary format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSegmentationMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_SEGSTART = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_ADAPT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSI_SEGSTART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP_LEGACY = 5,
	}
	
	/// <summary>
	/// The segmentation style parameter controls how segmentation markers are inserted into the transport stream. With avails, it is possible that segments may be truncated, which can influence where future segmentation markers are inserted. When a segmentation style of "reset_cadence" is selected and a segment is truncated due to an avail, we will reset the segmentation cadence. This means the subsequent segment will have a duration of of $segmentation_time seconds. When a segmentation style of "maintain_cadence" is selected and a segment is truncated due to an avail, we will not reset the segmentation cadence. This means the subsequent segment will likely be truncated as well. However, all segments after that will have a duration of $segmentation_time seconds. Note that EBP lookahead is a slight exception to this rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSegmentationStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTAIN_CADENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_CADENCE = 1,
	}
	
	/// <summary>
	/// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8NielsenId3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8PcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 1,
	}
	
	/// <summary>
	/// For SCTE-35 markers from your input-- Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None (NONE) if you don't want manifest conditioning. Choose Passthrough (PASSTHROUGH) and choose Ad markers (adMarkers) if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML (sccXml).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8Scte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Applies only to HLS outputs. Use this setting to specify whether the service inserts the ID3 timed metadata from the input in this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimedMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// For motion overlays that don't have a built-in frame rate, specify the frame rate of the overlay in frames per second, as a fraction. For example, specify 24 fps as 24/1. The overlay frame rate doesn't need to match the frame rate of the underlying video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MotionImageInsertionFramerate
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 17895697
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 17895697)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483640
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483640)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
	}
	
	/// <summary>
	/// Choose the type of motion graphic asset that you are providing for your overlay. You can choose either a .mov file or a series of .png files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MotionImageInsertionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PNG = 1,
	}
	
	/// <summary>
	/// Specify the offset between the upper-left corner of the video frame and the top left corner of the overlay.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MotionImageInsertionOffset
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> ImageX { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> ImageY { get; set; }
	}
	
	/// <summary>
	/// Specify whether your motion graphic overlay repeats on a loop or plays only once.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MotionImagePlayback
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPEAT = 1,
	}
	
	/// <summary>
	/// When enabled, include 'clap' atom if appropriate for the video output settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovClapAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovCslgAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovMpeg2FourCCControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XDCAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG = 1,
	}
	
	/// <summary>
	/// If set to OMNEON, inserts Omneon-compatible padding
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovPaddingControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMNEON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Always keep the default value (SELF_CONTAINED) for this setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MovReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_CONTAINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL = 1,
	}
	
	/// <summary>
	/// Specify whether the service encodes this MP3 audio output with a constant bitrate (CBR) or a variable bitrate (VBR).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp3RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	/// <summary>
	/// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4CslgAtom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// Inserts a free-space box immediately after the moov box.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4FreeSpaceBox
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 1,
	}
	
	/// <summary>
	/// If set to PROGRESSIVE_DOWNLOAD, the MOOV atom is relocated to the beginning of the archive as required for progressive downloading. Otherwise it is placed normally at the end.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp4MoovPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE_DOWNLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions.  You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdCaptionContainerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAGMENTED_MP4 = 1,
	}
	
	/// <summary>
	/// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdScte35Esam
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MpdScte35Source
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
	}
	
	/// <summary>
	/// Use Level (Mpeg2CodecLevel) to set the MPEG-2 level for the video output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2CodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH1440 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 4,
	}
	
	/// <summary>
	/// Use Profile (Mpeg2CodecProfile) to set the MPEG-2 profile for the video output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2CodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE_422 = 1,
	}
	
	/// <summary>
	/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2DynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// Indicates if the GOP Size in MPEG2 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type.
	///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
	///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2InterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	/// <summary>
	/// Use Intra DC precision (Mpeg2IntraDcPrecision) to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2IntraDcPrecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_9 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_11 = 4,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2QualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 1,
	}
	
	/// <summary>
	/// Use Rate control mode (Mpeg2RateControlMode) to specifiy whether the bitrate is variable (vbr) or constant (cbr).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
	}
	
	/// <summary>
	/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on spatial variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Produces a Type D-10 compatible bitstream (SMPTE 356M-2001).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2Syntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D_10 = 1,
	}
	
	/// <summary>
	/// Only use Telecine (Mpeg2Telecine) when you set Framerate (Framerate) to 29.970. Set Telecine (Mpeg2Telecine) to Hard (hard) to produce a 29.97i output from a 23.976 input. Set it to Soft (soft) to produce 23.976 output and leave converstion to the player.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2Telecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	/// <summary>
	/// Adjust quantization within each frame based on temporal variation of content complexity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2TemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value MPEG2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mpeg2Settings
	{
		
		/// <summary>
		/// Adaptive quantization. Allows intra-frame quantizers to vary to improve visual quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 288000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 288000000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Use Level (Mpeg2CodecLevel) to set the MPEG-2 level for the video output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsCodecLevel CodecLevel { get; set; }
		
		/// <summary>
		/// Use Profile (Mpeg2CodecProfile) to set the MPEG-2 profile for the video output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsCodecProfile CodecProfile { get; set; }
		
		/// <summary>
		/// Choose Adaptive to improve subjective video quality for high-motion content. This will cause the service to use fewer B-frames (which infer information based on other frames) for high-motion portions of the video and more B-frames for low-motion portions. The maximum number of B-frames is limited by the value you provide for the setting B frames between reference frames (numberBFramesBetweenReferenceFrames).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsDynamicSubGop DynamicSubGop { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1001
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1001)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 24
		/// Maximum: 60000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(24, 60000)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Indicates if the GOP Size in MPEG2 is specified in frames or seconds. If seconds the system will convert the GOP Size into a frame count at run time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsGopSizeUnits GopSizeUnits { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> HrdBufferInitialFillPercentage { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 47185920
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 47185920)]
		public System.Nullable<System.Int32> HrdBufferSize { get; set; }
		
		/// <summary>
		/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type.
		///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
		///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsInterlaceMode InterlaceMode { get; set; }
		
		/// <summary>
		/// Use Intra DC precision (Mpeg2IntraDcPrecision) to set quantization precision for intra-block DC coefficients. If you choose the value auto, the service will automatically select the precision based on the per-frame compression ratio.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsIntraDcPrecision IntraDcPrecision { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 300000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 300000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> NumberBFramesBetweenReferenceFrames { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, single-pass encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsQualityTuningLevel QualityTuningLevel { get; set; }
		
		/// <summary>
		/// Use Rate control mode (Mpeg2RateControlMode) to specifiy whether the bitrate is variable (vbr) or constant (cbr).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Enable this setting to insert I-frames at scene changes that the service automatically detects. This improves video quality and is enabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsSceneChangeDetect SceneChangeDetect { get; set; }
		
		/// <summary>
		/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsSlowPal SlowPal { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 128)]
		public System.Nullable<System.Int32> Softness { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on spatial variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsSpatialAdaptiveQuantization SpatialAdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Produces a Type D-10 compatible bitstream (SMPTE 356M-2001).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsSyntax Syntax { get; set; }
		
		/// <summary>
		/// Only use Telecine (Mpeg2Telecine) when you set Framerate (Framerate) to 29.970. Set Telecine (Mpeg2Telecine) to Hard (hard) to produce a 29.97i output from a 23.976 input. Set it to Soft (soft) to produce 23.976 output and leave converstion to the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsTelecine Telecine { get; set; }
		
		/// <summary>
		/// Adjust quantization within each frame based on temporal variation of content complexity.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2SettingsTemporalAdaptiveQuantization TemporalAdaptiveQuantization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsCodecLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH1440 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE_422 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsDynamicSubGop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADAPTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsGopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsInterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsIntraDcPrecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_9 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTRA_DC_PRECISION_11 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsQualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsSceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsSlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsSpatialAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsSyntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D_10 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsTelecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mpeg2SettingsTemporalAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Specify the details for each additional Microsoft Smooth Streaming manifest that you want the service to generate for this output group. Each manifest can reference a different subset of outputs in the group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MsSmoothAdditionalManifest
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ManifestNameModifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__stringMin1[] SelectedOutputs { get; set; }
	}
	
	/// <summary>
	/// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothAudioDeduplication
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMBINE_DUPLICATE_STREAMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MsSmoothEncryptionSettings
	{
		
		/// <summary>
		/// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider.  If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	/// <summary>
	/// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothManifestEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF16 = 1,
	}
	
	/// <summary>
	/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to MS_SMOOTH_GROUP_SETTINGS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MsSmoothGroupSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothAdditionalManifest[] AdditionalManifests { get; set; }
		
		/// <summary>
		/// COMBINE_DUPLICATE_STREAMS combines identical audio encoding settings across a Microsoft Smooth output group into a single audio stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsAudioDeduplication AudioDeduplication { get; set; }
		
		/// <summary>
		/// Pattern: ^s3:\/\/
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Destination { get; set; }
		
		/// <summary>
		/// Settings associated with the destination. Will vary based on the type of destination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// If you are using DRM, set DRM System (MsSmoothEncryptionSettings) to specify the value SpekeKeyProvider.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothEncryptionSettings Encryption { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FragmentLength { get; set; }
		
		/// <summary>
		/// Use Manifest encoding (MsSmoothManifestEncoding) to specify the encoding format for the server and client manifest. Valid options are utf8 and utf16.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsManifestEncoding ManifestEncoding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsAudioDeduplication
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMBINE_DUPLICATE_STREAMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsManifestEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF8 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTF16 = 1,
	}
	
	/// <summary>
	/// Optional. When you have AFD signaling set up in your output video stream, use this setting to choose whether to also include it in the MXF wrapper. Choose Don't copy (NO_COPY) to exclude AFD signaling from the MXF wrapper. Choose Copy from video stream (COPY_FROM_VIDEO) to copy the AFD values from the video stream for this output to the MXF wrapper. Regardless of which option you choose, the AFD values remain in the video stream. Related settings: To set up your output to include or exclude AFD values, see AfdSignaling, under VideoDescription. On the console, find AFD signaling under the output's video encoding settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MxfAfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_COPY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY_FROM_VIDEO = 1,
	}
	
	/// <summary>
	/// Optional. When you set Noise reducer (noiseReducer) to Temporal (TEMPORAL), you can optionally use this setting to apply additional sharpening. The default behavior, Auto (AUTO) allows the transcoder to determine whether to apply filtering, depending on input type and quality.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoiseFilterPostTemporalSharpening
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 2,
	}
	
	/// <summary>
	/// Use Noise reducer filter (NoiseReducerFilter) to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer (NoiseReducer). * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoiseReducerFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILATERAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAUSSIAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANCZOS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARPEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSERVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPATIAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORAL = 7,
	}
	
	/// <summary>
	/// Settings for a noise reducer filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoiseReducerFilterSettings
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3)]
		public System.Nullable<System.Int32> Strength { get; set; }
	}
	
	/// <summary>
	/// Noise reducer filter settings for spatial filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoiseReducerSpatialFilterSettings
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3)]
		public System.Nullable<System.Int32> PostFilterSharpenStrength { get; set; }
		
		/// <summary>
		/// Minimum: -2
		/// Maximum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-2, 3)]
		public System.Nullable<System.Int32> Speed { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 16)]
		public System.Nullable<System.Int32> Strength { get; set; }
	}
	
	/// <summary>
	/// Noise reducer filter settings for temporal filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoiseReducerTemporalFilterSettings
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 4)]
		public System.Nullable<System.Int32> AggressiveMode { get; set; }
		
		/// <summary>
		/// Optional. When you set Noise reducer (noiseReducer) to Temporal (TEMPORAL), you can optionally use this setting to apply additional sharpening. The default behavior, Auto (AUTO) allows the transcoder to determine whether to apply filtering, depending on input type and quality.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducerTemporalFilterSettingsPostTemporalSharpening PostTemporalSharpening { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 3)]
		public System.Nullable<System.Int32> Speed { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 16)]
		public System.Nullable<System.Int32> Strength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoiseReducerTemporalFilterSettingsPostTemporalSharpening
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 2,
	}
	
	/// <summary>
	/// Enable the Noise reducer (NoiseReducer) feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer (NoiseReducer), you must also select a value for Noise reducer filter (NoiseReducerFilter).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoiseReducer
	{
		
		/// <summary>
		/// Use Noise reducer filter (NoiseReducerFilter) to select one of the following spatial image filtering functions. To use this setting, you must also enable Noise reducer (NoiseReducer). * Bilateral preserves edges while reducing noise. * Mean (softest), Gaussian, Lanczos, and Sharpen (sharpest) do convolution filtering. * Conserve does min/max noise reduction. * Spatial does frequency-domain filtering based on JND principles. * Temporal optimizes video quality for complex motion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducerFilter Filter { get; set; }
		
		/// <summary>
		/// Settings for a noise reducer filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducerFilterSettings FilterSettings { get; set; }
		
		/// <summary>
		/// Noise reducer filter settings for spatial filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducerSpatialFilterSettings SpatialFilterSettings { get; set; }
		
		/// <summary>
		/// Noise reducer filter settings for temporal filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducerTemporalFilterSettings TemporalFilterSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoiseReducerFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILATERAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAUSSIAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANCZOS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHARPEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSERVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPATIAL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORAL = 7,
	}
	
	/// <summary>
	/// Specific settings for this type of output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputSettings
	{
		
		/// <summary>
		/// Settings for HLS output groups
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsSettings HlsSettings { get; set; }
	}
	
	/// <summary>
	/// An output object describes the settings for a single output file or stream in an output group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Output
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescription[] CaptionDescriptions { get; set; }
		
		/// <summary>
		/// Container specific settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContainerSettings ContainerSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NameModifier { get; set; }
		
		/// <summary>
		/// Specific settings for this type of output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputSettings OutputSettings { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=0)]
		public string Preset { get; set; }
		
		/// <summary>
		/// Settings for video outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription VideoDescription { get; set; }
	}
	
	/// <summary>
	/// OutputChannel mapping settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputChannelMapping
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__integerMinNegative60Max6[] InputChannels { get; set; }
	}
	
	/// <summary>
	/// Contains details about the output's video stream
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HeightInPx { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WidthInPx { get; set; }
	}
	
	/// <summary>
	/// Details regarding output
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInMs { get; set; }
		
		/// <summary>
		/// Contains details about the output's video stream
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDetail VideoDetails { get; set; }
	}
	
	/// <summary>
	/// Output Group settings, including type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputGroupSettings
	{
		
		/// <summary>
		/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to CMAF_GROUP_SETTINGS. Each output in a CMAF Output Group may only contain a single video, audio, or caption output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafGroupSettings CmafGroupSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to DASH_ISO_GROUP_SETTINGS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashIsoGroupSettings DashIsoGroupSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to FILE_GROUP_SETTINGS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FileGroupSettings FileGroupSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to HLS_GROUP_SETTINGS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettings HlsGroupSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Type) under (OutputGroups)>(OutputGroupSettings) to MS_SMOOTH_GROUP_SETTINGS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettings MsSmoothGroupSettings { get; set; }
		
		/// <summary>
		/// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputGroupSettingsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputGroupSettingsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HLS_GROUP_SETTINGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH_ISO_GROUP_SETTINGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_GROUP_SETTINGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_SMOOTH_GROUP_SETTINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CMAF_GROUP_SETTINGS = 4,
	}
	
	/// <summary>
	/// Group of outputs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Output Group settings, including type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputGroupSettings OutputGroupSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
	}
	
	/// <summary>
	/// Contains details about the output groups specified in the job settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputGroupDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDetail[] OutputDetails { get; set; }
	}
	
	/// <summary>
	/// Type of output group (File group, Apple HLS, DASH ISO, Microsoft Smooth Streaming, CMAF)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OutputGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HLS_GROUP_SETTINGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH_ISO_GROUP_SETTINGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_GROUP_SETTINGS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_SMOOTH_GROUP_SETTINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CMAF_GROUP_SETTINGS = 4,
	}
	
	/// <summary>
	/// Use Profile (ProResCodecProfile) to specifiy the type of Apple ProRes codec to use for this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_LT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_PROXY = 3,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type.
	///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
	///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresInterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Only use Telecine (ProresTelecine) when you set Framerate (Framerate) to 29.970. Set Telecine (ProresTelecine) to Hard (hard) to produce a 29.97i output from a 23.976 input. Set it to Soft (soft) to produce 23.976 output and leave converstion to the player.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresTelecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 1,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value PRORES.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProresSettings
	{
		
		/// <summary>
		/// Use Profile (ProResCodecProfile) to specifiy the type of Apple ProRes codec to use for this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsCodecProfile CodecProfile { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use duplicate drop conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// Use Interlace mode (InterlaceMode) to choose the scan line type for the output. * Top Field First (TOP_FIELD) and Bottom Field First (BOTTOM_FIELD) produce interlaced output with the entire output having the same field polarity (top or bottom first). * Follow, Default Top (FOLLOW_TOP_FIELD) and Follow, Default Bottom (FOLLOW_BOTTOM_FIELD) use the same field polarity as the source. Therefore, behavior depends on the input scan type.
		///  - If the source is interlaced, the output will be interlaced with the same polarity as the source (it will follow the source). The output could therefore be a mix of "top field first" and "bottom field first".
		///  - If the source is progressive, the output will be interlaced with "top field first" or "bottom field first" polarity, depending on which of the Follow options you chose.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsInterlaceMode InterlaceMode { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output. To use a different PAR, choose (SPECIFIED). In the console, SPECIFIED corresponds to any value other than Follow source. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Enables Slow PAL rate conversion. 23.976fps and 24fps input is relabeled as 25fps, and audio is sped up correspondingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsSlowPal SlowPal { get; set; }
		
		/// <summary>
		/// Only use Telecine (ProresTelecine) when you set Framerate (Framerate) to 29.970. Set Telecine (ProresTelecine) to Hard (hard) to produce a 29.97i output from a 23.976 input. Set it to Soft (soft) to produce 23.976 output and leave converstion to the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettingsTelecine Telecine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsCodecProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_HQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_LT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLE_PRORES_422_PROXY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsInterlaceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_FIELD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_FIELD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_TOP_FIELD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_BOTTOM_FIELD = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsSlowPal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProresSettingsTelecine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HARD = 1,
	}
	
	/// <summary>
	/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPlan
	{
		
		/// <summary>
		/// The length of the term of your reserved queue pricing plan commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanCommitment Commitment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PurchasedAt { get; set; }
		
		/// <summary>
		/// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanRenewalType RenewalType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReservedSlots { get; set; }
		
		/// <summary>
		/// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanCommitment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanRenewalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_RENEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
	}
	
	/// <summary>
	/// Description of the source and destination queues between which the job has moved, along with the timestamp of the move
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueTransition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationQueue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceQueue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	/// <summary>
	/// Specifies whether the pricing plan for your reserved queue is ACTIVE or EXPIRED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPlanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
	}
	
	/// <summary>
	/// Use Respond to AFD (RespondToAfd) to specify how the service changes the video itself in response to AFD values in the input. * Choose Respond to clip the input video frame according to the AFD value, input display aspect ratio, and output display aspect ratio. * Choose Passthrough to include the input AFD values. Do not choose this when AfdSignaling is set to (NONE). A preferred implementation of this workflow is to set RespondToAfd to (NONE) and set AfdSignaling to (AUTO). * Choose None to remove all input AFD values from this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RespondToAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	/// <summary>
	/// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3ObjectCannedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATED_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUCKET_OWNER_READ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUCKET_OWNER_FULL_CONTROL = 3,
	}
	
	/// <summary>
	/// Optional. Have MediaConvert automatically apply Amazon S3 access control for the outputs in this output group. When you don't use this setting, S3 automatically applies the default access control list PRIVATE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3DestinationAccessControl
	{
		
		/// <summary>
		/// Choose an Amazon S3 canned ACL for MediaConvert to apply to this output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3DestinationAccessControlCannedAcl CannedAcl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3DestinationAccessControlCannedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_READ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATED_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUCKET_OWNER_READ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUCKET_OWNER_FULL_CONTROL = 3,
	}
	
	/// <summary>
	/// Settings for how your job outputs are encrypted as they are uploaded to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3EncryptionSettings
	{
		
		/// <summary>
		/// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3 (SERVER_SIDE_ENCRYPTION_S3). If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS (SERVER_SIDE_ENCRYPTION_KMS). By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting  KMS ARN (kmsKeyArn).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3EncryptionSettingsEncryptionType EncryptionType { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:aws(-us-gov|-cn)?:kms:[a-z-]{2,6}-(east|west|central|((north|south)(east|west)?))-[1-9]{1,2}:\d{12}:key/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3EncryptionSettingsEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_SIDE_ENCRYPTION_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_SIDE_ENCRYPTION_KMS = 1,
	}
	
	/// <summary>
	/// Specify how you want your data keys managed. AWS uses data keys to encrypt your content. AWS also encrypts the data keys themselves, using a customer master key (CMK), and then stores the encrypted data keys alongside your encrypted content. Use this setting to specify which AWS service manages the CMK. For simplest set up, choose Amazon S3 (SERVER_SIDE_ENCRYPTION_S3). If you want your master key to be managed by AWS Key Management Service (KMS), choose AWS KMS (SERVER_SIDE_ENCRYPTION_KMS). By default, when you choose AWS KMS, KMS uses the AWS managed customer master key (CMK) associated with Amazon S3 to encrypt your data keys. You can optionally choose to specify a different, customer managed CMK. Do so by specifying the Amazon Resource Name (ARN) of the key for the setting  KMS ARN (kmsKeyArn).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3ServerSideEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_SIDE_ENCRYPTION_S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_SIDE_ENCRYPTION_KMS = 1,
	}
	
	/// <summary>
	/// Specify how the service handles outputs that have a different aspect ratio from the input aspect ratio. Choose Stretch to output (STRETCH_TO_OUTPUT) to have the service stretch your video image to fit. Keep the setting Default (DEFAULT) to have the service letterbox your video instead. This setting overrides any value that you specify for the setting Selection placement (position) in this output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRETCH_TO_OUTPUT = 1,
	}
	
	/// <summary>
	/// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SccDestinationFramerate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_23_97 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_24 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_25 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_29_97_DROPFRAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMERATE_29_97_NON_DROPFRAME = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// A page type as defined in the standard ETSI EN 300 468, Table 94
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TeletextPageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_TYPE_INITIAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_TYPE_SUBTITLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_TYPE_ADDL_INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_TYPE_PROGRAM_SCHEDULE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE = 4,
	}
	
	/// <summary>
	/// Use Position (Position) under under Timecode burn-in (TimecodeBurnIn) to specify the location the burned-in timecode on output video.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeBurninPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_RIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_LEFT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_CENTER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_RIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEFT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_CENTER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_RIGHT = 8,
	}
	
	/// <summary>
	/// Timecode burn-in (TimecodeBurnIn)--Burns the output timecode and specified prefix into the output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimecodeBurnin
	{
		
		/// <summary>
		/// Minimum: 10
		/// Maximum: 48
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(10, 48)]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		/// <summary>
		/// Use Position (Position) under under Timecode burn-in (TimecodeBurnIn) to specify the location the burned-in timecode on output video.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurninPosition Position { get; set; }
		
		/// <summary>
		/// Pattern: ^[ -~]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeBurninPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_RIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_LEFT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_CENTER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE_RIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEFT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_CENTER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_RIGHT = 8,
	}
	
	/// <summary>
	/// Use Source (TimecodeSource) to set how timecodes are handled within this job. To make sure that your video, audio, captions, and markers are synchronized and that time-based features, such as image inserter, work correctly, choose the Timecode source option that matches your assets. All timecodes are in a 24-hour format with frame number (HH:MM:SS:FF). * Embedded (EMBEDDED) - Use the timecode that is in the input video. If no embedded timecode is in the source, the service will use Start at 0 (ZEROBASED) instead. * Start at 0 (ZEROBASED) - Set the timecode of the initial frame to 00:00:00:00. * Specified Start (SPECIFIEDSTART) - Set the timecode of the initial frame to a value other than zero. You use Start timecode (Start) to provide this value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIEDSTART = 2,
	}
	
	/// <summary>
	/// Pass through style and position information from a TTML-like input source (TTML, SMPTE-TT) to the TTML output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TtmlStylePassthrough
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateJobTemplateRequest
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccelerationSettings AccelerationSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		/// <summary>
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobTemplateSettings Settings { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateJobTemplateRequestStatusUpdateInterval StatusUpdateInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateJobTemplateRequestStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePresetRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Settings for preset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PresetSettings Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateQueueRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPlanSettings ReservationPlanSettings { get; set; }
		
		/// <summary>
		/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateQueueRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateQueueRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	/// <summary>
	/// Type of video codec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAME_CAPTURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AV1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H_264 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H_265 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRORES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VP8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VP9 = 7,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP8.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Vp8Settings
	{
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use Drop duplicate (DUPLICATE_DROP) conversion. When you choose Interpolate (INTERPOLATE) instead, the conversion produces smoother motion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 47185920
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 47185920)]
		public System.Nullable<System.Int32> HrdBufferSize { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 1152000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 1152000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output.  To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8SettingsQualityTuningLevel QualityTuningLevel { get; set; }
		
		/// <summary>
		/// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8SettingsRateControlMode RateControlMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8SettingsQualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
	}
	
	/// <summary>
	/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP9.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Vp9Settings
	{
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 480000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 480000000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use Drop duplicate (DUPLICATE_DROP) conversion. When you choose Interpolate (INTERPOLATE) instead, the conversion produces smoother motion.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9SettingsFramerateConversionAlgorithm FramerateConversionAlgorithm { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 47185920
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 47185920)]
		public System.Nullable<System.Int32> HrdBufferSize { get; set; }
		
		/// <summary>
		/// Minimum: 1000
		/// Maximum: 480000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 480000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output.  To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9SettingsQualityTuningLevel QualityTuningLevel { get; set; }
		
		/// <summary>
		/// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9SettingsRateControlMode RateControlMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9SettingsFramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9SettingsQualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
	}
	
	/// <summary>
	/// Video codec settings, (CodecSettings) under (VideoDescription), contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec (Codec). For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * FRAME_CAPTURE, FrameCaptureSettings * AV1, Av1Settings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * VP8, Vp8Settings * VP9, Vp9Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoCodecSettings
	{
		
		/// <summary>
		/// Required when you set Codec, under VideoDescription>CodecSettings to the value AV1.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Av1Settings Av1Settings { get; set; }
		
		/// <summary>
		/// Type of video codec
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoCodecSettingsCodec Codec { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value FRAME_CAPTURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureSettings FrameCaptureSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value H_264.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264Settings H264Settings { get; set; }
		
		/// <summary>
		/// Settings for H265 codec
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265Settings H265Settings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value MPEG2.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mpeg2Settings Mpeg2Settings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value PRORES.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProresSettings ProresSettings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP8.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp8Settings Vp8Settings { get; set; }
		
		/// <summary>
		/// Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value VP9.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Vp9Settings Vp9Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoCodecSettingsCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAME_CAPTURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AV1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H_264 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H_265 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRORES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VP8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VP9 = 7,
	}
	
	/// <summary>
	/// Applies only to H.264, H.265, MPEG2, and ProRes outputs. Only enable Timecode insertion when the input frame rate is identical to the output frame rate. To include timecodes in this output, set Timecode insertion (VideoTimecodeInsertion) to PIC_TIMING_SEI. To leave them out, set it to DISABLED. Default is DISABLED. When the service inserts timecodes in an output, by default, it uses any embedded timecodes from the input. If none are present, the service will set the timecode for the first output frame to zero. To change this default behavior, adjust the settings under Timecode configuration (TimecodeConfig). In the console, these settings are located under Job > Job settings > Timecode configuration. Note - Timecode source under input settings (InputTimecodeSource) does not affect the timecodes that are inserted in the output. Source under Job settings > Timecode configuration (TimecodeSource) does.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoTimecodeInsertion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoPreprocessor
	{
		
		/// <summary>
		/// Settings for color correction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ColorCorrector ColorCorrector { get; set; }
		
		/// <summary>
		/// Settings for deinterlacer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Deinterlacer Deinterlacer { get; set; }
		
		/// <summary>
		/// Settings for Dolby Vision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DolbyVision DolbyVision { get; set; }
		
		/// <summary>
		/// Enable the image inserter feature to include a graphic overlay on your video. Enable or disable this feature for each input or output individually. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImageInserter ImageInserter { get; set; }
		
		/// <summary>
		/// Enable the Noise reducer (NoiseReducer) feature to remove noise from your video output if necessary. Enable or disable this feature for each output individually. This setting is disabled by default. When you enable Noise reducer (NoiseReducer), you must also select a value for Noise reducer filter (NoiseReducerFilter).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoiseReducer NoiseReducer { get; set; }
		
		/// <summary>
		/// Timecode burn-in (TimecodeBurnIn)--Burns the output timecode and specified prefix into the output.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TimecodeBurnin TimecodeBurnin { get; set; }
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use Drop duplicate (DUPLICATE_DROP) conversion. When you choose Interpolate (INTERPOLATE) instead, the conversion produces smoother motion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output.  To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8QualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 1,
	}
	
	/// <summary>
	/// With the VP8 codec, you can use only the variable bitrate (VBR) rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp8RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
	}
	
	/// <summary>
	/// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the transcoder performs framerate conversion. The default behavior is to use Drop duplicate (DUPLICATE_DROP) conversion. When you choose Interpolate (INTERPOLATE) instead, the conversion produces smoother motion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9FramerateConversionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATE = 1,
	}
	
	/// <summary>
	/// Optional. Specify how the service determines the pixel aspect ratio (PAR) for this output. The default behavior, Follow source (INITIALIZE_FROM_SOURCE), uses the PAR from your input video for your output.  To specify a different PAR in the console, choose any value other than Follow source. To specify a different PAR by editing the JSON job specification, choose SPECIFIED. When you choose SPECIFIED for this setting, you must also specify values for the parNumerator and parDenominator settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9QualityTuningLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_PASS_HQ = 1,
	}
	
	/// <summary>
	/// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Vp9RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 0,
	}
	
	/// <summary>
	/// The service defaults to using RIFF for WAV outputs. If your output audio is likely to exceed 4 GB in file size, or if you otherwise need the extended support of the RF64 format, set your output WAV file format to RF64.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WavFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RF64 = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates an AWS Certificate Manager (ACM) Amazon Resource Name (ARN) with AWS Elemental MediaConvert.
		/// AssociateCertificate /2017-08-29/certificates
		/// </summary>
		public async Task AssociateCertificateAsync(AssociateCertificateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/certificates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently cancel a job. Once you have canceled a job, you can't start it again.
		/// CancelJob /2017-08-29/jobs/{id}
		/// </summary>
		/// <param name="id">The Job ID of the job to be cancelled.</param>
		public async Task CancelJobAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobs/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the JSON for a specific completed transcoding job.
		/// GetJob /2017-08-29/jobs/{id}
		/// </summary>
		/// <param name="id">the job ID of the job.</param>
		/// <returns>Success</returns>
		public async Task<GetJobResponse> GetJobAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobs/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new transcoding job. For information about jobs and job settings, see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
		/// CreateJob /2017-08-29/jobs
		/// </summary>
		public async Task CreateJobAsync(CreateJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a JSON array of up to twenty of your most recently created jobs. This array includes in-process, completed, and errored jobs. This will return the jobs themselves, not just a list of the jobs. To retrieve the twenty next most recent jobs, use the nextToken string returned with the array.
		/// ListJobs /2017-08-29/jobs
		/// </summary>
		/// <param name="maxResults">Optional. Number of jobs, up to twenty, that will be returned at one time.</param>
		/// <param name="nextToken">Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.</param>
		/// <param name="order">Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.</param>
		/// <param name="queue">Optional. Provide a queue name to get back only jobs from that queue.</param>
		/// <param name="status">Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResponse> ListJobsAsync(int maxResults, string nextToken, Order order, string queue, JobStatus status, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&order=" + order+"&queue=" + (queue==null? "" : Uri.EscapeDataString(queue))+"&status=" + status+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new job template. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
		/// CreateJobTemplate /2017-08-29/jobTemplates
		/// </summary>
		public async Task CreateJobTemplateAsync(CreateJobTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobTemplates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a JSON array of up to twenty of your job templates. This will return the templates themselves, not just a list of them. To retrieve the next twenty templates, use the nextToken string returned with the array
		/// ListJobTemplates /2017-08-29/jobTemplates
		/// </summary>
		/// <param name="category">Optionally, specify a job template category to limit responses to only job templates from that category.</param>
		/// <param name="listBy">Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.</param>
		/// <param name="maxResults">Optional. Number of job templates, up to twenty, that will be returned at one time.</param>
		/// <param name="nextToken">Use this string, provided with the response to a previous request, to request the next batch of job templates.</param>
		/// <param name="order">Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobTemplatesResponse> ListJobTemplatesAsync(string category, JobTemplateListBy listBy, int maxResults, string nextToken, Order order, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobTemplates?category=" + (category==null? "" : Uri.EscapeDataString(category))+"&listBy=" + listBy+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&order=" + order+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new preset. For information about job templates see the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
		/// CreatePreset /2017-08-29/presets
		/// </summary>
		public async Task CreatePresetAsync(CreatePresetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/presets";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a JSON array of up to twenty of your presets. This will return the presets themselves, not just a list of them. To retrieve the next twenty presets, use the nextToken string returned with the array.
		/// ListPresets /2017-08-29/presets
		/// </summary>
		/// <param name="category">Optionally, specify a preset category to limit responses to only presets from that category.</param>
		/// <param name="listBy">Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.</param>
		/// <param name="maxResults">Optional. Number of presets, up to twenty, that will be returned at one time</param>
		/// <param name="nextToken">Use this string, provided with the response to a previous request, to request the next batch of presets.</param>
		/// <param name="order">Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPresetsResponse> ListPresetsAsync(string category, JobTemplateListBy listBy, int maxResults, string nextToken, Order order, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/presets?category=" + (category==null? "" : Uri.EscapeDataString(category))+"&listBy=" + listBy+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&order=" + order+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPresetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new transcoding queue. For information about queues, see Working With Queues in the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html
		/// CreateQueue /2017-08-29/queues
		/// </summary>
		public async Task CreateQueueAsync(CreateQueueBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/queues";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a JSON array of up to twenty of your queues. This will return the queues themselves, not just a list of them. To retrieve the next twenty queues, use the nextToken string returned with the array.
		/// ListQueues /2017-08-29/queues
		/// </summary>
		/// <param name="listBy">Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.</param>
		/// <param name="maxResults">Optional. Number of queues, up to twenty, that will be returned at one time.</param>
		/// <param name="nextToken">Use this string, provided with the response to a previous request, to request the next batch of queues.</param>
		/// <param name="order">Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListQueuesResponse> ListQueuesAsync(QueueListBy listBy, int maxResults, string nextToken, Order order, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/queues?listBy=" + listBy+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&order=" + order+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListQueuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently delete a job template you have created.
		/// DeleteJobTemplate /2017-08-29/jobTemplates/{name}
		/// </summary>
		/// <param name="name">The name of the job template to be deleted.</param>
		public async Task DeleteJobTemplateAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobTemplates/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the JSON for a specific job template.
		/// GetJobTemplate /2017-08-29/jobTemplates/{name}
		/// </summary>
		/// <param name="name">The name of the job template.</param>
		/// <returns>Success</returns>
		public async Task<GetJobTemplateResponse> GetJobTemplateAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobTemplates/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify one of your existing job templates.
		/// UpdateJobTemplate /2017-08-29/jobTemplates/{name}
		/// </summary>
		/// <param name="name">The name of the job template you are modifying</param>
		/// <returns>Success</returns>
		public async Task<UpdateJobTemplateResponse> UpdateJobTemplateAsync(string name, UpdateJobTemplateBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/jobTemplates/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateJobTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently delete a preset you have created.
		/// DeletePreset /2017-08-29/presets/{name}
		/// </summary>
		/// <param name="name">The name of the preset to be deleted.</param>
		public async Task DeletePresetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/presets/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the JSON for a specific preset.
		/// GetPreset /2017-08-29/presets/{name}
		/// </summary>
		/// <param name="name">The name of the preset.</param>
		/// <returns>Success</returns>
		public async Task<GetPresetResponse> GetPresetAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/presets/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPresetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify one of your existing presets.
		/// UpdatePreset /2017-08-29/presets/{name}
		/// </summary>
		/// <param name="name">The name of the preset you are modifying.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePresetResponse> UpdatePresetAsync(string name, UpdatePresetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/presets/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdatePresetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently delete a queue you have created.
		/// DeleteQueue /2017-08-29/queues/{name}
		/// </summary>
		/// <param name="name">The name of the queue that you want to delete.</param>
		public async Task DeleteQueueAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/queues/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the JSON for a specific queue.
		/// GetQueue /2017-08-29/queues/{name}
		/// </summary>
		/// <param name="name">The name of the queue that you want information about.</param>
		/// <returns>Success</returns>
		public async Task<GetQueueResponse> GetQueueAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/queues/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetQueueResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify one of your existing queues.
		/// UpdateQueue /2017-08-29/queues/{name}
		/// </summary>
		/// <param name="name">The name of the queue that you are modifying.</param>
		/// <returns>Success</returns>
		public async Task<UpdateQueueResponse> UpdateQueueAsync(string name, UpdateQueueBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/queues/"+ (name==null? "" : Uri.EscapeDataString(name));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateQueueResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send an request with an empty body to the regional API endpoint to get your account API endpoint.
		/// DescribeEndpoints /2017-08-29/endpoints
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointsResponse> DescribeEndpointsAsync(string MaxResults, string NextToken, DescribeEndpointsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/endpoints?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes an association between the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate and an AWS Elemental MediaConvert resource.
		/// DisassociateCertificate /2017-08-29/certificates/{arn}
		/// </summary>
		/// <param name="arn">The ARN of the ACM certificate that you want to disassociate from your MediaConvert resource.</param>
		public async Task DisassociateCertificateAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/certificates/"+ (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the tags for a MediaConvert resource.
		/// ListTagsForResource /2017-08-29/tags/{arn}
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the resource that you want to list tags for. To get the ARN, send a GET request with the resource name.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/tags/"+ (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove tags from a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
		/// UntagResource /2017-08-29/tags/{arn}
		/// </summary>
		/// <param name="arn">The Amazon Resource Name (ARN) of the resource that you want to remove tags from. To get the ARN, send a GET request with the resource name.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string arn, UntagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/tags/"+ (arn==null? "" : Uri.EscapeDataString(arn));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add tags to a MediaConvert queue, preset, or job template. For information about tagging, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/tagging-resources.html
		/// TagResource /2017-08-29/tags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-08-29/tags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateCertificateBody
	{
		
		/// <summary>
		/// The ARN of the ACM certificate that you want to associate with your MediaConvert resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobBody
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccelerationSettings { get; set; }
		
		/// <summary>
		/// The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobBodyBillingTagsSource BillingTagsSource { get; set; }
		
		/// <summary>
		/// Optional. Idempotency token for CreateJob operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		/// <summary>
		/// Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JobTemplate { get; set; }
		
		/// <summary>
		/// Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// JobSettings contains all the transcode settings for a job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Settings { get; set; }
		
		/// <summary>
		/// Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobBodySimulateReservedQueue SimulateReservedQueue { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobBodyStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		/// <summary>
		/// Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobBodyBillingTagsSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB_TEMPLATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOB = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobBodySimulateReservedQueue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobBodyStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobTemplateBody
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccelerationSettings { get; set; }
		
		/// <summary>
		/// Optional. A category for the job template you are creating
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// Optional. A description of the job template you are creating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		/// <summary>
		/// The name of the job template you are creating.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Settings { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateJobTemplateBodyStatusUpdateInterval StatusUpdateInterval { get; set; }
		
		/// <summary>
		/// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobTemplateBodyStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePresetBody
	{
		
		/// <summary>
		/// Optional. A category for the preset you are creating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// Optional. A description of the preset you are creating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the preset you are creating.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings for preset
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Settings { get; set; }
		
		/// <summary>
		/// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateQueueBody
	{
		
		/// <summary>
		/// Optional. A description of the queue that you are creating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the queue that you are creating.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateQueueBodyPricingPlan PricingPlan { get; set; }
		
		/// <summary>
		/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReservationPlanSettings { get; set; }
		
		/// <summary>
		/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateQueueBodyStatus Status { get; set; }
		
		/// <summary>
		/// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateQueueBodyPricingPlan
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_DEMAND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateQueueBodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateJobTemplateBody
	{
		
		/// <summary>
		/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccelerationSettings { get; set; }
		
		/// <summary>
		/// The new category for the job template, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// The new description for the job template, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Optional list of hop destinations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HopDestination[] HopDestinations { get; set; }
		
		/// <summary>
		/// Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
		/// Minimum: -50
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-50, 50)]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// The new queue for the job template, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
		
		/// <summary>
		/// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Settings { get; set; }
		
		/// <summary>
		/// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateJobTemplateBodyStatusUpdateInterval StatusUpdateInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateJobTemplateBodyStatusUpdateInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_12 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_15 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_20 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_30 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_60 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_120 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_180 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_240 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_300 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_360 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_420 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_480 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_540 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS_600 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdatePresetBody
	{
		
		/// <summary>
		/// The new category for the preset, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		/// <summary>
		/// The new description for the preset, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Settings for preset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateQueueBody
	{
		
		/// <summary>
		/// The new description for the queue, if you are changing it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReservationPlanSettings { get; set; }
		
		/// <summary>
		/// Queues can be ACTIVE or PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause a queue continue to run until they finish or result in an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateQueueBodyStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateQueueBodyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeEndpointsBody
	{
		
		/// <summary>
		/// Optional. Max number of endpoints, up to twenty, that will be returned at one time.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeEndpointsBodyMode Mode { get; set; }
		
		/// <summary>
		/// Use this string, provided with the response to a previous request, to request the next batch of endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeEndpointsBodyMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_ONLY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceBody
	{
		
		/// <summary>
		/// The keys of the tags that you want to remove from the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the resource that you want to tag. To get the ARN, send a GET request with the resource name.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
