//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSnapshotBlockResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BlockData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListChangedBlocksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChangedBlock[] ChangedBlocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockSize { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[A-Za-z0-9+/=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSnapshotBlocksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VolumeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockSize { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[A-Za-z0-9+/=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A block of data in an Amazon Elastic Block Store snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Block
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockIndex { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[A-Za-z0-9+/=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string BlockToken { get; set; }
	}
	
	/// <summary>
	/// A block of data in an Amazon Elastic Block Store snapshot that is different from another snapshot of the same volume/snapshot lineage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChangedBlock
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BlockIndex { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[A-Za-z0-9+/=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string FirstBlockToken { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[A-Za-z0-9+/=]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string SecondBlockToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChecksumAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 0,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns the data in a block in an Amazon Elastic Block Store snapshot.
		/// GetSnapshotBlock /snapshots/{snapshotId}/blocks/{blockIndex}#blockToken
		/// </summary>
		/// <param name="snapshotId">The ID of the snapshot containing the block from which to get data.</param>
		/// <param name="blockIndex"><p>The block index of the block from which to get data.</p> <p>Obtain the <code>BlockIndex</code> by running the <code>ListChangedBlocks</code> or <code>ListSnapshotBlocks</code> operations.</p></param>
		/// <param name="blockToken"><p>The block token of the block from which to get data.</p> <p>Obtain the <code>BlockToken</code> by running the <code>ListChangedBlocks</code> or <code>ListSnapshotBlocks</code> operations.</p></param>
		/// <returns>Success</returns>
		public async Task<GetSnapshotBlockResponse> GetSnapshotBlockAsync(string snapshotId, int blockIndex, string blockToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/snapshots/"+ (snapshotId==null? "" : Uri.EscapeDataString(snapshotId))+"/blocks/"+blockIndex+"#blockToken&blockToken=" + (blockToken==null? "" : Uri.EscapeDataString(blockToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSnapshotBlockResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the block indexes and block tokens for blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.
		/// ListChangedBlocks /snapshots/{secondSnapshotId}/changedblocks
		/// </summary>
		/// <param name="firstSnapshotId"><p>The ID of the first snapshot to use for the comparison.</p> <important> <p>The <code>FirstSnapshotID</code> parameter must be specified with a <code>SecondSnapshotId</code> parameter; otherwise, an error occurs.</p> </important></param>
		/// <param name="secondSnapshotId"><p>The ID of the second snapshot to use for the comparison.</p> <important> <p>The <code>SecondSnapshotId</code> parameter must be specified with a <code>FirstSnapshotID</code> parameter; otherwise, an error occurs.</p> </important></param>
		/// <param name="pageToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The number of results to return.</param>
		/// <param name="startingBlockIndex"><p>The block index from which the comparison should start.</p> <p>The list in the response will start from this block index or the next valid block index in the snapshots.</p></param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChangedBlocksResponse> ListChangedBlocksAsync(string firstSnapshotId, string secondSnapshotId, string pageToken, int maxResults, int startingBlockIndex, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/snapshots/"+ (secondSnapshotId==null? "" : Uri.EscapeDataString(secondSnapshotId))+"/changedblocks?firstSnapshotId=" + (firstSnapshotId==null? "" : Uri.EscapeDataString(firstSnapshotId))+"&pageToken=" + (pageToken==null? "" : Uri.EscapeDataString(pageToken))+"&maxResults="+maxResults+"&startingBlockIndex="+startingBlockIndex+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListChangedBlocksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the block indexes and block tokens for blocks in an Amazon Elastic Block Store snapshot.
		/// ListSnapshotBlocks /snapshots/{snapshotId}/blocks
		/// </summary>
		/// <param name="snapshotId">The ID of the snapshot from which to get block indexes and block tokens.</param>
		/// <param name="pageToken">The token to request the next page of results.</param>
		/// <param name="maxResults">The number of results to return.</param>
		/// <param name="startingBlockIndex">The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSnapshotBlocksResponse> ListSnapshotBlocksAsync(string snapshotId, string pageToken, int maxResults, int startingBlockIndex, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/snapshots/"+ (snapshotId==null? "" : Uri.EscapeDataString(snapshotId))+"/blocks&pageToken=" + (pageToken==null? "" : Uri.EscapeDataString(pageToken))+"&maxResults="+maxResults+"&startingBlockIndex="+startingBlockIndex+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSnapshotBlocksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
