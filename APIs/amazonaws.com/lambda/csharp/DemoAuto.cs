//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddLayerVersionPermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Statement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddPermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Statement { get; set; }
	}
	
	/// <summary>
	/// Provides configuration information about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AliasConfiguration
	{
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AliasArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FunctionVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AliasRoutingConfiguration RoutingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A mapping between an AWS resource and an AWS Lambda function. See <a>CreateEventSourceMapping</a> for details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventSourceMappingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UUID { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 300)]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EventSourceArn { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastProcessingResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateTransitionReason { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 604800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 604800)]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BisectBatchOnFunctionError { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
	}
	
	/// <summary>
	/// A destination for events that were processed successfully.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OnSuccess
	{
		
		/// <summary>
		/// Max length: 350
		/// Min length: 0
		/// Pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength=0)]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// A destination for events that failed processing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OnFailure
	{
		
		/// <summary>
		/// Max length: 350
		/// Min length: 0
		/// Pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength=0)]
		public string Destination { get; set; }
	}
	
	/// <summary>
	/// Details about a function's configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FunctionConfiguration
	{
		
		/// <summary>
		/// Max length: 170
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(170, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationRuntime Runtime { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [^\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Handler { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CodeSize { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Minimum: 128
		/// Maximum: 3008
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(128, 3008)]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CodeSha256 { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string Version { get; set; }
		
		/// <summary>
		/// The VPC security groups and subnets that are attached to a Lambda function.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfigResponse VpcConfig { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		/// <summary>
		/// The results of an operation to update or read environment variables. If the operation is successful, the response contains the environment variables. If it failed, the response contains details about the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentResponse Environment { get; set; }
		
		/// <summary>
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyArn { get; set; }
		
		/// <summary>
		/// The function's AWS X-Ray tracing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TracingConfigResponse TracingConfig { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MasterArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Layer[] Layers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationStateReasonCode StateReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationLastUpdateStatus LastUpdateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastUpdateStatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfigurationLastUpdateStatusReasonCode LastUpdateStatusReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionConfigurationRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionConfigurationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionConfigurationStateReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Idle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restoring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EniLimitExceeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientRolePermissions = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubnetOutOfIPAddresses = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSubnet = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSecurityGroup = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionConfigurationLastUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionConfigurationLastUpdateStatusReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EniLimitExceeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientRolePermissions = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidConfiguration = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubnetOutOfIPAddresses = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSubnet = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSecurityGroup = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TracingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PassThrough = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountSettingsResponse
	{
		
		/// <summary>
		/// Limits that are related to concurrency and storage. All file and storage sizes are in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountLimit AccountLimit { get; set; }
		
		/// <summary>
		/// The number of functions and amount of storage in use.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountUsage AccountUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFunctionResponse
	{
		
		/// <summary>
		/// Details about a function's configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Details about a function's deployment package.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FunctionCodeLocation Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Concurrency Concurrency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetFunctionConcurrencyResponse
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ReservedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FunctionEventInvokeConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 21600)]
		public System.Nullable<System.Int32> MaximumEventAgeInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLayerVersionResponse
	{
		
		/// <summary>
		/// Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionContentOutput Content { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerArn { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerVersionArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Runtime[] CompatibleRuntimes { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string LicenseInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLayerVersionPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetProvisionedConcurrencyConfigResponse
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RequestedProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailableProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AllocatedProvisionedConcurrentExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetProvisionedConcurrencyConfigResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetProvisionedConcurrencyConfigResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvocationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
	}
	
	/// <summary>
	/// A success response (<code>202 Accepted</code>) indicates that the request is queued for invocation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvokeAsyncResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListAliasesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AliasConfiguration[] Aliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListEventSourceMappingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventSourceMappingConfiguration[] EventSourceMappings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFunctionEventInvokeConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionEventInvokeConfig[] FunctionEventInvokeConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	/// <summary>
	/// A list of Lambda functions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListFunctionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfiguration[] Functions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListLayerVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionsListItem[] LayerVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListLayersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LayersListItem[] Layers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProvisionedConcurrencyConfigsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedConcurrencyConfigListItem[] ProvisionedConcurrencyConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVersionsByFunctionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FunctionConfiguration[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishLayerVersionResponse
	{
		
		/// <summary>
		/// Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionContentOutput Content { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerArn { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerVersionArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Runtime[] CompatibleRuntimes { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string LicenseInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Runtime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Concurrency
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ReservedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutProvisionedConcurrencyConfigResponse
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RequestedProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailableProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AllocatedProvisionedConcurrentExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutProvisionedConcurrencyConfigResponseStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutProvisionedConcurrencyConfigResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// Limits that are related to concurrency and storage. All file and storage sizes are in bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountLimit
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCodeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CodeSizeUnzipped { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CodeSizeZipped { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> UnreservedConcurrentExecutions { get; set; }
	}
	
	/// <summary>
	/// The number of functions and amount of storage in use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountUsage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalCodeSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FunctionCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddLayerVersionPermissionRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string StatementId { get; set; }
		
		/// <summary>
		/// Pattern: lambda:GetLayerVersion
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// Pattern: o-[a-z0-9]{10,32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddPermissionRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string StatementId { get; set; }
		
		/// <summary>
		/// Pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		/// <summary>
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccount { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [a-zA-Z0-9._\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string EventSourceToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AliasRoutingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalVersionWeights AdditionalVersionWeights { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAliasRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FunctionVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AliasRoutingConfiguration RoutingConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EventSourcePosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_TIMESTAMP = 2,
	}
	
	/// <summary>
	/// A configuration object that specifies the destination of an event after Lambda processes it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DestinationConfig
	{
		
		/// <summary>
		/// A destination for events that were processed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnSuccess OnSuccess { get; set; }
		
		/// <summary>
		/// A destination for events that failed processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OnFailure OnFailure { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSourceMappingRequest
	{
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventSourceArn { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 300)]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateEventSourceMappingRequestStartingPosition StartingPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartingPositionTimestamp { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 604800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 604800)]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BisectBatchOnFunctionError { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateEventSourceMappingRequestStartingPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_TIMESTAMP = 2,
	}
	
	/// <summary>
	/// The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FunctionCode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ZipFile { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3Key { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConfig
	{
		
		/// <summary>
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public SubnetId[] SubnetIds { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public SecurityGroupId[] SecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeadLetterConfig
	{
		
		/// <summary>
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TargetArn { get; set; }
	}
	
	/// <summary>
	/// A function's environment variable settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Environment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables Variables { get; set; }
	}
	
	/// <summary>
	/// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TracingConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TracingConfigMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TracingConfigMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PassThrough = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFunctionRequest
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateFunctionRequestRuntime Runtime { get; set; }
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [^\s]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Handler { get; set; }
		
		/// <summary>
		/// The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FunctionCode Code { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Minimum: 128
		/// Maximum: 3008
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(128, 3008)]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Publish { get; set; }
		
		/// <summary>
		/// The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		/// <summary>
		/// A function's environment variable settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Environment Environment { get; set; }
		
		/// <summary>
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyArn { get; set; }
		
		/// <summary>
		/// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TracingConfig TracingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionArn[] Layers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateFunctionRequestRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	/// <summary>
	/// Error messages for environment variables that couldn't be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The results of an operation to update or read environment variables. If the operation is successful, the response contains the environment variables. If it failed, the response contains details about the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariables Variables { get; set; }
		
		/// <summary>
		/// Error messages for environment variables that couldn't be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentError Error { get; set; }
	}
	
	/// <summary>
	/// Details about a function's deployment package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FunctionCodeLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RepositoryType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// The VPC security groups and subnets that are attached to a Lambda function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConfigResponse
	{
		
		/// <summary>
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public SubnetId[] SubnetIds { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public SecurityGroupId[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// The function's AWS X-Ray tracing configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TracingConfigResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TracingConfigResponseMode Mode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TracingConfigResponseMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PassThrough = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum State
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StateReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Idle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Creating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Restoring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EniLimitExceeded = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientRolePermissions = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidConfiguration = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubnetOutOfIPAddresses = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSubnet = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSecurityGroup = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LastUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LastUpdateStatusReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EniLimitExceeded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InsufficientRolePermissions = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidConfiguration = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InternalError = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SubnetOutOfIPAddresses = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSubnet = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InvalidSecurityGroup = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FunctionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
	}
	
	/// <summary>
	/// Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LayerVersionContentOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CodeSha256 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CodeSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProvisionedConcurrencyStatusEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InvocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestResponse = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DryRun = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tail = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvocationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvokeAsyncRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvokeArgs { get; set; }
	}
	
	/// <summary>
	/// An <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Layer
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CodeSize { get; set; }
	}
	
	/// <summary>
	/// A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LayerVersionContentInput
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3Key { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3ObjectVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ZipFile { get; set; }
	}
	
	/// <summary>
	/// Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LayerVersionsListItem
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+:[0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Version { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Runtime[] CompatibleRuntimes { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string LicenseInfo { get; set; }
	}
	
	/// <summary>
	/// Details about an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LayersListItem
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+)|[a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerName { get; set; }
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: arn:[a-zA-Z0-9-]+:lambda:[a-zA-Z0-9-]+:\d{12}:layer:[a-zA-Z0-9-_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string LayerArn { get; set; }
		
		/// <summary>
		/// Details about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionsListItem LatestMatchingVersion { get; set; }
	}
	
	/// <summary>
	/// Details about the provisioned concurrency configuration for a function alias or version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProvisionedConcurrencyConfigListItem
	{
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}(-gov)?-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FunctionArn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RequestedProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AvailableProvisionedConcurrentExecutions { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AllocatedProvisionedConcurrentExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedConcurrencyConfigListItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProvisionedConcurrencyConfigListItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishLayerVersionRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionContentInput Content { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Runtime[] CompatibleRuntimes { get; set; }
		
		/// <summary>
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string LicenseInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishVersionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CodeSha256 { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutFunctionConcurrencyRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int ReservedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutFunctionEventInvokeConfigRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 21600)]
		public System.Nullable<System.Int32> MaximumEventAgeInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutProvisionedConcurrencyConfigRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int ProvisionedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAliasRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FunctionVersion { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AliasRoutingConfiguration RoutingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateEventSourceMappingRequest
	{
		
		/// <summary>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 300)]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 604800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 604800)]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BisectBatchOnFunctionError { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionCodeRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ZipFile { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3Key { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3ObjectVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Publish { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionConfigurationRequest
	{
		
		/// <summary>
		/// Pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Pattern: [^\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Handler { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// Minimum: 128
		/// Maximum: 3008
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(128, 3008)]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		/// <summary>
		/// The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// A function's environment variable settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Environment Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateFunctionConfigurationRequestRuntime Runtime { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeadLetterConfig DeadLetterConfig { get; set; }
		
		/// <summary>
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyArn { get; set; }
		
		/// <summary>
		/// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TracingConfig TracingConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionArn[] Layers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFunctionConfigurationRequestRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionEventInvokeConfigRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 21600)]
		public System.Nullable<System.Int32> MaximumEventAgeInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationConfig DestinationConfig { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds permissions to the resource-based policy of a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all AWS accounts, or all accounts in an organization.</p> <p>To revoke permission, call <a>RemoveLayerVersionPermission</a> with the statement ID that you specified when you added it.</p>
		/// AddLayerVersionPermission /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="VersionNumber">The version number.</param>
		/// <param name="RevisionId">Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</param>
		public async Task AddLayerVersionPermissionAsync(string LayerName, int VersionNumber, string RevisionId, AddLayerVersionPermissionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions/"+VersionNumber+"/policy&RevisionId=" + (RevisionId==null? "" : Uri.EscapeDataString(RevisionId));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the permission policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.
		/// GetLayerVersionPolicy /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="VersionNumber">The version number.</param>
		/// <returns>Success</returns>
		public async Task<GetLayerVersionPolicyResponse> GetLayerVersionPolicyAsync(string LayerName, int VersionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions/"+VersionNumber+"/policy";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLayerVersionPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Grants an AWS service or another account permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function.</p> <p>To grant permission to another account, specify the account ID as the <code>Principal</code>. For AWS services, the principal is a domain-style identifier defined by the service, like <code>s3.amazonaws.com</code> or <code>sns.amazonaws.com</code>. For AWS services, you can also specify the ARN of the associated resource as the <code>SourceArn</code>. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function.</p> <p>This action adds a statement to a resource-based permissions policy for the function. For more information about function policies, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">Lambda Function Policies</a>. </p>
		/// AddPermission /2015-03-31/functions/{FunctionName}/policy
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version or alias to add permissions to a published version of the function.</param>
		public async Task AddPermissionAsync(string FunctionName, string Qualifier, AddPermissionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/policy&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the <a href="https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html">resource-based IAM policy</a> for a function, version, or alias.
		/// GetPolicy /2015-03-31/functions/{FunctionName}/policy
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version or alias to get the policy for that resource.</param>
		/// <returns>Success</returns>
		public async Task<GetPolicyResponse> GetPolicyAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/policy&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a> for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version.</p> <p>You can also map an alias to split invocation requests between two versions. Use the <code>RoutingConfig</code> parameter to specify a second version and the percentage of invocation requests that it receives.</p>
		/// CreateAlias /2015-03-31/functions/{FunctionName}/aliases
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		public async Task CreateAliasAsync(string FunctionName, CreateAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/aliases";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">aliases</a> for a Lambda function.
		/// ListAliases /2015-03-31/functions/{FunctionName}/aliases
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="FunctionVersion">Specify a function version to only list aliases that invoke that version.</param>
		/// <param name="Marker">Specify the pagination token that's returned by a previous request to retrieve the next page of results.</param>
		/// <param name="MaxItems">Limit the number of aliases returned.</param>
		/// <returns>Success</returns>
		public async Task<ListAliasesResponse> ListAliasesAsync(string FunctionName, string FunctionVersion, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/aliases&FunctionVersion=" + (FunctionVersion==null? "" : Uri.EscapeDataString(FunctionVersion))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListAliasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a mapping between an event source and an AWS Lambda function. Lambda reads items from the event source and triggers the function.</p> <p>For details about each event source type, see the following topics.</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html">Using AWS Lambda with Amazon DynamoDB</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html">Using AWS Lambda with Amazon Kinesis</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html">Using AWS Lambda with Amazon SQS</a> </p> </li> </ul> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age.</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>
		/// CreateEventSourceMapping /2015-03-31/event-source-mappings/
		/// </summary>
		public async Task CreateEventSourceMappingAsync(CreateEventSourceMappingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/event-source-mappings/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists event source mappings. Specify an <code>EventSourceArn</code> to only show event source mappings for a single event source.
		/// ListEventSourceMappings /2015-03-31/event-source-mappings/
		/// </summary>
		/// <param name="EventSourceArn"><p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> </ul></param>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p></param>
		/// <param name="Marker">A pagination token returned by a previous call.</param>
		/// <param name="MaxItems">The maximum number of event source mappings to return.</param>
		/// <returns>Success</returns>
		public async Task<ListEventSourceMappingsResponse> ListEventSourceMappingsAsync(string EventSourceArn, string FunctionName, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/event-source-mappings/?EventSourceArn=" + (EventSourceArn==null? "" : Uri.EscapeDataString(EventSourceArn))+"&FunctionName=" + (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListEventSourceMappingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Lambda function. To create a function, you need a <a href="https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html">deployment package</a> and an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role">execution role</a>. The deployment package contains your function code. The execution role grants the function permission to use AWS services, such as Amazon CloudWatch Logs for log streaming and AWS X-Ray for request tracing.</p> <p>When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The <code>State</code>, <code>StateReason</code>, and <code>StateReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the function is ready to invoke. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function States</a>.</p> <p>A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the <code>Publish</code> parameter to create version <code>1</code> of your function from its initial configuration.</p> <p>The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with <a>UpdateFunctionConfiguration</a>. Function-level settings apply to both the unpublished and published versions of the function, and include tags (<a>TagResource</a>) and per-function concurrency limits (<a>PutFunctionConcurrency</a>).</p> <p>If another account or an AWS service invokes your function, use <a>AddPermission</a> to grant permission by creating a resource-based IAM policy. You can grant permissions at the function level, on a version, or on an alias.</p> <p>To invoke your function directly, use <a>Invoke</a>. To invoke your function in response to events in other AWS services, create an event source mapping (<a>CreateEventSourceMapping</a>), or configure a function trigger in the other service. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-invocation.html">Invoking Functions</a>.</p>
		/// CreateFunction /2015-03-31/functions
		/// </summary>
		public async Task CreateFunctionAsync(CreateFunctionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
		/// DeleteAlias /2015-03-31/functions/{FunctionName}/aliases/{Name}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Name">The name of the alias.</param>
		public async Task DeleteAliasAsync(string FunctionName, string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/aliases/"+ (Name==null? "" : Uri.EscapeDataString(Name));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details about a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
		/// GetAlias /2015-03-31/functions/{FunctionName}/aliases/{Name}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Name">The name of the alias.</param>
		/// <returns>Success</returns>
		public async Task<AliasConfiguration> GetAliasAsync(string FunctionName, string Name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/aliases/"+ (Name==null? "" : Uri.EscapeDataString(Name));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AliasConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of a Lambda function <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">alias</a>.
		/// UpdateAlias /2015-03-31/functions/{FunctionName}/aliases/{Name}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Name">The name of the alias.</param>
		/// <returns>Success</returns>
		public async Task<AliasConfiguration> UpdateAliasAsync(string FunctionName, string Name, UpdateAliasBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/aliases/"+ (Name==null? "" : Uri.EscapeDataString(Name));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AliasConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an <a href="https://docs.aws.amazon.com/lambda/latest/dg/intro-invocation-modes.html">event source mapping</a>. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.</p> <p>When you delete an event source mapping, it enters a <code>Deleting</code> state and might not be completely deleted for several seconds.</p>
		/// DeleteEventSourceMapping /2015-03-31/event-source-mappings/{UUID}
		/// </summary>
		/// <param name="UUID">The identifier of the event source mapping.</param>
		public async Task DeleteEventSourceMappingAsync(string UUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/event-source-mappings/"+ (UUID==null? "" : Uri.EscapeDataString(UUID));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details about an event source mapping. You can get the identifier of a mapping from the output of <a>ListEventSourceMappings</a>.
		/// GetEventSourceMapping /2015-03-31/event-source-mappings/{UUID}
		/// </summary>
		/// <param name="UUID">The identifier of the event source mapping.</param>
		/// <returns>Success</returns>
		public async Task<EventSourceMappingConfiguration> GetEventSourceMappingAsync(string UUID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/event-source-mappings/"+ (UUID==null? "" : Uri.EscapeDataString(UUID));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EventSourceMappingConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates an event source mapping. You can change the function that AWS Lambda invokes, or pause invocation and resume later from the same location.</p> <p>The following error handling options are only available for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> - If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> - Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> - Discard records older than the specified age.</p> </li> <li> <p> <code>MaximumRetryAttempts</code> - Discard records after the specified number of retries.</p> </li> <li> <p> <code>ParallelizationFactor</code> - Process multiple batches from each shard concurrently.</p> </li> </ul>
		/// UpdateEventSourceMapping /2015-03-31/event-source-mappings/{UUID}
		/// </summary>
		/// <param name="UUID">The identifier of the event source mapping.</param>
		public async Task UpdateEventSourceMappingAsync(string UUID, UpdateEventSourceMappingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/event-source-mappings/"+ (UUID==null? "" : Uri.EscapeDataString(UUID));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a Lambda function. To delete a specific function version, use the <code>Qualifier</code> parameter. Otherwise, all versions and aliases are deleted.</p> <p>To delete Lambda event source mappings that invoke a function, use <a>DeleteEventSourceMapping</a>. For AWS services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.</p>
		/// DeleteFunction /2015-03-31/functions/{FunctionName}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function or version.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:1</code> (with version).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version to delete. You can't delete a version that's referenced by an alias.</param>
		public async Task DeleteFunctionAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.
		/// GetFunction /2015-03-31/functions/{FunctionName}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version or alias to get details about a published version of the function.</param>
		/// <returns>Success</returns>
		public async Task<GetFunctionResponse> GetFunctionAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFunctionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a concurrent execution limit from a function.
		/// DeleteFunctionConcurrency /2017-10-31/functions/{FunctionName}/concurrency
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		public async Task DeleteFunctionConcurrencyAsync(string FunctionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-10-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/concurrency";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level.</p> <p>Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use <a>GetFunction</a> to see the current setting for a function.</p> <p>Use <a>GetAccountSettings</a> to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html">Managing Concurrency</a>.</p>
		/// PutFunctionConcurrency /2017-10-31/functions/{FunctionName}/concurrency
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <returns>Success</returns>
		public async Task<Concurrency> PutFunctionConcurrencyAsync(string FunctionName, PutFunctionConcurrencyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-10-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/concurrency";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<Concurrency>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
		/// DeleteFunctionEventInvokeConfig /2019-09-25/functions/{FunctionName}/event-invoke-config
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">A version number or alias name.</param>
		public async Task DeleteFunctionEventInvokeConfigAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-25/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/event-invoke-config&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
		/// GetFunctionEventInvokeConfig /2019-09-25/functions/{FunctionName}/event-invoke-config
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">A version number or alias name.</param>
		/// <returns>Success</returns>
		public async Task<FunctionEventInvokeConfig> GetFunctionEventInvokeConfigAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-25/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/event-invoke-config&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionEventInvokeConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Configures options for <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a> on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use <a>PutFunctionEventInvokeConfig</a>.</p> <p>By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with <a>UpdateFunctionConfiguration</a>.</p> <p>To send an invocation record to a queue, topic, function, or event bus, specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations">destination</a>. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.</p>
		/// PutFunctionEventInvokeConfig /2019-09-25/functions/{FunctionName}/event-invoke-config
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">A version number or alias name.</param>
		/// <returns>Success</returns>
		public async Task<FunctionEventInvokeConfig> PutFunctionEventInvokeConfigAsync(string FunctionName, string Qualifier, PutFunctionEventInvokeConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-25/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/event-invoke-config&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionEventInvokeConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the configuration for asynchronous invocation for a function, version, or alias.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
		/// UpdateFunctionEventInvokeConfig /2019-09-25/functions/{FunctionName}/event-invoke-config
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">A version number or alias name.</param>
		/// <returns>Success</returns>
		public async Task<FunctionEventInvokeConfig> UpdateFunctionEventInvokeConfigAsync(string FunctionName, string Qualifier, UpdateFunctionEventInvokeConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-25/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/event-invoke-config&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionEventInvokeConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.
		/// DeleteLayerVersion /2018-10-31/layers/{LayerName}/versions/{VersionNumber}
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="VersionNumber">The version number.</param>
		public async Task DeleteLayerVersionAsync(string LayerName, int VersionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions/"+VersionNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.
		/// GetLayerVersion /2018-10-31/layers/{LayerName}/versions/{VersionNumber}
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="VersionNumber">The version number.</param>
		/// <returns>Success</returns>
		public async Task<GetLayerVersionResponse> GetLayerVersionAsync(string LayerName, int VersionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions/"+VersionNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLayerVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the provisioned concurrency configuration for a function.
		/// DeleteProvisionedConcurrencyConfig /2019-09-30/functions/{FunctionName}/provisioned-concurrency#Qualifier
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">The version number or alias name.</param>
		public async Task DeleteProvisionedConcurrencyConfigAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-30/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/provisioned-concurrency#Qualifier&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the provisioned concurrency configuration for a function's alias or version.
		/// GetProvisionedConcurrencyConfig /2019-09-30/functions/{FunctionName}/provisioned-concurrency#Qualifier
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">The version number or alias name.</param>
		/// <returns>Success</returns>
		public async Task<GetProvisionedConcurrencyConfigResponse> GetProvisionedConcurrencyConfigAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-30/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/provisioned-concurrency#Qualifier&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetProvisionedConcurrencyConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a provisioned concurrency configuration to a function's alias or version.
		/// PutProvisionedConcurrencyConfig /2019-09-30/functions/{FunctionName}/provisioned-concurrency#Qualifier
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">The version number or alias name.</param>
		public async Task PutProvisionedConcurrencyConfigAsync(string FunctionName, string Qualifier, PutProvisionedConcurrencyConfigBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-30/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/provisioned-concurrency#Qualifier&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves details about your account's <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limits</a> and usage in an AWS Region.
		/// GetAccountSettings /2016-08-19/account-settings/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountSettingsResponse> GetAccountSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2016-08-19/account-settings/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use <a>PutFunctionConcurrency</a>.
		/// GetFunctionConcurrency /2019-09-30/functions/{FunctionName}/concurrency
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <returns>Success</returns>
		public async Task<GetFunctionConcurrencyResponse> GetFunctionConcurrencyAsync(string FunctionName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-30/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/concurrency";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetFunctionConcurrencyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use <a>UpdateFunctionConfiguration</a>.</p> <p>To get all of a function's details, including function-level settings, use <a>GetFunction</a>.</p>
		/// GetFunctionConfiguration /2015-03-31/functions/{FunctionName}/configuration
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version or alias to get details about a published version of the function.</param>
		/// <returns>Success</returns>
		public async Task<FunctionConfiguration> GetFunctionConfigurationAsync(string FunctionName, string Qualifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/configuration&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Modify the version-specific settings of a Lambda function.</p> <p>When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The <code>LastUpdateStatus</code>, <code>LastUpdateStatusReason</code>, and <code>LastUpdateStatusReasonCode</code> fields in the response from <a>GetFunctionConfiguration</a> indicate when the update is complete and the function is processing events with the new configuration. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/functions-states.html">Function States</a>.</p> <p>These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version.</p> <p>To configure function concurrency, use <a>PutFunctionConcurrency</a>. To grant invoke permissions to an account or AWS service, use <a>AddPermission</a>.</p>
		/// UpdateFunctionConfiguration /2015-03-31/functions/{FunctionName}/configuration
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <returns>Success</returns>
		public async Task<FunctionConfiguration> UpdateFunctionConfigurationAsync(string FunctionName, UpdateFunctionConfigurationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/configuration";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>, with a link to download the layer archive that's valid for 10 minutes.
		/// GetLayerVersionByArn /2018-10-31/layers#find=LayerVersion&Arn
		/// </summary>
		/// <param name="Arn">The ARN of the layer version.</param>
		/// <returns>Success</returns>
		public async Task<GetLayerVersionResponse> GetLayerVersionByArnAsync(string Arn, string find, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers#find=LayerVersion&Arn?Arn=" + (Arn==null? "" : Uri.EscapeDataString(Arn))+"&find=" + (find==null? "" : Uri.EscapeDataString(find));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLayerVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. To invoke a function asynchronously, set <code>InvocationType</code> to <code>Event</code>.</p> <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-sync.html">synchronous invocation</a>, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions.html">execution log</a> and <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html">trace</a>.</p> <p>When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/retries-on-errors.html">Retry Behavior</a>.</p> <p>For <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html">asynchronous invocation</a>, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a>.</p> <p>The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, <a href="https://docs.aws.amazon.com/lambda/latest/dg/limits.html">limit errors</a>, or issues with your function's code and configuration. For example, Lambda returns <code>TooManyRequestsException</code> if executing the function would cause you to exceed a concurrency limit at either the account level (<code>ConcurrentInvocationLimitExceeded</code>) or function level (<code>ReservedFunctionConcurrentInvocationLimitExceeded</code>).</p> <p>For functions with a long timeout, your client might be disconnected during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings.</p> <p>This operation requires permission for the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_awslambda.html">lambda:InvokeFunction</a> action.</p>
		/// Invoke /2015-03-31/functions/{FunctionName}/invocations
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Qualifier">Specify a version or alias to invoke a published version of the function.</param>
		/// <returns>Success</returns>
		public async Task<InvocationResponse> InvokeAsync(string FunctionName, string Qualifier, InvokeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/invocations&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <important> <p>For asynchronous function invocation, use <a>Invoke</a>.</p> </important> <p>Invokes a function asynchronously.</p>
		/// Invoke /2014-11-13/functions/{FunctionName}/invoke-async/
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		public async Task InvokeAsync(string FunctionName, InvokeAsyncBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2014-11-13/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/invoke-async/";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list of configurations for asynchronous invocation for a function.</p> <p>To configure options for asynchronous invocation, use <a>PutFunctionEventInvokeConfig</a>.</p>
		/// ListFunctionEventInvokeConfigs /2019-09-25/functions/{FunctionName}/event-invoke-config/list
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Marker">Specify the pagination token that's returned by a previous request to retrieve the next page of results.</param>
		/// <param name="MaxItems">The maximum number of configurations to return.</param>
		/// <returns>Success</returns>
		public async Task<ListFunctionEventInvokeConfigsResponse> ListFunctionEventInvokeConfigsAsync(string FunctionName, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-25/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/event-invoke-config/list&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListFunctionEventInvokeConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call.</p> <p>Set <code>FunctionVersion</code> to <code>ALL</code> to include all published versions of each function in addition to the unpublished version. To get more information about a function or version, use <a>GetFunction</a>.</p>
		/// ListFunctions /2015-03-31/functions/
		/// </summary>
		/// <param name="MasterRegion">For Lambda@Edge functions, the AWS Region of the master function. For example, <code>us-east-1</code> filters the list of functions to only include Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set <code>FunctionVersion</code> to <code>ALL</code>.</param>
		/// <param name="FunctionVersion">Set to <code>ALL</code> to include entries for all published versions of each function.</param>
		/// <param name="Marker">Specify the pagination token that's returned by a previous request to retrieve the next page of results.</param>
		/// <param name="MaxItems">The maximum number of functions to return.</param>
		/// <returns>Success</returns>
		public async Task<ListFunctionsResponse> ListFunctionsAsync(string MasterRegion, FunctionVersion FunctionVersion, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/?MasterRegion=" + (MasterRegion==null? "" : Uri.EscapeDataString(MasterRegion))+"&FunctionVersion=" + FunctionVersion+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListFunctionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the versions of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. Versions that have been deleted aren't listed. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only versions that indicate that they're compatible with that runtime.
		/// ListLayerVersions /2018-10-31/layers/{LayerName}/versions
		/// </summary>
		/// <param name="CompatibleRuntime">A runtime identifier. For example, <code>go1.x</code>.</param>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="Marker">A pagination token returned by a previous call.</param>
		/// <param name="MaxItems">The maximum number of versions to return.</param>
		/// <returns>Success</returns>
		public async Task<ListLayerVersionsResponse> ListLayerVersionsAsync(FunctionConfigurationRuntime CompatibleRuntime, string LayerName, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions?CompatibleRuntime=" + CompatibleRuntime+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListLayerVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a> from a ZIP archive. Each time you call <code>PublishLayerVersion</code> with the same layer name, a new version is created.</p> <p>Add layers to your function with <a>CreateFunction</a> or <a>UpdateFunctionConfiguration</a>.</p>
		/// PublishLayerVersion /2018-10-31/layers/{LayerName}/versions
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		public async Task PublishLayerVersionAsync(string LayerName, PublishLayerVersionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layers</a> and shows information about the latest version of each. Specify a <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime identifier</a> to list only layers that indicate that they're compatible with that runtime.
		/// ListLayers /2018-10-31/layers
		/// </summary>
		/// <param name="CompatibleRuntime">A runtime identifier. For example, <code>go1.x</code>.</param>
		/// <param name="Marker">A pagination token returned by a previous call.</param>
		/// <param name="MaxItems">The maximum number of layers to return.</param>
		/// <returns>Success</returns>
		public async Task<ListLayersResponse> ListLayersAsync(FunctionConfigurationRuntime CompatibleRuntime, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers?CompatibleRuntime=" + CompatibleRuntime+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListLayersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of provisioned concurrency configurations for a function.
		/// ListProvisionedConcurrencyConfigs /2019-09-30/functions/{FunctionName}/provisioned-concurrency#List=ALL
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Marker">Specify the pagination token that's returned by a previous request to retrieve the next page of results.</param>
		/// <param name="MaxItems">Specify a number to limit the number of configurations returned.</param>
		/// <returns>Success</returns>
		public async Task<ListProvisionedConcurrencyConfigsResponse> ListProvisionedConcurrencyConfigsAsync(string FunctionName, string Marker, int MaxItems, FunctionVersion List, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2019-09-30/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/provisioned-concurrency#List=ALL&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&List=" + List;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProvisionedConcurrencyConfigsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a>. You can also view tags with <a>GetFunction</a>.
		/// ListTags /2017-03-31/tags/{ARN}
		/// </summary>
		/// <param name="ARN">The function's Amazon Resource Name (ARN).</param>
		/// <returns>Success</returns>
		public async Task<ListTagsResponse> ListTagsAsync(string ARN, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-03-31/tags/"+ (ARN==null? "" : Uri.EscapeDataString(ARN));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to a function.
		/// TagResource /2017-03-31/tags/{ARN}
		/// </summary>
		/// <param name="ARN">The function's Amazon Resource Name (ARN).</param>
		public async Task TagResourceAsync(string ARN, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-03-31/tags/"+ (ARN==null? "" : Uri.EscapeDataString(ARN));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">versions</a>, with the version-specific configuration of each. Lambda returns up to 50 versions per call.
		/// ListVersionsByFunction /2015-03-31/functions/{FunctionName}/versions
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="Marker">Specify the pagination token that's returned by a previous request to retrieve the next page of results.</param>
		/// <param name="MaxItems">The maximum number of versions to return.</param>
		/// <returns>Success</returns>
		public async Task<ListVersionsByFunctionResponse> ListVersionsByFunctionAsync(string FunctionName, string Marker, int MaxItems, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/versions&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVersionsByFunctionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a <a href="https://docs.aws.amazon.com/lambda/latest/dg/versioning-aliases.html">version</a> from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change.</p> <p>AWS Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use <a>UpdateFunctionCode</a> or <a>UpdateFunctionConfiguration</a> to update the function before publishing a version.</p> <p>Clients can invoke versions directly or with an alias. To create an alias, use <a>CreateAlias</a>.</p>
		/// PublishVersion /2015-03-31/functions/{FunctionName}/versions
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		public async Task PublishVersionAsync(string FunctionName, PublishVersionBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/versions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a statement from the permissions policy for a version of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. For more information, see <a>AddLayerVersionPermission</a>.
		/// RemoveLayerVersionPermission /2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}
		/// </summary>
		/// <param name="LayerName">The name or Amazon Resource Name (ARN) of the layer.</param>
		/// <param name="VersionNumber">The version number.</param>
		/// <param name="StatementId">The identifier that was specified when the statement was added.</param>
		/// <param name="RevisionId">Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.</param>
		public async Task RemoveLayerVersionPermissionAsync(string LayerName, int VersionNumber, string StatementId, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2018-10-31/layers/"+ (LayerName==null? "" : Uri.EscapeDataString(LayerName))+"/versions/"+VersionNumber+"/policy/"+ (StatementId==null? "" : Uri.EscapeDataString(StatementId))+"&RevisionId=" + (RevisionId==null? "" : Uri.EscapeDataString(RevisionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Revokes function-use permission from an AWS service or another account. You can get the ID of the statement from the output of <a>GetPolicy</a>.
		/// RemovePermission /2015-03-31/functions/{FunctionName}/policy/{StatementId}
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <param name="StatementId">Statement ID of the permission to remove.</param>
		/// <param name="Qualifier">Specify a version or alias to remove permissions from a published version of the function.</param>
		/// <param name="RevisionId">Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.</param>
		public async Task RemovePermissionAsync(string FunctionName, string StatementId, string Qualifier, string RevisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/policy/"+ (StatementId==null? "" : Uri.EscapeDataString(StatementId))+"&Qualifier=" + (Qualifier==null? "" : Uri.EscapeDataString(Qualifier))+"&RevisionId=" + (RevisionId==null? "" : Uri.EscapeDataString(RevisionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> from a function.
		/// UntagResource /2017-03-31/tags/{ARN}#tagKeys
		/// </summary>
		/// <param name="ARN">The function's Amazon Resource Name (ARN).</param>
		/// <param name="tagKeys">A list of tag keys to remove from the function.</param>
		public async Task UntagResourceAsync(string ARN, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2017-03-31/tags/"+ (ARN==null? "" : Uri.EscapeDataString(ARN))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a Lambda function's code.</p> <p>The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.</p>
		/// UpdateFunctionCode /2015-03-31/functions/{FunctionName}/code
		/// </summary>
		/// <param name="FunctionName"><p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p></param>
		/// <returns>Success</returns>
		public async Task<FunctionConfiguration> UpdateFunctionCodeAsync(string FunctionName, UpdateFunctionCodeBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/2015-03-31/functions/"+ (FunctionName==null? "" : Uri.EscapeDataString(FunctionName))+"/code";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<FunctionConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddLayerVersionPermissionBody
	{
		
		/// <summary>
		/// An identifier that distinguishes the policy from others on the same layer version.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string StatementId { get; set; }
		
		/// <summary>
		/// The API action that grants access to the layer. For example, <code>lambda:GetLayerVersion</code>.
		/// Pattern: lambda:GetLayerVersion
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		/// <summary>
		/// An account ID, or <code>*</code> to grant permission to all AWS accounts.
		/// Pattern: \d{12}|\*|arn:(aws[a-zA-Z-]*):iam::\d{12}:root
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// With the principal set to <code>*</code>, grant permission to all accounts in the specified organization.
		/// Pattern: o-[a-z0-9]{10,32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddPermissionBody
	{
		
		/// <summary>
		/// A statement identifier that differentiates the statement from others in the same policy.
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string StatementId { get; set; }
		
		/// <summary>
		/// The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>.
		/// Pattern: (lambda:[*]|lambda:[a-zA-Z]+|[*])
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		/// <summary>
		/// The AWS service or account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service.
		/// Pattern: .*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Principal { get; set; }
		
		/// <summary>
		/// For AWS services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceArn { get; set; }
		
		/// <summary>
		/// For Amazon S3, the ID of the account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the resource is owned by the specified account. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceAccount { get; set; }
		
		/// <summary>
		/// For Alexa Smart Home functions, a token that must be supplied by the invoker.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [a-zA-Z0-9._\-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string EventSourceToken { get; set; }
		
		/// <summary>
		/// Only update the policy if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAliasBody
	{
		
		/// <summary>
		/// The name of the alias.
		/// Max length: 128
		/// Min length: 1
		/// Pattern: (?!^[0-9]+$)([a-zA-Z0-9-_]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The function version that the alias invokes.
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FunctionVersion { get; set; }
		
		/// <summary>
		/// A description of the alias.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoutingConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateEventSourceMappingBody
	{
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - The ARN of the queue.</p> </li> </ul>
		/// Pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EventSourceArn { get; set; }
		
		/// <summary>
		/// <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// Disables the event source mapping to pause polling and invocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// <p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
		/// Minimum: 0
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 300)]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// (Streams) The number of batches to process from each shard concurrently.
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
		
		/// <summary>
		/// The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources. <code>AT_TIMESTAMP</code> is only supported for Amazon Kinesis streams.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateEventSourceMappingBodyStartingPosition StartingPosition { get; set; }
		
		/// <summary>
		/// With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartingPositionTimestamp { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationConfig { get; set; }
		
		/// <summary>
		/// (Streams) The maximum age of a record that Lambda sends to a function for processing.
		/// Minimum: 60
		/// Maximum: 604800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 604800)]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		/// <summary>
		/// (Streams) If the function returns an error, split the batch in two and retry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BisectBatchOnFunctionError { get; set; }
		
		/// <summary>
		/// (Streams) The maximum number of times to retry when the function returns an error.
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateEventSourceMappingBodyStartingPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_TIMESTAMP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateFunctionBody
	{
		
		/// <summary>
		/// <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateFunctionBodyRuntime Runtime { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the function's execution role.
		/// Pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.
		/// Max length: 128
		/// Pattern: [^\s]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Handler { get; set; }
		
		/// <summary>
		/// The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// A description of the function.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
		/// Minimum: 128
		/// Maximum: 3008
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(128, 3008)]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		/// <summary>
		/// Set to true to publish the first version of the function during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Publish { get; set; }
		
		/// <summary>
		/// The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VpcConfig { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterConfig { get; set; }
		
		/// <summary>
		/// A function's environment variable settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Environment { get; set; }
		
		/// <summary>
		/// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyArn { get; set; }
		
		/// <summary>
		/// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TracingConfig { get; set; }
		
		/// <summary>
		/// A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/tagging.html">tags</a> to apply to the function.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionArn[] Layers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateFunctionBodyRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateAliasBody
	{
		
		/// <summary>
		/// The function version that the alias invokes.
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: (\$LATEST|[0-9]+)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FunctionVersion { get; set; }
		
		/// <summary>
		/// A description of the alias.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-traffic-shifting-using-aliases.html">traffic-shifting</a> configuration of a Lambda function alias.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoutingConfig { get; set; }
		
		/// <summary>
		/// Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying an alias that has changed since you last read it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateEventSourceMappingBody
	{
		
		/// <summary>
		/// <p>The name of the Lambda function.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> - <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> - <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> - <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>
		/// Max length: 140
		/// Min length: 1
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength=1)]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// Disables the event source mapping to pause polling and invocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// <p>The maximum number of items to retrieve in a single batch.</p> <ul> <li> <p> <b>Amazon Kinesis</b> - Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> - Default 100. Max 1,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> - Default 10. Max 10.</p> </li> </ul>
		/// Minimum: 1
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10000)]
		public System.Nullable<System.Int32> BatchSize { get; set; }
		
		/// <summary>
		/// (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
		/// Minimum: 0
		/// Maximum: 300
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 300)]
		public System.Nullable<System.Int32> MaximumBatchingWindowInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationConfig { get; set; }
		
		/// <summary>
		/// (Streams) The maximum age of a record that Lambda sends to a function for processing.
		/// Minimum: 60
		/// Maximum: 604800
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 604800)]
		public System.Nullable<System.Int32> MaximumRecordAgeInSeconds { get; set; }
		
		/// <summary>
		/// (Streams) If the function returns an error, split the batch in two and retry.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BisectBatchOnFunctionError { get; set; }
		
		/// <summary>
		/// (Streams) The maximum number of times to retry when the function returns an error.
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// (Streams) The number of batches to process from each shard concurrently.
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> ParallelizationFactor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutFunctionConcurrencyBody
	{
		
		/// <summary>
		/// The number of simultaneous executions to reserve for the function.
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int ReservedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutFunctionEventInvokeConfigBody
	{
		
		/// <summary>
		/// The maximum number of times to retry when the function returns an error.
		/// Minimum: 0
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// The maximum age of a request that Lambda sends to a function for processing.
		/// Minimum: 60
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 21600)]
		public System.Nullable<System.Int32> MaximumEventAgeInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionEventInvokeConfigBody
	{
		
		/// <summary>
		/// The maximum number of times to retry when the function returns an error.
		/// Minimum: 0
		/// Maximum: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 2)]
		public System.Nullable<System.Int32> MaximumRetryAttempts { get; set; }
		
		/// <summary>
		/// The maximum age of a request that Lambda sends to a function for processing.
		/// Minimum: 60
		/// Maximum: 21600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 21600)]
		public System.Nullable<System.Int32> MaximumEventAgeInSeconds { get; set; }
		
		/// <summary>
		/// A configuration object that specifies the destination of an event after Lambda processes it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutProvisionedConcurrencyConfigBody
	{
		
		/// <summary>
		/// The amount of provisioned concurrency to allocate for the version or alias.
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int ProvisionedConcurrentExecutions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionConfigurationBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the function's execution role.
		/// Pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		/// <summary>
		/// The name of the method within your code that Lambda calls to execute your function. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html">Programming Model</a>.
		/// Max length: 128
		/// Pattern: [^\s]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128)]
		public string Handler { get; set; }
		
		/// <summary>
		/// A description of the function.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The amount of time that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		/// <summary>
		/// The amount of memory that your function has access to. Increasing the function's memory also increases its CPU allocation. The default value is 128 MB. The value must be a multiple of 64 MB.
		/// Minimum: 128
		/// Maximum: 3008
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(128, 3008)]
		public System.Nullable<System.Int32> MemorySize { get; set; }
		
		/// <summary>
		/// The VPC security groups and subnets that are attached to a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">VPC Settings</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VpcConfig { get; set; }
		
		/// <summary>
		/// A function's environment variable settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Environment { get; set; }
		
		/// <summary>
		/// The identifier of the function's <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">runtime</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateFunctionConfigurationBodyRuntime Runtime { get; set; }
		
		/// <summary>
		/// The <a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq">dead-letter queue</a> for failed asynchronous invocations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DeadLetterConfig { get; set; }
		
		/// <summary>
		/// The ARN of the AWS Key Management Service (AWS KMS) key that's used to encrypt your function's environment variables. If it's not provided, AWS Lambda uses a default service key.
		/// Pattern: (arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyArn { get; set; }
		
		/// <summary>
		/// The function's AWS X-Ray tracing configuration. To sample and record incoming requests, set <code>Mode</code> to <code>Active</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TracingConfig { get; set; }
		
		/// <summary>
		/// Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A list of <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">function layers</a> to add to the function's execution environment. Specify each layer by its ARN, including the version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LayerVersionArn[] Layers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateFunctionConfigurationBodyRuntime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs6.10 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs8.10 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs10.x = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs12.x = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		java11 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python2.7 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.6 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.7 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		python3.8 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore1.0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.0 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore2.1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dotnetcore3.1 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nodejs4.3-edge = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		go1.x = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.5 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ruby2.7 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provided = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvokeBody
	{
		
		/// <summary>
		/// The JSON that you want to provide to your Lambda function as input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvokeAsyncBody
	{
		
		/// <summary>
		/// The JSON that you want to provide to your Lambda function as input.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InvokeArgs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishLayerVersionBody
	{
		
		/// <summary>
		/// The description of the version.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// A ZIP archive that contains the contents of an <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html">AWS Lambda layer</a>. You can specify either an Amazon S3 location, or upload a layer archive directly.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		/// <summary>
		/// A list of compatible <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html">function runtimes</a>. Used for filtering with <a>ListLayers</a> and <a>ListLayerVersions</a>.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Runtime[] CompatibleRuntimes { get; set; }
		
		/// <summary>
		/// <p>The layer's software license. It can be any of the following:</p> <ul> <li> <p>An <a href="https://spdx.org/licenses/">SPDX license identifier</a>. For example, <code>MIT</code>.</p> </li> <li> <p>The URL of a license hosted on the internet. For example, <code>https://opensource.org/licenses/MIT</code>.</p> </li> <li> <p>The full text of the license.</p> </li> </ul>
		/// Max length: 512
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(512)]
		public string LicenseInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// A list of tags to apply to the function.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublishVersionBody
	{
		
		/// <summary>
		/// Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. You can get the hash for the version that you uploaded from the output of <a>UpdateFunctionCode</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CodeSha256 { get; set; }
		
		/// <summary>
		/// A description for the version to override the description in the function configuration.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Only update the function if the revision ID matches the ID that's specified. Use this option to avoid publishing a version if the function configuration has changed since you last updated it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateFunctionCodeBody
	{
		
		/// <summary>
		/// The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ZipFile { get; set; }
		
		/// <summary>
		/// An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.
		/// Max length: 63
		/// Min length: 3
		/// Pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=3)]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// The Amazon S3 key of the deployment package.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3Key { get; set; }
		
		/// <summary>
		/// For versioned objects, the version of the deployment package object to use.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string S3ObjectVersion { get; set; }
		
		/// <summary>
		/// Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Publish { get; set; }
		
		/// <summary>
		/// Set to true to validate the request parameters and access permissions without modifying the function code.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		/// <summary>
		/// Only update the function if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RevisionId { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
