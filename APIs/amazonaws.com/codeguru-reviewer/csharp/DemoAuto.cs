//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateRepositoryResponse
	{
		
		/// <summary>
		/// Information about a repository association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociation RepositoryAssociation { get; set; }
	}
	
	/// <summary>
	/// Information about an AWS CodeCommit repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeCommitRepository
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	/// <summary>
	///  Information about a third party source repository connected through CodeStar Connections. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ThirdPartySourceRepository
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ConnectionArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S(.*\S)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCodeReviewResponse
	{
		
		/// <summary>
		///  Information about a code review. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeReview CodeReview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRecommendationFeedbackResponse
	{
		
		/// <summary>
		///  Information about the recommendation feedback. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecommendationFeedback RecommendationFeedback { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeRepositoryAssociationResponse
	{
		
		/// <summary>
		/// Information about a repository association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociation RepositoryAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateRepositoryResponse
	{
		
		/// <summary>
		/// Information about a repository association.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociation RepositoryAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCodeReviewsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewSummary[] CodeReviewSummaries { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bitbucket = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRecommendationFeedbackResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationFeedbackSummary[] RecommendationFeedbackSummaries { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRecommendationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecommendationSummary[] RecommendationSummaries { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRepositoryAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociationSummary[] RepositoryAssociationSummaries { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disassociating = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Reaction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThumbsUp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThumbsDown = 1,
	}
	
	/// <summary>
	/// Information about a repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Repository
	{
		
		/// <summary>
		/// Information about an AWS CodeCommit repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CodeCommitRepository CodeCommit { get; set; }
		
		/// <summary>
		///  Information about a third party source repository connected through CodeStar Connections. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartySourceRepository Bitbucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateRepositoryRequest
	{
		
		/// <summary>
		/// Information about a repository.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Repository Repository { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// Information about a repository association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RepositoryAssociation
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string AssociationArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ConnectionArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S(.*\S)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociationProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociationState State { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAssociationProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bitbucket = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disassociating = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PullRequest = 0,
	}
	
	/// <summary>
	///  Information about the source code type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceCodeType
	{
		
		/// <summary>
		///  The commit diff for the pull request. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CommitDiffSourceCodeType CommitDiff { get; set; }
	}
	
	/// <summary>
	///  Information about the statistics from the code review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Metrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MeteredLinesOfCodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FindingsCount { get; set; }
	}
	
	/// <summary>
	///  Information about a code review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeReview
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string CodeReviewArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S(.*\S)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewState State { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string StateReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewType Type { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string PullRequestId { get; set; }
		
		/// <summary>
		///  Information about the source code type. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceCodeType SourceCodeType { get; set; }
		
		/// <summary>
		///  Information about the statistics from the code review. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Metrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bitbucket = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PullRequest = 0,
	}
	
	/// <summary>
	///  Information about the summary of the code review. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CodeReviewSummary
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string CodeReviewArn { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string RepositoryName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S(.*\S)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewSummaryProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewSummaryState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CodeReviewSummaryType Type { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string PullRequestId { get; set; }
		
		/// <summary>
		///  Information about metrics summaries. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricsSummary MetricsSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewSummaryProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bitbucket = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewSummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deleting = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CodeReviewSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PullRequest = 0,
	}
	
	/// <summary>
	///  Information about metrics summaries. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricsSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MeteredLinesOfCodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FindingsCount { get; set; }
	}
	
	/// <summary>
	///  The commit diff for the pull request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CommitDiffSourceCodeType
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=6)]
		public string SourceCommit { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=6)]
		public string DestinationCommit { get; set; }
	}
	
	/// <summary>
	///  Information about the recommendation feedback. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecommendationFeedback
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string CodeReviewArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Reaction[] Reactions { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecommendationFeedbackRequest
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string CodeReviewArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Reaction[] Reactions { get; set; }
	}
	
	/// <summary>
	///  Information about recommendation feedback summaries. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecommendationFeedbackSummary
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Reaction[] Reactions { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string UserId { get; set; }
	}
	
	/// <summary>
	///  Information about recommendations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecommendationSummary
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=1)]
		public string FilePath { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RecommendationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartLine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndLine { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Information about a repository association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RepositoryAssociationSummary
	{
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string AssociationArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string ConnectionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdatedTimeStamp { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string AssociationId { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S[\w.-]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^\S(.*\S)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength=1)]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociationSummaryProviderType ProviderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RepositoryAssociationSummaryState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAssociationSummaryProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CodeCommit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GitHub = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bitbucket = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RepositoryAssociationSummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associated = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Associating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disassociating = 3,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Associates an AWS CodeCommit repository with Amazon CodeGuru Reviewer. When you associate an AWS CodeCommit repository with Amazon CodeGuru Reviewer, Amazon CodeGuru Reviewer will provide recommendations for each pull request raised within the repository. You can view recommendations in the AWS CodeCommit repository.</p> <p>You can associate a GitHub repository using the Amazon CodeGuru Reviewer console.</p>
		/// AssociateRepository /associations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateRepositoryResponse> AssociateRepositoryAsync(AssociateRepositoryBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists repository associations. You can optionally filter on one or more of the following recommendation properties: provider types, states, names, and owners.
		/// ListRepositoryAssociations /associations
		/// </summary>
		/// <param name="ProviderType">List of provider types to use as a filter.</param>
		/// <param name="State">List of states to use as a filter.</param>
		/// <param name="Name">List of repository names to use as a filter.</param>
		/// <param name="Owner">List of owners to use as a filter. For GitHub, this is name of the GitHub account that was used to associate the repository. For AWS CodeCommit, it is the name of the CodeCommit account that was used to associate the repository.</param>
		/// <param name="MaxResults">The maximum number of repository association results returned by <code>ListRepositoryAssociations</code> in paginated output. When this parameter is used, <code>ListRepositoryAssociations</code> only returns <code>maxResults</code> results in a single page with a <code>nextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>ListRepositoryAssociations</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 25. If this parameter is not used, <code>ListRepositoryAssociations</code> returns up to 25 results and a <code>nextToken</code> value if applicable. </param>
		/// <param name="NextToken"><p>The <code>nextToken</code> value returned from a previous paginated <code>ListRepositoryAssociations</code> request where <code>maxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value. </p> <note> <p>Treat this token as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.</p> </note></param>
		/// <returns>Success</returns>
		public async Task<ListRepositoryAssociationsResponse> ListRepositoryAssociationsAsync(ProviderType[] ProviderType, RepositoryAssociationState[] State, Name[] Name, Owner[] Owner, int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associations?"+String.Join("&", ProviderType.Select(z => $"ProviderType={z}"))+"&"+String.Join("&", State.Select(z => $"State={z}"))+"&"+String.Join("&", Name.Select(z => $"Name={z}"))+"&"+String.Join("&", Owner.Select(z => $"Owner={z}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRepositoryAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the metadaata associated with the code review along with its status.
		/// DescribeCodeReview /codereviews/{CodeReviewArn}
		/// </summary>
		/// <param name="CodeReviewArn"> The Amazon Resource Name (ARN) of the code review to describe. </param>
		/// <returns>Success</returns>
		public async Task<DescribeCodeReviewResponse> DescribeCodeReviewAsync(string CodeReviewArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/codereviews/"+ (CodeReviewArn==null? "" : Uri.EscapeDataString(CodeReviewArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeCodeReviewResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes the customer feedback for a CodeGuru Reviewer recommendation.
		/// DescribeRecommendationFeedback /feedback/{CodeReviewArn}#RecommendationId
		/// </summary>
		/// <param name="CodeReviewArn"> The Amazon Resource Name (ARN) that identifies the code review. </param>
		/// <param name="RecommendationId"> The recommendation ID that can be used to track the provided recommendations and then to collect the feedback. </param>
		/// <param name="UserId"> Optional parameter to describe the feedback for a given user. If this is not supplied, it defaults to the user making the request. </param>
		/// <returns>Success</returns>
		public async Task<DescribeRecommendationFeedbackResponse> DescribeRecommendationFeedbackAsync(string CodeReviewArn, string RecommendationId, string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/feedback/"+ (CodeReviewArn==null? "" : Uri.EscapeDataString(CodeReviewArn))+"#RecommendationId&RecommendationId=" + (RecommendationId==null? "" : Uri.EscapeDataString(RecommendationId))+"&UserId=" + (UserId==null? "" : Uri.EscapeDataString(UserId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRecommendationFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Describes a repository association.
		/// DescribeRepositoryAssociation /associations/{AssociationArn}
		/// </summary>
		/// <param name="AssociationArn">The Amazon Resource Name (ARN) identifying the association. You can retrieve this ARN by calling <code>ListRepositories</code>.</param>
		/// <returns>Success</returns>
		public async Task<DescribeRepositoryAssociationResponse> DescribeRepositoryAssociationAsync(string AssociationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associations/"+ (AssociationArn==null? "" : Uri.EscapeDataString(AssociationArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeRepositoryAssociationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the association between Amazon CodeGuru Reviewer and a repository.
		/// DisassociateRepository /associations/{AssociationArn}
		/// </summary>
		/// <param name="AssociationArn">The Amazon Resource Name (ARN) identifying the association.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateRepositoryResponse> DisassociateRepositoryAsync(string AssociationArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/associations/"+ (AssociationArn==null? "" : Uri.EscapeDataString(AssociationArn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateRepositoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the code reviews that the customer has created in the past 90 days.
		/// ListCodeReviews /codereviews#Type
		/// </summary>
		/// <param name="ProviderTypes"> List of provider types for filtering that needs to be applied before displaying the result. For example, "providerTypes=[GitHub]" will list code reviews from GitHub. </param>
		/// <param name="States"> List of states for filtering that needs to be applied before displaying the result. For example, "states=[Pending]" will list code reviews in the Pending state. </param>
		/// <param name="RepositoryNames"> List of repository names for filtering that needs to be applied before displaying the result. </param>
		/// <param name="Type"> The type of code reviews to list in the response. </param>
		/// <param name="MaxResults"> The maximum number of results that are returned per call. The default is 100. </param>
		/// <param name="NextToken"> If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </param>
		/// <returns>Success</returns>
		public async Task<ListCodeReviewsResponse> ListCodeReviewsAsync(ProviderType[] ProviderTypes, JobState[] States, Name[] RepositoryNames, Type Type, int MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/codereviews#Type?"+String.Join("&", ProviderTypes.Select(z => $"ProviderTypes={z}"))+"&"+String.Join("&", States.Select(z => $"States={z}"))+"&"+String.Join("&", RepositoryNames.Select(z => $"RepositoryNames={z}"))+"&Type=" + Type+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCodeReviewsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the customer feedback for a CodeGuru Reviewer recommendation for all users. This API will be used from the console to extract the previously given feedback by the user to pre-populate the feedback emojis for all recommendations.
		/// ListRecommendationFeedback /feedback/{CodeReviewArn}/RecommendationFeedback
		/// </summary>
		/// <param name="NextToken"> If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </param>
		/// <param name="MaxResults"> The maximum number of results that are returned per call. The default is 100. </param>
		/// <param name="CodeReviewArn"> The Amazon Resource Name (ARN) that identifies the code review. </param>
		/// <param name="UserIds"> Filter on userIds that need to be applied before displaying the result. This can be used to query all the recommendation feedback for a code review from a given user. </param>
		/// <param name="RecommendationIds"> Filter on recommendationIds that need to be applied before displaying the result. This can be used to query all the recommendation feedback for a given recommendation. </param>
		/// <returns>Success</returns>
		public async Task<ListRecommendationFeedbackResponse> ListRecommendationFeedbackAsync(string NextToken, int MaxResults, string CodeReviewArn, UserId[] UserIds, RecommendationId[] RecommendationIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/feedback/"+ (CodeReviewArn==null? "" : Uri.EscapeDataString(CodeReviewArn))+"/RecommendationFeedback?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+String.Join("&", UserIds.Select(z => $"UserIds={z}"))+"&"+String.Join("&", RecommendationIds.Select(z => $"RecommendationIds={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRecommendationFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the list of all recommendations for a completed code review.
		/// ListRecommendations /codereviews/{CodeReviewArn}/Recommendations
		/// </summary>
		/// <param name="NextToken"> Pagination token. </param>
		/// <param name="MaxResults"> The maximum number of results that are returned per call. The default is 100. </param>
		/// <param name="CodeReviewArn"> The Amazon Resource Name (ARN) of the code review to describe. </param>
		/// <returns>Success</returns>
		public async Task<ListRecommendationsResponse> ListRecommendationsAsync(string NextToken, int MaxResults, string CodeReviewArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/codereviews/"+ (CodeReviewArn==null? "" : Uri.EscapeDataString(CodeReviewArn))+"/Recommendations?NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRecommendationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stores customer feedback for a CodeGuru-Reviewer recommendation. When this API is called again with different reactions the previous feedback is overwritten.
		/// PutRecommendationFeedback /feedback
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutRecommendationFeedbackResponse> PutRecommendationFeedbackAsync(PutRecommendationFeedbackBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/feedback";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutRecommendationFeedbackResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateRepositoryBody
	{
		
		/// <summary>
		/// Information about a repository.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		/// <summary>
		/// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p> <p>To add a new repository association, this parameter specifies a unique identifier for the new repository association that helps ensure idempotency.</p> <p>If you use the AWS CLI or one of the AWS SDKs to call this operation, you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, you must generate a ClientRequestToken yourself for new versions and include that value in the request.</p> <p>You typically interact with this value if you implement your own retry logic and want to ensure that a given repository association is not created twice. We recommend that you generate a UUID-type value to ensure uniqueness within the specified repository association.</p> <p>Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries. </p>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: ^[\w-]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutRecommendationFeedbackBody
	{
		
		/// <summary>
		///  The Amazon Resource Name (ARN) that identifies the code review. 
		/// Max length: 1600
		/// Min length: 1
		/// Pattern: ^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string CodeReviewArn { get; set; }
		
		/// <summary>
		///  The recommendation ID that can be used to track the provided recommendations and then to collect the feedback. 
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		///  List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback. 
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Reaction[] Reactions { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
