//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHarvestJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateHarvestJobResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateHarvestJobResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateOriginEndpointResponseOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOriginEndpointResponseOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		/// <summary>
		/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	/// <summary>
	/// A StreamSelection configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StreamSelection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxVideoBitsPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinVideoBitsPerSecond { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamSelectionStreamOrder StreamOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StreamSelectionStreamOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_BITRATE_ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_BITRATE_DESCENDING = 2,
	}
	
	/// <summary>
	/// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
	///determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
	///ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
	///contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
	///messages of the types specified in AdTriggers that do not contain delivery restrictions will
	///be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
	///AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
	///and are always treated as ads if specified in AdTriggers.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdsOnDeliveryRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESTRICTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 3,
	}
	
	/// <summary>
	/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		/// <summary>
		/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ManifestLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPACT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HBBTV_1_5 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SegmentTemplateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_WITH_TIMELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_WITH_TIMELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_WITH_DURATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE35_ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsEncryption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstantInitializationVector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryptionEncryptionMethod EncryptionMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyRotationIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RepeatExtXKey { get; set; }
		
		/// <summary>
		/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionEncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 2,
	}
	
	/// <summary>
	/// A Microsoft Smooth Streaming (MSS) encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MssEncryption
	{
		
		/// <summary>
		/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SpekeKeyProvider SpekeKeyProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeHarvestJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeHarvestJobResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeHarvestJobResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeOriginEndpointResponseOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeOriginEndpointResponseOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListHarvestJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HarvestJob[] HarvestJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOriginEndpointsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginEndpoint[] OriginEndpoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RotateChannelCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RotateIngestEndpointCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOriginEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateOriginEndpointResponseOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateOriginEndpointResponseOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum @__AdTriggersElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPLICE_INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDER_ADVERTISEMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTRIBUTOR_ADVERTISEMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDER_PLACEMENT_OPPORTUNITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTRIBUTOR_PLACEMENT_OPPORTUNITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY = 7,
	}
	
	/// <summary>
	/// CDN Authorization credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Authorization
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CdnIdentifierSecret { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecretsRoleArn { get; set; }
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) ingest resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsIngest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public IngestEndpoint[] IngestEndpoints { get; set; }
	}
	
	/// <summary>
	/// A Channel resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) ingest resource configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsIngest HlsIngest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SpekeKeyProvider
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SystemIds { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafPackage
	{
		
		/// <summary>
		/// A Common Media Application Format (CMAF) encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifest[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		/// <summary>
		/// A StreamSelection configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	/// <summary>
	/// A Common Media Application Format (CMAF) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CmafPackageCreateOrUpdateParameters
	{
		
		/// <summary>
		/// A Common Media Application Format (CMAF) encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParameters[] HlsManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentPrefix { get; set; }
		
		/// <summary>
		/// A StreamSelection configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	/// <summary>
	/// A new Channel configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters for where in an S3 bucket to place the harvested content
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Destination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ManifestKey { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to create a new HarvestJob.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHarvestJobRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DashPackage
	{
		
		/// <summary>
		/// A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
		///ad markers are output.  Specify multiple items to create ad markers for all of the included
		///message types.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		/// <summary>
		/// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
		///determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
		///ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
		///contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
		///messages of the types specified in AdTriggers that do not contain delivery restrictions will
		///be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
		///AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
		///and are always treated as ads if specified in AdTriggers.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackageAdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackageManifestLayout ManifestLayout { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinBufferTimeSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinUpdatePeriodSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__PeriodTriggersElement[] PeriodTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackageProfile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DashPackageSegmentTemplateFormat SegmentTemplateFormat { get; set; }
		
		/// <summary>
		/// A StreamSelection configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SuggestedPresentationDelaySeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashPackageAdsOnDeliveryRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESTRICTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashPackageManifestLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPACT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashPackageProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HBBTV_1_5 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DashPackageSegmentTemplateFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_WITH_TIMELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_WITH_TIMELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_WITH_DURATION = 2,
	}
	
	/// <summary>
	/// An HTTP Live Streaming (HLS) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsPackage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackageAdMarkers AdMarkers { get; set; }
		
		/// <summary>
		/// A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
		///ad markers are output.  Specify multiple items to create ad markers for all of the included
		///message types.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		/// <summary>
		/// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
		///determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
		///ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
		///contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
		///messages of the types specified in AdTriggers that do not contain delivery restrictions will
		///be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
		///AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
		///and are always treated as ads if specified in AdTriggers.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackageAdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsPackagePlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		/// <summary>
		/// A StreamSelection configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAudioRenditionGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsPackageAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE35_ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsPackageAdsOnDeliveryRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESTRICTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsPackagePlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 2,
	}
	
	/// <summary>
	/// A Microsoft Smooth Streaming (MSS) packaging configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MssPackage
	{
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssEncryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ManifestWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SegmentDurationSeconds { get; set; }
		
		/// <summary>
		/// A StreamSelection configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StreamSelection StreamSelection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Origination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	/// <summary>
	/// Configuration parameters used to create a new OriginEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOriginEndpointRequest
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackageCreateOrUpdateParameters CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateOriginEndpointRequestOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOriginEndpointRequestOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EncryptionMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	/// <summary>
	/// A HarvestJob resource configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HarvestJob
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Destination S3Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HarvestJobStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HarvestJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// A HTTP Live Streaming (HLS) manifest configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsManifest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestAdMarkers AdMarkers { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestPlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE35_ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestPlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 2,
	}
	
	/// <summary>
	/// A HTTP Live Streaming (HLS) manifest configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsManifestCreateOrUpdateParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParametersAdMarkers AdMarkers { get; set; }
		
		/// <summary>
		/// A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no
		///ad markers are output.  Specify multiple items to create ad markers for all of the included
		///message types.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__AdTriggersElement[] AdTriggers { get; set; }
		
		/// <summary>
		/// This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to
		///determine whether a message signals an ad.  Choosing "NONE" means no SCTE-35 messages become
		///ads.  Choosing "RESTRICTED" means SCTE-35 messages of the types specified in AdTriggers that
		///contain delivery restrictions will be treated as ads.  Choosing "UNRESTRICTED" means SCTE-35
		///messages of the types specified in AdTriggers that do not contain delivery restrictions will
		///be treated as ads.  Choosing "BOTH" means all SCTE-35 messages of the types specified in
		///AdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags
		///and are always treated as ads if specified in AdTriggers.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParametersAdsOnDeliveryRestrictions AdsOnDeliveryRestrictions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeIframeOnlyStream { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HlsManifestCreateOrUpdateParametersPlaylistType PlaylistType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PlaylistWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramDateTimeIntervalSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestCreateOrUpdateParametersAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE35_ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestCreateOrUpdateParametersAdsOnDeliveryRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNRESTRICTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestCreateOrUpdateParametersPlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 2,
	}
	
	/// <summary>
	/// An endpoint for ingesting source content for a Channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IngestEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// An OriginEndpoint resource configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OriginEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackage CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginEndpointOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OriginEndpointOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StreamOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_BITRATE_ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_BITRATE_DESCENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__mapOf__string Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to update the Channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters used to update an existing OriginEndpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOriginEndpointRequest
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Authorization Authorization { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CmafPackageCreateOrUpdateParameters CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DashPackage DashPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsPackage HlsPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MssPackage MssPackage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateOriginEndpointRequestOrigination Origination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateOriginEndpointRequestOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum @__PeriodTriggersElement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS = 0,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new Channel.
		/// CreateChannel /channels
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateChannelResponse> CreateChannelAsync(CreateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of Channels.
		/// ListChannels /channels
		/// </summary>
		/// <param name="maxResults">Upper bound on number of records to return.</param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new HarvestJob record.
		/// CreateHarvestJob /harvest_jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateHarvestJobResponse> CreateHarvestJobAsync(CreateHarvestJobBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/harvest_jobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateHarvestJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of HarvestJob records.
		/// ListHarvestJobs /harvest_jobs
		/// </summary>
		/// <param name="includeChannelId">When specified, the request will return only HarvestJobs associated with the given Channel ID.</param>
		/// <param name="includeStatus">When specified, the request will return only HarvestJobs in the given status.</param>
		/// <param name="maxResults">The upper bound on the number of records to return.</param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListHarvestJobsResponse> ListHarvestJobsAsync(string includeChannelId, string includeStatus, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/harvest_jobs?includeChannelId=" + (includeChannelId==null? "" : Uri.EscapeDataString(includeChannelId))+"&includeStatus=" + (includeStatus==null? "" : Uri.EscapeDataString(includeStatus))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListHarvestJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new OriginEndpoint record.
		/// CreateOriginEndpoint /origin_endpoints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOriginEndpointResponse> CreateOriginEndpointAsync(CreateOriginEndpointBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/origin_endpoints";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a collection of OriginEndpoint records.
		/// ListOriginEndpoints /origin_endpoints
		/// </summary>
		/// <param name="channelId">When specified, the request will return only OriginEndpoints associated with the given Channel ID.</param>
		/// <param name="maxResults">The upper bound on the number of records to return.</param>
		/// <param name="nextToken">A token used to resume pagination from the end of a previous request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOriginEndpointsResponse> ListOriginEndpointsAsync(string channelId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/origin_endpoints?channelId=" + (channelId==null? "" : Uri.EscapeDataString(channelId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOriginEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Channel.
		/// DeleteChannel /channels/{id}
		/// </summary>
		/// <param name="id">The ID of the Channel to delete.</param>
		public async Task DeleteChannelAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a Channel.
		/// DescribeChannel /channels/{id}
		/// </summary>
		/// <param name="id">The ID of a Channel.</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Channel.
		/// UpdateChannel /channels/{id}
		/// </summary>
		/// <param name="id">The ID of the Channel to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelResponse> UpdateChannelAsync(string id, UpdateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing OriginEndpoint.
		/// DeleteOriginEndpoint /origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint to delete.</param>
		public async Task DeleteOriginEndpointAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/origin_endpoints/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about an existing OriginEndpoint.
		/// DescribeOriginEndpoint /origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint.</param>
		/// <returns>Success</returns>
		public async Task<DescribeOriginEndpointResponse> DescribeOriginEndpointAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/origin_endpoints/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing OriginEndpoint.
		/// UpdateOriginEndpoint /origin_endpoints/{id}
		/// </summary>
		/// <param name="id">The ID of the OriginEndpoint to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateOriginEndpointResponse> UpdateOriginEndpointAsync(string id, UpdateOriginEndpointBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/origin_endpoints/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateOriginEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets details about an existing HarvestJob.
		/// DescribeHarvestJob /harvest_jobs/{id}
		/// </summary>
		/// <param name="id">The ID of the HarvestJob.</param>
		/// <returns>Success</returns>
		public async Task<DescribeHarvestJobResponse> DescribeHarvestJobAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/harvest_jobs/"+ (id==null? "" : Uri.EscapeDataString(id));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeHarvestJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListTagsForResource /tags/{resource_arn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// TagResource /tags/{resource_arn}
		/// </summary>
		public async Task TagResourceAsync(string resource_arn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the Channel's first IngestEndpoint's username and password. WARNING - This API is deprecated. Please use RotateIngestEndpointCredentials instead
		/// RotateChannelCredentials /channels/{id}/credentials
		/// </summary>
		/// <param name="id">The ID of the channel to update.</param>
		/// <returns>Success</returns>
		public async Task<RotateChannelCredentialsResponse> RotateChannelCredentialsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (id==null? "" : Uri.EscapeDataString(id))+"/credentials";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RotateChannelCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate the IngestEndpoint's username and password, as specified by the IngestEndpoint's id.
		/// RotateIngestEndpointCredentials /channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials
		/// </summary>
		/// <param name="id">The ID of the channel the IngestEndpoint is on.</param>
		/// <param name="ingest_endpoint_id">The id of the IngestEndpoint whose credentials should be rotated</param>
		/// <returns>Success</returns>
		public async Task<RotateIngestEndpointCredentialsResponse> RotateIngestEndpointCredentialsAsync(string id, string ingest_endpoint_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/channels/"+ (id==null? "" : Uri.EscapeDataString(id))+"/ingest_endpoints/"+ (ingest_endpoint_id==null? "" : Uri.EscapeDataString(ingest_endpoint_id))+"/credentials";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RotateIngestEndpointCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// UntagResource /tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="tagKeys">The key(s) of tag to be deleted</param>
		public async Task UntagResourceAsync(string resource_arn, @__string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelBody
	{
		
		/// <summary>
		/// A short text description of the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the Channel. The ID must be unique within the region and it
		///cannot be changed after a Channel is created.
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateHarvestJobBody
	{
		
		/// <summary>
		/// The end of the time-window which will be harvested
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The ID of the HarvestJob. The ID must be unique within the region
		///and it cannot be changed after the HarvestJob is submitted
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The ID of the OriginEndpoint that the HarvestJob will harvest from.
		///This cannot be changed after the HarvestJob is submitted.
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OriginEndpointId { get; set; }
		
		/// <summary>
		/// Configuration parameters for where in an S3 bucket to place the harvested content
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Destination { get; set; }
		
		/// <summary>
		/// The start of the time-window which will be harvested
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateOriginEndpointBody
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Authorization { get; set; }
		
		/// <summary>
		/// The ID of the Channel that the OriginEndpoint will be associated with.
		///This cannot be changed after the OriginEndpoint is created.
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DashPackage { get; set; }
		
		/// <summary>
		/// A short text description of the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HlsPackage { get; set; }
		
		/// <summary>
		/// The ID of the OriginEndpoint.  The ID must be unique within the region
		///and it cannot be changed after the OriginEndpoint is created.
		///
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A short string that will be used as the filename of the OriginEndpoint URL (defaults to "index").
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MssPackage { get; set; }
		
		/// <summary>
		/// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
		///may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
		///requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateOriginEndpointBodyOrigination Origination { get; set; }
		
		/// <summary>
		/// Maximum duration (seconds) of content to retain for startover playback.
		///If not specified, startover playback will be disabled for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// A collection of tags associated with a resource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Amount of delay (seconds) to enforce on the playback of live content.
		///If not specified, there will be no time delay in effect for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		/// <summary>
		/// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateOriginEndpointBodyOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelBody
	{
		
		/// <summary>
		/// A short text description of the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateOriginEndpointBody
	{
		
		/// <summary>
		/// CDN Authorization credentials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Authorization { get; set; }
		
		/// <summary>
		/// A Common Media Application Format (CMAF) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CmafPackage { get; set; }
		
		/// <summary>
		/// A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DashPackage { get; set; }
		
		/// <summary>
		/// A short text description of the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// An HTTP Live Streaming (HLS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HlsPackage { get; set; }
		
		/// <summary>
		/// A short string that will be appended to the end of the Endpoint URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ManifestName { get; set; }
		
		/// <summary>
		/// A Microsoft Smooth Streaming (MSS) packaging configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MssPackage { get; set; }
		
		/// <summary>
		/// Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint
		///may by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be
		///requested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateOriginEndpointBodyOrigination Origination { get; set; }
		
		/// <summary>
		/// Maximum duration (in seconds) of content to retain for startover playback.
		///If not specified, startover playback will be disabled for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartoverWindowSeconds { get; set; }
		
		/// <summary>
		/// Amount of delay (in seconds) to enforce on the playback of live content.
		///If not specified, there will be no time delay in effect for the OriginEndpoint.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeDelaySeconds { get; set; }
		
		/// <summary>
		/// A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Whitelist { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateOriginEndpointBodyOrigination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
