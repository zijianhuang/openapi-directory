//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScalingPlanResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateScalingPlanRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		/// <summary>
		/// Represents an application source.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteScalingPlanRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingPlanResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanResource[] ScalingPlanResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingPlanResourcesRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingPlansResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlan[] ScalingPlans { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScalingPlansRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanName[] ScalingPlanNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScalingPlanVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource[] ApplicationSources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetScalingPlanResourceForecastDataResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Datapoint[] Datapoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetScalingPlanResourceForecastDataRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetScalingPlanResourceForecastDataRequestServiceNamespace ServiceNamespace { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetScalingPlanResourceForecastDataRequestScalableDimension ScalableDimension { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetScalingPlanResourceForecastDataRequestForecastDataType ForecastDataType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetScalingPlanResourceForecastDataRequestServiceNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetScalingPlanResourceForecastDataRequestScalableDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling:autoScalingGroup:DesiredCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs:service:DesiredCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2:spot-fleet-request:TargetCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds:cluster:ReadReplicaCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:ReadCapacityUnits = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:WriteCapacityUnits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:ReadCapacityUnits = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:WriteCapacityUnits = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetScalingPlanResourceForecastDataRequestForecastDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CapacityForecast = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadForecast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledActionMinCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledActionMaxCapacity = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateScalingPlanRequest
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		/// <summary>
		/// Represents an application source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
	}
	
	/// <summary>
	/// Represents an application source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ApplicationSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudFormationStackARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagFilter[] TagFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 4,
	}
	
	/// <summary>
	/// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p> <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data. Statistics are calculations used to aggregate data over specified time periods.</p> <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group.</p> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomizedLoadMetricSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CustomizedLoadMetricSpecificationStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CustomizedLoadMetricSpecificationStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 4,
	}
	
	/// <summary>
	/// <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p> <p>To create your customized scaling metric specification:</p> <ul> <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li> </ul> <p>For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomizedScalingMetricSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MetricName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Namespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDimension[] Dimensions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CustomizedScalingMetricSpecificationStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CustomizedScalingMetricSpecificationStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 4,
	}
	
	/// <summary>
	/// Represents a single value in the forecast data used for predictive scaling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Datapoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ForecastDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CapacityForecast = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadForecast = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledActionMinCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduledActionMaxCapacity = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServiceNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalableDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling:autoScalingGroup:DesiredCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs:service:DesiredCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2:spot-fleet-request:TargetCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds:cluster:ReadReplicaCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:ReadCapacityUnits = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:WriteCapacityUnits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:ReadCapacityUnits = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:WriteCapacityUnits = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBTargetGroupRequestCount = 3,
	}
	
	/// <summary>
	/// Represents a dimension for a customized metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricDimension
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TargetTrackingScaling = 0,
	}
	
	/// <summary>
	/// Represents a predefined metric that can be used for predictive scaling. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PredefinedLoadMetricSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredefinedLoadMetricSpecificationPredefinedLoadMetricType PredefinedLoadMetricType { get; set; }
		
		/// <summary>
		/// Max length: 1023
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1023, MinimumLength=1)]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PredefinedLoadMetricSpecificationPredefinedLoadMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGTotalNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBTargetGroupRequestCount = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamoDBReadCapacityUtilization = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamoDBWriteCapacityUtilization = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSServiceAverageCPUUtilization = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSServiceAverageMemoryUtilization = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBRequestCountPerTarget = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDSReaderAverageCPUUtilization = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDSReaderAverageDatabaseConnections = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageCPUUtilization = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageNetworkIn = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageNetworkOut = 12,
	}
	
	/// <summary>
	/// Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PredefinedScalingMetricSpecification
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PredefinedScalingMetricSpecificationPredefinedScalingMetricType PredefinedScalingMetricType { get; set; }
		
		/// <summary>
		/// Max length: 1023
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1023, MinimumLength=1)]
		public string ResourceLabel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PredefinedScalingMetricSpecificationPredefinedScalingMetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageCPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASGAverageNetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamoDBReadCapacityUtilization = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DynamoDBWriteCapacityUtilization = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSServiceAverageCPUUtilization = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECSServiceAverageMemoryUtilization = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALBRequestCountPerTarget = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDSReaderAverageCPUUtilization = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RDSReaderAverageDatabaseConnections = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageCPUUtilization = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageNetworkIn = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SpotFleetRequestAverageNetworkOut = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PredictiveScalingMaxCapacityBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetForecastCapacityToMaxCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetMaxCapacityToForecastCapacity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetMaxCapacityAboveForecastCapacity = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PredictiveScalingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastAndScale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastOnly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPolicyUpdateBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeepExternalPolicies = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReplaceExternalPolicies = 1,
	}
	
	/// <summary>
	/// <p>Describes a scaling instruction for a scalable resource.</p> <p>The scaling instruction is used in combination with a scaling plan, which is a set of instructions for configuring dynamic scaling and predictive scaling for the scalable resources in your application. Each scaling instruction applies to one resource.</p> <p>AWS Auto Scaling creates target tracking scaling policies based on the scaling instructions. Target tracking scaling policies adjust the capacity of your scalable resource as required to maintain resource utilization at the target value that you specified. </p> <p>AWS Auto Scaling also configures predictive scaling for your Amazon EC2 Auto Scaling groups using a subset of parameters, including the load metric, the scaling metric, the target value for the scaling metric, the predictive scaling mode (forecast and scale or forecast only), and the desired behavior when the forecast capacity exceeds the maximum capacity of the resource. With predictive scaling, AWS Auto Scaling generates forecasts with traffic predictions for the two days ahead and schedules scaling actions that proactively add and remove resource capacity to match the forecast. </p> <p>We recommend waiting a minimum of 24 hours after creating an Auto Scaling group to configure predictive scaling. At minimum, there must be 24 hours of historical data to generate a forecast.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/auto-scaling-getting-started.html">Getting Started with AWS Auto Scaling</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingInstruction
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstructionServiceNamespace ServiceNamespace { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstructionScalableDimension ScalableDimension { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinCapacity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxCapacity { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration[] TargetTrackingConfigurations { get; set; }
		
		/// <summary>
		/// Represents a predefined metric that can be used for predictive scaling. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PredefinedLoadMetricSpecification PredefinedLoadMetricSpecification { get; set; }
		
		/// <summary>
		/// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p> <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data. Statistics are calculations used to aggregate data over specified time periods.</p> <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group.</p> <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomizedLoadMetricSpecification CustomizedLoadMetricSpecification { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ScheduledActionBufferTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstructionPredictiveScalingMaxCapacityBehavior PredictiveScalingMaxCapacityBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PredictiveScalingMaxCapacityBuffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstructionPredictiveScalingMode PredictiveScalingMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstructionScalingPolicyUpdateBehavior ScalingPolicyUpdateBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableDynamicScaling { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingInstructionServiceNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingInstructionScalableDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling:autoScalingGroup:DesiredCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs:service:DesiredCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2:spot-fleet-request:TargetCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds:cluster:ReadReplicaCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:ReadCapacityUnits = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:WriteCapacityUnits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:ReadCapacityUnits = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:WriteCapacityUnits = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingInstructionPredictiveScalingMaxCapacityBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetForecastCapacityToMaxCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetMaxCapacityToForecastCapacity = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetMaxCapacityAboveForecastCapacity = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingInstructionPredictiveScalingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastAndScale = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ForecastOnly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingInstructionScalingPolicyUpdateBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeepExternalPolicies = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReplaceExternalPolicies = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPlanStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveWithProblems = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletionInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 7,
	}
	
	/// <summary>
	/// Represents a scaling plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingPlan
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		/// <summary>
		/// Represents an application source.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ApplicationSource ApplicationSource { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingInstruction[] ScalingInstructions { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanStatusCode StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPlanStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActiveWithProblems = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreationFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletionInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallyActive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
	}
	
	/// <summary>
	/// Represents a scalable resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingPlanResource
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: [\p{Print}&&[^|:/]]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string ScalingPlanName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ScalingPlanVersion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanResourceServiceNamespace ServiceNamespace { get; set; }
		
		/// <summary>
		/// Max length: 1600
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1600, MinimumLength=1)]
		public string ResourceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanResourceScalableDimension ScalableDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicy[] ScalingPolicies { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPlanResourceScalingStatusCode ScalingStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ScalingStatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPlanResourceServiceNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPlanResourceScalableDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		autoscaling:autoScalingGroup:DesiredCapacity = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ecs:service:DesiredCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ec2:spot-fleet-request:TargetCapacity = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rds:cluster:ReadReplicaCount = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:ReadCapacityUnits = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:table:WriteCapacityUnits = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:ReadCapacityUnits = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dynamodb:index:WriteCapacityUnits = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPlanResourceScalingStatusCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PartiallyActive = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 2,
	}
	
	/// <summary>
	/// Represents a scaling policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScalingPolicy
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// Pattern: \p{Print}+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string PolicyName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScalingPolicyPolicyType PolicyType { get; set; }
		
		/// <summary>
		/// Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TargetTrackingConfiguration TargetTrackingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingPolicyPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TargetTrackingScaling = 0,
	}
	
	/// <summary>
	/// Describes a target tracking configuration to use with AWS Auto Scaling. Used with <a>ScalingInstruction</a> and <a>ScalingPolicy</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetTrackingConfiguration
	{
		
		/// <summary>
		/// Represents a predefined metric that can be used for dynamic scaling as part of a target tracking scaling policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PredefinedScalingMetricSpecification PredefinedScalingMetricSpecification { get; set; }
		
		/// <summary>
		/// <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p> <p>To create your customized scaling metric specification:</p> <ul> <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li> <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li> </ul> <p>For more information about CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomizedScalingMetricSpecification CustomizedScalingMetricSpecification { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double TargetValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableScaleIn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleOutCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScaleInCooldown { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EstimatedInstanceWarmup { get; set; }
	}
	
	/// <summary>
	/// Represents a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagFilter
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public XmlStringMaxLen256[] Values { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a scaling plan.
		/// CreateScalingPlan /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.CreateScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateScalingPlanResponse> CreateScalingPlanAsync(CreateScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.CreateScalingPlan";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified scaling plan.</p> <p>Deleting a scaling plan deletes the underlying <a>ScalingInstruction</a> for all of the scalable resources that are covered by the plan.</p> <p>If the plan has launched resources or has scaling activities in progress, you must delete those resources separately.</p>
		/// DeleteScalingPlan /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DeleteScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteScalingPlanResponse> DeleteScalingPlanAsync(DeleteScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DeleteScalingPlan";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes the scalable resources in the specified scaling plan.
		/// DescribeScalingPlanResources /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeScalingPlanResourcesResponse> DescribeScalingPlanResourcesAsync(DescribeScalingPlanResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlanResources";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeScalingPlanResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more of your scaling plans.
		/// DescribeScalingPlans /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlans
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeScalingPlansResponse> DescribeScalingPlansAsync(DescribeScalingPlansRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.DescribeScalingPlans";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeScalingPlansResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the forecast data for a scalable resource.</p> <p>Capacity forecasts are represented as predicted values, or data points, that are calculated using historical data points from a specified CloudWatch load metric. Data points are available for up to 56 days. </p>
		/// GetScalingPlanResourceForecastData /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetScalingPlanResourceForecastDataResponse> GetScalingPlanResourceForecastDataAsync(GetScalingPlanResourceForecastDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.GetScalingPlanResourceForecastData";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetScalingPlanResourceForecastDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified scaling plan.</p> <p>You cannot update a scaling plan if it is in the process of being created, updated, or deleted.</p>
		/// UpdateScalingPlan /#X-Amz-Target=AnyScaleScalingPlannerFrontendService.UpdateScalingPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateScalingPlanResponse> UpdateScalingPlanAsync(UpdateScalingPlanRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AnyScaleScalingPlannerFrontendService.UpdateScalingPlan";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateScalingPlanResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
