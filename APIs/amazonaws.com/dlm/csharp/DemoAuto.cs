//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLifecyclePolicyResponse
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// Pattern: policy-[A-Za-z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string PolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_SNAPSHOT_MANAGEMENT = 0,
	}
	
	/// <summary>
	/// Specifies optional parameters to add to a policy. The set of valid parameters depends on the combination of policy type and resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Parameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeBootVolume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLifecyclePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicySummary[] Policies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceTypeValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLifecyclePolicyResponse
	{
		
		/// <summary>
		/// Detailed information about a lifecycle policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SettablePolicyStateValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Specifies the configuration of a lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetailsPolicyType PolicyType { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public ResourceTypeValues[] ResourceTypes { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] TargetTags { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Schedule[] Schedules { get; set; }
		
		/// <summary>
		/// Specifies optional parameters to add to a policy. The set of valid parameters depends on the combination of policy type and resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Parameters Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PolicyDetailsPolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBS_SNAPSHOT_MANAGEMENT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLifecyclePolicyRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateLifecyclePolicyRequestState State { get; set; }
		
		/// <summary>
		/// Specifies the configuration of a lifecycle policy.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateLifecyclePolicyRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntervalUnitValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURS = 0,
	}
	
	/// <summary>
	/// <p>Specifies when to create snapshots of EBS volumes.</p> <p>You must specify either a Cron expression or an interval, interval unit, and start time. You cannot specify both.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRule
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRuleIntervalUnit IntervalUnit { get; set; }
		
		/// <summary>
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Time[] Times { get; set; }
		
		/// <summary>
		/// Max length: 106
		/// Min length: 17
		/// Pattern: cron\([^\n]{11,100}\)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(106, MinimumLength=17)]
		public string CronExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRuleIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RetentionIntervalUnitValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARS = 3,
	}
	
	/// <summary>
	/// Specifies the retention rule for cross-Region snapshot copies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CrossRegionCopyRetainRule
	{
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyRetainRuleIntervalUnit IntervalUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CrossRegionCopyRetainRuleIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARS = 3,
	}
	
	/// <summary>
	/// Specifies a rule for cross-Region snapshot copies.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CrossRegionCopyRule
	{
		
		/// <summary>
		/// Max length: 16
		/// Min length: 0
		/// Pattern: ([a-z]+-){2,3}\d
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=0)]
		public string TargetRegion { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Encrypted { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\d:\d+:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string CmkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// Specifies the retention rule for cross-Region snapshot copies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CrossRegionCopyRetainRule RetainRule { get; set; }
	}
	
	/// <summary>
	/// Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot restore based on either a count or a time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FastRestoreRule
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FastRestoreRuleIntervalUnit IntervalUnit { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AvailabilityZone[] AvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FastRestoreRuleIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARS = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GettablePolicyStateValues
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	/// <summary>
	/// Detailed information about a lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecyclePolicy
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// Pattern: policy-[A-Za-z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicyState State { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\p{all}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string StatusMessage { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		/// <summary>
		/// Specifies the configuration of a lifecycle policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: ^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecyclePolicyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	/// <summary>
	/// Summary information about a lifecycle policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecyclePolicySummary
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// Pattern: policy-[A-Za-z0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LifecyclePolicySummaryState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecyclePolicySummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	/// <summary>
	/// Specifies the retention rule for a lifecycle policy. You can retain snapshots based on either a count or a time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RetainRule
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RetainRuleIntervalUnit IntervalUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RetainRuleIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARS = 3,
	}
	
	/// <summary>
	/// Specifies a backup schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Schedule
	{
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\p{all}]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CopyTags { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public Tag[] TagsToAdd { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 45
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(45)]
		public Tag[] VariableTags { get; set; }
		
		/// <summary>
		/// <p>Specifies when to create snapshots of EBS volumes.</p> <p>You must specify either a Cron expression or an interval, interval unit, and start time. You cannot specify both.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRule CreateRule { get; set; }
		
		/// <summary>
		/// Specifies the retention rule for a lifecycle policy. You can retain snapshots based on either a count or a time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RetainRule RetainRule { get; set; }
		
		/// <summary>
		/// Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot restore based on either a count or a time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FastRestoreRule FastRestoreRule { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public CrossRegionCopyRule[] CrossRegionCopyRules { get; set; }
	}
	
	/// <summary>
	/// Specifies a tag for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\p{all}]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\p{all}]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLifecyclePolicyRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ExecutionRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateLifecyclePolicyRequestState State { get; set; }
		
		/// <summary>
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Specifies the configuration of a lifecycle policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetails PolicyDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateLifecyclePolicyRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a policy to manage the lifecycle of the specified AWS resources. You can create up to 100 lifecycle policies.
		/// CreateLifecyclePolicy /policies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLifecyclePolicyResponse> CreateLifecyclePolicyAsync(CreateLifecyclePolicyBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets summary information about all or the specified data lifecycle policies.</p> <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>
		/// GetLifecyclePolicies /policies
		/// </summary>
		/// <param name="policyIds">The identifiers of the data lifecycle policies.</param>
		/// <param name="state">The activation state.</param>
		/// <param name="resourceTypes">The resource type.</param>
		/// <param name="targetTags"><p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p></param>
		/// <param name="tagsToAdd"><p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the AWS-added lifecycle tags.</p></param>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePoliciesResponse> GetLifecyclePoliciesAsync(PolicyId[] policyIds, GettablePolicyStateValues state, ResourceTypeValues[] resourceTypes, TagFilter[] targetTags, TagFilter[] tagsToAdd, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies?"+String.Join("&", policyIds.Select(z => $"policyIds={z}"))+"&state=" + state+"&"+String.Join("&", resourceTypes.Select(z => $"resourceTypes={z}"))+"&"+String.Join("&", targetTags.Select(z => $"targetTags={z}"))+"&"+String.Join("&", tagsToAdd.Select(z => $"tagsToAdd={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLifecyclePoliciesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified lifecycle policy and halts the automated operations that the policy specified.
		/// DeleteLifecyclePolicy /policies/{policyId}/
		/// </summary>
		/// <param name="policyId">The identifier of the lifecycle policy.</param>
		/// <returns>Success</returns>
		public async Task<DeleteLifecyclePolicyResponse> DeleteLifecyclePolicyAsync(string policyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets detailed information about the specified lifecycle policy.
		/// GetLifecyclePolicy /policies/{policyId}/
		/// </summary>
		/// <param name="policyId">The identifier of the lifecycle policy.</param>
		/// <returns>Success</returns>
		public async Task<GetLifecyclePolicyResponse> GetLifecyclePolicyAsync(string policyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/policies/"+ (policyId==null? "" : Uri.EscapeDataString(policyId))+"/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLifecyclePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified tags to the specified resource.
		/// TagResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource.
		/// UntagResource /tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The tag keys.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLifecyclePolicyBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [0-9A-Za-z _-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// The desired activation state of the lifecycle policy after creation.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateLifecyclePolicyBodyState State { get; set; }
		
		/// <summary>
		/// Specifies the configuration of a lifecycle policy.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDetails { get; set; }
		
		/// <summary>
		/// The tags to apply to the lifecycle policy during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateLifecyclePolicyBodyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// One or more tags.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
