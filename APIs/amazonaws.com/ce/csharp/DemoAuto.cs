//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCostCategoryDefinitionResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCostCategoryDefinitionRequest
	{
		
		/// <summary>
		/// The unique name of the Cost Category.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The rule schema version in this particular Cost Category.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateCostCategoryDefinitionRequestRuleVersion RuleVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public CostCategoryRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateCostCategoryDefinitionRequestRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CostCategoryExpression.v1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteCostCategoryDefinitionResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveEnd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteCostCategoryDefinitionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCostCategoryDefinitionResponse
	{
		
		/// <summary>
		/// The structure of Cost Categories. This includes detailed metadata and the set of rules for the <code>CostCategory</code> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostCategory CostCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeCostCategoryDefinitionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostAndUsageResponse
	{
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResultByTime[] ResultsByTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostAndUsageRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetCostAndUsageRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricName[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupBy { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCostAndUsageRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostAndUsageWithResourcesResponse
	{
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResultByTime[] ResultsByTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostAndUsageWithResourcesRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetCostAndUsageWithResourcesRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricName[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupBy { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCostAndUsageWithResourcesRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostForecastResponse
	{
		
		/// <summary>
		/// The aggregated value for a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricValue Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForecastResult[] ForecastResultsByTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCostForecastRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetCostForecastRequestMetric Metric { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetCostForecastRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		/// <summary>
		/// Minimum: 51
		/// Maximum: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(51, 99)]
		public System.Nullable<System.Int32> PredictionIntervalLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCostForecastRequestMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLENDED_COST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNBLENDED_COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMORTIZED_COST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_UNBLENDED_COST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_AMORTIZED_COST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_QUANTITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMALIZED_USAGE_AMOUNT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetCostForecastRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDimensionValuesResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DimensionValuesWithAttributes[] DimensionValues { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ReturnSize { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalSize { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDimensionValuesRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SearchString { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetDimensionValuesRequestDimension Dimension { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDimensionValuesRequestContext Context { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDimensionValuesRequestDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT_NAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_TYPE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CODE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE_GROUP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORD_TYPE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATING_SYSTEM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENANCY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_ID = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL_ENTITY_NAME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_OPTION = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENGINE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CACHE_ENGINE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE_FAMILY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_ENTITY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_ID = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHTSIZING_TYPE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_TYPE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLAN_ARN = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_OPTION = 28,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDimensionValuesRequestContext
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_AND_USAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationCoverageResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CoverageByTime[] CoveragesByTime { get; set; }
		
		/// <summary>
		/// The amount of instance usage that a reservation covered.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Coverage Total { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// You can use the following request parameters to query for how much of your instance usage a reservation covered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationCoverageRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationCoverageRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricName[] Metrics { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationCoverageRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationPurchaseRecommendationResponse
	{
		
		/// <summary>
		/// Information about this specific recommendation, such as the timestamp for when AWS made a specific recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendation[] Recommendations { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationPurchaseRecommendationRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Service { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationPurchaseRecommendationRequestAccountScope AccountScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationPurchaseRecommendationRequestLookbackPeriodInDays LookbackPeriodInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationPurchaseRecommendationRequestTermInYears TermInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationPurchaseRecommendationRequestPaymentOption PaymentOption { get; set; }
		
		/// <summary>
		/// Hardware specifications for the service that you want recommendations for.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecification ServiceSpecification { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationPurchaseRecommendationRequestAccountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationPurchaseRecommendationRequestLookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationPurchaseRecommendationRequestTermInYears
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationPurchaseRecommendationRequestPaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_UPFRONT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT_UTILIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAVY_UTILIZATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationUtilizationResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UtilizationByTime[] UtilizationsByTime { get; set; }
		
		/// <summary>
		/// The aggregated numbers for your reservation usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationAggregates Total { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetReservationUtilizationRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetReservationUtilizationRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetReservationUtilizationRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRightsizingRecommendationResponse
	{
		
		/// <summary>
		/// Metadata for this recommendation set.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationMetadata Metadata { get; set; }
		
		/// <summary>
		///  Summary of rightsizing recommendations 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationSummary Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendation[] RightsizingRecommendations { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		///  Enables you to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings associated with recommendations with consideration of existing Savings Plans or RI benefits, or niether. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRightsizingRecommendationRequest
	{
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		/// <summary>
		///  Enables you to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings associated with recommendations with consideration of existing Savings Plans or RI benefits, or niether. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Service { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansCoverageResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansCoverage[] SavingsPlansCoverages { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansCoverageRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinition[] GroupBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansCoverageRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricName[] Metrics { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansCoverageRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansPurchaseRecommendationResponse
	{
		
		/// <summary>
		/// Metadata about your Savings Plans Purchase Recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationMetadata Metadata { get; set; }
		
		/// <summary>
		/// Contains your request parameters, Savings Plan Recommendations Summary, and Details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendation SavingsPlansPurchaseRecommendation { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansPurchaseRecommendationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansPurchaseRecommendationRequestSavingsPlansType SavingsPlansType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansPurchaseRecommendationRequestTermInYears TermInYears { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansPurchaseRecommendationRequestPaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansPurchaseRecommendationRequestAccountScope AccountScope { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansPurchaseRecommendationRequestLookbackPeriodInDays LookbackPeriodInDays { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansPurchaseRecommendationRequestSavingsPlansType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_SP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_INSTANCE_SP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansPurchaseRecommendationRequestTermInYears
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansPurchaseRecommendationRequestPaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_UPFRONT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT_UTILIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAVY_UTILIZATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansPurchaseRecommendationRequestAccountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansPurchaseRecommendationRequestLookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansUtilizationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilizationByTime[] SavingsPlansUtilizationsByTime { get; set; }
		
		/// <summary>
		/// The aggregated utilization metrics for your Savings Plans usage.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilizationAggregates Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansUtilizationRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetSavingsPlansUtilizationRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetSavingsPlansUtilizationRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansUtilizationDetailsResponse
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilizationDetail[] SavingsPlansUtilizationDetails { get; set; }
		
		/// <summary>
		/// The aggregated utilization metrics for your Savings Plans usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilizationAggregates Total { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSavingsPlansUtilizationDetailsRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTagsResponse
	{
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Tags { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ReturnSize { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int TotalSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTagsRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SearchString { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TagKey { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUsageForecastResponse
	{
		
		/// <summary>
		/// The aggregated value for a metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricValue Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ForecastResult[] ForecastResultsByTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUsageForecastRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetUsageForecastRequestMetric Metric { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetUsageForecastRequestGranularity Granularity { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Filter { get; set; }
		
		/// <summary>
		/// Minimum: 51
		/// Maximum: 99
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(51, 99)]
		public System.Nullable<System.Int32> PredictionIntervalLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetUsageForecastRequestMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLENDED_COST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNBLENDED_COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMORTIZED_COST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_UNBLENDED_COST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_AMORTIZED_COST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_QUANTITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMALIZED_USAGE_AMOUNT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetUsageForecastRequestGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCostCategoryDefinitionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CostCategoryReference[] CostCategoryReferences { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCostCategoryDefinitionsRequest
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveOn { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCostCategoryDefinitionResponse
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateCostCategoryDefinitionRequest
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The rule schema version in this particular Cost Category.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateCostCategoryDefinitionRequestRuleVersion RuleVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public CostCategoryRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateCostCategoryDefinitionRequestRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CostCategoryExpression.v1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Context
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_AND_USAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS = 2,
	}
	
	/// <summary>
	/// The rule schema version in this particular Cost Category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CostCategoryRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CostCategoryExpression.v1 = 0,
	}
	
	/// <summary>
	/// The structure of Cost Categories. This includes detailed metadata and the set of rules for the <code>CostCategory</code> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CostCategory
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveStart { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveEnd { get; set; }
		
		/// <summary>
		/// The unique name of the Cost Category.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The rule schema version in this particular Cost Category.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CostCategoryRuleVersion RuleVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public CostCategoryRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CostCategoryRuleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CostCategoryExpression.v1 = 0,
	}
	
	/// <summary>
	/// <p>A reference to a Cost Category containing only enough information to identify the Cost Category.</p> <p>You can use this information to retrieve the full Cost Category information using <code>DescribeCostCategory</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CostCategoryReference
	{
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=20)]
		public string CostCategoryArn { get; set; }
		
		/// <summary>
		/// The unique name of the Cost Category.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveStart { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for.
		/// Max length: 25
		/// Min length: 20
		/// Pattern: ^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(([+-]\d\d:\d\d)|Z)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(25, MinimumLength=20)]
		public string EffectiveEnd { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumberOfRules { get; set; }
	}
	
	/// <summary>
	/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Expression
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Expression[] Or { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Expression[] And { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Expression Not { get; set; }
		
		/// <summary>
		/// The metadata that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DimensionValues Dimensions { get; set; }
		
		/// <summary>
		/// The values that are available for a tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagValues Tags { get; set; }
		
		/// <summary>
		/// The Cost Categories values used for filtering the costs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CostCategoryValues CostCategories { get; set; }
	}
	
	/// <summary>
	/// Rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CostCategoryRule
	{
		
		/// <summary>
		/// The value a line item will be categorized as, if it matches the rule.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Value { get; set; }
		
		/// <summary>
		/// <p>Use <code>Expression</code> to filter by cost or by usage. There are two patterns: </p> <ul> <li> <p>Simple dimension values - You can set the dimension name and values for the filters that you plan to use. For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "Dimensions": { "Key": "REGION", "Values": [ "us-east-1", “us-west-1” ] } }</code> </p> <p>The list of dimension values are OR'd together to retrieve cost or usage data. You can create <code>Expression</code> and <code>DimensionValues</code> objects using either <code>with*</code> methods or <code>set*</code> methods in multiple lines. </p> </li> <li> <p>Compound dimension values with logical operations - You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. This allows you to filter on more advanced options. For example, you can filter on <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>. The <code>Expression</code> for that looks like this:</p> <p> <code>{ "And": [ {"Or": [ {"Dimensions": { "Key": "REGION", "Values": [ "us-east-1", "us-west-1" ] }}, {"Tags": { "Key": "TagName", "Values": ["Value1"] } } ]}, {"Not": {"Dimensions": { "Key": "USAGE_TYPE", "Values": ["DataTransfer"] }}} ] } </code> </p> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error.</p> </note> <p> <code> { "And": [ ... ], "DimensionValues": { "Dimension": "USAGE_TYPE", "Values": [ "DataTransfer" ] } } </code> </p> </li> </ul> <note> <p>For <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT is not supported. OR is not supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> </note>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Expression Rule { get; set; }
	}
	
	/// <summary>
	/// The Cost Categories values used for filtering the costs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CostCategoryValues
	{
		
		/// <summary>
		/// The unique name of the Cost Category.
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Value[] Values { get; set; }
	}
	
	/// <summary>
	/// How long a running instance either used a reservation or was On-Demand.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoverageHours
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalRunningHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoverageHoursPercentage { get; set; }
	}
	
	/// <summary>
	/// <p>The amount of instance usage, in normalized units. Normalized units enable you to see your EC2 usage for multiple sizes of instances in a uniform way. For example, suppose you run an xlarge instance and a 2xlarge instance. If you run both instances for the same amount of time, the 2xlarge instance uses twice as much of your reservation as the xlarge instance, even though both instances show only one instance-hour. Using normalized units instead of instance-hours, the xlarge instance used 8 normalized units, and the 2xlarge instance used 16 normalized units.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux Instances</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoverageNormalizedUnits
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandNormalizedUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNormalizedUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalRunningNormalizedUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoverageNormalizedUnitsPercentage { get; set; }
	}
	
	/// <summary>
	/// How much it costs to run an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoverageCost
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandCost { get; set; }
	}
	
	/// <summary>
	/// The amount of instance usage that a reservation covered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Coverage
	{
		
		/// <summary>
		/// How long a running instance either used a reservation or was On-Demand.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CoverageHours CoverageHours { get; set; }
		
		/// <summary>
		/// <p>The amount of instance usage, in normalized units. Normalized units enable you to see your EC2 usage for multiple sizes of instances in a uniform way. For example, suppose you run an xlarge instance and a 2xlarge instance. If you run both instances for the same amount of time, the 2xlarge instance uses twice as much of your reservation as the xlarge instance, even though both instances show only one instance-hour. Using normalized units instead of instance-hours, the xlarge instance used 8 normalized units, and the 2xlarge instance used 16 normalized units.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux Instances</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CoverageNormalizedUnits CoverageNormalizedUnits { get; set; }
		
		/// <summary>
		/// How much it costs to run an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CoverageCost CoverageCost { get; set; }
	}
	
	/// <summary>
	/// The time period that you want the usage and costs for. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DateInterval
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 0
		/// Pattern: (\d{4}-\d{2}-\d{2})(T\d{2}:\d{2}:\d{2}Z)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=0)]
		public string Start { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 0
		/// Pattern: (\d{4}-\d{2}-\d{2})(T\d{2}:\d{2}:\d{2}Z)?
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=0)]
		public string End { get; set; }
	}
	
	/// <summary>
	/// Reservation coverage for a specified period, in hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CoverageByTime
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationCoverageGroup[] Groups { get; set; }
		
		/// <summary>
		/// The amount of instance usage that a reservation covered.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Coverage Total { get; set; }
	}
	
	/// <summary>
	/// Details on the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceDetails
	{
		
		/// <summary>
		///  Details on the Amazon EC2 Resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2ResourceDetails EC2ResourceDetails { get; set; }
	}
	
	/// <summary>
	/// Resource utilization of current resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceUtilization
	{
		
		/// <summary>
		///  Utilization metrics of the instance. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2ResourceUtilization EC2ResourceUtilization { get; set; }
	}
	
	/// <summary>
	/// Context about the current instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CurrentInstance
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagValues[] Tags { get; set; }
		
		/// <summary>
		/// Details on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetails ResourceDetails { get; set; }
		
		/// <summary>
		/// Resource utilization of current resource. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceUtilization ResourceUtilization { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ReservationCoveredHoursInLookbackPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SavingsPlansCoveredHoursInLookbackPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string OnDemandHoursInLookbackPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalRunningHoursInLookbackPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MonthlyCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Dimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT_NAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_TYPE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CODE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE_GROUP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORD_TYPE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATING_SYSTEM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENANCY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_ID = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL_ENTITY_NAME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_OPTION = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENGINE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CACHE_ENGINE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE_FAMILY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_ENTITY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_ID = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHTSIZING_TYPE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_TYPE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLAN_ARN = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_OPTION = 28,
	}
	
	/// <summary>
	/// The metadata that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DimensionValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DimensionValuesKey Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Value[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchOption[] MatchOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DimensionValuesKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED_ACCOUNT_NAME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_TYPE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CODE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_TYPE_GROUP = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECORD_TYPE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATING_SYSTEM = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TENANCY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_ID = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGAL_ENTITY_NAME = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT_OPTION = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_ENGINE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CACHE_ENGINE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_TYPE_FAMILY = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLING_ENTITY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_ID = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_ID = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHTSIZING_TYPE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLANS_TYPE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS_PLAN_ARN = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_OPTION = 28,
	}
	
	/// <summary>
	/// The metadata of a specific type that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DimensionValuesWithAttributes
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
	}
	
	/// <summary>
	/// Details about the Amazon EC2 instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2InstanceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Family { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Platform { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Tenancy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SizeFlexEligible { get; set; }
	}
	
	/// <summary>
	///  Details on the Amazon EC2 Resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2ResourceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string HourlyOnDemandRate { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Platform { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Sku { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Memory { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string NetworkPerformance { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Storage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Vcpu { get; set; }
	}
	
	/// <summary>
	///  Utilization metrics of the instance. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2ResourceUtilization
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MaxCpuUtilizationPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MaxMemoryUtilizationPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MaxStorageUtilizationPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERTIBLE = 1,
	}
	
	/// <summary>
	/// The Amazon EC2 hardware specifications that you want AWS to provide recommendations for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EC2Specification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EC2SpecificationOfferingClass OfferingClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EC2SpecificationOfferingClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERTIBLE = 1,
	}
	
	/// <summary>
	/// Details about the Amazon ES instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ESInstanceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceClass { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceSize { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SizeFlexEligible { get; set; }
	}
	
	/// <summary>
	/// Details about the Amazon ElastiCache instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ElastiCacheInstanceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Family { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string NodeType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string ProductDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SizeFlexEligible { get; set; }
	}
	
	/// <summary>
	/// The values that are available for a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagValues
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Value[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MatchOption[] MatchOptions { get; set; }
	}
	
	/// <summary>
	/// The forecast created for your query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForecastResult
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MeanValue { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string PredictionIntervalLowerBound { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string PredictionIntervalUpperBound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Granularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOURLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Metric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLENDED_COST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNBLENDED_COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMORTIZED_COST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_UNBLENDED_COST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NET_AMORTIZED_COST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USAGE_QUANTITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMALIZED_USAGE_AMOUNT = 6,
	}
	
	/// <summary>
	/// The aggregated value for a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TermInYears
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_UPFRONT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT_UTILIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAVY_UTILIZATION = 5,
	}
	
	/// <summary>
	/// Hardware specifications for the service that you want recommendations for.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServiceSpecification
	{
		
		/// <summary>
		/// The Amazon EC2 hardware specifications that you want AWS to provide recommendations for.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2Specification EC2Specification { get; set; }
	}
	
	/// <summary>
	/// Information about this specific recommendation, such as the timestamp for when AWS made a specific recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPurchaseRecommendationMetadata
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string GenerationTimestamp { get; set; }
	}
	
	/// <summary>
	/// The aggregated numbers for your reservation usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationAggregates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UtilizationPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UtilizationPercentageInUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PurchasedHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PurchasedUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalActualHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalActualUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UnusedHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UnusedUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OnDemandCostOfRIHoursUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NetRISavings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalPotentialRISavings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmortizedUpfrontFee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AmortizedRecurringFee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TotalAmortizedFee { get; set; }
	}
	
	/// <summary>
	///  Enables you to customize recommendations across two attributes. You can choose to view recommendations for instances within the same instance families or across different instance families. You can also choose to view your estimated savings associated with recommendations with consideration of existing Savings Plans or RI benefits, or niether. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RightsizingRecommendationConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationConfigurationRecommendationTarget RecommendationTarget { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool BenefitsConsidered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RightsizingRecommendationConfigurationRecommendationTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAME_INSTANCE_FAMILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_INSTANCE_FAMILY = 1,
	}
	
	/// <summary>
	/// Metadata for this recommendation set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RightsizingRecommendationMetadata
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string GenerationTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationMetadataLookbackPeriodInDays LookbackPeriodInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RightsizingRecommendationMetadataLookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	/// <summary>
	///  Summary of rightsizing recommendations 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RightsizingRecommendationSummary
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalRecommendationCount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedTotalMonthlySavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SavingsCurrencyCode { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SavingsPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SupportedSavingsPlansType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_SP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_INSTANCE_SP = 1,
	}
	
	/// <summary>
	/// Metadata about your Savings Plans Purchase Recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansPurchaseRecommendationMetadata
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecommendationId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string GenerationTimestamp { get; set; }
	}
	
	/// <summary>
	/// Contains your request parameters, Savings Plan Recommendations Summary, and Details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansPurchaseRecommendation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationAccountScope AccountScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationSavingsPlansType SavingsPlansType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationTermInYears TermInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationPaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationLookbackPeriodInDays LookbackPeriodInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationDetail[] SavingsPlansPurchaseRecommendationDetails { get; set; }
		
		/// <summary>
		/// Summary metrics for your Savings Plans Purchase Recommendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansPurchaseRecommendationSummary SavingsPlansPurchaseRecommendationSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SavingsPlansPurchaseRecommendationAccountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SavingsPlansPurchaseRecommendationSavingsPlansType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTE_SP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_INSTANCE_SP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SavingsPlansPurchaseRecommendationTermInYears
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SavingsPlansPurchaseRecommendationPaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_UPFRONT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT_UTILIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAVY_UTILIZATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SavingsPlansPurchaseRecommendationLookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	/// <summary>
	/// The aggregated utilization metrics for your Savings Plans usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansUtilizationAggregates
	{
		
		/// <summary>
		/// The measurement of how well you are using your existing Savings Plans.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilization Utilization { get; set; }
		
		/// <summary>
		/// The amount of savings you're accumulating, against the public On-Demand rate of the usage accrued in an account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansSavings Savings { get; set; }
		
		/// <summary>
		/// The amortized amount of Savings Plans purchased in a specific account during a specific time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansAmortizedCommitment AmortizedCommitment { get; set; }
	}
	
	/// <summary>
	/// One level of grouped data in the results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Key[] Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GroupDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_CATEGORY = 2,
	}
	
	/// <summary>
	/// Represents a group when you specify a group by criteria or in the response to a query with a specific grouping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GroupDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDefinitionType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GroupDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST_CATEGORY = 2,
	}
	
	/// <summary>
	/// Details about the Amazon RDS instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RDSInstanceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Family { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DatabaseEngine { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DatabaseEdition { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DeploymentOption { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string LicenseModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SizeFlexEligible { get; set; }
	}
	
	/// <summary>
	/// Details about the Amazon Redshift instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedshiftInstanceDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Family { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string NodeType { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CurrentGeneration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SizeFlexEligible { get; set; }
	}
	
	/// <summary>
	/// Details about the instances that AWS recommends that you purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceDetails
	{
		
		/// <summary>
		/// Details about the Amazon EC2 instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EC2InstanceDetails EC2InstanceDetails { get; set; }
		
		/// <summary>
		/// Details about the Amazon RDS instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RDSInstanceDetails RDSInstanceDetails { get; set; }
		
		/// <summary>
		/// Details about the Amazon Redshift instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedshiftInstanceDetails RedshiftInstanceDetails { get; set; }
		
		/// <summary>
		/// Details about the Amazon ElastiCache instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ElastiCacheInstanceDetails ElastiCacheInstanceDetails { get; set; }
		
		/// <summary>
		/// Details about the Amazon ES instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ESInstanceDetails ESInstanceDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MatchOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTS_WITH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDS_WITH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE_SENSITIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASE_INSENSITIVE = 5,
	}
	
	/// <summary>
	///  Details on the modification recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ModifyRecommendationDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetInstance[] TargetInstances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecommendationTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAME_INSTANCE_FAMILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CROSS_INSTANCE_FAMILY = 1,
	}
	
	/// <summary>
	/// A group of reservations that share a set of attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationCoverageGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// The amount of instance usage that a reservation covered.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Coverage Coverage { get; set; }
	}
	
	/// <summary>
	/// A summary about this recommendation, such as the currency code, the amount that AWS estimates that you could save, and the total amount of reservation to purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPurchaseRecommendationSummary
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalEstimatedMonthlySavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalEstimatedMonthlySavingsPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
	}
	
	/// <summary>
	/// A specific reservation that AWS recommends for purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPurchaseRecommendation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationAccountScope AccountScope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationLookbackPeriodInDays LookbackPeriodInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationTermInYears TermInYears { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationPaymentOption PaymentOption { get; set; }
		
		/// <summary>
		/// Hardware specifications for the service that you want recommendations for.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecification ServiceSpecification { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationDetail[] RecommendationDetails { get; set; }
		
		/// <summary>
		/// A summary about this recommendation, such as the currency code, the amount that AWS estimates that you could save, and the total amount of reservation to purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationPurchaseRecommendationSummary RecommendationSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPurchaseRecommendationAccountScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPurchaseRecommendationLookbackPeriodInDays
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVEN_DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRTY_DAYS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIXTY_DAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPurchaseRecommendationTermInYears
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_YEAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREE_YEARS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationPurchaseRecommendationPaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_UPFRONT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIGHT_UTILIZATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_UTILIZATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAVY_UTILIZATION = 5,
	}
	
	/// <summary>
	/// Details about your recommended reservation purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationPurchaseRecommendationDetail
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Details about the instances that AWS recommends that you purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceDetails InstanceDetails { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecommendedNumberOfInstancesToPurchase { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecommendedNormalizedUnitsToPurchase { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MinimumNumberOfInstancesUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MinimumNormalizedUnitsUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MaximumNumberOfInstancesUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string MaximumNormalizedUnitsUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AverageNumberOfInstancesUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AverageNormalizedUnitsUsedPerHour { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AverageUtilization { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedBreakEvenInMonths { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavingsPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlyOnDemandCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedReservationCostForLookbackPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string UpfrontCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string RecurringStandardMonthlyCost { get; set; }
	}
	
	/// <summary>
	/// A group of reservations that share a set of attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationUtilizationGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// The aggregated numbers for your reservation usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationAggregates Utilization { get; set; }
	}
	
	/// <summary>
	/// The result that is associated with a time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResultByTime
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metrics Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Group[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Estimated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RightsizingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFY = 1,
	}
	
	/// <summary>
	///  Details on termination recommendation. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TerminateRecommendationDetail
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavings { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
	}
	
	/// <summary>
	/// Recommendations to rightsize resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RightsizingRecommendation
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Context about the current instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CurrentInstance CurrentInstance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RightsizingRecommendationRightsizingType RightsizingType { get; set; }
		
		/// <summary>
		///  Details on the modification recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ModifyRecommendationDetail ModifyRecommendationDetail { get; set; }
		
		/// <summary>
		///  Details on termination recommendation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TerminateRecommendationDetail TerminateRecommendationDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RightsizingRecommendationRightsizingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFY = 1,
	}
	
	/// <summary>
	/// The amortized amount of Savings Plans purchased in a specific account during a specific time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansAmortizedCommitment
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AmortizedRecurringCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AmortizedUpfrontCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalAmortizedCommitment { get; set; }
	}
	
	/// <summary>
	/// Specific coverage percentage, On-Demand costs, and spend covered by Savings Plans, and total Savings Plans costs for an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansCoverageData
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string SpendCoveredBySavingsPlans { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string OnDemandCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CoveragePercentage { get; set; }
	}
	
	/// <summary>
	/// The amount of Savings Plans eligible usage that is covered by Savings Plans. All calculations consider the On-Demand equivalent of your Savings Plans usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansCoverage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// Specific coverage percentage, On-Demand costs, and spend covered by Savings Plans, and total Savings Plans costs for an account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansCoverageData Coverage { get; set; }
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
	}
	
	/// <summary>
	/// Attribute details on a specific Savings Plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansDetails
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string Region { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string InstanceFamily { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string OfferingId { get; set; }
	}
	
	/// <summary>
	/// Summary metrics for your Savings Plans Purchase Recommendations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansPurchaseRecommendationSummary
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedROI { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedTotalCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrentOnDemandSpend { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedSavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalRecommendationCount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string DailyCommitmentToPurchase { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string HourlyCommitmentToPurchase { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedSavingsPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedOnDemandCostWithCurrentCommitment { get; set; }
	}
	
	/// <summary>
	/// Details for your recommended Savings Plans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansPurchaseRecommendationDetail
	{
		
		/// <summary>
		/// Attribute details on a specific Savings Plan.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansDetails SavingsPlansDetails { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string UpfrontCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedROI { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedSPCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedOnDemandCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedOnDemandCostWithCurrentCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedSavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedSavingsPercentage { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string HourlyCommitmentToPurchase { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedAverageUtilization { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavingsAmount { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrentMinimumHourlyOnDemandSpend { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrentMaximumHourlyOnDemandSpend { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrentAverageHourlyOnDemandSpend { get; set; }
	}
	
	/// <summary>
	/// The amount of savings you're accumulating, against the public On-Demand rate of the usage accrued in an account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansSavings
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string NetSavings { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string OnDemandCostEquivalent { get; set; }
	}
	
	/// <summary>
	/// The measurement of how well you are using your existing Savings Plans.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansUtilization
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string TotalCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string UsedCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string UnusedCommitment { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string UtilizationPercentage { get; set; }
	}
	
	/// <summary>
	/// The amount of Savings Plans utilization, in hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansUtilizationByTime
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		/// <summary>
		/// The measurement of how well you are using your existing Savings Plans.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilization Utilization { get; set; }
		
		/// <summary>
		/// The amount of savings you're accumulating, against the public On-Demand rate of the usage accrued in an account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansSavings Savings { get; set; }
		
		/// <summary>
		/// The amortized amount of Savings Plans purchased in a specific account during a specific time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansAmortizedCommitment AmortizedCommitment { get; set; }
	}
	
	/// <summary>
	/// A single daily or monthly Savings Plans utilization rate, and details for your account. Master accounts in an organization have access to member accounts. You can use <code>GetDimensionValues</code> to determine the possible dimension values. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SavingsPlansUtilizationDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SavingsPlanArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Attributes Attributes { get; set; }
		
		/// <summary>
		/// The measurement of how well you are using your existing Savings Plans.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansUtilization Utilization { get; set; }
		
		/// <summary>
		/// The amount of savings you're accumulating, against the public On-Demand rate of the usage accrued in an account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansSavings Savings { get; set; }
		
		/// <summary>
		/// The amortized amount of Savings Plans purchased in a specific account during a specific time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SavingsPlansAmortizedCommitment AmortizedCommitment { get; set; }
	}
	
	/// <summary>
	///  Details on recommended instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetInstance
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlyCost { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string EstimatedMonthlySavings { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: [\S\s]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string CurrencyCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultTargetInstance { get; set; }
		
		/// <summary>
		/// Details on the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetails ResourceDetails { get; set; }
		
		/// <summary>
		/// Resource utilization of current resource. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceUtilization ExpectedResourceUtilization { get; set; }
	}
	
	/// <summary>
	/// The amount of utilization, in hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UtilizationByTime
	{
		
		/// <summary>
		/// The time period that you want the usage and costs for. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DateInterval TimePeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservationUtilizationGroup[] Groups { get; set; }
		
		/// <summary>
		/// The aggregated numbers for your reservation usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationAggregates Total { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new Cost Category with the requested name and rules.
		/// CreateCostCategoryDefinition /#X-Amz-Target=AWSInsightsIndexService.CreateCostCategoryDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCostCategoryDefinitionResponse> CreateCostCategoryDefinitionAsync(CreateCostCategoryDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.CreateCostCategoryDefinition";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateCostCategoryDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Cost Category. Expenses from this month going forward will no longer be categorized with this Cost Category.
		/// DeleteCostCategoryDefinition /#X-Amz-Target=AWSInsightsIndexService.DeleteCostCategoryDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteCostCategoryDefinitionResponse> DeleteCostCategoryDefinitionAsync(DeleteCostCategoryDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.DeleteCostCategoryDefinition";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteCostCategoryDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the name, ARN, rules, definition, and effective dates of a Cost Category that's defined in the account.</p> <p>You have the option to use <code>EffectiveOn</code> to return a Cost Category that is active on a specific date. If there is no <code>EffectiveOn</code> specified, you’ll see a Cost Category that is effective on the current date. If Cost Category is still effective, <code>EffectiveEnd</code> is omitted in the response. </p>
		/// DescribeCostCategoryDefinition /#X-Amz-Target=AWSInsightsIndexService.DescribeCostCategoryDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCostCategoryDefinitionResponse> DescribeCostCategoryDefinitionAsync(DescribeCostCategoryDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.DescribeCostCategoryDefinition";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeCostCategoryDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves cost and usage metrics for your account. You can specify which cost and usage-related metric, such as <code>BlendedCosts</code> or <code>UsageQuantity</code>, that you want the request to return. You can also filter and group your data by various dimensions, such as <code>SERVICE</code> or <code>AZ</code>, in a specific time range. For a complete list of valid dimensions, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html">GetDimensionValues</a> operation. Master accounts in an organization in AWS Organizations have access to all member accounts.
		/// GetCostAndUsage /#X-Amz-Target=AWSInsightsIndexService.GetCostAndUsage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCostAndUsageResponse> GetCostAndUsageAsync(GetCostAndUsageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetCostAndUsage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCostAndUsageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves cost and usage metrics with resources for your account. You can specify which cost and usage-related metric, such as <code>BlendedCosts</code> or <code>UsageQuantity</code>, that you want the request to return. You can also filter and group your data by various dimensions, such as <code>SERVICE</code> or <code>AZ</code>, in a specific time range. For a complete list of valid dimensions, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html">GetDimensionValues</a> operation. Master accounts in an organization in AWS Organizations have access to all member accounts. This API is currently available for the Amazon Elastic Compute Cloud – Compute service only.</p> <note> <p>This is an opt-in only feature. You can enable this feature from the Cost Explorer Settings page. For information on how to access the Settings page, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-access.html">Controlling Access for Cost Explorer</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p> </note>
		/// GetCostAndUsageWithResources /#X-Amz-Target=AWSInsightsIndexService.GetCostAndUsageWithResources
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCostAndUsageWithResourcesResponse> GetCostAndUsageWithResourcesAsync(GetCostAndUsageWithResourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetCostAndUsageWithResources";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCostAndUsageWithResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a forecast for how much Amazon Web Services predicts that you will spend over the forecast time period that you select, based on your past costs.
		/// GetCostForecast /#X-Amz-Target=AWSInsightsIndexService.GetCostForecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCostForecastResponse> GetCostForecastAsync(GetCostForecastRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetCostForecast";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCostForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves all available filter values for a specified filter over a period of time. You can search the dimension values for an arbitrary string.
		/// GetDimensionValues /#X-Amz-Target=AWSInsightsIndexService.GetDimensionValues
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDimensionValuesResponse> GetDimensionValuesAsync(GetDimensionValuesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetDimensionValues";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDimensionValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the reservation coverage for your account. This enables you to see how much of your Amazon Elastic Compute Cloud, Amazon ElastiCache, Amazon Relational Database Service, or Amazon Redshift usage is covered by a reservation. An organization's master account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data about reservation usage by the following dimensions:</p> <ul> <li> <p>AZ</p> </li> <li> <p>CACHE_ENGINE</p> </li> <li> <p>DATABASE_ENGINE</p> </li> <li> <p>DEPLOYMENT_OPTION</p> </li> <li> <p>INSTANCE_TYPE</p> </li> <li> <p>LINKED_ACCOUNT</p> </li> <li> <p>OPERATING_SYSTEM</p> </li> <li> <p>PLATFORM</p> </li> <li> <p>REGION</p> </li> <li> <p>SERVICE</p> </li> <li> <p>TAG</p> </li> <li> <p>TENANCY</p> </li> </ul> <p>To determine valid values for a dimension, use the <code>GetDimensionValues</code> operation. </p>
		/// GetReservationCoverage /#X-Amz-Target=AWSInsightsIndexService.GetReservationCoverage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetReservationCoverageResponse> GetReservationCoverageAsync(GetReservationCoverageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetReservationCoverage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetReservationCoverageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets recommendations for which reservations to purchase. These recommendations could help you reduce your costs. Reservations provide a discounted hourly rate (up to 75%) compared to On-Demand pricing.</p> <p>AWS generates your recommendations by identifying your On-Demand usage during a specific time period and collecting your usage into categories that are eligible for a reservation. After AWS has these categories, it simulates every combination of reservations in each category of usage to identify the best number of each type of RI to purchase to maximize your estimated savings. </p> <p>For example, AWS automatically aggregates your Amazon EC2 Linux, shared tenancy, and c4 family usage in the US West (Oregon) Region and recommends that you buy size-flexible regional reservations to apply to the c4 family usage. AWS recommends the smallest size instance in an instance family. This makes it easier to purchase a size-flexible RI. AWS also shows the equal number of normalized units so that you can purchase any instance size that you want. For this example, your RI recommendation would be for <code>c4.large</code> because that is the smallest size instance in the c4 instance family.</p>
		/// GetReservationPurchaseRecommendation /#X-Amz-Target=AWSInsightsIndexService.GetReservationPurchaseRecommendation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetReservationPurchaseRecommendationResponse> GetReservationPurchaseRecommendationAsync(GetReservationPurchaseRecommendationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetReservationPurchaseRecommendation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetReservationPurchaseRecommendationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the reservation utilization for your account. Master accounts in an organization have access to member accounts. You can filter data by dimensions in a time period. You can use <code>GetDimensionValues</code> to determine the possible dimension values. Currently, you can group only by <code>SUBSCRIPTION_ID</code>.
		/// GetReservationUtilization /#X-Amz-Target=AWSInsightsIndexService.GetReservationUtilization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetReservationUtilizationResponse> GetReservationUtilizationAsync(GetReservationUtilizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetReservationUtilization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetReservationUtilizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates recommendations that helps you save cost by identifying idle and underutilized Amazon EC2 instances.</p> <p>Recommendations are generated to either downsize or terminate instances, along with providing savings detail and metrics. For details on calculation and function, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/ce-what-is.html">Optimizing Your Cost with Rightsizing Recommendations</a>.</p>
		/// GetRightsizingRecommendation /#X-Amz-Target=AWSInsightsIndexService.GetRightsizingRecommendation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRightsizingRecommendationResponse> GetRightsizingRecommendationAsync(GetRightsizingRecommendationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetRightsizingRecommendation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRightsizingRecommendationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the Savings Plans covered for your account. This enables you to see how much of your cost is covered by a Savings Plan. An organization’s master account can see the coverage of the associated member accounts. This supports dimensions, Cost Categories, and nested expressions. For any time period, you can filter data for Savings Plans usage with the following dimensions:</p> <ul> <li> <p> <code>LINKED_ACCOUNT</code> </p> </li> <li> <p> <code>REGION</code> </p> </li> <li> <p> <code>SERVICE</code> </p> </li> <li> <p> <code>INSTANCE_FAMILY</code> </p> </li> </ul> <p>To determine valid values for a dimension, use the <code>GetDimensionValues</code> operation.</p>
		/// GetSavingsPlansCoverage /#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansCoverage
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetSavingsPlansCoverageResponse> GetSavingsPlansCoverageAsync(string MaxResults, string NextToken, GetSavingsPlansCoverageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansCoverage?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSavingsPlansCoverageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves your request parameters, Savings Plan Recommendations Summary and Details.
		/// GetSavingsPlansPurchaseRecommendation /#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSavingsPlansPurchaseRecommendationResponse> GetSavingsPlansPurchaseRecommendationAsync(GetSavingsPlansPurchaseRecommendationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansPurchaseRecommendation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSavingsPlansPurchaseRecommendationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the Savings Plans utilization for your account across date ranges with daily or monthly granularity. Master accounts in an organization have access to member accounts. You can use <code>GetDimensionValues</code> in <code>SAVINGS_PLANS</code> to determine the possible dimension values.</p> <note> <p>You cannot group by any dimension values for <code>GetSavingsPlansUtilization</code>.</p> </note>
		/// GetSavingsPlansUtilization /#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansUtilization
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSavingsPlansUtilizationResponse> GetSavingsPlansUtilizationAsync(GetSavingsPlansUtilizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansUtilization";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSavingsPlansUtilizationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves attribute data along with aggregate utilization and savings data for a given time period. This doesn't support granular or grouped data (daily/monthly) in response. You can't retrieve data by dates in a single response similar to <code>GetSavingsPlanUtilization</code>, but you have the option to make multiple calls to <code>GetSavingsPlanUtilizationDetails</code> by providing individual dates. You can use <code>GetDimensionValues</code> in <code>SAVINGS_PLANS</code> to determine the possible dimension values.</p> <note> <p> <code>GetSavingsPlanUtilizationDetails</code> internally groups data by <code>SavingsPlansArn</code>.</p> </note>
		/// GetSavingsPlansUtilizationDetails /#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansUtilizationDetails
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetSavingsPlansUtilizationDetailsResponse> GetSavingsPlansUtilizationDetailsAsync(string MaxResults, string NextToken, GetSavingsPlansUtilizationDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetSavingsPlansUtilizationDetails?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSavingsPlansUtilizationDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Queries for available tag keys and tag values for a specified period. You can search the tag values for an arbitrary string.
		/// GetTags /#X-Amz-Target=AWSInsightsIndexService.GetTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTagsResponse> GetTagsAsync(GetTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetTags";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTagsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a forecast for how much Amazon Web Services predicts that you will use over the forecast time period that you select, based on your past usage.
		/// GetUsageForecast /#X-Amz-Target=AWSInsightsIndexService.GetUsageForecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUsageForecastResponse> GetUsageForecastAsync(GetUsageForecastRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.GetUsageForecast";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUsageForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the name, ARN, <code>NumberOfRules</code> and effective dates of all Cost Categories defined in the account. You have the option to use <code>EffectiveOn</code> to return a list of Cost Categories that were active on a specific date. If there is no <code>EffectiveOn</code> specified, you’ll see Cost Categories that are effective on the current date. If Cost Category is still effective, <code>EffectiveEnd</code> is omitted in the response. <code>ListCostCategoryDefinitions</code> supports pagination. The request can have a <code>MaxResults</code> range up to 100.
		/// ListCostCategoryDefinitions /#X-Amz-Target=AWSInsightsIndexService.ListCostCategoryDefinitions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCostCategoryDefinitionsResponse> ListCostCategoryDefinitionsAsync(string MaxResults, string NextToken, ListCostCategoryDefinitionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.ListCostCategoryDefinitions?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCostCategoryDefinitionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Cost Category. Changes made to the Cost Category rules will be used to categorize the current month’s expenses and future expenses. This won’t change categorization for the previous months.
		/// UpdateCostCategoryDefinition /#X-Amz-Target=AWSInsightsIndexService.UpdateCostCategoryDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateCostCategoryDefinitionResponse> UpdateCostCategoryDefinitionAsync(UpdateCostCategoryDefinitionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSInsightsIndexService.UpdateCostCategoryDefinition";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateCostCategoryDefinitionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
