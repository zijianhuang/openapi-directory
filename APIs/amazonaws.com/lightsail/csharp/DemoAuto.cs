//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AllocateStaticIpRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachDiskResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachDiskRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachInstancesToLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachInstancesToLoadBalancerRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceName[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachStaticIpRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticIpName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseInstancePublicPortsResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloseInstancePublicPortsRequest
	{
		
		/// <summary>
		/// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortInfo PortInfo { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopySnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopySnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetSnapshotName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CopySnapshotRequestSourceRegion SourceRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CopySnapshotRequestSourceRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca-central-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-2 = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCloudFormationStackResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateCloudFormationStackRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceEntry[] Instances { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateContactMethodResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateContactMethodRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateContactMethodRequestProtocol Protocol { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ContactEndpoint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateContactMethodRequestProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequest[] AddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskFromSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DiskSnapshotName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequest[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDiskSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskSnapshotName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainEntryResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDomainEntryRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Describes a domain recordset entry.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainEntry DomainEntry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceSnapshotName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstancesRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @string[] InstanceNames { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CustomImageName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BlueprintId { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequest[] AddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstancesFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstancesFromSnapshotRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @string[] InstanceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedDiskMap AttachedDiskMapping { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceSnapshotName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequest[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceInstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RestoreDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateKeyPairResult
	{
		
		/// <summary>
		/// Describes the SSH key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyPair KeyPair { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKeyBase64 { get; set; }
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateKeyPairRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public int InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPath { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainName[] CertificateAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateDomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainName[] CertificateAlternativeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseBlueprintId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseBundleId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterDatabaseName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseFromSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseFromSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseBundleId { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceRelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RestoreTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseLatestRestorableTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAlarmRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAutoSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteAutoSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteContactMethodResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteContactMethodRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeleteContactMethodRequestProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteContactMethodRequestProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDiskResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDiskRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDeleteAddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDiskSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDiskSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainEntryResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDomainEntryRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Describes a domain recordset entry.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainEntry DomainEntry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInstanceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceDeleteAddOns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInstanceSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteKeyPairResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteKeyPairRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteKnownHostKeysResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteKnownHostKeysRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerTlsCertificateResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLoadBalancerTlsCertificateRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipFinalSnapshot { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FinalRelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRelationalDatabaseSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachDiskResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachDiskRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachInstancesFromLoadBalancerResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachInstancesFromLoadBalancerRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ResourceName[] InstanceNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DetachStaticIpRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableAddOnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisableAddOnRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DisableAddOnRequestAddOnType AddOnType { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DisableAddOnRequestAddOnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoSnapshot = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DownloadDefaultKeyPairResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKeyBase64 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKeyBase64 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableAddOnResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnableAddOnRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// <p>Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource.</p> <note> <p>An additional cost may be associated with enabling add-ons. For more information, see the <a href="https://aws.amazon.com/lightsail/pricing/">Lightsail pricing page</a>.</p> </note>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequest AddOnRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportSnapshotResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetActiveNamesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] ActiveNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetActiveNamesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAlarmsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Alarm[] Alarms { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAlarmsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MonitoredResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAutoSnapshotsResult
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetAutoSnapshotsResultResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoSnapshotDetails[] AutoSnapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetAutoSnapshotsResultResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAutoSnapshotsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBlueprintsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Blueprint[] Blueprints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBlueprintsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bundle[] Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBundlesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeInactive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCloudFormationStackRecordsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationStackRecord[] CloudFormationStackRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCloudFormationStackRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetContactMethodsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactMethod[] ContactMethods { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetContactMethodsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ContactProtocol[] Protocols { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskResult
	{
		
		/// <summary>
		/// Describes a system disk or a block storage disk.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Disk Disk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskSnapshotResult
	{
		
		/// <summary>
		/// Describes a block storage disk snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskSnapshot DiskSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DiskSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DiskSnapshot[] DiskSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDiskSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDisksResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDisksRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainResult
	{
		
		/// <summary>
		/// Describes a domain where you are storing recordsets in Lightsail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Domain Domain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Domain[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetExportSnapshotRecordsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExportSnapshotRecord[] ExportSnapshotRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetExportSnapshotRecordsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceResult
	{
		
		/// <summary>
		/// Describes an instance (a virtual private server).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Instance Instance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceAccessDetailsResult
	{
		
		/// <summary>
		/// The parameters for gaining temporary access to one of your Amazon Lightsail instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceAccessDetails AccessDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceAccessDetailsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetInstanceAccessDetailsRequestProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetInstanceAccessDetailsRequestProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rdp = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetInstanceMetricDataResultMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetInstanceMetricDataResultMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceMetricDataRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetInstanceMetricDataRequestMetricName MetricName { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int Period { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetInstanceMetricDataRequestUnit Unit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetInstanceMetricDataRequestMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetInstanceMetricDataRequestUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstancePortStatesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortState[] PortStates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstancePortStatesRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceSnapshotResult
	{
		
		/// <summary>
		/// Describes an instance snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceSnapshot InstanceSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceSnapshot[] InstanceSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceStateResult
	{
		
		/// <summary>
		/// Describes the virtual private server (or <i>instance</i>) status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceStateRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Instance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetKeyPairResult
	{
		
		/// <summary>
		/// Describes the SSH key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyPair KeyPair { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetKeyPairRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetKeyPairsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPair[] KeyPairs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetKeyPairsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerResult
	{
		
		/// <summary>
		/// Describes the Lightsail load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer LoadBalancer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetLoadBalancerMetricDataResultMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetLoadBalancerMetricDataResultMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerMetricDataRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetLoadBalancerMetricDataRequestMetricName MetricName { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int Period { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetLoadBalancerMetricDataRequestUnit Unit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetLoadBalancerMetricDataRequestMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetLoadBalancerMetricDataRequestUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerTlsCertificatesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificate[] TlsCertificates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancerTlsCertificatesRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancer[] LoadBalancers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLoadBalancersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationRequest
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OperationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationsForResourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOperationsForResourceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRegionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Region[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRegionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeAvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeRelationalDatabaseAvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseResult
	{
		
		/// <summary>
		/// Describes a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabase RelationalDatabase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseBlueprintsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseBlueprint[] Blueprints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseBlueprintsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseBundlesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseBundle[] Bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseBundlesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseEventsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseEvent[] RelationalDatabaseEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseEventsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseLogEventsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LogEvent[] ResourceLogEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextBackwardToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextForwardToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseLogEventsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LogStreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> StartFromHead { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseLogStreamsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] LogStreams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseLogStreamsRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseMasterUserPasswordResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseMasterUserPasswordRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetRelationalDatabaseMasterUserPasswordRequestPasswordVersion PasswordVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetRelationalDatabaseMasterUserPasswordRequestPasswordVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseMetricDataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetRelationalDatabaseMetricDataResultMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDatapoint[] MetricData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetRelationalDatabaseMetricDataResultMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseMetricDataRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetRelationalDatabaseMetricDataRequestMetricName MetricName { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int Period { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetRelationalDatabaseMetricDataRequestUnit Unit { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricStatistic[] Statistics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetRelationalDatabaseMetricDataRequestMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetRelationalDatabaseMetricDataRequestUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseParametersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseParameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseParametersRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseSnapshotResult
	{
		
		/// <summary>
		/// Describes a database snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseSnapshot RelationalDatabaseSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseSnapshotRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseSnapshotsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseSnapshot[] RelationalDatabaseSnapshots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabaseSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabasesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabase[] RelationalDatabases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRelationalDatabasesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStaticIpResult
	{
		
		/// <summary>
		/// Describes the static IP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticIp StaticIp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStaticIpRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStaticIpsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StaticIp[] StaticIps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetStaticIpsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportKeyPairResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportKeyPairRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PublicKeyBase64 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IsVpcPeeredResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPeered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpenInstancePublicPortsResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OpenInstancePublicPortsRequest
	{
		
		/// <summary>
		/// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortInfo PortInfo { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PeerVpcResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutAlarmRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutAlarmRequestMetricName MetricName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MonitoredResourceName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutAlarmRequestComparisonOperator ComparisonOperator { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Threshold { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int EvaluationPeriods { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PutAlarmRequestTreatMissingData TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactProtocol[] ContactProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmState[] NotificationTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotificationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutAlarmRequestMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutAlarmRequestComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqualToThreshold = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanThreshold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanThreshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqualToThreshold = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PutAlarmRequestTreatMissingData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		breaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notBreaching = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missing = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutInstancePublicPortsResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutInstancePublicPortsRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PortInfo[] PortInfos { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootInstanceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RebootRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReleaseStaticIpResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReleaseStaticIpRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StaticIpName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendContactMethodVerificationResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SendContactMethodVerificationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SendContactMethodVerificationRequestProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SendContactMethodVerificationRequestProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartInstanceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopInstanceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Force { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestAlarmResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestAlarmRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AlarmName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TestAlarmRequestState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestAlarmRequestState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UnpeerVpcResult
	{
		
		/// <summary>
		/// Describes the API operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Operation Operation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// Pattern: ^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainEntryResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDomainEntryRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Describes a domain recordset entry.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DomainEntry DomainEntry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLoadBalancerAttributeResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLoadBalancerAttributeRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateLoadBalancerAttributeRequestAttributeName AttributeName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string AttributeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateLoadBalancerAttributeRequestAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthCheckPath = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionStickinessEnabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionStickiness_LB_CookieDurationSeconds = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRelationalDatabaseResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRelationalDatabaseRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RotateMasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableBackupRetention { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableBackupRetention { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplyImmediately { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CaCertificateIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRelationalDatabaseParametersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Operation[] Operations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateRelationalDatabaseParametersRequest
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseParameter[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccessDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		outbound = 1,
	}
	
	/// <summary>
	/// Describes an add-on that is enabled for an Amazon Lightsail resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddOn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// Pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotTimeOfDay { get; set; }
		
		/// <summary>
		/// Pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextSnapshotTimeOfDay { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AddOnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoSnapshot = 0,
	}
	
	/// <summary>
	/// <p>Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk.</p> <p>When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:</p> <ul> <li> <p>If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> <li> <p>If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoSnapshotAddOnRequest
	{
		
		/// <summary>
		/// Pattern: ^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotTimeOfDay { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource.</p> <note> <p>An additional cost may be associated with enabling add-ons. For more information, see the <a href="https://aws.amazon.com/lightsail/pricing/">Lightsail pricing page</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AddOnRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddOnRequestAddOnType AddOnType { get; set; }
		
		/// <summary>
		/// <p>Describes a request to enable or modify the automatic snapshot add-on for an Amazon Lightsail instance or disk.</p> <p>When you modify the automatic snapshot time for a resource, it is typically effective immediately except under the following conditions:</p> <ul> <li> <p>If an automatic snapshot has been created for the current day, and you change the snapshot time to a later time of day, then the new snapshot time will be effective the following day. This ensures that two snapshots are not created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to an earlier time of day, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day.</p> </li> <li> <p>If an automatic snapshot has not yet been created for the current day, and you change the snapshot time to a time that is within 30 minutes from your current time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> <li> <p>If an automatic snapshot is scheduled to be created within 30 minutes from your current time and you change the snapshot time, then the new snapshot time will be effective the following day and a snapshot is automatically created at the previously set time for the current day. This ensures that a snapshot is created for the current day, because 30 minutes is required between your current time and the new snapshot time that you specify.</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutoSnapshotAddOnRequest AutoSnapshotAddOnRequest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AddOnRequestAddOnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoSnapshot = 0,
	}
	
	/// <summary>
	/// Describes the resource location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ResourceLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocationRegionName RegionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceLocationRegionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca-central-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-2 = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// <p>Describes resource being monitored by an alarm.</p> <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MonitoredResourceInfo
	{
		
		/// <summary>
		/// Pattern: ^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonitoredResourceInfoResourceType ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MonitoredResourceInfoResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqualToThreshold = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanThreshold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanThreshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqualToThreshold = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TreatMissingData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		breaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notBreaching = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missing = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	/// <summary>
	/// <p>Describes an alarm.</p> <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Alarm
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		/// <summary>
		/// <p>Describes resource being monitored by an alarm.</p> <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonitoredResourceInfo MonitoredResourceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmComparisonOperator ComparisonOperator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EvaluationPeriods { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public System.Nullable<System.Int32> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Threshold { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DatapointsToAlarm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmTreatMissingData TreatMissingData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmStatistic Statistic { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmMetricName MetricName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmUnit Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactProtocol[] ContactProtocols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AlarmState[] NotificationTriggers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotificationEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmComparisonOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanOrEqualToThreshold = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GreaterThanThreshold = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanThreshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LessThanOrEqualToThreshold = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmTreatMissingData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		breaching = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notBreaching = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ignore = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		missing = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmStatistic
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minimum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Maximum = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sum = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Average = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SampleCount = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 24,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALARM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSUFFICIENT_DATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AlarmUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	/// <summary>
	/// Describes a block storage disk that is attached to an instance, and is included in an automatic snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AttachedDisk
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoSnapshotStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
	}
	
	/// <summary>
	/// Describes an automatic snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutoSnapshotDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AutoSnapshotDetailsStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedDisk[] FromAttachedDisks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutoSnapshotDetailsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
	}
	
	/// <summary>
	/// Describes an Availability Zone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailabilityZone
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ZoneName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlueprintType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		os = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_UNIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 1,
	}
	
	/// <summary>
	/// Describes a blueprint (a virtual private server image).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Blueprint
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BlueprintId { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlueprintType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinPower { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LicenseUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlueprintPlatform Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlueprintType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		os = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		app = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlueprintPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_UNIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS = 1,
	}
	
	/// <summary>
	/// Describes a bundle, which is a set of specs describing your virtual private server (or <i>instance</i>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Bundle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Power { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RamSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePlatform[] SupportedPlatforms { get; set; }
	}
	
	/// <summary>
	/// Describes ports to open on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PortInfo
	{
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortInfoProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortInfoProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icmp = 3,
	}
	
	/// <summary>
	/// Describes the API operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Operation
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTerminal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationOperationType OperationType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OperationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StatusChangedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteKnownHostKeys = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopInstance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartInstance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootInstance = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpenInstancePublicPorts = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutInstancePublicPorts = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloseInstancePublicPorts = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllocateStaticIp = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseStaticIp = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachStaticIp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachStaticIp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateDomainEntry = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomainEntry = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDomain = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomain = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstanceSnapshot = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInstanceSnapshot = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstancesFromSnapshot = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoadBalancer = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoadBalancer = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachInstancesToLoadBalancer = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachInstancesFromLoadBalancer = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateLoadBalancerAttribute = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoadBalancerTlsCertificate = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoadBalancerTlsCertificate = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachLoadBalancerTlsCertificate = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDisk = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDisk = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachDisk = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachDisk = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDiskSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDiskSnapshot = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDiskFromSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabase = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRelationalDatabase = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRelationalDatabase = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabaseFromSnapshot = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabaseSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRelationalDatabaseSnapshot = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRelationalDatabaseParameters = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartRelationalDatabase = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootRelationalDatabase = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopRelationalDatabase = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnableAddOn = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableAddOn = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutAlarm = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAlarms = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAlarm = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TestAlarm = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateContactMethod = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetContactMethods = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SendContactMethodVerification = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteContactMethod = 54,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecordState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	/// <summary>
	/// Describes the destination of a record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DestinationInfo
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a CloudFormation stack record created as a result of the <code>create cloud formation stack</code> operation.</p> <p>A CloudFormation stack record provides information about the AWS CloudFormation stack used to create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudFormationStackRecord
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationStackRecordResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationStackRecordState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationStackRecordSourceInfo[] SourceInfo { get; set; }
		
		/// <summary>
		/// Describes the destination of a record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationInfo DestinationInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFormationStackRecordResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFormationStackRecordState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFormationStackRecordSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 0,
	}
	
	/// <summary>
	/// Describes the source of a CloudFormation stack record (i.e., the export snapshot record).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudFormationStackRecordSourceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CloudFormationStackRecordSourceInfoResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFormationStackRecordSourceInfoResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactMethodStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingVerification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	/// <summary>
	/// <p>Describes a contact method.</p> <p>A contact method is a way to send you notifications. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContactMethod
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactMethodStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactMethodProtocol Protocol { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContactMethodResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactMethodStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingVerification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Valid = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invalid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactMethodProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactMethodResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContactMethodVerificationProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Email = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca-central-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-2 = 13,
	}
	
	/// <summary>
	/// Describes a domain recordset entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DomainEntry
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainEntryOptions Options { get; set; }
	}
	
	/// <summary>
	/// Describes the SSH key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyPair
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPairResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Fingerprint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum KeyPairResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-use = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	/// <summary>
	/// Describes a system disk or a block storage disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Disk
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOn[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSystemDisk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Iops { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskState State { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GbInUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		in-use = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	/// <summary>
	/// Describes a disk.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSystemDisk { get; set; }
	}
	
	/// <summary>
	/// Describes a block storage disk mapping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskMap
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OriginalDiskPath { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NewDiskName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 3,
	}
	
	/// <summary>
	/// Describes a block storage disk snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskSnapshot
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskSnapshotResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskSnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromDiskName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromDiskArn { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromInstanceName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsFromAutoSnapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskSnapshotResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DiskSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 3,
	}
	
	/// <summary>
	/// Describes a disk snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DiskSnapshotInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	/// <summary>
	/// Describes a domain where you are storing recordsets in Lightsail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Domain
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DomainEntry[] DomainEntries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DomainResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// Describes the source of an export snapshot record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportSnapshotRecordSourceInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExportSnapshotRecordSourceInfoResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromResourceName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromResourceArn { get; set; }
		
		/// <summary>
		/// Describes an instance snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceSnapshotInfo InstanceSnapshotInfo { get; set; }
		
		/// <summary>
		/// Describes a disk snapshot.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DiskSnapshotInfo DiskSnapshotInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportSnapshotRecordSourceInfoResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 1,
	}
	
	/// <summary>
	/// Describes an export snapshot record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportSnapshotRecord
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportSnapshotRecordResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportSnapshotRecordState State { get; set; }
		
		/// <summary>
		/// Describes the source of an export snapshot record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExportSnapshotRecordSourceInfo SourceInfo { get; set; }
		
		/// <summary>
		/// Describes the destination of a record.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinationInfo DestinationInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportSnapshotRecordResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportSnapshotRecordState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExportSnapshotRecordSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 1,
	}
	
	/// <summary>
	/// Describes an instance snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceSnapshotInfo
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromBundleId { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromBlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DiskInfo[] FromDiskInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceAccessProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rdp = 1,
	}
	
	/// <summary>
	/// The parameters for gaining temporary access to one of your Amazon Lightsail instances.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceAccessDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CertKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpiresAt { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]{1,3}\.){3}[0-9]{1,3}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// The password data for the Windows Server-based instance, including the ciphertext and the key pair name.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PasswordData PasswordData { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceAccessDetailsProtocol Protocol { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public HostKeyAttributes[] HostKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceAccessDetailsProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ssh = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rdp = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkIn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkOut = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_Instance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatusCheckFailed_System = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityTime = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BurstCapacityPercentage = 7,
	}
	
	/// <summary>
	/// Describes an instance (a virtual private server).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Instance
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BlueprintId { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BlueprintName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddOn[] AddOns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsStaticIp { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]{1,3}\.){3}[0-9]{1,3}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrivateIpAddress { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]{1,3}\.){3}[0-9]{1,3}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PublicIpAddress { get; set; }
		
		/// <summary>
		/// Pattern: ([A-F0-9]{1,4}:){7}[A-F0-9]{1,4}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ipv6Address { get; set; }
		
		/// <summary>
		/// Describes the hardware for the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceHardware Hardware { get; set; }
		
		/// <summary>
		/// Describes monthly data transfer rates and port information for an instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceNetworking Networking { get; set; }
		
		/// <summary>
		/// Describes the virtual private server (or <i>instance</i>) status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceState State { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SshKeyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// Describes an instance snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceSnapshot
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceSnapshotResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceSnapshotState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Progress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Disk[] FromAttachedDisks { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromInstanceName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromInstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromBlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsFromAutoSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceSnapshotResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
	}
	
	/// <summary>
	/// Describes the virtual private server (or <i>instance</i>) status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceState
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ClientTLSNegotiationErrorCount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthyHostCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnhealthyHostCount = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_4XX_Count = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_LB_5XX_Count = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_2XX_Count = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_3XX_Count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_4XX_Count = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTPCode_Instance_5XX_Count = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceResponseTime = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RejectedConnectionCount = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCount = 11,
	}
	
	/// <summary>
	/// Describes the Lightsail load balancer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancer
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Port[] PublicPorts { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HealthCheckPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> InstancePort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceHealthSummary[] InstanceHealthSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateSummary[] TlsCertificateSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerConfigurationOptions ConfigurationOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_HTTPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabasePasswordVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabaseMetricName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPUUtilization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DatabaseConnections = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskQueueDepth = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FreeStorageSpace = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkReceiveThroughput = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetworkTransmitThroughput = 5,
	}
	
	/// <summary>
	/// Describes a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabase
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseBlueprintId { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RelationalDatabaseBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterDatabaseName { get; set; }
		
		/// <summary>
		/// Describes the hardware of a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseHardware Hardware { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryAvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BackupRetentionEnabled { get; set; }
		
		/// <summary>
		/// Describes a pending database value modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedRelationalDatabaseValues PendingModifiedValues { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LatestRestorableTime { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MasterUsername { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ParameterApplyStatus { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PreferredBackupWindow { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PreferredMaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PubliclyAccessible { get; set; }
		
		/// <summary>
		/// Describes an endpoint for a database.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseEndpoint MasterEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingMaintenanceAction[] PendingMaintenanceActions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CaCertificateIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabaseResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// Describes a database snapshot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseSnapshot
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseSnapshotResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Engine { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeInGb { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromRelationalDatabaseName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FromRelationalDatabaseArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromRelationalDatabaseBundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FromRelationalDatabaseBlueprintId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabaseSnapshotResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// Describes the static IP.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticIp
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StaticIpResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Pattern: ([0-9]{1,3}\.){3}[0-9]{1,3}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AttachedTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StaticIpResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	/// <summary>
	/// Describes the public SSH host keys or the RDP certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HostKeyAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Algorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> WitnessedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FingerprintSHA1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FingerprintSHA256 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotValidBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotValidAfter { get; set; }
	}
	
	/// <summary>
	/// Describes the hardware for the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceHardware
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Disk[] Disks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RamSizeInGb { get; set; }
	}
	
	/// <summary>
	/// Describes monthly data transfer rates and port information for an instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceNetworking
	{
		
		/// <summary>
		/// Describes the monthly data transfer in and out of your virtual private server (or <i>instance</i>).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonthlyTransfer MonthlyTransfer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortInfo[] Ports { get; set; }
	}
	
	/// <summary>
	/// The password data for the Windows Server-based instance, including the ciphertext and the key pair name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PasswordData
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Ciphertext { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyPairName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortInfoSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
	}
	
	/// <summary>
	/// Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the <code>create cloud formation stack</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceEntry
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceEntryPortInfoSource PortInfoSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserData { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceEntryPortInfoSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceHealthReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.InternalError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.ResponseCodeMismatch = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.Timeout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.FailedHealthChecks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.NotRegistered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.NotInUse = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.DeregistrationInProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.InvalidState = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.IpUnusable = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceHealthState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	/// <summary>
	/// Describes information about the health of the instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceHealthSummary
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceHealthSummaryInstanceHealth InstanceHealth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceHealthSummaryInstanceHealthReason InstanceHealthReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceHealthSummaryInstanceHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		initial = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		healthy = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unhealthy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draining = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceHealthSummaryInstanceHealthReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.RegistrationInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.InitialHealthChecking = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lb.InternalError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.ResponseCodeMismatch = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.Timeout = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.FailedHealthChecks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.NotRegistered = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.NotInUse = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.DeregistrationInProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.InvalidState = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance.IpUnusable = 10,
	}
	
	/// <summary>
	/// Describes the monthly data transfer in and out of your virtual private server (or <i>instance</i>).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MonthlyTransfer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> GbPerMonthAllocated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icmp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Private = 1,
	}
	
	/// <summary>
	/// Describes information about ports for an Amazon Lightsail instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstancePortInfo
	{
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortInfoProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortInfoAccessType AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CommonName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortInfoAccessDirection AccessDirection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePortInfoProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icmp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePortInfoAccessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Private = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePortInfoAccessDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PortState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 1,
	}
	
	/// <summary>
	/// Describes open ports on an instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstancePortState
	{
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> FromPort { get; set; }
		
		/// <summary>
		/// Minimum: -1
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 65535)]
		public System.Nullable<System.Int32> ToPort { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortStateProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstancePortStateState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] CidrListAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePortStateProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tcp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		udp = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icmp = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstancePortStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		closed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceSnapshotState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		error = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		provisioning = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active_impaired = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP_HTTPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTTP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerAttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HealthCheckPath = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionStickinessEnabled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SessionStickiness_LB_CookieDurationSeconds = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
	}
	
	/// <summary>
	/// Contains information about the status of Lightsail's managed renewal for the certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerTlsCertificateRenewalSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateRenewalSummaryRenewalStatus RenewalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateDomainValidationOption[] DomainValidationOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateRenewalSummaryRenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AUTO_RENEWAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateRevocationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERCEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_FROM_CRL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGE_WITHDRAWN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A_A_COMPROMISE = 9,
	}
	
	/// <summary>
	/// <p>Describes a load balancer SSL/TLS certificate.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerTlsCertificate
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// Describes the resource location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ResourceLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateResourceType ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LoadBalancerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateDomainValidationRecord[] DomainValidationRecords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateFailureReason FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> IssuedAt { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Issuer { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> NotBefore { get; set; }
		
		/// <summary>
		/// Contains information about the status of Lightsail's managed renewal for the certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateRenewalSummary RenewalSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateRevocationReason RevocationReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RevokedAt { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Serial { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SignatureAlgorithm { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Subject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] SubjectAlternativeNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Instance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StaticIp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KeyPair = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InstanceSnapshot = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Domain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PeeredVpc = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LoadBalancerTlsCertificate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disk = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DiskSnapshot = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabase = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RelationalDatabaseSnapshot = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExportSnapshotRecord = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudFormationStackRecord = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alarm = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContactMethod = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ISSUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALIDATION_TIMED_OUT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVOKED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AVAILABLE_CONTACTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDITIONAL_VERIFICATION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_NOT_ALLOWED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_PUBLIC_DOMAIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateRevocationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_COMPROMISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_COMPROMISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFILIATION_CHANGED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERCEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CESSATION_OF_OPERATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERTIFICATE_HOLD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE_FROM_CRL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGE_WITHDRAWN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A_A_COMPROMISE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateDomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
	}
	
	/// <summary>
	/// Contains information about the domain names on an SSL/TLS certificate that you will use to validate domain ownership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerTlsCertificateDomainValidationOption
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateDomainValidationOptionValidationStatus ValidationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateDomainValidationOptionValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
	}
	
	/// <summary>
	/// Describes the validation record of each domain name in the SSL/TLS certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerTlsCertificateDomainValidationRecord
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LoadBalancerTlsCertificateDomainValidationRecordValidationStatus ValidationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateDomainValidationRecordValidationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LoadBalancerTlsCertificateRenewalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_AUTO_RENEWAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_VALIDATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Provides a summary of SSL/TLS certificate metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoadBalancerTlsCertificateSummary
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttached { get; set; }
	}
	
	/// <summary>
	/// Describes a database log event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Describes the metric data point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricDatapoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Average { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Maximum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Minimum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricDatapointUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricDatapointUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Seconds = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Microseconds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Milliseconds = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Percent = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bytes/Second = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobytes/Second = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabytes/Second = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabytes/Second = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabytes/Second = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bits/Second = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kilobits/Second = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Megabits/Second = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gigabits/Second = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Terabits/Second = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Count/Second = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 26,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteKnownHostKeys = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInstance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopInstance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartInstance = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootInstance = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OpenInstancePublicPorts = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutInstancePublicPorts = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloseInstancePublicPorts = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllocateStaticIp = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseStaticIp = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachStaticIp = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachStaticIp = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateDomainEntry = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomainEntry = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDomain = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomain = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstanceSnapshot = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInstanceSnapshot = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstancesFromSnapshot = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoadBalancer = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoadBalancer = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachInstancesToLoadBalancer = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachInstancesFromLoadBalancer = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateLoadBalancerAttribute = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoadBalancerTlsCertificate = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoadBalancerTlsCertificate = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachLoadBalancerTlsCertificate = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDisk = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDisk = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachDisk = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachDisk = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDiskSnapshot = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDiskSnapshot = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDiskFromSnapshot = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabase = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRelationalDatabase = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRelationalDatabase = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabaseFromSnapshot = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRelationalDatabaseSnapshot = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRelationalDatabaseSnapshot = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRelationalDatabaseParameters = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartRelationalDatabase = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RebootRelationalDatabase = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StopRelationalDatabase = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnableAddOn = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DisableAddOn = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutAlarm = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAlarms = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAlarm = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TestAlarm = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateContactMethod = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetContactMethods = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SendContactMethodVerification = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteContactMethod = 54,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OperationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
	}
	
	/// <summary>
	/// Describes a pending database maintenance action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingMaintenanceAction
	{
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CurrentApplyDate { get; set; }
	}
	
	/// <summary>
	/// Describes a pending database value modification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PendingModifiedRelationalDatabaseValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MasterUserPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BackupRetentionEnabled { get; set; }
	}
	
	/// <summary>
	/// Describes the AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Region
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContinentCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RegionName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] AvailabilityZones { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone[] RelationalDatabaseAvailabilityZones { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegionName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-east-2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ca-central-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-2 = 13,
	}
	
	/// <summary>
	/// Describes the hardware of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseHardware
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RamSizeInGb { get; set; }
	}
	
	/// <summary>
	/// Describes an endpoint for a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		/// <summary>
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabaseEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mysql = 0,
	}
	
	/// <summary>
	/// Describes a database image, or blueprint. A blueprint describes the major engine version of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseBlueprint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BlueprintId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationalDatabaseBlueprintEngine Engine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEngineDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RelationalDatabaseBlueprintEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mysql = 0,
	}
	
	/// <summary>
	/// Describes a database bundle. A bundle describes the performance specifications of the database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseBundle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BundleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> Price { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> RamSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DiskSizeInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TransferPerMonthInGb { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsEncrypted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsActive { get; set; }
	}
	
	/// <summary>
	/// Describes an event for a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseEvent
	{
		
		/// <summary>
		/// Pattern: \w[\w\-]*\w
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public @string[] EventCategories { get; set; }
	}
	
	/// <summary>
	/// Describes the parameters of a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RelationalDatabaseParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ApplyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsModifiable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	/// <summary>
	/// <p>Describes a tag key and optional value assigned to an Amazon Lightsail resource.</p> <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail Dev Guide</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Allocates a static IP address.
		/// AllocateStaticIp /#X-Amz-Target=Lightsail_20161128.AllocateStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AllocateStaticIpResult> AllocateStaticIpAsync(AllocateStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.AllocateStaticIp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AllocateStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it to the instance with the specified disk name.</p> <p>The <code>attach disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// AttachDisk /#X-Amz-Target=Lightsail_20161128.AttachDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachDiskResult> AttachDiskAsync(AttachDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.AttachDisk";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches one or more Lightsail instances to a load balancer.</p> <p>After some time, the instances are attached to the load balancer and the health check status is available.</p> <p>The <code>attach instances to load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// AttachInstancesToLoadBalancer /#X-Amz-Target=Lightsail_20161128.AttachInstancesToLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachInstancesToLoadBalancerResult> AttachInstancesToLoadBalancerAsync(AttachInstancesToLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.AttachInstancesToLoadBalancer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachInstancesToLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>Once you create and validate your certificate, you can attach it to your load balancer. You can also use this API to rotate the certificates on your account. Use the <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and it will replace the existing one and become the attached certificate.</p> <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// AttachLoadBalancerTlsCertificate /#X-Amz-Target=Lightsail_20161128.AttachLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachLoadBalancerTlsCertificateResult> AttachLoadBalancerTlsCertificateAsync(AttachLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.AttachLoadBalancerTlsCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attaches a static IP address to a specific Amazon Lightsail instance.
		/// AttachStaticIp /#X-Amz-Target=Lightsail_20161128.AttachStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AttachStaticIpResult> AttachStaticIpAsync(AttachStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.AttachStaticIp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AttachStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Closes ports for a specific Amazon Lightsail instance.</p> <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CloseInstancePublicPorts /#X-Amz-Target=Lightsail_20161128.CloseInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CloseInstancePublicPortsResult> CloseInstancePublicPortsAsync(CloseInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CloseInstancePublicPorts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CloseInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an automatic snapshot of an instance or disk as a manual snapshot. This operation can also be used to copy a manual or automatic snapshot of an instance or a disk from one AWS Region to another in Amazon Lightsail.</p> <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code> parameters.</p> <p>When copying an <i>automatic snapshot</i>, be sure to define the <code>source region</code>, <code>source resource name</code>, <code>target snapshot name</code>, and either the <code>restore date</code> or the <code>use latest restorable auto snapshot</code> parameters.</p>
		/// CopySnapshot /#X-Amz-Target=Lightsail_20161128.CopySnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CopySnapshotResult> CopySnapshotAsync(CopySnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CopySnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CopySnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack records</code> operation to get a list of the CloudFormation stacks created.</p> <important> <p>Wait until after your new Amazon EC2 instance is created before running the <code>create cloud formation stack</code> operation again with the same export snapshot record.</p> </important>
		/// CreateCloudFormationStack /#X-Amz-Target=Lightsail_20161128.CreateCloudFormationStack
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCloudFormationStackResult> CreateCloudFormationStackAsync(CreateCloudFormationStackRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateCloudFormationStack";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateCloudFormationStackResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an email or SMS text message contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each AWS Region. However, SMS text messaging is not supported in some AWS Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// CreateContactMethod /#X-Amz-Target=Lightsail_20161128.CreateContactMethod
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateContactMethodResult> CreateContactMethodAsync(CreateContactMethodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateContactMethod";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateContactMethodResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., <code>us-east-2a</code>).</p> <p>The <code>create disk</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateDisk /#X-Amz-Target=Lightsail_20161128.CreateDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskResult> CreateDiskAsync(CreateDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateDisk";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g., <code>us-east-2a</code>).</p> <p>The <code>create disk from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>disk snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateDiskFromSnapshot /#X-Amz-Target=Lightsail_20161128.CreateDiskFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskFromSnapshotResult> CreateDiskFromSnapshotAsync(CreateDiskFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateDiskFromSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDiskFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make copies of disks, and to save data before shutting down a Lightsail instance.</p> <p>You can take a snapshot of an attached disk that is in use; however, snapshots only capture data that has been written to your disk at the time the snapshot command is issued. This may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the disk long enough to take a snapshot, your snapshot should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should unmount the disk from within the Lightsail instance, issue the create disk snapshot command, and then remount the disk to ensure a consistent and complete snapshot. You may remount and use your disk while the snapshot status is pending.</p> <p>You can also use this operation to create a snapshot of an instance's system volume. You might want to do this, for example, to recover data from the system volume of a botched instance or to create a backup of the system volume like you would for a block storage disk. To create a snapshot of a system volume, just define the <code>instance name</code> parameter when issuing the snapshot command, and a snapshot of the defined instance's system volume will be created. After the snapshot is available, you can create a block storage disk from the snapshot and attach it to a running instance to access the data on the disk.</p> <p>The <code>create disk snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateDiskSnapshot /#X-Amz-Target=Lightsail_20161128.CreateDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDiskSnapshotResult> CreateDiskSnapshotAsync(CreateDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateDiskSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a domain resource for the specified domain (e.g., example.com).</p> <p>The <code>create domain</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateDomain /#X-Amz-Target=Lightsail_20161128.CreateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDomainResult> CreateDomainAsync(CreateDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one of the following entry records associated with the domain: Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator (SRV), or text (TXT).</p> <p>The <code>create domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateDomainEntry /#X-Amz-Target=Lightsail_20161128.CreateDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDomainEntryResult> CreateDomainEntryAsync(CreateDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateDomainEntry";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>. You can use a snapshot to create a new instance that is based on that snapshot.</p> <p>The <code>create instance snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateInstanceSnapshot /#X-Amz-Target=Lightsail_20161128.CreateInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstanceSnapshotResult> CreateInstanceSnapshotAsync(CreateInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateInstanceSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more Amazon Lightsail instances.</p> <p>The <code>create instances</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateInstances /#X-Amz-Target=Lightsail_20161128.CreateInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstancesResult> CreateInstancesAsync(CreateInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates one or more new instances from a manual or automatic snapshot of an instance.</p> <p>The <code>create instances from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateInstancesFromSnapshot /#X-Amz-Target=Lightsail_20161128.CreateInstancesFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstancesFromSnapshotResult> CreateInstancesFromSnapshotAsync(CreateInstancesFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateInstancesFromSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateInstancesFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an SSH key pair.</p> <p>The <code>create key pair</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateKeyPair /#X-Amz-Target=Lightsail_20161128.CreateKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateKeyPairResult> CreateKeyPairAsync(CreateKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateKeyPair";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/how-to/article/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5 load balancers per AWS Region in your account.</p> <p>When you create a load balancer, you can specify a unique name and port settings. To change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code> operation.</p> <p>The <code>create load balancer</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateLoadBalancer /#X-Amz-Target=Lightsail_20161128.CreateLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLoadBalancerResult> CreateLoadBalancerAsync(CreateLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateLoadBalancer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a Lightsail load balancer TLS certificate.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateLoadBalancerTlsCertificate /#X-Amz-Target=Lightsail_20161128.CreateLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateLoadBalancerTlsCertificateResult> CreateLoadBalancerTlsCertificateAsync(CreateLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateLoadBalancerTlsCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new database in Amazon Lightsail.</p> <p>The <code>create relational database</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateRelationalDatabase /#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseResult> CreateRelationalDatabaseAsync(CreateRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p> <p>You can create a new database from a snapshot in if something goes wrong with your original database, or to change it to a different plan, such as a high availability or standard plan.</p> <p>The <code>create relational database from snapshot</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateRelationalDatabaseFromSnapshot /#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseFromSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseFromSnapshotResult> CreateRelationalDatabaseFromSnapshotAsync(CreateRelationalDatabaseFromSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseFromSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRelationalDatabaseFromSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups, to make copies of a database, and to save data before deleting a database.</p> <p>The <code>create relational database snapshot</code> operation supports tag-based access control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// CreateRelationalDatabaseSnapshot /#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRelationalDatabaseSnapshotResult> CreateRelationalDatabaseSnapshotAsync(CreateRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.CreateRelationalDatabaseSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an alarm.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// DeleteAlarm /#X-Amz-Target=Lightsail_20161128.DeleteAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAlarmResult> DeleteAlarmAsync(DeleteAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteAlarm";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.
		/// DeleteAutoSnapshot /#X-Amz-Target=Lightsail_20161128.DeleteAutoSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteAutoSnapshotResult> DeleteAutoSnapshotAsync(DeleteAutoSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteAutoSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteAutoSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each AWS Region. However, SMS text messaging is not supported in some AWS Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// DeleteContactMethod /#X-Amz-Target=Lightsail_20161128.DeleteContactMethod
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteContactMethodResult> DeleteContactMethodAsync(DeleteContactMethodRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteContactMethod";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteContactMethodResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified block storage disk. The disk must be in the <code>available</code> state (not attached to a Lightsail instance).</p> <note> <p>The disk may remain in the <code>deleting</code> state for several minutes.</p> </note> <p>The <code>delete disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteDisk /#X-Amz-Target=Lightsail_20161128.DeleteDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDiskResult> DeleteDiskAsync(DeleteDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteDisk";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified disk snapshot.</p> <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the disk.</p> <p>The <code>delete disk snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteDiskSnapshot /#X-Amz-Target=Lightsail_20161128.DeleteDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDiskSnapshotResult> DeleteDiskSnapshotAsync(DeleteDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteDiskSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified domain recordset and all of its domain records.</p> <p>The <code>delete domain</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteDomain /#X-Amz-Target=Lightsail_20161128.DeleteDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDomainResult> DeleteDomainAsync(DeleteDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific domain entry.</p> <p>The <code>delete domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteDomainEntry /#X-Amz-Target=Lightsail_20161128.DeleteDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDomainEntryResult> DeleteDomainEntryAsync(DeleteDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteDomainEntry";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an Amazon Lightsail instance.</p> <p>The <code>delete instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteInstance /#X-Amz-Target=Lightsail_20161128.DeleteInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceResult> DeleteInstanceAsync(DeleteInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific snapshot of a virtual private server (or <i>instance</i>).</p> <p>The <code>delete instance snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteInstanceSnapshot /#X-Amz-Target=Lightsail_20161128.DeleteInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceSnapshotResult> DeleteInstanceSnapshotAsync(DeleteInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteInstanceSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a specific SSH key pair.</p> <p>The <code>delete key pair</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>key pair name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteKeyPair /#X-Amz-Target=Lightsail_20161128.DeleteKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteKeyPairResult> DeleteKeyPairAsync(DeleteKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteKeyPair";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or RDP clients to authenticate an instance. This operation enables the Lightsail browser-based SSH or RDP clients to connect to the instance after a host key mismatch.</p> <important> <p>Perform this operation only if you were expecting the host key or certificate mismatch or if you are familiar with the new host key or certificate on the instance. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP client</a>.</p> </important>
		/// DeleteKnownHostKeys /#X-Amz-Target=Lightsail_20161128.DeleteKnownHostKeys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteKnownHostKeysResult> DeleteKnownHostKeysAsync(DeleteKnownHostKeysRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteKnownHostKeys";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteKnownHostKeysResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the load balancer is deleted, you will need to create a new load balancer, create a new certificate, and verify domain ownership again.</p> <p>The <code>delete load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteLoadBalancer /#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteLoadBalancerResult> DeleteLoadBalancerAsync(DeleteLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p> <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteLoadBalancerTlsCertificate /#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancerTlsCertificate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteLoadBalancerTlsCertificateResult> DeleteLoadBalancerTlsCertificateAsync(DeleteLoadBalancerTlsCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteLoadBalancerTlsCertificate";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteLoadBalancerTlsCertificateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a database in Amazon Lightsail.</p> <p>The <code>delete relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteRelationalDatabase /#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRelationalDatabaseResult> DeleteRelationalDatabaseAsync(DeleteRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a database snapshot in Amazon Lightsail.</p> <p>The <code>delete relational database snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DeleteRelationalDatabaseSnapshot /#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRelationalDatabaseSnapshotResult> DeleteRelationalDatabaseSnapshotAsync(DeleteRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DeleteRelationalDatabaseSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount any file systems on the device within your operating system before stopping the instance and detaching the disk.</p> <p>The <code>detach disk</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>disk name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DetachDisk /#X-Amz-Target=Lightsail_20161128.DetachDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachDiskResult> DetachDiskAsync(DetachDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DetachDisk";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetachDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detaches the specified instances from a Lightsail load balancer.</p> <p>This operation waits until the instances are no longer needed before they are detached from the load balancer.</p> <p>The <code>detach instances from load balancer</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// DetachInstancesFromLoadBalancer /#X-Amz-Target=Lightsail_20161128.DetachInstancesFromLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachInstancesFromLoadBalancerResult> DetachInstancesFromLoadBalancerAsync(DetachInstancesFromLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DetachInstancesFromLoadBalancer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetachInstancesFromLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detaches a static IP from the Amazon Lightsail instance to which it is attached.
		/// DetachStaticIp /#X-Amz-Target=Lightsail_20161128.DetachStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetachStaticIpResult> DetachStaticIpAsync(DetachStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DetachStaticIp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DetachStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.
		/// DisableAddOn /#X-Amz-Target=Lightsail_20161128.DisableAddOn
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableAddOnResult> DisableAddOnAsync(DisableAddOnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DisableAddOn";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisableAddOnResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Downloads the default SSH key pair from the user's account.
		/// DownloadDefaultKeyPair /#X-Amz-Target=Lightsail_20161128.DownloadDefaultKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DownloadDefaultKeyPairResult> DownloadDefaultKeyPairAsync(DownloadDefaultKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.DownloadDefaultKeyPair";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DownloadDefaultKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.
		/// EnableAddOn /#X-Amz-Target=Lightsail_20161128.EnableAddOn
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableAddOnResult> EnableAddOnAsync(EnableAddOnRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.EnableAddOn";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<EnableAddOnResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2). This operation results in an export snapshot record that can be used with the <code>create cloud formation stack</code> operation to create new Amazon EC2 instances.</p> <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in Amazon EC2 as the source Lightsail snapshot.</p> <p/> <p>The <code>export snapshot</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>source snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p> <note> <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code> operations to get a list of snapshots that you can export to Amazon EC2.</p> </note>
		/// ExportSnapshot /#X-Amz-Target=Lightsail_20161128.ExportSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExportSnapshotResult> ExportSnapshotAsync(ExportSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.ExportSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ExportSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the names of all active (not deleted) resources.
		/// GetActiveNames /#X-Amz-Target=Lightsail_20161128.GetActiveNames
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetActiveNamesResult> GetActiveNamesAsync(GetActiveNamesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetActiveNames";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetActiveNamesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the configured alarms. Specify an alarm name in your request to return information about a specific alarm, or specify a monitored resource name to return information about all alarms for a specific resource.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// GetAlarms /#X-Amz-Target=Lightsail_20161128.GetAlarms
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAlarmsResult> GetAlarmsAsync(GetAlarmsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetAlarms";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAlarmsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the available automatic snapshots for an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Lightsail Dev Guide</a>.
		/// GetAutoSnapshots /#X-Amz-Target=Lightsail_20161128.GetAutoSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAutoSnapshotsResult> GetAutoSnapshotsAsync(GetAutoSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetAutoSnapshots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAutoSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of available instance images, or <i>blueprints</i>. You can use a blueprint to create a new instance already running a specific operating system, as well as a preinstalled app or development stack. The software each instance is running depends on the blueprint image you choose.</p> <note> <p>Use active blueprints when creating new instances. Inactive blueprints are listed to support customers with existing instances and are not necessarily available to create new instances. Blueprints are marked inactive when they become outdated due to operating system updates or new application releases.</p> </note>
		/// GetBlueprints /#X-Amz-Target=Lightsail_20161128.GetBlueprints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBlueprintsResult> GetBlueprintsAsync(GetBlueprintsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetBlueprints";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBlueprintsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of bundles that are available for purchase. A bundle describes the specs for your virtual private server (or <i>instance</i>).
		/// GetBundles /#X-Amz-Target=Lightsail_20161128.GetBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetBundlesResult> GetBundlesAsync(GetBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetBundles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the CloudFormation stack record created as a result of the <code>create cloud formation stack</code> operation.</p> <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail snapshot.</p>
		/// GetCloudFormationStackRecords /#X-Amz-Target=Lightsail_20161128.GetCloudFormationStackRecords
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetCloudFormationStackRecordsResult> GetCloudFormationStackRecordsAsync(GetCloudFormationStackRecordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetCloudFormationStackRecords";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCloudFormationStackRecordsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the configured contact methods. Specify a protocol in your request to return information about a specific contact method.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each AWS Region. However, SMS text messaging is not supported in some AWS Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
		/// GetContactMethods /#X-Amz-Target=Lightsail_20161128.GetContactMethods
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetContactMethodsResult> GetContactMethodsAsync(GetContactMethodsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetContactMethods";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetContactMethodsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific block storage disk.
		/// GetDisk /#X-Amz-Target=Lightsail_20161128.GetDisk
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskResult> GetDiskAsync(GetDiskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDisk";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDiskResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific block storage disk snapshot.
		/// GetDiskSnapshot /#X-Amz-Target=Lightsail_20161128.GetDiskSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskSnapshotResult> GetDiskSnapshotAsync(GetDiskSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDiskSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDiskSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all block storage disk snapshots in your AWS account and region.
		/// GetDiskSnapshots /#X-Amz-Target=Lightsail_20161128.GetDiskSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDiskSnapshotsResult> GetDiskSnapshotsAsync(GetDiskSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDiskSnapshots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDiskSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all block storage disks in your AWS account and region.
		/// GetDisks /#X-Amz-Target=Lightsail_20161128.GetDisks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDisksResult> GetDisksAsync(GetDisksRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDisks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDisksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific domain recordset.
		/// GetDomain /#X-Amz-Target=Lightsail_20161128.GetDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainResult> GetDomainAsync(GetDomainRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDomain";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all domains in the user's account.
		/// GetDomains /#X-Amz-Target=Lightsail_20161128.GetDomains
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDomainsResult> GetDomainsAsync(GetDomainsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetDomains";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDomainsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the export snapshot record created as a result of the <code>export snapshot</code> operation.</p> <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related resources with the <code>create cloud formation stack</code> operation.</p>
		/// GetExportSnapshotRecords /#X-Amz-Target=Lightsail_20161128.GetExportSnapshotRecords
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetExportSnapshotRecordsResult> GetExportSnapshotRecordsAsync(GetExportSnapshotRecordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetExportSnapshotRecords";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetExportSnapshotRecordsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific Amazon Lightsail instance, which is a virtual private server.
		/// GetInstance /#X-Amz-Target=Lightsail_20161128.GetInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceResult> GetInstanceAsync(GetInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or <i>instance</i>.</p> <p>The <code>get instance access details</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// GetInstanceAccessDetails /#X-Amz-Target=Lightsail_20161128.GetInstanceAccessDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceAccessDetailsResult> GetInstanceAccessDetailsAsync(GetInstanceAccessDetailsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstanceAccessDetails";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceAccessDetailsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points for the specified Amazon Lightsail instance metric, given an instance name.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetInstanceMetricData /#X-Amz-Target=Lightsail_20161128.GetInstanceMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceMetricDataResult> GetInstanceMetricDataAsync(GetInstanceMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstanceMetricData";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses allowed to connect to the instance through the ports, and the protocol.
		/// GetInstancePortStates /#X-Amz-Target=Lightsail_20161128.GetInstancePortStates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstancePortStatesResult> GetInstancePortStatesAsync(GetInstancePortStatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstancePortStates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstancePortStatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific instance snapshot.
		/// GetInstanceSnapshot /#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceSnapshotResult> GetInstanceSnapshotAsync(GetInstanceSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns all instance snapshots for the user's account.
		/// GetInstanceSnapshots /#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceSnapshotsResult> GetInstanceSnapshotsAsync(GetInstanceSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstanceSnapshots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the state of a specific instance. Works on one instance at a time.
		/// GetInstanceState /#X-Amz-Target=Lightsail_20161128.GetInstanceState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceStateResult> GetInstanceStateAsync(GetInstanceStateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstanceState";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceStateResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all Amazon Lightsail virtual private servers, or <i>instances</i>.
		/// GetInstances /#X-Amz-Target=Lightsail_20161128.GetInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstancesResult> GetInstancesAsync(GetInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific key pair.
		/// GetKeyPair /#X-Amz-Target=Lightsail_20161128.GetKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetKeyPairResult> GetKeyPairAsync(GetKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetKeyPair";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all key pairs in the user's account.
		/// GetKeyPairs /#X-Amz-Target=Lightsail_20161128.GetKeyPairs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetKeyPairsResult> GetKeyPairsAsync(GetKeyPairsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetKeyPairs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetKeyPairsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified Lightsail load balancer.
		/// GetLoadBalancer /#X-Amz-Target=Lightsail_20161128.GetLoadBalancer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerResult> GetLoadBalancerAsync(GetLoadBalancerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetLoadBalancer";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLoadBalancerResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about health metrics for your Lightsail load balancer.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetLoadBalancerMetricData /#X-Amz-Target=Lightsail_20161128.GetLoadBalancerMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerMetricDataResult> GetLoadBalancerMetricDataAsync(GetLoadBalancerMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetLoadBalancerMetricData";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLoadBalancerMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the TLS certificates that are associated with the specified Lightsail load balancer.</p> <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p> <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One is active and the other is inactive.</p>
		/// GetLoadBalancerTlsCertificates /#X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsCertificates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancerTlsCertificatesResult> GetLoadBalancerTlsCertificatesAsync(GetLoadBalancerTlsCertificatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetLoadBalancerTlsCertificates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLoadBalancerTlsCertificatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all load balancers in an account.
		/// GetLoadBalancers /#X-Amz-Target=Lightsail_20161128.GetLoadBalancers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLoadBalancersResult> GetLoadBalancersAsync(GetLoadBalancersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetLoadBalancers";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLoadBalancersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific operation. Operations include events such as when you create an instance, allocate a static IP, attach a static IP, and so on.
		/// GetOperation /#X-Amz-Target=Lightsail_20161128.GetOperation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationResult> GetOperationAsync(GetOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetOperation";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOperationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all operations.</p> <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged by making each subsequent call to <code>GetOperations</code> use the maximum (last) <code>statusChangedAt</code> value from the previous request.</p>
		/// GetOperations /#X-Amz-Target=Lightsail_20161128.GetOperations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationsResult> GetOperationsAsync(GetOperationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetOperations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOperationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets operations for a specific resource (e.g., an instance or a static IP).
		/// GetOperationsForResource /#X-Amz-Target=Lightsail_20161128.GetOperationsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetOperationsForResourceResult> GetOperationsForResourceAsync(GetOperationsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetOperationsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOperationsForResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all valid regions for Amazon Lightsail. Use the <code>include availability zones</code> parameter to also return the Availability Zones in a region.
		/// GetRegions /#X-Amz-Target=Lightsail_20161128.GetRegions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRegionsResult> GetRegionsAsync(GetRegionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRegions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRegionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific database in Amazon Lightsail.
		/// GetRelationalDatabase /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseResult> GetRelationalDatabaseAsync(GetRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes the major engine version of a database.</p> <p>You can use a blueprint ID to create a new database that runs a specific database engine.</p>
		/// GetRelationalDatabaseBlueprints /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBlueprints
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseBlueprintsResult> GetRelationalDatabaseBlueprintsAsync(GetRelationalDatabaseBlueprintsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBlueprints";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseBlueprintsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the performance specifications for a database.</p> <p>You can use a bundle ID to create a new database with explicit performance specifications.</p>
		/// GetRelationalDatabaseBundles /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBundles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseBundlesResult> GetRelationalDatabaseBundlesAsync(GetRelationalDatabaseBundlesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseBundles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseBundlesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of events for a specific database in Amazon Lightsail.
		/// GetRelationalDatabaseEvents /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseEventsResult> GetRelationalDatabaseEventsAsync(GetRelationalDatabaseEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseEvents";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseEventsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of log events for a database in Amazon Lightsail.
		/// GetRelationalDatabaseLogEvents /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogEvents
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseLogEventsResult> GetRelationalDatabaseLogEventsAsync(GetRelationalDatabaseLogEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogEvents";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseLogEventsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of available log streams for a specific database in Amazon Lightsail.
		/// GetRelationalDatabaseLogStreams /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogStreams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseLogStreamsResult> GetRelationalDatabaseLogStreamsAsync(GetRelationalDatabaseLogStreamsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseLogStreams";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseLogStreamsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the current, previous, or pending versions of the master user password for a Lightsail database.</p> <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName.</p>
		/// GetRelationalDatabaseMasterUserPassword /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMasterUserPassword
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseMasterUserPasswordResult> GetRelationalDatabaseMasterUserPasswordAsync(GetRelationalDatabaseMasterUserPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMasterUserPassword";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseMasterUserPasswordResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p> <p>Metrics report the utilization of your resources, and the error counts generated by them. Monitor and collect metric data regularly to maintain the reliability, availability, and performance of your resources.</p>
		/// GetRelationalDatabaseMetricData /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMetricData
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseMetricDataResult> GetRelationalDatabaseMetricDataAsync(GetRelationalDatabaseMetricDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseMetricData";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseMetricDataResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns all of the runtime parameters offered by the underlying database software, or engine, for a specific database in Amazon Lightsail.</p> <p>In addition to the parameter names and values, this operation returns other information about each parameter. This information includes whether changes require a reboot, whether the parameter is modifiable, the allowed values, and the data types.</p>
		/// GetRelationalDatabaseParameters /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseParametersResult> GetRelationalDatabaseParametersAsync(GetRelationalDatabaseParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseParameters";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific database snapshot in Amazon Lightsail.
		/// GetRelationalDatabaseSnapshot /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseSnapshotResult> GetRelationalDatabaseSnapshotAsync(GetRelationalDatabaseSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshot";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseSnapshotResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all of your database snapshots in Amazon Lightsail.
		/// GetRelationalDatabaseSnapshots /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshots
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabaseSnapshotsResult> GetRelationalDatabaseSnapshotsAsync(GetRelationalDatabaseSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabaseSnapshots";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabaseSnapshotsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all of your databases in Amazon Lightsail.
		/// GetRelationalDatabases /#X-Amz-Target=Lightsail_20161128.GetRelationalDatabases
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRelationalDatabasesResult> GetRelationalDatabasesAsync(GetRelationalDatabasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetRelationalDatabases";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRelationalDatabasesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific static IP.
		/// GetStaticIp /#X-Amz-Target=Lightsail_20161128.GetStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStaticIpResult> GetStaticIpAsync(GetStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetStaticIp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all static IPs in the user's account.
		/// GetStaticIps /#X-Amz-Target=Lightsail_20161128.GetStaticIps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetStaticIpsResult> GetStaticIpsAsync(GetStaticIpsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.GetStaticIps";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetStaticIpsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports a public SSH key from a specific key pair.
		/// ImportKeyPair /#X-Amz-Target=Lightsail_20161128.ImportKeyPair
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportKeyPairResult> ImportKeyPairAsync(ImportKeyPairRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.ImportKeyPair";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ImportKeyPairResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a Boolean value indicating whether your Lightsail VPC is peered.
		/// IsVpcPeered /#X-Amz-Target=Lightsail_20161128.IsVpcPeered
		/// </summary>
		/// <returns>Success</returns>
		public async Task<IsVpcPeeredResult> IsVpcPeeredAsync(IsVpcPeeredRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.IsVpcPeered";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<IsVpcPeeredResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol.</p> <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// OpenInstancePublicPorts /#X-Amz-Target=Lightsail_20161128.OpenInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<OpenInstancePublicPortsResult> OpenInstancePublicPortsAsync(OpenInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.OpenInstancePublicPorts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<OpenInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tries to peer the Lightsail VPC with the user's default VPC.
		/// PeerVpc /#X-Amz-Target=Lightsail_20161128.PeerVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PeerVpcResult> PeerVpcAsync(PeerVpcRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.PeerVpc";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PeerVpcResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates or updates an alarm, and associates it with the specified metric.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p> <p>When this action creates an alarm, the alarm state is immediately set to <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.</p> <p>When you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm. The alarm is then evaluated with the updated configuration.</p>
		/// PutAlarm /#X-Amz-Target=Lightsail_20161128.PutAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutAlarmResult> PutAlarmAsync(PutAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.PutAlarm";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses allowed to connect to the instance through the ports, and the protocol. This action also closes all currently open ports that are not included in the request. Include all of the ports and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open ports.</p> <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via resource tags applied to the resource identified by <code>instanceName</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// PutInstancePublicPorts /#X-Amz-Target=Lightsail_20161128.PutInstancePublicPorts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutInstancePublicPortsResult> PutInstancePublicPortsAsync(PutInstancePublicPortsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.PutInstancePublicPorts";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutInstancePublicPortsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restarts a specific instance.</p> <p>The <code>reboot instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// RebootInstance /#X-Amz-Target=Lightsail_20161128.RebootInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebootInstanceResult> RebootInstanceAsync(RebootInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.RebootInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RebootInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Restarts a specific database in Amazon Lightsail.</p> <p>The <code>reboot relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// RebootRelationalDatabase /#X-Amz-Target=Lightsail_20161128.RebootRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RebootRelationalDatabaseResult> RebootRelationalDatabaseAsync(RebootRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.RebootRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RebootRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a specific static IP from your account.
		/// ReleaseStaticIp /#X-Amz-Target=Lightsail_20161128.ReleaseStaticIp
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReleaseStaticIpResult> ReleaseStaticIpAsync(ReleaseStaticIpRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.ReleaseStaticIp";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ReleaseStaticIpResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sends a verification request to an email contact method to ensure it's owned by the requester. SMS contact methods don't need to be verified.</p> <p>A contact method is used to send you notifications about your Amazon Lightsail resources. You can add one email address and one mobile phone number contact method in each AWS Region. However, SMS text messaging is not supported in some AWS Regions, and SMS text messages cannot be sent to some countries/regions. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p> <p>A verification request is sent to the contact method when you initially create it. Use this action to send another verification request if a previous verification request was deleted, or has expired.</p> <important> <p>Notifications are not sent to an email contact method until after it is verified, and confirmed as valid.</p> </important>
		/// SendContactMethodVerification /#X-Amz-Target=Lightsail_20161128.SendContactMethodVerification
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SendContactMethodVerificationResult> SendContactMethodVerificationAsync(SendContactMethodVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.SendContactMethodVerification";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<SendContactMethodVerificationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance, use the <code>reboot instance</code> operation.</p> <note> <p>When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/lightsail-create-static-ip">Lightsail Dev Guide</a>.</p> </note> <p>The <code>start instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// StartInstance /#X-Amz-Target=Lightsail_20161128.StartInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartInstanceResult> StartInstanceAsync(StartInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.StartInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database, use the <code>reboot relational database</code> operation.</p> <p>The <code>start relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// StartRelationalDatabase /#X-Amz-Target=Lightsail_20161128.StartRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRelationalDatabaseResult> StartRelationalDatabaseAsync(StartRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.StartRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a specific Amazon Lightsail instance that is currently running.</p> <note> <p>When you start a stopped instance, Lightsail assigns a new public IP address to the instance. To use the same IP address after stopping and starting an instance, create a static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/lightsail-create-static-ip">Lightsail Dev Guide</a>.</p> </note> <p>The <code>stop instance</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>instance name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// StopInstance /#X-Amz-Target=Lightsail_20161128.StopInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopInstanceResult> StopInstanceAsync(StopInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.StopInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a specific database that is currently running in Amazon Lightsail.</p> <p>The <code>stop relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// StopRelationalDatabase /#X-Amz-Target=Lightsail_20161128.StopRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRelationalDatabaseResult> StopRelationalDatabaseAsync(StopRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.StopRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Lightsail Dev Guide</a>.</p> <p>The <code>tag resource</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>resource name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// TagResource /#X-Amz-Target=Lightsail_20161128.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResult> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification trigger is configured for the specified alarm, the test also sends a notification to the notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the alarm.</p> <p>An alarm is used to monitor a single metric for one of your resources. When a metric condition is met, the alarm can notify you by email, SMS text message, and a banner displayed on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
		/// TestAlarm /#X-Amz-Target=Lightsail_20161128.TestAlarm
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TestAlarmResult> TestAlarmAsync(TestAlarmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.TestAlarm";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TestAlarmResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to unpeer the Lightsail VPC from the user's default VPC.
		/// UnpeerVpc /#X-Amz-Target=Lightsail_20161128.UnpeerVpc
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UnpeerVpcResult> UnpeerVpcAsync(UnpeerVpcRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UnpeerVpc";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UnpeerVpcResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail resource.</p> <p>The <code>untag resource</code> operation supports tag-based access control via request tags and resource tags applied to the resource identified by <code>resource name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// UntagResource /#X-Amz-Target=Lightsail_20161128.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResult> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates a domain recordset after it is created.</p> <p>The <code>update domain entry</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>domain name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// UpdateDomainEntry /#X-Amz-Target=Lightsail_20161128.UpdateDomainEntry
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDomainEntryResult> UpdateDomainEntryAsync(UpdateDomainEntryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UpdateDomainEntry";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDomainEntryResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified attribute for a load balancer. You can only update one attribute at a time.</p> <p>The <code>update load balancer attribute</code> operation supports tag-based access control via resource tags applied to the resource identified by <code>load balancer name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// UpdateLoadBalancerAttribute /#X-Amz-Target=Lightsail_20161128.UpdateLoadBalancerAttribute
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateLoadBalancerAttributeResult> UpdateLoadBalancerAttributeAsync(UpdateLoadBalancerAttributeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UpdateLoadBalancerAttribute";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateLoadBalancerAttributeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p> <p>Updates are applied immediately, or in cases where the updates could result in an outage, are applied during the database's predefined maintenance window.</p> <p>The <code>update relational database</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// UpdateRelationalDatabase /#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabase
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRelationalDatabaseResult> UpdateRelationalDatabaseAsync(UpdateRelationalDatabaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRelationalDatabaseResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p> <p>Parameter updates don't cause outages; therefore, their application is not subject to the preferred maintenance window. However, there are two ways in which parameter updates are applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a <code>dynamic</code> apply type are applied immediately. Parameters marked with a <code>pending-reboot</code> apply type are applied only after the database is rebooted using the <code>reboot relational database</code> operation.</p> <p>The <code>update relational database parameters</code> operation supports tag-based access control via resource tags applied to the resource identified by relationalDatabaseName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Dev Guide</a>.</p>
		/// UpdateRelationalDatabaseParameters /#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabaseParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateRelationalDatabaseParametersResult> UpdateRelationalDatabaseParametersAsync(UpdateRelationalDatabaseParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=Lightsail_20161128.UpdateRelationalDatabaseParameters";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateRelationalDatabaseParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
