//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetRequestDomain Domain { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetRequestDatasetType DatasetType { get; set; }
		
		/// <summary>
		/// Pattern: ^Y|M|W|D|H|30min|15min|10min|5min|1min$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataFrequency { get; set; }
		
		/// <summary>
		/// Defines the fields of a dataset. You specify this object in the <a>CreateDataset</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Schema Schema { get; set; }
		
		/// <summary>
		/// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfig EncryptionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDatasetRequestDomain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDatasetRequestDatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TIME_SERIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATED_TIME_SERIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_METADATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetGroupResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetGroupRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetGroupName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateDatasetGroupRequestDomain Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Arn[] DatasetArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateDatasetGroupRequestDomain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetImportJobResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetImportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDatasetImportJobRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetImportJobName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
		
		/// <summary>
		/// The source of your training data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateDatasetImportJob</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\:\.\,\'\s]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string TimestampFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateForecastResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateForecastRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ForecastType[] ForecastTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateForecastExportJobResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastExportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateForecastExportJobRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastExportJobName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
		
		/// <summary>
		/// The destination for an exported forecast, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateForecastExportJob</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataDestination Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePredictorResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreatePredictorRequest
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string PredictorName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string AlgorithmArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int ForecastHorizon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PerformAutoML { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PerformHPO { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingParameters TrainingParameters { get; set; }
		
		/// <summary>
		/// Parameters that define how to split a dataset into training data and testing data, and the number of iterations to perform. These parameters are specified in the predefined algorithms but you can override them in the <a>CreatePredictor</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EvaluationParameters EvaluationParameters { get; set; }
		
		/// <summary>
		/// <p>Configuration information for a hyperparameter tuning job. You specify this object in the <a>CreatePredictor</a> request.</p> <p>A <i>hyperparameter</i> is a parameter that governs the model training process. You set hyperparameters before training starts, unlike model parameters, which are determined during training. The values of the hyperparameters effect which values are chosen for the model parameters.</p> <p>In a <i>hyperparameter tuning job</i>, Amazon Forecast chooses the set of hyperparameter values that optimize a specified metric. Forecast accomplishes this by running many training jobs over a range of hyperparameter values. The optimum set of values depends on the algorithm, the training data, and the specified metric objective.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConfig HPOConfig { get; set; }
		
		/// <summary>
		/// The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the <a>CreatePredictor</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// <p>In a <a>CreatePredictor</a> operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as <i>featurization</i>.</p> <p>You define featurization using the <code>FeaturizationConfig</code> object. You specify an array of transformations, one for each field that you want to featurize. You then include the <code>FeaturizationConfig</code> object in your <code>CreatePredictor</code> request. Amazon Forecast applies the featurization to the <code>TARGET_TIME_SERIES</code> dataset before model training.</p> <p>You can create multiple featurization configurations. For example, you might call the <code>CreatePredictor</code> operation twice by specifying different featurization configurations.</p>
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeaturizationConfig FeaturizationConfig { get; set; }
		
		/// <summary>
		/// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfig EncryptionConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDatasetRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDatasetGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDatasetImportJobRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetImportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteForecastRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteForecastExportJobRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastExportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletePredictorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDatasetResponseDomain Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDatasetResponseDatasetType DatasetType { get; set; }
		
		/// <summary>
		/// Pattern: ^Y|M|W|D|H|30min|15min|10min|5min|1min$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DataFrequency { get; set; }
		
		/// <summary>
		/// Defines the fields of a dataset. You specify this object in the <a>CreateDataset</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Schema Schema { get; set; }
		
		/// <summary>
		/// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDatasetResponseDomain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDatasetResponseDatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TIME_SERIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATED_TIME_SERIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_METADATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetGroupResponse
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetGroupName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Arn[] DatasetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribeDatasetGroupResponseDomain Domain { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeDatasetGroupResponseDomain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetImportJobResponse
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetImportJobName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetImportJobArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\:\.\,\'\s]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string TimestampFormat { get; set; }
		
		/// <summary>
		/// The source of your training data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateDatasetImportJob</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FieldStatistics FieldStatistics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DataSize { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeDatasetImportJobRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetImportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeForecastResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ForecastType[] ForecastTypes { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeForecastRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeForecastExportJobResponse
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastExportJobArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastExportJobName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
		
		/// <summary>
		/// The destination for an exported forecast, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateForecastExportJob</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataDestination Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeForecastExportJobRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastExportJobArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePredictorResponse
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string PredictorArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string PredictorName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string AlgorithmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ForecastHorizon { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PerformAutoML { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PerformHPO { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrainingParameters TrainingParameters { get; set; }
		
		/// <summary>
		/// Parameters that define how to split a dataset into training data and testing data, and the number of iterations to perform. These parameters are specified in the predefined algorithms but you can override them in the <a>CreatePredictor</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EvaluationParameters EvaluationParameters { get; set; }
		
		/// <summary>
		/// <p>Configuration information for a hyperparameter tuning job. You specify this object in the <a>CreatePredictor</a> request.</p> <p>A <i>hyperparameter</i> is a parameter that governs the model training process. You set hyperparameters before training starts, unlike model parameters, which are determined during training. The values of the hyperparameters effect which values are chosen for the model parameters.</p> <p>In a <i>hyperparameter tuning job</i>, Amazon Forecast chooses the set of hyperparameter values that optimize a specified metric. Forecast accomplishes this by running many training jobs over a range of hyperparameter values. The optimum set of values depends on the algorithm, the training data, and the specified metric objective.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HyperParameterTuningJobConfig HPOConfig { get; set; }
		
		/// <summary>
		/// The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the <a>CreatePredictor</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// <p>In a <a>CreatePredictor</a> operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as <i>featurization</i>.</p> <p>You define featurization using the <code>FeaturizationConfig</code> object. You specify an array of transformations, one for each field that you want to featurize. You then include the <code>FeaturizationConfig</code> object in your <code>CreatePredictor</code> request. Amazon Forecast applies the featurization to the <code>TARGET_TIME_SERIES</code> dataset before model training.</p> <p>You can create multiple featurization configurations. For example, you might call the <code>CreatePredictor</code> operation twice by specifying different featurization configurations.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FeaturizationConfig FeaturizationConfig { get; set; }
		
		/// <summary>
		/// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Contains details on the backtests performed to evaluate the accuracy of the predictor. The tests are returned in descending order of accuracy, with the most accurate backtest appearing first. You specify the number of backtests to perform when you call the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PredictorExecutionDetails PredictorExecutionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Arn[] DatasetImportJobArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Arn[] AutoMLAlgorithmArns { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribePredictorRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccuracyMetricsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] PredictorEvaluationResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccuracyMetricsRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetGroupSummary[] DatasetGroups { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetGroupsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetImportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetImportJobSummary[] DatasetImportJobs { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetImportJobsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetSummary[] Datasets { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDatasetsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListForecastExportJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ForecastExportJobSummary[] ForecastExportJobs { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListForecastExportJobsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListForecastsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ForecastSummary[] Forecasts { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListForecastsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPredictorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PredictorSummary[] Predictors { get; set; }
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPredictorsRequest
	{
		
		/// <summary>
		/// Max length: 3000
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3000, MinimumLength=1)]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDatasetGroupRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Arn[] DatasetArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@float = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timestamp = 3,
	}
	
	/// <summary>
	/// Specifies a categorical hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CategoricalParameterRange
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public Value[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScalingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logarithmic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReverseLogarithmic = 3,
	}
	
	/// <summary>
	/// Specifies a continuous hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ContinuousParameterRange
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double MaxValue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double MinValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContinuousParameterRangeScalingType ScalingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ContinuousParameterRangeScalingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logarithmic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReverseLogarithmic = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Domain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	/// <summary>
	/// The source of your training data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateDatasetImportJob</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataSource
	{
		
		/// <summary>
		/// The path to the file(s) in an Amazon Simple Storage Service (Amazon S3) bucket, and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the file(s). Optionally, includes an AWS Key Management Service (KMS) key. This object is part of the <a>DataSource</a> object that is submitted in the <a>CreateDatasetImportJob</a> request, and part of the <a>DataDestination</a> object that is submitted in the <a>CreateForecastExportJob</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Config S3Config { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TIME_SERIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATED_TIME_SERIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_METADATA = 2,
	}
	
	/// <summary>
	/// Defines the fields of a dataset. You specify this object in the <a>CreateDataset</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Schema
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <a>CreateDataset</a> and <a>CreatePredictor</a> requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: arn:aws:kms:.*:key/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string KMSKeyArn { get; set; }
	}
	
	/// <summary>
	/// The destination for an exported forecast, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateForecastExportJob</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataDestination
	{
		
		/// <summary>
		/// The path to the file(s) in an Amazon Simple Storage Service (Amazon S3) bucket, and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the file(s). Optionally, includes an AWS Key Management Service (KMS) key. This object is part of the <a>DataSource</a> object that is submitted in the <a>CreateDatasetImportJob</a> request, and part of the <a>DataDestination</a> object that is submitted in the <a>CreateForecastExportJob</a> request.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3Config S3Config { get; set; }
	}
	
	/// <summary>
	/// Parameters that define how to split a dataset into training data and testing data, and the number of iterations to perform. These parameters are specified in the predefined algorithms but you can override them in the <a>CreatePredictor</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EvaluationParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfBacktestWindows { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BackTestWindowOffset { get; set; }
	}
	
	/// <summary>
	/// <p>Configuration information for a hyperparameter tuning job. You specify this object in the <a>CreatePredictor</a> request.</p> <p>A <i>hyperparameter</i> is a parameter that governs the model training process. You set hyperparameters before training starts, unlike model parameters, which are determined during training. The values of the hyperparameters effect which values are chosen for the model parameters.</p> <p>In a <i>hyperparameter tuning job</i>, Amazon Forecast chooses the set of hyperparameter values that optimize a specified metric. Forecast accomplishes this by running many training jobs over a range of hyperparameter values. The optimum set of values depends on the algorithm, the training data, and the specified metric objective.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HyperParameterTuningJobConfig
	{
		
		/// <summary>
		/// Specifies the categorical, continuous, and integer hyperparameters, and their ranges of tunable values. The range of tunable values determines which values that a hyperparameter tuning job can choose for the specified hyperparameter. This object is part of the <a>HyperParameterTuningJobConfig</a> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ParameterRanges ParameterRanges { get; set; }
	}
	
	/// <summary>
	/// The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the <a>CreatePredictor</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDataConfig
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public SupplementaryFeature[] SupplementaryFeatures { get; set; }
	}
	
	/// <summary>
	/// <p>In a <a>CreatePredictor</a> operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as <i>featurization</i>.</p> <p>You define featurization using the <code>FeaturizationConfig</code> object. You specify an array of transformations, one for each field that you want to featurize. You then include the <code>FeaturizationConfig</code> object in your <code>CreatePredictor</code> request. Amazon Forecast applies the featurization to the <code>TARGET_TIME_SERIES</code> dataset before model training.</p> <p>You can create multiple featurization configurations. For example, you might call the <code>CreatePredictor</code> operation twice by specifying different featurization configurations.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FeaturizationConfig
	{
		
		/// <summary>
		/// Pattern: ^Y|M|W|D|H|30min|15min|10min|5min|1min$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ForecastFrequency { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public Name[] ForecastDimensions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public Featurization[] Featurizations { get; set; }
	}
	
	/// <summary>
	/// The path to the file(s) in an Amazon Simple Storage Service (Amazon S3) bucket, and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the file(s). Optionally, includes an AWS Key Management Service (KMS) key. This object is part of the <a>DataSource</a> object that is submitted in the <a>CreateDatasetImportJob</a> request, and part of the <a>DataDestination</a> object that is submitted in the <a>CreateForecastExportJob</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Config
	{
		
		/// <summary>
		/// Pattern: ^s3://[a-z0-9].+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: arn:aws:kms:.*:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string KMSKeyArn { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of the dataset group properties used in the <a>ListDatasetGroups</a> operation. To get the complete set of properties, call the <a>DescribeDatasetGroup</a> operation, and provide the <code>DatasetGroupArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetGroupSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of the dataset import job properties used in the <a>ListDatasetImportJobs</a> operation. To get the complete set of properties, call the <a>DescribeDatasetImportJob</a> operation, and provide the <code>DatasetImportJobArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetImportJobSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetImportJobArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetImportJobName { get; set; }
		
		/// <summary>
		/// The source of your training data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateDatasetImportJob</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataSource DataSource { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of the dataset properties used in the <a>ListDatasets</a> operation. To get the complete set of properties, call the <a>DescribeDataset</a> operation, and provide the <code>DatasetArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DatasetSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetSummaryDatasetType DatasetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetSummaryDomain Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetSummaryDatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGET_TIME_SERIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATED_TIME_SERIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITEM_METADATA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DatasetSummaryDomain
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_PLANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2_CAPACITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK_FORCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRICS = 6,
	}
	
	/// <summary>
	/// Contains details on the backtests performed to evaluate the accuracy of the predictor. The tests are returned in descending order of accuracy, with the most accurate backtest appearing first. You specify the number of backtests to perform when you call the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PredictorExecutionDetails
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public PredictorExecution[] PredictorExecutions { get; set; }
	}
	
	/// <summary>
	/// The results of evaluating an algorithm. Returned as part of the <a>GetAccuracyMetrics</a> response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EvaluationResult
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string AlgorithmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WindowSummary[] TestWindows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EvaluationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUMMARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTED = 1,
	}
	
	/// <summary>
	/// <p>Provides featurization (transformation) information for a dataset field. This object is part of the <a>FeaturizationConfig</a> object.</p> <p>For example:</p> <p> <code>{</code> </p> <p> <code>"AttributeName": "demand",</code> </p> <p> <code>FeaturizationPipeline [ {</code> </p> <p> <code>"FeaturizationMethodName": "filling",</code> </p> <p> <code>"FeaturizationMethodParameters": {"aggregation": "avg", "backfill": "nan"}</code> </p> <p> <code>} ]</code> </p> <p> <code>}</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Featurization
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public FeaturizationMethod[] FeaturizationPipeline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FeaturizationMethodName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		filling = 0,
	}
	
	/// <summary>
	/// <p>Provides information about the method that featurizes (transforms) a dataset field. The method is part of the <code>FeaturizationPipeline</code> of the <a>Featurization</a> object. If you don't specify <code>FeaturizationMethodParameters</code>, Amazon Forecast uses default parameters.</p> <p>The following is an example of how you specify a <code>FeaturizationMethod</code> object.</p> <p> <code>{</code> </p> <p> <code>"FeaturizationMethodName": "filling",</code> </p> <p> <code>"FeaturizationMethodParameters": {"aggregation": "avg", "backfill": "nan"}</code> </p> <p> <code>}</code> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FeaturizationMethod
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FeaturizationMethodFeaturizationMethodName FeaturizationMethodName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FeaturizationMethodParameters FeaturizationMethodParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FeaturizationMethodFeaturizationMethodName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		filling = 0,
	}
	
	/// <summary>
	/// Provides statistics for each data field imported into to an Amazon Forecast dataset with the <a>CreateDatasetImportJob</a> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Statistics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CountDistinct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CountNull { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CountNan { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Min { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Max { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Avg { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Stddev { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterConditionString
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NOT = 1,
	}
	
	/// <summary>
	/// Describes a filter for choosing a subset of objects. Each filter consists of a condition and a match statement. The condition is either <code>IS</code> or <code>IS_NOT</code>, which specifies whether to include or exclude the objects that match the statement, respectively. The match statement consists of a key and a value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Filter
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Value { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FilterCondition Condition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterCondition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IS_NOT = 1,
	}
	
	/// <summary>
	/// Provides a summary of the forecast export job properties used in the <a>ListForecastExportJobs</a> operation. To get the complete set of properties, call the <a>DescribeForecastExportJob</a> operation, and provide the listed <code>ForecastExportJobArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForecastExportJobSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastExportJobArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastExportJobName { get; set; }
		
		/// <summary>
		/// The destination for an exported forecast, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location and, optionally, an AWS Key Management Service (KMS) key. This object is submitted in the <a>CreateForecastExportJob</a> request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataDestination Destination { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of the forecast properties used in the <a>ListForecasts</a> operation. To get the complete set of properties, call the <a>DescribeForecast</a> operation, and provide the <code>ForecastArn</code> that is listed in the summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ForecastSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ForecastArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string ForecastName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	/// <summary>
	/// Specifies the categorical, continuous, and integer hyperparameters, and their ranges of tunable values. The range of tunable values determines which values that a hyperparameter tuning job can choose for the specified hyperparameter. This object is part of the <a>HyperParameterTuningJobConfig</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ParameterRanges
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public CategoricalParameterRange[] CategoricalParameterRanges { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public ContinuousParameterRange[] ContinuousParameterRanges { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public IntegerParameterRange[] IntegerParameterRanges { get; set; }
	}
	
	/// <summary>
	/// Specifies an integer hyperparameter and it's range of tunable values. This object is part of the <a>ParameterRanges</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IntegerParameterRange
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxValue { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MinValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IntegerParameterRangeScalingType ScalingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IntegerParameterRangeScalingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Linear = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Logarithmic = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReverseLogarithmic = 3,
	}
	
	/// <summary>
	/// Provides metrics that are used to evaluate the performance of a predictor. This object is part of the <a>WindowSummary</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Metrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RMSE { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WeightedQuantileLoss[] WeightedQuantileLosses { get; set; }
	}
	
	/// <summary>
	/// The algorithm used to perform a backtest and the status of those tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PredictorExecution
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string AlgorithmArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestWindowSummary[] TestWindows { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of the predictor properties that are used in the <a>ListPredictors</a> operation. To get the complete set of properties, call the <a>DescribePredictor</a> operation, and provide the listed <code>PredictorArn</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PredictorSummary
	{
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string PredictorArn { get; set; }
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string PredictorName { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\-\_\.\/\:]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string DatasetGroupArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModificationTime { get; set; }
	}
	
	/// <summary>
	/// An attribute of a schema, which defines a dataset field. A schema attribute is required for every field in a dataset. The <a>Schema</a> object contains an array of <code>SchemaAttribute</code> objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SchemaAttribute
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SchemaAttributeAttributeType AttributeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SchemaAttributeAttributeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@float = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		timestamp = 3,
	}
	
	/// <summary>
	/// <p>Describes a supplementary feature of a dataset group. This object is part of the <a>InputDataConfig</a> object.</p> <p>The only supported feature is a holiday calendar. If you use the calendar, all data in the datasets should belong to the same country as the calendar. For the holiday calendar data, see the <a href="http://jollyday.sourceforge.net/data.html">Jollyday</a> web site.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SupplementaryFeature
	{
		
		/// <summary>
		/// Max length: 63
		/// Min length: 1
		/// Pattern: ^[a-zA-Z][a-zA-Z0-9_]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Pattern: ^[a-zA-Z0-9\_\-]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The status, start time, and end time of a backtest, as well as a failure reason if applicable.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestWindowSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TestWindowStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TestWindowEnd { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// <p>The metrics for a time range within the evaluation portion of a dataset. This object is part of the <a>EvaluationResult</a> object.</p> <p>The <code>TestWindowStart</code> and <code>TestWindowEnd</code> parameters are determined by the <code>BackTestWindowOffset</code> parameter of the <a>EvaluationParameters</a> object.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WindowSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TestWindowStart { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TestWindowEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WindowSummaryEvaluationType EvaluationType { get; set; }
		
		/// <summary>
		/// Provides metrics that are used to evaluate the performance of a predictor. This object is part of the <a>WindowSummary</a> object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Metrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WindowSummaryEvaluationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUMMARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPUTED = 1,
	}
	
	/// <summary>
	/// The weighted loss value for a quantile. This object is part of the <a>Metrics</a> object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WeightedQuantileLoss
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LossValue { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates an Amazon Forecast dataset. The information about the dataset that you provide helps Forecast understand how to consume the data for model training. This includes the following:</p> <ul> <li> <p> <i> <code>DataFrequency</code> </i> - How frequently your historical time-series data is collected.</p> </li> <li> <p> <i> <code>Domain</code> </i> and <i> <code>DatasetType</code> </i> - Each dataset has an associated dataset domain and a type within the domain. Amazon Forecast provides a list of predefined domains and types within each domain. For each unique dataset domain and type within the domain, Amazon Forecast requires your data to include a minimum set of predefined fields.</p> </li> <li> <p> <i> <code>Schema</code> </i> - A schema specifies the fields in the dataset, including the field name and data type.</p> </li> </ul> <p>After creating a dataset, you import your training data into it and add the dataset to a dataset group. You use the dataset group to create a predictor. For more information, see <a>howitworks-datasets-groups</a>.</p> <p>To get a list of all your datasets, use the <a>ListDatasets</a> operation.</p> <p>For example Forecast datasets, see the <a href="https://github.com/aws-samples/amazon-forecast-samples/tree/master/data">Amazon Forecast Sample GitHub repository</a>.</p> <note> <p>The <code>Status</code> of a dataset must be <code>ACTIVE</code> before you can import training data. Use the <a>DescribeDataset</a> operation to get the status.</p> </note>
		/// CreateDataset /#X-Amz-Target=AmazonForecast.CreateDataset
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetResponse> CreateDatasetAsync(CreateDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreateDataset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a dataset group, which holds a collection of related datasets. You can add datasets to the dataset group when you create the dataset group, or later by using the <a>UpdateDatasetGroup</a> operation.</p> <p>After creating a dataset group and adding datasets, you use the dataset group when you create a predictor. For more information, see <a>howitworks-datasets-groups</a>.</p> <p>To get a list of all your datasets groups, use the <a>ListDatasetGroups</a> operation.</p> <note> <p>The <code>Status</code> of a dataset group must be <code>ACTIVE</code> before you can create use the dataset group to create a predictor. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p> </note>
		/// CreateDatasetGroup /#X-Amz-Target=AmazonForecast.CreateDatasetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetGroupResponse> CreateDatasetGroupAsync(CreateDatasetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreateDatasetGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDatasetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Imports your training data to an Amazon Forecast dataset. You provide the location of your training data in an Amazon Simple Storage Service (Amazon S3) bucket and the Amazon Resource Name (ARN) of the dataset that you want to import the data to.</p> <p>You must specify a <a>DataSource</a> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data. For more information, see <a>aws-forecast-iam-roles</a>.</p> <p>The training data must be in CSV format. The delimiter must be a comma (,).</p> <p>You can specify the path to a specific CSV file, the S3 bucket, or to a folder in the S3 bucket. For the latter two cases, Amazon Forecast imports all files up to the limit of 10,000 files.</p> <p>To get a list of all your dataset import jobs, filtered by specified criteria, use the <a>ListDatasetImportJobs</a> operation.</p>
		/// CreateDatasetImportJob /#X-Amz-Target=AmazonForecast.CreateDatasetImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetImportJobResponse> CreateDatasetImportJobAsync(CreateDatasetImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreateDatasetImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDatasetImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that was used to train the predictor. This is known as inference. To retrieve the forecast for a single item at low latency, use the operation. To export the complete forecast into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a> operation.</p> <p>The range of the forecast is determined by the <code>ForecastHorizon</code> value, which you specify in the <a>CreatePredictor</a> request, multiplied by the <code>DataFrequency</code> value, which you specify in the <a>CreateDataset</a> request. When you query a forecast, you can request a specific date range within the forecast.</p> <p>To get a list of all your forecasts, use the <a>ListForecasts</a> operation.</p> <note> <p>The forecasts generated by Amazon Forecast are in the same time zone as the dataset that was used to create the predictor.</p> </note> <p>For more information, see <a>howitworks-forecast</a>.</p> <note> <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast. Use the <a>DescribeForecast</a> operation to get the status.</p> </note>
		/// CreateForecast /#X-Amz-Target=AmazonForecast.CreateForecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateForecastResponse> CreateForecastAsync(CreateForecastRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreateForecast";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Exports a forecast created by the <a>CreateForecast</a> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p> <p>&lt;ForecastExportJobName&gt;_&lt;ExportTimestamp&gt;_&lt;PageNumber&gt;</p> <p>where the &lt;ExportTimestamp&gt; component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).</p> <p>You must specify a <a>DataDestination</a> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p> <p>For more information, see <a>howitworks-forecast</a>.</p> <p>To get a list of all your forecast export jobs, use the <a>ListForecastExportJobs</a> operation.</p> <note> <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p> </note>
		/// CreateForecastExportJob /#X-Amz-Target=AmazonForecast.CreateForecastExportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateForecastExportJobResponse> CreateForecastExportJobAsync(CreateForecastExportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreateForecastExportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateForecastExportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Forecast predictor.</p> <p>In the request, you provide a dataset group and either specify an algorithm or let Amazon Forecast choose the algorithm for you using AutoML. If you specify an algorithm, you also can override algorithm-specific hyperparameters.</p> <p>Amazon Forecast uses the chosen algorithm to train a model using the latest version of the datasets in the specified dataset group. The result is called a predictor. You then generate a forecast using the <a>CreateForecast</a> operation.</p> <p>After training a model, the <code>CreatePredictor</code> operation also evaluates it. To see the evaluation metrics, use the <a>GetAccuracyMetrics</a> operation. Always review the evaluation metrics before deciding to use the predictor to generate a forecast.</p> <p>Optionally, you can specify a featurization configuration to fill and aggregate the data fields in the <code>TARGET_TIME_SERIES</code> dataset to improve model training. For more information, see <a>FeaturizationConfig</a>.</p> <p>For RELATED_TIME_SERIES datasets, <code>CreatePredictor</code> verifies that the <code>DataFrequency</code> specified when the dataset was created matches the <code>ForecastFrequency</code>. TARGET_TIME_SERIES datasets don't have this restriction. Amazon Forecast also verifies the delimiter and timestamp format. For more information, see <a>howitworks-datasets-groups</a>.</p> <p> <b>AutoML</b> </p> <p>If you want Amazon Forecast to evaluate each algorithm and choose the one that minimizes the <code>objective function</code>, set <code>PerformAutoML</code> to <code>true</code>. The <code>objective function</code> is defined as the mean of the weighted p10, p50, and p90 quantile losses. For more information, see <a>EvaluationResult</a>.</p> <p>When AutoML is enabled, the following properties are disallowed:</p> <ul> <li> <p> <code>AlgorithmArn</code> </p> </li> <li> <p> <code>HPOConfig</code> </p> </li> <li> <p> <code>PerformHPO</code> </p> </li> <li> <p> <code>TrainingParameters</code> </p> </li> </ul> <p>To get a list of all of your predictors, use the <a>ListPredictors</a> operation.</p> <note> <p>Before you can use the predictor to create a forecast, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <a>DescribePredictor</a> operation.</p> </note>
		/// CreatePredictor /#X-Amz-Target=AmazonForecast.CreatePredictor
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePredictorResponse> CreatePredictorAsync(CreatePredictorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.CreatePredictor";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreatePredictorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Forecast dataset that was created using the <a>CreateDataset</a> operation. You can only delete datasets that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status use the <a>DescribeDataset</a> operation.
		/// DeleteDataset /#X-Amz-Target=AmazonForecast.DeleteDataset
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDatasetAsync(DeleteDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeleteDataset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a dataset group created using the <a>CreateDatasetGroup</a> operation. You can only delete dataset groups that have a status of <code>ACTIVE</code>, <code>CREATE_FAILED</code>, or <code>UPDATE_FAILED</code>. To get the status, use the <a>DescribeDatasetGroup</a> operation.</p> <p>This operation deletes only the dataset group, not the datasets in the group.</p>
		/// DeleteDatasetGroup /#X-Amz-Target=AmazonForecast.DeleteDatasetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDatasetGroupAsync(DeleteDatasetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeleteDatasetGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a dataset import job created using the <a>CreateDatasetImportJob</a> operation. You can delete only dataset import jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeDatasetImportJob</a> operation.
		/// DeleteDatasetImportJob /#X-Amz-Target=AmazonForecast.DeleteDatasetImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteDatasetImportJobAsync(DeleteDatasetImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeleteDatasetImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a forecast created using the <a>CreateForecast</a> operation. You can delete only forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecast</a> operation.</p> <p>You can't delete a forecast while it is being exported. After a forecast is deleted, you can no longer query the forecast.</p>
		/// DeleteForecast /#X-Amz-Target=AmazonForecast.DeleteForecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteForecastAsync(DeleteForecastRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeleteForecast";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a forecast export job created using the <a>CreateForecastExportJob</a> operation. You can delete only export jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecastExportJob</a> operation.
		/// DeleteForecastExportJob /#X-Amz-Target=AmazonForecast.DeleteForecastExportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteForecastExportJobAsync(DeleteForecastExportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeleteForecastExportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a predictor created using the <a>CreatePredictor</a> operation. You can delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribePredictor</a> operation.
		/// DeletePredictor /#X-Amz-Target=AmazonForecast.DeletePredictor
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePredictorAsync(DeletePredictorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DeletePredictor";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes an Amazon Forecast dataset created using the <a>CreateDataset</a> operation.</p> <p>In addition to listing the parameters specified in the <code>CreateDataset</code> request, this operation includes the following dataset properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
		/// DescribeDataset /#X-Amz-Target=AmazonForecast.DescribeDataset
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(DescribeDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribeDataset";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a dataset group created using the <a>CreateDatasetGroup</a> operation.</p> <p>In addition to listing the parameters provided in the <code>CreateDatasetGroup</code> request, this operation includes the following properties:</p> <ul> <li> <p> <code>DatasetArns</code> - The datasets belonging to the group.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
		/// DescribeDatasetGroup /#X-Amz-Target=AmazonForecast.DescribeDatasetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetGroupResponse> DescribeDatasetGroupAsync(DescribeDatasetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribeDatasetGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDatasetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a dataset import job created using the <a>CreateDatasetImportJob</a> operation.</p> <p>In addition to listing the parameters provided in the <code>CreateDatasetImportJob</code> request, this operation includes the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>DataSize</code> </p> </li> <li> <p> <code>FieldStatistics</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
		/// DescribeDatasetImportJob /#X-Amz-Target=AmazonForecast.DescribeDatasetImportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetImportJobResponse> DescribeDatasetImportJobAsync(DescribeDatasetImportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribeDatasetImportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeDatasetImportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a forecast created using the <a>CreateForecast</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreateForecast</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>DatasetGroupArn</code> - The dataset group that provided the training data.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
		/// DescribeForecast /#X-Amz-Target=AmazonForecast.DescribeForecast
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeForecastResponse> DescribeForecastAsync(DescribeForecastRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribeForecast";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeForecastResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a forecast export job created using the <a>CreateForecastExportJob</a> operation.</p> <p>In addition to listing the properties provided by the user in the <code>CreateForecastExportJob</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
		/// DescribeForecastExportJob /#X-Amz-Target=AmazonForecast.DescribeForecastExportJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeForecastExportJobResponse> DescribeForecastExportJobAsync(DescribeForecastExportJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribeForecastExportJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeForecastExportJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Describes a predictor created using the <a>CreatePredictor</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreatePredictor</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>DatasetImportJobArns</code> - The dataset import jobs used to import training data.</p> </li> <li> <p> <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were evaluated.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
		/// DescribePredictor /#X-Amz-Target=AmazonForecast.DescribePredictor
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePredictorResponse> DescribePredictorAsync(DescribePredictorRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.DescribePredictor";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribePredictorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Provides metrics on the accuracy of the models that were trained by the <a>CreatePredictor</a> operation. Use metrics to see how well the model performed and to decide whether to use the predictor to generate a forecast. For more information, see <a>metrics</a>.</p> <p>This operation generates metrics for each backtest window that was evaluated. The number of backtest windows (<code>NumberOfBacktestWindows</code>) is specified using the <a>EvaluationParameters</a> object, which is optionally included in the <code>CreatePredictor</code> request. If <code>NumberOfBacktestWindows</code> isn't specified, the number defaults to one.</p> <p>The parameters of the <code>filling</code> method determine which items contribute to the metrics. If you want all items to contribute, specify <code>zero</code>. If you want only those items that have complete data in the range being evaluated to contribute, specify <code>nan</code>. For more information, see <a>FeaturizationMethod</a>.</p> <note> <p>Before you can get accuracy metrics, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <a>DescribePredictor</a> operation.</p> </note>
		/// GetAccuracyMetrics /#X-Amz-Target=AmazonForecast.GetAccuracyMetrics
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccuracyMetricsResponse> GetAccuracyMetricsAsync(GetAccuracyMetricsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.GetAccuracyMetrics";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccuracyMetricsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of dataset groups created using the <a>CreateDatasetGroup</a> operation. For each dataset group, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the dataset group ARN with the <a>DescribeDatasetGroup</a> operation.
		/// ListDatasetGroups /#X-Amz-Target=AmazonForecast.ListDatasetGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetGroupsResponse> ListDatasetGroupsAsync(string MaxResults, string NextToken, ListDatasetGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListDatasetGroups?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatasetGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of dataset import jobs created using the <a>CreateDatasetImportJob</a> operation. For each import job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the ARN with the <a>DescribeDatasetImportJob</a> operation. You can filter the list by providing an array of <a>Filter</a> objects.
		/// ListDatasetImportJobs /#X-Amz-Target=AmazonForecast.ListDatasetImportJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetImportJobsResponse> ListDatasetImportJobsAsync(string MaxResults, string NextToken, ListDatasetImportJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListDatasetImportJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatasetImportJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of datasets created using the <a>CreateDataset</a> operation. For each dataset, a summary of its properties, including its Amazon Resource Name (ARN), is returned. To retrieve the complete set of properties, use the ARN with the <a>DescribeDataset</a> operation.
		/// ListDatasets /#X-Amz-Target=AmazonForecast.ListDatasets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string MaxResults, string NextToken, ListDatasetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListDatasets?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of forecast export jobs created using the <a>CreateForecastExportJob</a> operation. For each forecast export job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, use the ARN with the <a>DescribeForecastExportJob</a> operation. You can filter the list using an array of <a>Filter</a> objects.
		/// ListForecastExportJobs /#X-Amz-Target=AmazonForecast.ListForecastExportJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListForecastExportJobsResponse> ListForecastExportJobsAsync(string MaxResults, string NextToken, ListForecastExportJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListForecastExportJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListForecastExportJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of forecasts created using the <a>CreateForecast</a> operation. For each forecast, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, specify the ARN with the <a>DescribeForecast</a> operation. You can filter the list using an array of <a>Filter</a> objects.
		/// ListForecasts /#X-Amz-Target=AmazonForecast.ListForecasts
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListForecastsResponse> ListForecastsAsync(string MaxResults, string NextToken, ListForecastsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListForecasts?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListForecastsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of predictors created using the <a>CreatePredictor</a> operation. For each predictor, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the ARN with the <a>DescribePredictor</a> operation. You can filter the list using an array of <a>Filter</a> objects.
		/// ListPredictors /#X-Amz-Target=AmazonForecast.ListPredictors
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPredictorsResponse> ListPredictorsAsync(string MaxResults, string NextToken, ListPredictorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.ListPredictors?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListPredictorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the datasets in a dataset group with the specified datasets.</p> <note> <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor. Use the <a>DescribeDatasetGroup</a> operation to get the status.</p> </note>
		/// UpdateDatasetGroup /#X-Amz-Target=AmazonForecast.UpdateDatasetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDatasetGroupResponse> UpdateDatasetGroupAsync(UpdateDatasetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AmazonForecast.UpdateDatasetGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDatasetGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
