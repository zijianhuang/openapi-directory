//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the result of a create device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDevicePoolResult
	{
		
		/// <summary>
		/// Represents a collection of device types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the create device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDevicePoolRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceProfileResult
	{
		
		/// <summary>
		/// Represents the instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInstanceProfileRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkProfileResult
	{
		
		/// <summary>
		/// An array of settings that describes characteristics of a network profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateNetworkProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateNetworkProfileRequestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateNetworkProfileRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents the result of a create project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProjectResult
	{
		
		/// <summary>
		/// Represents an operating-system neutral workspace for running and managing tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the create project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProjectRequest
	{
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
	}
	
	/// <summary>
	/// Represents the server response from a request to create a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRemoteAccessSessionResult
	{
		
		/// <summary>
		/// Represents information about the remote access session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Creates and submits a request to start a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string DeviceArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string InstanceArn { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string SshPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteRecordEnabled { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string RemoteRecordAppArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Configuration settings for a remote access session, including billing method.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRemoteAccessSessionConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateRemoteAccessSessionRequestInteractionMode InteractionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRemoteAccessSessionRequestInteractionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_ONLY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTestGridProjectResult
	{
		
		/// <summary>
		/// A Selenium testing project. Projects are used to collect and collate sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestGridProject TestGridProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTestGridProjectRequest
	{
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTestGridUrlResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expires { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTestGridUrlRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Minimum: 60
		/// Maximum: 86400
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(60, 86400)]
		public int ExpiresInSeconds { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a create upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUploadResult
	{
		
		/// <summary>
		/// An app or a set of one or more tests to upload or that have been uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Upload Upload { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the create upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateUploadRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateUploadRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateUploadRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_PACKAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_PACKAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_PACKAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_PACKAGE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_TEST_PACKAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_PACKAGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION_TEST_PACKAGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR_TEST_PACKAGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_TEST_PACKAGE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_PACKAGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_SPEC = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_SPEC = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_SPEC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_SPEC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_SPEC = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_SPEC = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_SPEC = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_SPEC = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_SPEC = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_SPEC = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVPCEConfigurationResult
	{
		
		/// <summary>
		/// Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string VpceConfigurationName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceServiceName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ServiceDnsName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceConfigurationDescription { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the delete device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDevicePoolRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteInstanceProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteNetworkProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the delete project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the request to delete the specified remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the delete run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteRunRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteTestGridProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the delete upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteUploadRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the account settings return values from the <code>GetAccountSettings</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetAccountSettingsResult
	{
		
		/// <summary>
		/// A container for account-level settings in AWS Device Farm.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountSettings AccountSettings { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get device request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceResult
	{
		
		/// <summary>
		/// Represents a device type that an app is tested against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceInstanceResult
	{
		
		/// <summary>
		/// Represents the device instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceInstance DeviceInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDeviceInstanceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDevicePoolResult
	{
		
		/// <summary>
		/// Represents a collection of device types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDevicePoolRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of describe device pool compatibility request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDevicePoolCompatibilityResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DevicePoolCompatibilityResult[] CompatibleDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DevicePoolCompatibilityResult[] IncompatibleDevices { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device pool compatibility operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDevicePoolCompatibilityRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string DevicePoolArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string AppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetDevicePoolCompatibilityRequestTestType TestType { get; set; }
		
		/// <summary>
		/// Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <a>ScheduleRun</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunTest Test { get; set; }
		
		/// <summary>
		/// Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetDevicePoolCompatibilityRequestTestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceProfileResult
	{
		
		/// <summary>
		/// Represents the instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetInstanceProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get job request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobResult
	{
		
		/// <summary>
		/// Represents a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get job operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetNetworkProfileResult
	{
		
		/// <summary>
		/// An array of settings that describes characteristics of a network profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetNetworkProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Returns the status result for a device offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOfferingStatusResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingStatusMap Current { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingStatusMap NextPeriod { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to retrieve the offering status for the specified customer or account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetOfferingStatusRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetProjectResult
	{
		
		/// <summary>
		/// Represents an operating-system neutral workspace for running and managing tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server that lists detailed information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRemoteAccessSessionResult
	{
		
		/// <summary>
		/// Represents information about the remote access session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get information about the specified remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRunResult
	{
		
		/// <summary>
		/// Represents a test run on a set of devices with a given app package, test parameters, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetRunRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get suite request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSuiteResult
	{
		
		/// <summary>
		/// Represents a collection of one or more tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Suite Suite { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get suite operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSuiteRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get test request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestResult
	{
		
		/// <summary>
		/// Represents a condition that is evaluated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Test Test { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get test operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestGridProjectResult
	{
		
		/// <summary>
		/// A Selenium testing project. Projects are used to collect and collate sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestGridProject TestGridProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestGridProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestGridSessionResult
	{
		
		/// <summary>
		/// A <a>TestGridSession</a> is a single instance of a browser launched from the URL provided by a call to <a>CreateTestGridUrl</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestGridSession TestGridSession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTestGridSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string SessionId { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string SessionArn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUploadResult
	{
		
		/// <summary>
		/// An app or a set of one or more tests to upload or that have been uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Upload Upload { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetUploadRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVPCEConfigurationResult
	{
		
		/// <summary>
		/// Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server after AWS Device Farm makes a request to install to a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstallToRemoteAccessSessionResult
	{
		
		/// <summary>
		/// An app or a set of one or more tests to upload or that have been uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Upload AppUpload { get; set; }
	}
	
	/// <summary>
	/// Represents the request to install an Android application (in .apk format) or an iOS application (in .ipa format) as part of a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstallToRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string RemoteAccessSessionArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string AppArn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list artifacts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListArtifactsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Artifact[] Artifacts { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list artifacts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListArtifactsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListArtifactsRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListArtifactsRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeviceInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceInstance[] DeviceInstances { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDeviceInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list device pools request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicePoolsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DevicePool[] DevicePools { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list device pools request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicePoolsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListDevicePoolsRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListDevicePoolsRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents the result of a list devices operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list devices request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListDevicesRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceProfilesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile[] InstanceProfiles { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInstanceProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list jobs request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list jobs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListNetworkProfilesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile[] NetworkProfiles { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListNetworkProfilesRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListNetworkProfilesRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListNetworkProfilesRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingPromotionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingPromotion[] OfferingPromotions { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingPromotionsRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the transaction log of the specified offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingTransactionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingTransaction[] OfferingTransactions { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list the offering transaction history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingTransactionsRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the return values of the list of offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Offering[] Offerings { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list all offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingsRequest
	{
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list projects request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProjectsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Project[] Projects { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list projects operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProjectsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server after AWS Device Farm makes a request to return information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRemoteAccessSessionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSession[] RemoteAccessSessions { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to return information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRemoteAccessSessionsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list runs request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRunsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Run[] Runs { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list runs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListRunsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list samples request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSamplesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Sample[] Samples { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list samples operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSamplesRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list suites request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSuitesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Suite[] Suites { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list suites operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSuitesRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Maximum items: 150
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ResourceARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridProjectsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridProject[] TestGridProjects { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridProjectsRequest
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionActionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridSessionAction[] Actions { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionActionsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string SessionArn { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionArtifactsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridSessionArtifact[] Artifacts { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionArtifactsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string SessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListTestGridSessionArtifactsRequestType Type { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListTestGridSessionArtifactsRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridSession[] TestGridSessions { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestGridSessionsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListTestGridSessionsRequestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTimeBefore { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000)]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListTestGridSessionsRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 2,
	}
	
	/// <summary>
	/// Represents the result of a list tests request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Test[] Tests { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list tests operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTestsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list unique problems request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUniqueProblemsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UniqueProblemsByExecutionResultMap UniqueProblems { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list unique problems operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUniqueProblemsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list uploads request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUploadsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Upload[] Uploads { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list uploads operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListUploadsRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListUploadsRequestType Type { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListUploadsRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_PACKAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_PACKAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_PACKAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_PACKAGE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_TEST_PACKAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_PACKAGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION_TEST_PACKAGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR_TEST_PACKAGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_TEST_PACKAGE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_PACKAGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_SPEC = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_SPEC = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_SPEC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_SPEC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_SPEC = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_SPEC = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_SPEC = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_SPEC = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_SPEC = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_SPEC = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVPCEConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VPCEConfiguration[] VpceConfigurations { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListVPCEConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=4)]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The result of the purchase offering (for example, success or failure).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseOfferingResult
	{
		
		/// <summary>
		/// Represents the metadata of an offering transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferingTransaction OfferingTransaction { get; set; }
	}
	
	/// <summary>
	/// Represents a request for a purchase offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseOfferingRequest
	{
		
		/// <summary>
		/// Min length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=32)]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string OfferingPromotionId { get; set; }
	}
	
	/// <summary>
	/// The result of a renewal offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewOfferingResult
	{
		
		/// <summary>
		/// Represents the metadata of an offering transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferingTransaction OfferingTransaction { get; set; }
	}
	
	/// <summary>
	/// A request that represents an offering renewal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RenewOfferingRequest
	{
		
		/// <summary>
		/// Min length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=32)]
		public string OfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a schedule run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleRunResult
	{
		
		/// <summary>
		/// Represents a test run on a set of devices with a given app package, test parameters, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the schedule run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleRunRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string AppArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string DevicePoolArn { get; set; }
		
		/// <summary>
		/// Represents the device filters used in a test run and the maximum number of devices to be included in the run. It is passed in as the <code>deviceSelectionConfiguration</code> request parameter in <a>ScheduleRun</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceSelectionConfiguration DeviceSelectionConfiguration { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <a>ScheduleRun</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunTest Test { get; set; }
		
		/// <summary>
		/// Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Represents configuration information about a test run, such as the execution timeout (in minutes).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExecutionConfiguration ExecutionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopJobResult
	{
		
		/// <summary>
		/// Represents a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopJobRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server that describes the remote access session when AWS Device Farm stops the session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRemoteAccessSessionResult
	{
		
		/// <summary>
		/// Represents information about the remote access session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Represents the request to stop the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the results of your stop run attempt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRunResult
	{
		
		/// <summary>
		/// Represents a test run on a set of devices with a given app package, test parameters, and so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents the request to stop a specific run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopRunRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Maximum items: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Maximum items: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public TagKey[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceInstanceResult
	{
		
		/// <summary>
		/// Represents the device instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceInstance DeviceInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceInstanceRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Labels { get; set; }
	}
	
	/// <summary>
	/// Represents the result of an update device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDevicePoolResult
	{
		
		/// <summary>
		/// Represents a collection of device types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the update device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDevicePoolRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClearMaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInstanceProfileResult
	{
		
		/// <summary>
		/// Represents the instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInstanceProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateNetworkProfileResult
	{
		
		/// <summary>
		/// An array of settings that describes characteristics of a network profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateNetworkProfileRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateNetworkProfileRequestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateNetworkProfileRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents the result of an update project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProjectResult
	{
		
		/// <summary>
		/// Represents an operating-system neutral workspace for running and managing tests.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the update project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTestGridProjectResult
	{
		
		/// <summary>
		/// A Selenium testing project. Projects are used to collect and collate sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestGridProject TestGridProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateTestGridProjectRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUploadResult
	{
		
		/// <summary>
		/// An app or a set of one or more tests to upload or that have been uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Upload Upload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateUploadRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EditContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVPCEConfigurationResult
	{
		
		/// <summary>
		/// Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string VpceConfigurationName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceServiceName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ServiceDnsName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceConfigurationDescription { get; set; }
	}
	
	/// <summary>
	/// Represents information about free trial device minutes for an AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TrialMinutes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Remaining { get; set; }
	}
	
	/// <summary>
	/// A container for account-level settings in AWS Device Farm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccountSettings
	{
		
		/// <summary>
		/// Max length: 16
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength=2)]
		public string AwsAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchasedDevicesMap UnmeteredDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PurchasedDevicesMap UnmeteredRemoteAccessDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxJobTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Represents information about free trial device minutes for an AWS account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrialMinutes TrialMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaxSlotMap MaxSlots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_LOG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_LOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_LOG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULT_LOG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LOG = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBKIT_LOG = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_OUTPUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXERCISER_MONKEY_OUTPUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JSON_OUTPUT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_PRETTY_OUTPUT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_STANDARD_OUTPUT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JAVA_XML_OUTPUT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION_OUTPUT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_SERVER_OUTPUT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_OUTPUT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_XML_OUTPUT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_OUTPUT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_XML_OUTPUT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_EVENT_LOG = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_SUMMARY_LOG = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_CRASH_REPORT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_LOG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT_LOG = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTSPEC_OUTPUT = 27,
	}
	
	/// <summary>
	/// Represents the output of a test. Examples of artifacts include logs and screenshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Artifact
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_LOG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_LOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_LOG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULT_LOG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LOG = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBKIT_LOG = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_OUTPUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXERCISER_MONKEY_OUTPUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JSON_OUTPUT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_PRETTY_OUTPUT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_STANDARD_OUTPUT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JAVA_XML_OUTPUT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION_OUTPUT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_SERVER_OUTPUT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_OUTPUT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_XML_OUTPUT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_OUTPUT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_XML_OUTPUT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_EVENT_LOG = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_SUMMARY_LOG = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_CRASH_REPORT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_LOG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT_LOG = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTSPEC_OUTPUT = 27,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	/// <summary>
	/// Represents the amount of CPU that an app is using on a physical device. Does not represent system-wide CPU usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CPU
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Clock { get; set; }
	}
	
	/// <summary>
	/// Represents entity counters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Counters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Passed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Warned { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Errored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Skipped { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of device types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DevicePool
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DevicePoolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents the instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InstanceProfile
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkProfileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// An array of settings that describes characteristics of a network profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkProfile
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfileType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkProfileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents an operating-system neutral workspace for running and managing tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Project
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for a remote access session, including billing method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateRemoteAccessSessionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateRemoteAccessSessionConfigurationBillingMethod BillingMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AmazonResourceName[] VpceConfigurationArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateRemoteAccessSessionConfigurationBillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InteractionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_ONLY = 2,
	}
	
	/// <summary>
	/// Represents information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemoteAccessSession
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSessionResult Result { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Stopped { get; set; }
		
		/// <summary>
		/// Represents a device type that an app is tested against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteRecordEnabled { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string RemoteRecordAppArn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024)]
		public string HostAddress { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSessionBillingMethod BillingMethod { get; set; }
		
		/// <summary>
		/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceUdid { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemoteAccessSessionInteractionMode InteractionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemoteAccessSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemoteAccessSessionResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemoteAccessSessionBillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RemoteAccessSessionInteractionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_ONLY = 2,
	}
	
	/// <summary>
	/// A Selenium testing project. Projects are used to collect and collate sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestGridProject
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_PACKAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_PACKAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_PACKAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_PACKAGE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_TEST_PACKAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_PACKAGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION_TEST_PACKAGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR_TEST_PACKAGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_TEST_PACKAGE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_PACKAGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_SPEC = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_SPEC = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_SPEC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_SPEC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_SPEC = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_SPEC = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_SPEC = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_SPEC = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_SPEC = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_SPEC = 31,
	}
	
	/// <summary>
	/// An app or a set of one or more tests to upload or that have been uploaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Upload
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UploadType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UploadStatus Status { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string Url { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string Metadata { get; set; }
		
		/// <summary>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength=0)]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UploadCategory Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_PACKAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_PACKAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_PACKAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_PACKAGE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_TEST_PACKAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_PACKAGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION_TEST_PACKAGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR_TEST_PACKAGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_TEST_PACKAGE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_PACKAGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_SPEC = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_SPEC = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_SPEC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_SPEC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_SPEC = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_SPEC = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_SPEC = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_SPEC = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_SPEC = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_SPEC = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VPCEConfiguration
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1024, MinimumLength=0)]
		public string VpceConfigurationName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceServiceName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string ServiceDnsName { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string VpceConfigurationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CurrencyCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 0,
	}
	
	/// <summary>
	/// <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p> <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p> <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerArtifactPaths
	{
		
		[System.Runtime.Serialization.DataMember()]
		public String[] IosPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] AndroidPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] DeviceHostPaths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DevicePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
	}
	
	/// <summary>
	/// Represents the screen resolution of a device in height and width, expressed in pixels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Resolution
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_NOT_AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHLY_AVAILABLE = 3,
	}
	
	/// <summary>
	/// Represents a device type that an app is tested against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Device
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceFormFactor FormFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DevicePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Os { get; set; }
		
		/// <summary>
		/// Represents the amount of CPU that an app is using on a physical device. Does not represent system-wide CPU usage.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CPU Cpu { get; set; }
		
		/// <summary>
		/// Represents the screen resolution of a device in height and width, expressed in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Resolution Resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> HeapSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Carrier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Radio { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteAccessEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceInstance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceAvailability Availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DevicePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_NOT_AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHLY_AVAILABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_VERSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceFilterAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RuleOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUALS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 7,
	}
	
	/// <summary>
	/// <p>Represents a device filter used to select a set of devices to be included in a test run. This data structure is passed in as the <code>deviceSelectionConfiguration</code> parameter to <code>ScheduleRun</code>. For an example of the JSON request syntax, see <a>ScheduleRun</a>.</p> <p>It is also passed in as the <code>filters</code> parameter to <code>ListDevices</code>. For an example of the JSON request syntax, see <a>ListDevices</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceFilterAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceFilterOperator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceFilterAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceFilterOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUALS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
	}
	
	/// <summary>
	/// Represents the device instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceInstance
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceInstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Udid { get; set; }
		
		/// <summary>
		/// Represents the instance profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceInstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
	}
	
	/// <summary>
	/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceMinutes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Metered { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Unmetered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DevicePoolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents a device pool compatibility result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DevicePoolCompatibilityResult
	{
		
		/// <summary>
		/// Represents a device type that an app is tested against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Compatible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IncompatibilityMessage[] IncompatibilityMessages { get; set; }
	}
	
	/// <summary>
	/// Represents the device filters used in a test run and the maximum number of devices to be included in the run. It is passed in as the <code>deviceSelectionConfiguration</code> request parameter in <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceSelectionConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeviceFilter[] Filters { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int MaxDevices { get; set; }
	}
	
	/// <summary>
	/// Contains the run results requested by the device selection configuration and how many devices were returned. For an example of the JSON response syntax, see <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeviceSelectionResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MatchedDevicesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	/// <summary>
	/// Represents configuration information about a test run, such as the execution timeout (in minutes).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExecutionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AccountsCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AppPackagesCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VideoCapture { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExecutionResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExecutionResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSING_FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_ENDPOINT_SETUP_FAILED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	/// <summary>
	/// Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleRunTest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunTestType Type { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string TestPackageArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string TestSpecArn { get; set; }
		
		/// <summary>
		/// Max length: 8192
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(8192, MinimumLength=0)]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestParameters Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleRunTestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	/// <summary>
	/// Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleRunConfiguration
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string ExtraDataPackageArn { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// <p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for example, 47.6204, -122.3491).</p> <p>Elevation is currently not supported.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AmazonResourceName[] VpceConfigurationArns { get; set; }
		
		/// <summary>
		/// <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p> <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p> <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerArtifactPaths CustomerArtifactPaths { get; set; }
		
		/// <summary>
		/// Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Radios Radios { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AmazonResourceName[] AuxiliaryApps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ScheduleRunConfigurationBillingMethod BillingMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ScheduleRunConfigurationBillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	/// <summary>
	/// Represents a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Job
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Stopped { get; set; }
		
		/// <summary>
		/// Represents entity counters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Counters Counters { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		/// <summary>
		/// Represents a device type that an app is tested against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string InstanceArn { get; set; }
		
		/// <summary>
		/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VideoEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VideoCapture { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Represents a test run on a set of devices with a given app package, test parameters, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Run
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunPlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Stopped { get; set; }
		
		/// <summary>
		/// Represents entity counters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Counters Counters { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CompletedJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunBillingMethod BillingMethod { get; set; }
		
		/// <summary>
		/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		/// <summary>
		/// An array of settings that describes characteristics of a network profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkProfile NetworkProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParsingResultUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RunResultCode ResultCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Seed { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string AppUpload { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EventCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> JobTimeoutMinutes { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string DevicePoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Locale { get; set; }
		
		/// <summary>
		/// Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Radios Radios { get; set; }
		
		/// <summary>
		/// <p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for example, 47.6204, -122.3491).</p> <p>Elevation is currently not supported.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		/// <summary>
		/// <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p> <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p> <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerArtifactPaths CustomerArtifactPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string TestSpecArn { get; set; }
		
		/// <summary>
		/// Contains the run results requested by the device selection configuration and how many devices were returned. For an example of the JSON response syntax, see <a>ScheduleRun</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceSelectionResult DeviceSelectionResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunBillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RunResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSING_FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_ENDPOINT_SETUP_FAILED = 1,
	}
	
	/// <summary>
	/// Represents a collection of one or more tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Suite
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SuiteType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SuiteStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SuiteResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Stopped { get; set; }
		
		/// <summary>
		/// Represents entity counters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Counters Counters { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		/// <summary>
		/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMinutes DeviceMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuiteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuiteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SuiteResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// A <a>TestGridSession</a> is a single instance of a browser launched from the URL provided by a call to <a>CreateTestGridUrl</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestGridSession
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:aws:devicefarm:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridSessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Ended { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> BillingMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SeleniumProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestGridSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 2,
	}
	
	/// <summary>
	/// Represents a condition that is evaluated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Test
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Stopped { get; set; }
		
		/// <summary>
		/// Represents entity counters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Counters Counters { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		/// <summary>
		/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeviceMinutes DeviceMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Represents information about incompatibility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IncompatibilityMessage
	{
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public IncompatibilityMessageType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IncompatibilityMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_VERSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestGridSessionArtifactCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestGridSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 2,
	}
	
	/// <summary>
	/// <p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for example, 47.6204, -122.3491).</p> <p>Elevation is currently not supported.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Location
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Latitude { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double Longitude { get; set; }
	}
	
	/// <summary>
	/// A number that represents the monetary amount for an offering or transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MonetaryAmount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MonetaryAmountCurrencyCode CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MonetaryAmountCurrencyCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING = 0,
	}
	
	/// <summary>
	/// Represents the metadata of a device offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Offering
	{
		
		/// <summary>
		/// Min length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=32)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingPlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
	}
	
	/// <summary>
	/// Represents information about an offering promotion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OfferingPromotion
	{
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 2,
	}
	
	/// <summary>
	/// The status of the offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OfferingStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OfferingStatusType Type { get; set; }
		
		/// <summary>
		/// Represents the metadata of a device offering.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Offering Offering { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EffectiveOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 2,
	}
	
	/// <summary>
	/// Represents the metadata of an offering transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OfferingTransaction
	{
		
		/// <summary>
		/// The status of the offering.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferingStatus OfferingStatus { get; set; }
		
		/// <summary>
		/// Min length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=32)]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=4)]
		public string OfferingPromotionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedOn { get; set; }
		
		/// <summary>
		/// A number that represents the monetary amount for an offering or transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonetaryAmount Cost { get; set; }
	}
	
	/// <summary>
	/// Information about a problem detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProblemDetail
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a specific warning or failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Problem
	{
		
		/// <summary>
		/// Information about a problem detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProblemDetail Run { get; set; }
		
		/// <summary>
		/// Information about a problem detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProblemDetail Job { get; set; }
		
		/// <summary>
		/// Information about a problem detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProblemDetail Suite { get; set; }
		
		/// <summary>
		/// Information about a problem detail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProblemDetail Test { get; set; }
		
		/// <summary>
		/// Represents a device type that an app is tested against.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProblemResult Result { get; set; }
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProblemResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Radios
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Wifi { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Bluetooth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Nfc { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Gps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecurringChargeFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 0,
	}
	
	/// <summary>
	/// Specifies whether charges for devices are recurring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecurringCharge
	{
		
		/// <summary>
		/// A number that represents the monetary amount for an offering or transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MonetaryAmount Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringChargeFrequency Frequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RecurringChargeFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 0,
	}
	
	/// <summary>
	/// Represents a condition for a device pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RuleAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RuleOperator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RuleAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_VERSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RuleOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUALS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SampleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREADS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX_RATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX_RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FRAMES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FPS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MIN_DRAWTIME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_AVG_DRAWTIME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MAX_DRAWTIME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FRAMES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FPS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MIN_DRAWTIME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_AVG_DRAWTIME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MAX_DRAWTIME = 16,
	}
	
	/// <summary>
	/// Represents a sample of performance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Sample
	{
		
		/// <summary>
		/// Max length: 1011
		/// Min length: 32
		/// Pattern: ^arn:.+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(1011, MinimumLength=32)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SampleType Type { get; set; }
		
		/// <summary>
		/// Max length: 2048
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength=0)]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SampleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREADS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX_RATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX_RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FRAMES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FPS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MIN_DRAWTIME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_AVG_DRAWTIME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MAX_DRAWTIME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FRAMES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FPS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MIN_DRAWTIME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_AVG_DRAWTIME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MAX_DRAWTIME = 16,
	}
	
	/// <summary>
	/// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An action taken by a <a>TestGridSession</a> browser instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestGridSessionAction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RequestMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestGridSessionArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELENIUM_LOG = 2,
	}
	
	/// <summary>
	/// <p>Artifacts are video and other files that are produced in the process of running a browser in an automated context. </p> <note> <p>Video elements might be broken up into multiple artifacts as they grow in size during creation. </p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestGridSessionArtifact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestGridSessionArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TestGridSessionArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELENIUM_LOG = 2,
	}
	
	/// <summary>
	/// A collection of one or more problems, grouped by their result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UniqueProblem
	{
		
		/// <summary>
		/// Max length: 16384
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(16384, MinimumLength=0)]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Problem[] Problems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UploadCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a device pool.
		/// CreateDevicePool /#X-Amz-Target=DeviceFarm_20150623.CreateDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDevicePoolResult> CreateDevicePoolAsync(CreateDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateDevicePool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a profile that can be applied to one or more private fleet device instances.
		/// CreateInstanceProfile /#X-Amz-Target=DeviceFarm_20150623.CreateInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstanceProfileResult> CreateInstanceProfileAsync(CreateInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateInstanceProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a network profile.
		/// CreateNetworkProfile /#X-Amz-Target=DeviceFarm_20150623.CreateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkProfileResult> CreateNetworkProfileAsync(CreateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateNetworkProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a project.
		/// CreateProject /#X-Amz-Target=DeviceFarm_20150623.CreateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectResult> CreateProjectAsync(CreateProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specifies and starts a remote access session.
		/// CreateRemoteAccessSession /#X-Amz-Target=DeviceFarm_20150623.CreateRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRemoteAccessSessionResult> CreateRemoteAccessSessionAsync(CreateRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateRemoteAccessSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a> instances.
		/// CreateTestGridProject /#X-Amz-Target=DeviceFarm_20150623.CreateTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTestGridProjectResult> CreateTestGridProjectAsync(CreateTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateTestGridProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code> constructor.
		/// CreateTestGridUrl /#X-Amz-Target=DeviceFarm_20150623.CreateTestGridUrl
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTestGridUrlResult> CreateTestGridUrlAsync(CreateTestGridUrlRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateTestGridUrl";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateTestGridUrlResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Uploads an app or test scripts.
		/// CreateUpload /#X-Amz-Target=DeviceFarm_20150623.CreateUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUploadResult> CreateUploadAsync(CreateUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateUpload";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// CreateVPCEConfiguration /#X-Amz-Target=DeviceFarm_20150623.CreateVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVPCEConfigurationResult> CreateVPCEConfigurationAsync(CreateVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.CreateVPCEConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
		/// DeleteDevicePool /#X-Amz-Target=DeviceFarm_20150623.DeleteDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDevicePoolResult> DeleteDevicePoolAsync(DeleteDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteDevicePool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a profile that can be applied to one or more private device instances.
		/// DeleteInstanceProfile /#X-Amz-Target=DeviceFarm_20150623.DeleteInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceProfileResult> DeleteInstanceProfileAsync(DeleteInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteInstanceProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a network profile.
		/// DeleteNetworkProfile /#X-Amz-Target=DeviceFarm_20150623.DeleteNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkProfileResult> DeleteNetworkProfileAsync(DeleteNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteNetworkProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an AWS Device Farm project, given the project ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
		/// DeleteProject /#X-Amz-Target=DeviceFarm_20150623.DeleteProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProjectResult> DeleteProjectAsync(DeleteProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a completed remote access session and its results.
		/// DeleteRemoteAccessSession /#X-Amz-Target=DeviceFarm_20150623.DeleteRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemoteAccessSessionResult> DeleteRemoteAccessSessionAsync(DeleteRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteRemoteAccessSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the run, given the run ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
		/// DeleteRun /#X-Amz-Target=DeviceFarm_20150623.DeleteRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRunResult> DeleteRunAsync(DeleteRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteRun";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes a Selenium testing project and all content generated under it. </p> <important> <p>You cannot undo this operation.</p> </important> <note> <p>You cannot delete a project if it has active sessions.</p> </note>
		/// DeleteTestGridProject /#X-Amz-Target=DeviceFarm_20150623.DeleteTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTestGridProjectResult> DeleteTestGridProjectAsync(DeleteTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteTestGridProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an upload given the upload ARN.
		/// DeleteUpload /#X-Amz-Target=DeviceFarm_20150623.DeleteUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUploadResult> DeleteUploadAsync(DeleteUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteUpload";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// DeleteVPCEConfiguration /#X-Amz-Target=DeviceFarm_20150623.DeleteVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteVPCEConfigurationResult> DeleteVPCEConfigurationAsync(DeleteVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.DeleteVPCEConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.
		/// GetAccountSettings /#X-Amz-Target=DeviceFarm_20150623.GetAccountSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountSettingsResult> GetAccountSettingsAsync(GetAccountSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetAccountSettings";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetAccountSettingsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a unique device type.
		/// GetDevice /#X-Amz-Target=DeviceFarm_20150623.GetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceResult> GetDeviceAsync(GetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetDevice";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeviceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a device instance that belongs to a private device fleet.
		/// GetDeviceInstance /#X-Amz-Target=DeviceFarm_20150623.GetDeviceInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceInstanceResult> GetDeviceInstanceAsync(GetDeviceInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetDeviceInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDeviceInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a device pool.
		/// GetDevicePool /#X-Amz-Target=DeviceFarm_20150623.GetDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDevicePoolResult> GetDevicePoolAsync(GetDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetDevicePool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about compatibility with a device pool.
		/// GetDevicePoolCompatibility /#X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDevicePoolCompatibilityResult> GetDevicePoolCompatibilityAsync(GetDevicePoolCompatibilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDevicePoolCompatibilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified instance profile.
		/// GetInstanceProfile /#X-Amz-Target=DeviceFarm_20150623.GetInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceProfileResult> GetInstanceProfileAsync(GetInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetInstanceProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a job.
		/// GetJob /#X-Amz-Target=DeviceFarm_20150623.GetJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobResult> GetJobAsync(GetJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a network profile.
		/// GetNetworkProfile /#X-Amz-Target=DeviceFarm_20150623.GetNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetNetworkProfileResult> GetNetworkProfileAsync(GetNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetNetworkProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// GetOfferingStatus /#X-Amz-Target=DeviceFarm_20150623.GetOfferingStatus
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetOfferingStatusResult> GetOfferingStatusAsync(string nextToken, GetOfferingStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetOfferingStatus?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetOfferingStatusResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a project.
		/// GetProject /#X-Amz-Target=DeviceFarm_20150623.GetProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProjectResult> GetProjectAsync(GetProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a link to a currently running remote access session.
		/// GetRemoteAccessSession /#X-Amz-Target=DeviceFarm_20150623.GetRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRemoteAccessSessionResult> GetRemoteAccessSessionAsync(GetRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetRemoteAccessSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a run.
		/// GetRun /#X-Amz-Target=DeviceFarm_20150623.GetRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRunResult> GetRunAsync(GetRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetRun";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a suite.
		/// GetSuite /#X-Amz-Target=DeviceFarm_20150623.GetSuite
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSuiteResult> GetSuiteAsync(GetSuiteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetSuite";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSuiteResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a test.
		/// GetTest /#X-Amz-Target=DeviceFarm_20150623.GetTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestResult> GetTestAsync(GetTestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetTest";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTestResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a Selenium testing project.
		/// GetTestGridProject /#X-Amz-Target=DeviceFarm_20150623.GetTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestGridProjectResult> GetTestGridProjectAsync(GetTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetTestGridProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p> <ul> <li> <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p> </li> <li> <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p> </li> </ul> <p/>
		/// GetTestGridSession /#X-Amz-Target=DeviceFarm_20150623.GetTestGridSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestGridSessionResult> GetTestGridSessionAsync(GetTestGridSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetTestGridSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTestGridSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an upload.
		/// GetUpload /#X-Amz-Target=DeviceFarm_20150623.GetUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUploadResult> GetUploadAsync(GetUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetUpload";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// GetVPCEConfiguration /#X-Amz-Target=DeviceFarm_20150623.GetVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetVPCEConfigurationResult> GetVPCEConfigurationAsync(GetVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.GetVPCEConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
		/// InstallToRemoteAccessSession /#X-Amz-Target=DeviceFarm_20150623.InstallToRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InstallToRemoteAccessSessionResult> InstallToRemoteAccessSessionAsync(InstallToRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.InstallToRemoteAccessSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InstallToRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about artifacts.
		/// ListArtifacts /#X-Amz-Target=DeviceFarm_20150623.ListArtifacts
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListArtifactsResult> ListArtifactsAsync(string nextToken, ListArtifactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListArtifacts?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the private device instances associated with one or more AWS accounts.
		/// ListDeviceInstances /#X-Amz-Target=DeviceFarm_20150623.ListDeviceInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDeviceInstancesResult> ListDeviceInstancesAsync(ListDeviceInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListDeviceInstances";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDeviceInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about device pools.
		/// ListDevicePools /#X-Amz-Target=DeviceFarm_20150623.ListDevicePools
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevicePoolsResult> ListDevicePoolsAsync(string nextToken, ListDevicePoolsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListDevicePools?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDevicePoolsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about unique device types.
		/// ListDevices /#X-Amz-Target=DeviceFarm_20150623.ListDevices
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevicesResult> ListDevicesAsync(string nextToken, ListDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListDevices?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListDevicesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all the instance profiles in an AWS account.
		/// ListInstanceProfiles /#X-Amz-Target=DeviceFarm_20150623.ListInstanceProfiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListInstanceProfilesResult> ListInstanceProfilesAsync(ListInstanceProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListInstanceProfiles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInstanceProfilesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about jobs for a given test run.
		/// ListJobs /#X-Amz-Target=DeviceFarm_20150623.ListJobs
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string nextToken, ListJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListJobs?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of available network profiles.
		/// ListNetworkProfiles /#X-Amz-Target=DeviceFarm_20150623.ListNetworkProfiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListNetworkProfilesResult> ListNetworkProfilesAsync(ListNetworkProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListNetworkProfiles";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListNetworkProfilesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.
		/// ListOfferingPromotions /#X-Amz-Target=DeviceFarm_20150623.ListOfferingPromotions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListOfferingPromotionsResult> ListOfferingPromotionsAsync(ListOfferingPromotionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListOfferingPromotions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOfferingPromotionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// ListOfferingTransactions /#X-Amz-Target=DeviceFarm_20150623.ListOfferingTransactions
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingTransactionsResult> ListOfferingTransactionsAsync(string nextToken, ListOfferingTransactionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListOfferingTransactions?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOfferingTransactionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// ListOfferings /#X-Amz-Target=DeviceFarm_20150623.ListOfferings
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingsResult> ListOfferingsAsync(string nextToken, ListOfferingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListOfferings?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOfferingsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about projects.
		/// ListProjects /#X-Amz-Target=DeviceFarm_20150623.ListProjects
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsResult> ListProjectsAsync(string nextToken, ListProjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListProjects?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all currently running remote access sessions.
		/// ListRemoteAccessSessions /#X-Amz-Target=DeviceFarm_20150623.ListRemoteAccessSessions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListRemoteAccessSessionsResult> ListRemoteAccessSessionsAsync(ListRemoteAccessSessionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListRemoteAccessSessions";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRemoteAccessSessionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about runs, given an AWS Device Farm project ARN.
		/// ListRuns /#X-Amz-Target=DeviceFarm_20150623.ListRuns
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRunsResult> ListRunsAsync(string nextToken, ListRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListRuns?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListRunsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about samples, given an AWS Device Farm job ARN.
		/// ListSamples /#X-Amz-Target=DeviceFarm_20150623.ListSamples
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSamplesResult> ListSamplesAsync(string nextToken, ListSamplesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListSamples?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSamplesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about test suites for a given job.
		/// ListSuites /#X-Amz-Target=DeviceFarm_20150623.ListSuites
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSuitesResult> ListSuitesAsync(string nextToken, ListSuitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListSuites?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSuitesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for an AWS Device Farm resource.
		/// ListTagsForResource /#X-Amz-Target=DeviceFarm_20150623.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTagsForResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all Selenium testing projects in your account.
		/// ListTestGridProjects /#X-Amz-Target=DeviceFarm_20150623.ListTestGridProjects
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridProjectsResult> ListTestGridProjectsAsync(string maxResult, string nextToken, ListTestGridProjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTestGridProjects?maxResult=" + (maxResult==null? "" : Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTestGridProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the actions taken in a <a>TestGridSession</a>.
		/// ListTestGridSessionActions /#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionActions
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionActionsResult> ListTestGridSessionActionsAsync(string maxResult, string nextToken, ListTestGridSessionActionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionActions?maxResult=" + (maxResult==null? "" : Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTestGridSessionActionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of artifacts created during the session.
		/// ListTestGridSessionArtifacts /#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionArtifacts
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionArtifactsResult> ListTestGridSessionArtifactsAsync(string maxResult, string nextToken, ListTestGridSessionArtifactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionArtifacts?maxResult=" + (maxResult==null? "" : Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTestGridSessionArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of sessions for a <a>TestGridProject</a>.
		/// ListTestGridSessions /#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessions
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionsResult> ListTestGridSessionsAsync(string maxResult, string nextToken, ListTestGridSessionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessions?maxResult=" + (maxResult==null? "" : Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTestGridSessionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about tests in a given test suite.
		/// ListTests /#X-Amz-Target=DeviceFarm_20150623.ListTests
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestsResult> ListTestsAsync(string nextToken, ListTestsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListTests?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTestsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about unique problems, such as exceptions or crashes.</p> <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (<code>OutOfBoundsException in MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many individual entries for that exception.</p>
		/// ListUniqueProblems /#X-Amz-Target=DeviceFarm_20150623.ListUniqueProblems
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUniqueProblemsResult> ListUniqueProblemsAsync(string nextToken, ListUniqueProblemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListUniqueProblems?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUniqueProblemsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about uploads, given an AWS Device Farm project ARN.
		/// ListUploads /#X-Amz-Target=DeviceFarm_20150623.ListUploads
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUploadsResult> ListUploadsAsync(string nextToken, ListUploadsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListUploads?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListUploadsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
		/// ListVPCEConfigurations /#X-Amz-Target=DeviceFarm_20150623.ListVPCEConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListVPCEConfigurationsResult> ListVPCEConfigurationsAsync(ListVPCEConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ListVPCEConfigurations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListVPCEConfigurationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// PurchaseOffering /#X-Amz-Target=DeviceFarm_20150623.PurchaseOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PurchaseOfferingResult> PurchaseOfferingAsync(PurchaseOfferingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.PurchaseOffering";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PurchaseOfferingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Explicitly sets the quantity of devices to renew for an offering, starting from the <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// RenewOffering /#X-Amz-Target=DeviceFarm_20150623.RenewOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RenewOfferingResult> RenewOfferingAsync(RenewOfferingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.RenewOffering";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RenewOfferingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Schedules a run.
		/// ScheduleRun /#X-Amz-Target=DeviceFarm_20150623.ScheduleRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScheduleRunResult> ScheduleRunAsync(ScheduleRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.ScheduleRun";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ScheduleRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.
		/// StopJob /#X-Amz-Target=DeviceFarm_20150623.StopJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopJobResult> StopJobAsync(StopJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.StopJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ends a specified remote access session.
		/// StopRemoteAccessSession /#X-Amz-Target=DeviceFarm_20150623.StopRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRemoteAccessSessionResult> StopRemoteAccessSessionAsync(StopRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.StopRemoteAccessSession";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.
		/// StopRun /#X-Amz-Target=DeviceFarm_20150623.StopRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRunResult> StopRunAsync(StopRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.StopRun";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
		/// TagResource /#X-Amz-Target=DeviceFarm_20150623.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.TagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified tags from a resource.
		/// UntagResource /#X-Amz-Target=DeviceFarm_20150623.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UntagResource";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about a private device instance.
		/// UpdateDeviceInstance /#X-Amz-Target=DeviceFarm_20150623.UpdateDeviceInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceInstanceResult> UpdateDeviceInstanceAsync(UpdateDeviceInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateDeviceInstance";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDeviceInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
		/// UpdateDevicePool /#X-Amz-Target=DeviceFarm_20150623.UpdateDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDevicePoolResult> UpdateDevicePoolAsync(UpdateDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateDevicePool";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about an existing private device instance profile.
		/// UpdateInstanceProfile /#X-Amz-Target=DeviceFarm_20150623.UpdateInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateInstanceProfileResult> UpdateInstanceProfileAsync(UpdateInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateInstanceProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the network profile.
		/// UpdateNetworkProfile /#X-Amz-Target=DeviceFarm_20150623.UpdateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkProfileResult> UpdateNetworkProfileAsync(UpdateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateNetworkProfile";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified project name, given the project ARN and a new name.
		/// UpdateProject /#X-Amz-Target=DeviceFarm_20150623.UpdateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectResult> UpdateProjectAsync(UpdateProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change details of a project.
		/// UpdateTestGridProject /#X-Amz-Target=DeviceFarm_20150623.UpdateTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTestGridProjectResult> UpdateTestGridProjectAsync(UpdateTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateTestGridProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an uploaded test spec.
		/// UpdateUpload /#X-Amz-Target=DeviceFarm_20150623.UpdateUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUploadResult> UpdateUploadAsync(UpdateUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateUpload";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.
		/// UpdateVPCEConfiguration /#X-Amz-Target=DeviceFarm_20150623.UpdateVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateVPCEConfigurationResult> UpdateVPCEConfigurationAsync(UpdateVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=DeviceFarm_20150623.UpdateVPCEConfiguration";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
