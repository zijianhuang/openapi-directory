//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteBuildsOutput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] BuildsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildNotDeleted[] BuildsNotDeleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchDeleteBuildsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetBuildsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Build[] Builds { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] BuildsNotFound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetBuildsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Project[] Projects { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ProjectsNotFound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetProjectsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Names { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetReportGroupsOutput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public ReportGroup[] ReportGroups { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportGroupsNotFound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetReportGroupsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportGroupArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetReportsOutput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public Report[] Reports { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportsNotFound { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchGetReportsInput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProjectOutput
	{
		
		/// <summary>
		/// Information about a build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateProjectInput
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 2
		/// Pattern: [A-Za-z0-9][A-Za-z0-9\-_]{1,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=2)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Information about the build input source code for the build project.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectSource Source { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		/// <summary>
		/// Information about the build output artifacts for the build project.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifacts Artifacts { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Information about the build environment of the build project.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironment Environment { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Information about the VPC configuration that AWS CodeBuild accesses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		/// <summary>
		///  Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a specified S3 bucket, or both. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReportGroupOutput
	{
		
		/// <summary>
		///  A series of reports. Each report contains information about the results from running a series of test cases. You specify the test cases for a report group in the buildspec for a build project using one or more paths to the test case files. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportGroup ReportGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateReportGroupInput
	{
		
		/// <summary>
		/// Max length: 128
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=2)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateReportGroupInputType Type { get; set; }
		
		/// <summary>
		///  Information about the location where the run of a report is exported. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportExportConfig ExportConfig { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateReportGroupInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookOutput
	{
		
		/// <summary>
		/// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateWebhookInput
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 2
		/// Pattern: [A-Za-z0-9][A-Za-z0-9\-_]{1,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=2)]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterGroup[] FilterGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteProjectInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteReportInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteReportGroupInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteResourcePolicyInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSourceCredentialsOutput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSourceCredentialsInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteWebhookInput
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 2
		/// Pattern: [A-Za-z0-9][A-Za-z0-9\-_]{1,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=2)]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTestCasesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TestCase[] TestCases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeTestCasesInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A filter used to return specific types of test cases. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestCaseFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourcePolicyOutput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetResourcePolicyInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportSourceCredentialsOutput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ImportSourceCredentialsInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Username { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Token { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImportSourceCredentialsInputServerType ServerType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ImportSourceCredentialsInputAuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShouldOverwrite { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImportSourceCredentialsInputServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImportSourceCredentialsInputAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_ACCESS_TOKEN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InvalidateProjectCacheInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBuildsOutput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBuildsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListBuildsInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListBuildsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBuildsForProjectOutput
	{
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBuildsForProjectInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListBuildsForProjectInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListBuildsForProjectInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCuratedEnvironmentImagesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentPlatform[] Platforms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListProjectsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListProjectsInputSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListProjectsInputSortOrder SortOrder { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListProjectsInputSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListProjectsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListReportGroupsInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListReportGroupsInputSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListReportGroupsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListReportGroupsInputSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Reports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListReportsInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A filter used to return reports with the status specified by the input <code>status</code> parameter. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListReportsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportsForReportGroupOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Reports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReportsForReportGroupInput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReportGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListReportsForReportGroupInputSortOrder SortOrder { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  A filter used to return reports with the status specified by the input <code>status</code> parameter. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListReportsForReportGroupInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSharedProjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] Projects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSharedProjectsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListSharedProjectsInputSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListSharedProjectsInputSortOrder SortOrder { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListSharedProjectsInputSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED_TIME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListSharedProjectsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSharedReportGroupsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public NonEmptyString[] ReportGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSharedReportGroupsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListSharedReportGroupsInputSortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListSharedReportGroupsInputSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListSharedReportGroupsInputSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListSharedReportGroupsInputSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED_TIME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListSourceCredentialsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceCredentialsInfo[] SourceCredentialsInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutResourcePolicyOutput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutResourcePolicyInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Policy { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartBuildOutput
	{
		
		/// <summary>
		/// Information about a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Build Build { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartBuildInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSource[] SecondarySourcesOverride { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSourceVersion[] SecondarySourcesVersionOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Information about the build output artifacts for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifacts ArtifactsOverride { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectArtifacts[] SecondaryArtifactsOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariable[] EnvironmentVariablesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartBuildInputSourceTypeOverride SourceTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceLocationOverride { get; set; }
		
		/// <summary>
		/// <p>Information about the authorization settings for AWS CodeBuild to access the source code to be built.</p> <p>This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceAuth SourceAuthOverride { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> GitCloneDepthOverride { get; set; }
		
		/// <summary>
		///  Information about the Git submodules configuration for an AWS CodeBuild build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GitSubmodulesConfig GitSubmodulesConfigOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BuildspecOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InsecureSslOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportBuildStatusOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartBuildInputEnvironmentTypeOverride EnvironmentTypeOverride { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ImageOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartBuildInputComputeTypeOverride ComputeTypeOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateOverride { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCache CacheOverride { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ServiceRoleOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivilegedModeOverride { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> TimeoutInMinutesOverride { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutesOverride { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKeyOverride { get; set; }
		
		/// <summary>
		///  Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a specified S3 bucket, or both. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsConfig LogsConfigOverride { get; set; }
		
		/// <summary>
		/// <p> Information about credentials that provide access to a private Docker registry. When this is set: </p> <ul> <li> <p> <code>imagePullCredentialsType</code> must be set to <code>SERVICE_ROLE</code>. </p> </li> <li> <p> images cannot be curated or an Amazon ECR image.</p> </li> </ul> <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html">Private Registry with AWS Secrets Manager Sample for AWS CodeBuild</a>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegistryCredential RegistryCredentialOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StartBuildInputImagePullCredentialsTypeOverride ImagePullCredentialsTypeOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartBuildInputSourceTypeOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODECOMMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SOURCE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartBuildInputEnvironmentTypeOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_CONTAINER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_CONTAINER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_GPU_CONTAINER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_CONTAINER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartBuildInputComputeTypeOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_2XLARGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartBuildInputImagePullCredentialsTypeOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEBUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ROLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopBuildOutput
	{
		
		/// <summary>
		/// Information about a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Build Build { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopBuildInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProjectOutput
	{
		
		/// <summary>
		/// Information about a build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Project Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateProjectInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Information about the build input source code for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectSource Source { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		/// <summary>
		/// Information about the build output artifacts for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifacts Artifacts { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Information about the build environment of the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironment Environment { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Information about the VPC configuration that AWS CodeBuild accesses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		/// <summary>
		///  Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a specified S3 bucket, or both. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReportGroupOutput
	{
		
		/// <summary>
		///  A series of reports. Each report contains information about the results from running a series of test cases. You specify the test cases for a report group in the buildspec for a build project using one or more paths to the test case files. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportGroup ReportGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReportGroupInput
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
		
		/// <summary>
		///  Information about the location where the run of a report is exported. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportExportConfig ExportConfig { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateWebhookOutput
	{
		
		/// <summary>
		/// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateWebhookInput
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 2
		/// Pattern: [A-Za-z0-9][A-Za-z0-9\-_]{1,254}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=2)]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RotateSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterGroup[] FilterGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactNamespace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_ID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactPackaging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ArtifactsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ARTIFACTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_ACCESS_TOKEN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// Information about the build input source code for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectSource
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectSourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> GitCloneDepth { get; set; }
		
		/// <summary>
		///  Information about the Git submodules configuration for an AWS CodeBuild build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GitSubmodulesConfig GitSubmodulesConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Buildspec { get; set; }
		
		/// <summary>
		/// <p>Information about the authorization settings for AWS CodeBuild to access the source code to be built.</p> <p>This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceAuth Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ReportBuildStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InsecureSsl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODECOMMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SOURCE = 6,
	}
	
	/// <summary>
	/// Information about build output artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildArtifacts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Sha256sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Md5sum { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactIdentifier { get; set; }
	}
	
	/// <summary>
	/// Information about the cache for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectCache
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectCacheType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CacheMode[] Modes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectCacheType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CACHE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 2,
	}
	
	/// <summary>
	/// Information about the build environment of the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectEnvironment
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironmentType Type { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Image { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironmentComputeType ComputeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariable[] EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PrivilegedMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Certificate { get; set; }
		
		/// <summary>
		/// <p> Information about credentials that provide access to a private Docker registry. When this is set: </p> <ul> <li> <p> <code>imagePullCredentialsType</code> must be set to <code>SERVICE_ROLE</code>. </p> </li> <li> <p> images cannot be curated or an Amazon ECR image.</p> </li> </ul> <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html">Private Registry with AWS Secrets Manager Sample for AWS CodeBuild</a>. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RegistryCredential RegistryCredential { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironmentImagePullCredentialsType ImagePullCredentialsType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectEnvironmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_CONTAINER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_CONTAINER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_GPU_CONTAINER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_CONTAINER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectEnvironmentComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_2XLARGE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectEnvironmentImagePullCredentialsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEBUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ROLE = 1,
	}
	
	/// <summary>
	/// Information about build logs in Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogsLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeepLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3DeepLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudWatchLogsArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3LogsArn { get; set; }
		
		/// <summary>
		///  Information about Amazon CloudWatch Logs for a build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsConfig CloudWatchLogs { get; set; }
		
		/// <summary>
		///  Information about S3 logs for a build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfig S3Logs { get; set; }
	}
	
	/// <summary>
	/// Information about the VPC configuration that AWS CodeBuild accesses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VpcConfig
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string VpcId { get; set; }
		
		/// <summary>
		/// Maximum items: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public NonEmptyString[] Subnets { get; set; }
		
		/// <summary>
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public NonEmptyString[] SecurityGroupIds { get; set; }
	}
	
	/// <summary>
	/// Describes a network interface.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInterface
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string SubnetId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// Information about a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Build
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Id { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BuildNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildBuildStatus BuildStatus { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ResolvedSourceVersion { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildPhase[] Phases { get; set; }
		
		/// <summary>
		/// Information about the build input source code for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectSource Source { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSource[] SecondarySources { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		/// <summary>
		/// Information about build output artifacts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BuildArtifacts Artifacts { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public BuildArtifacts[] SecondaryArtifacts { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Information about the build environment of the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironment Environment { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Information about build logs in Amazon CloudWatch Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsLocation Logs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BuildComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Initiator { get; set; }
		
		/// <summary>
		/// Information about the VPC configuration that AWS CodeBuild accesses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Describes a network interface.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInterface NetworkInterface { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExportedEnvironmentVariable[] ExportedEnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] ReportArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildBuildStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// Information about a build that could not be successfully deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildNotDeleted
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildPhaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_SOURCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_BUILD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_BUILD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_ARTIFACTS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 10,
	}
	
	/// <summary>
	/// Information about a stage for a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BuildPhase
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BuildPhasePhaseType PhaseType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BuildPhasePhaseStatus PhaseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhaseContext[] Contexts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildPhasePhaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROVISIONING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWNLOAD_SOURCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_BUILD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST_BUILD = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPLOAD_ARTIFACTS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINALIZING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BuildPhasePhaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAULT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CacheMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_DOCKER_LAYER_CACHE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_SOURCE_CACHE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_CUSTOM_CACHE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CacheType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CACHE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogsConfigStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	///  Information about Amazon CloudWatch Logs for a build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudWatchLogsConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsConfigStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudWatchLogsConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_SMALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_LARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_GENERAL1_2XLARGE = 3,
	}
	
	/// <summary>
	/// Information about the build output artifacts for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectArtifacts
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifactsType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifactsNamespaceType NamespaceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifactsPackaging Packaging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OverrideArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectArtifactsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ARTIFACTS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectArtifactsNamespaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD_ID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectArtifactsPackaging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 1,
	}
	
	/// <summary>
	///  Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a specified S3 bucket, or both. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LogsConfig
	{
		
		/// <summary>
		///  Information about Amazon CloudWatch Logs for a build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchLogsConfig CloudWatchLogs { get; set; }
		
		/// <summary>
		///  Information about S3 logs for a build project. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfig S3Logs { get; set; }
	}
	
	/// <summary>
	/// Information about a build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Project
	{
		
		/// <summary>
		/// Max length: 255
		/// Min length: 2
		/// Pattern: [A-Za-z0-9][A-Za-z0-9\-_]{1,254}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=2)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Description { get; set; }
		
		/// <summary>
		/// Information about the build input source code for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectSource Source { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSource[] SecondarySources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectSourceVersion[] SecondarySourceVersions { get; set; }
		
		/// <summary>
		/// Information about the build output artifacts for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectArtifacts Artifacts { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		public ProjectArtifacts[] SecondaryArtifacts { get; set; }
		
		/// <summary>
		/// Information about the cache for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectCache Cache { get; set; }
		
		/// <summary>
		/// Information about the build environment of the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectEnvironment Environment { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ServiceRole { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> TimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 480
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(5, 480)]
		public System.Nullable<System.Int32> QueuedTimeoutInMinutes { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKey { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Webhook Webhook { get; set; }
		
		/// <summary>
		/// Information about the VPC configuration that AWS CodeBuild accesses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		/// <summary>
		/// Information about the build badge for the build project.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProjectBadge Badge { get; set; }
		
		/// <summary>
		///  Information about logs for a build project. These can be logs in Amazon CloudWatch Logs, built in a specified S3 bucket, or both. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LogsConfig LogsConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectFileSystemLocation[] FileSystemLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
	}
	
	/// <summary>
	///  Information about the location where the run of a report is exported. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportExportConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportExportConfigExportConfigType ExportConfigType { get; set; }
		
		/// <summary>
		///  Information about the S3 bucket where the raw data of a report are exported. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3ReportExportConfig S3Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportExportConfigExportConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EXPORT = 1,
	}
	
	/// <summary>
	///  A series of reports. Each report contains information about the results from running a series of test cases. You specify the test cases for a report group in the buildspec for a build project using one or more paths to the test case files. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportGroup
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength=2)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportGroupType Type { get; set; }
		
		/// <summary>
		///  Information about the location where the run of a report is exported. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
	}
	
	/// <summary>
	/// Information about a webhook that connects repository events to a build project in AWS CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Webhook
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Url { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PayloadUrl { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BranchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterGroup[] FilterGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModifiedSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CredentialProviderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 0,
	}
	
	/// <summary>
	///  A filter used to return specific types of test cases. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestCaseFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Information about a Docker image that is managed by AWS CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public String[] Versions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LanguageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_JS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUBY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLANG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOTNET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 9,
	}
	
	/// <summary>
	/// A set of Docker images that are related by programming language and are managed by AWS CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentLanguage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentLanguageLanguage Language { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentImage[] Images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentLanguageLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JAVA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYTHON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NODE_JS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUBY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLANG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCKER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOTNET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHP = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PlatformType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_SERVER = 3,
	}
	
	/// <summary>
	/// A set of Docker images that are related by platform and are managed by AWS CodeBuild.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentPlatform
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentPlatformPlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentLanguage[] Languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentPlatformPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIAN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMAZON_LINUX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UBUNTU = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_SERVER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WINDOWS_CONTAINER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_CONTAINER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINUX_GPU_CONTAINER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARM_CONTAINER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentVariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAINTEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 2,
	}
	
	/// <summary>
	/// Information about an environment variable for a build project or a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EnvironmentVariable
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EnvironmentVariableType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EnvironmentVariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAINTEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 2,
	}
	
	/// <summary>
	///  Information about an exported environment variable. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExportedEnvironmentVariable
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileSystemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 0,
	}
	
	/// <summary>
	///  A filter used to determine which webhooks trigger a build. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WebhookFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WebhookFilterType Type { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeMatchedPattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WebhookFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD_REF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTOR_ACCOUNT_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_PATH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMIT_MESSAGE = 5,
	}
	
	/// <summary>
	///  Information about the Git submodules configuration for an AWS CodeBuild build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GitSubmodulesConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool FetchSubmodules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ImagePullCredentialsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEBUILD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_ROLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SortOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportGroupSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATED_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_TIME = 2,
	}
	
	/// <summary>
	///  A filter used to return reports with the status specified by the input <code>status</code> parameter. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReportFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportFilterStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportFilterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SharedResourceSortByType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFIED_TIME = 1,
	}
	
	/// <summary>
	///  Information about S3 logs for a build project. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3LogsConfig
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public S3LogsConfigStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3LogsConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	/// <summary>
	/// Additional information about a build phase that has an error. You can use this information for troubleshooting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PhaseContext
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information about the build badge for the build project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectBadge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BadgeEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BadgeRequestUrl { get; set; }
	}
	
	/// <summary>
	/// <p> Information about credentials that provide access to a private Docker registry. When this is set: </p> <ul> <li> <p> <code>imagePullCredentialsType</code> must be set to <code>SERVICE_ROLE</code>. </p> </li> <li> <p> images cannot be curated or an Amazon ECR image.</p> </li> </ul> <p> For more information, see <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/sample-private-registry.html">Private Registry with AWS Secrets Manager Sample for AWS CodeBuild</a>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegistryCredential
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Credential { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RegistryCredentialCredentialProvider CredentialProvider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RegistryCredentialCredentialProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRETS_MANAGER = 0,
	}
	
	/// <summary>
	///  Information about a file system created by Amazon Elastic File System (EFS). For more information, see <a href="https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html">What Is Amazon Elastic File System?</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectFileSystemLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProjectFileSystemLocationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MountPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MountOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ProjectFileSystemLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EFS = 0,
	}
	
	/// <summary>
	///  A source identifier and its corresponding version. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProjectSourceVersion
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceIdentifier { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODECOMMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODEPIPELINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SOURCE = 6,
	}
	
	/// <summary>
	/// <p>Information about the authorization settings for AWS CodeBuild to access the source code to be built.</p> <p>This information is for the AWS CodeBuild console's use only. Your code should not get or set this information directly.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceAuth
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceAuthType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	/// <summary>
	///  Information about a test report. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestReportSummary
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Total { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReportStatusCounts StatusCounts { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DurationInNanoSeconds { get; set; }
	}
	
	/// <summary>
	///  Information about the results from running a series of test cases during the run of a build project. The test cases are specified in the buildspec for the build project using one or more paths to the test case files. You can specify any type of tests you want, such as unit tests, integration tests, and functional tests. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Report
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ReportGroupArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expired { get; set; }
		
		/// <summary>
		///  Information about the location where the run of a report is exported. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportExportConfig ExportConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Truncated { get; set; }
		
		/// <summary>
		///  Information about a test report. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TestReportSummary TestSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENERATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportExportConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EXPORT = 1,
	}
	
	/// <summary>
	///  Information about the S3 bucket where the raw data of a report are exported. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3ReportExportConfig
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3ReportExportConfigPackaging Packaging { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EncryptionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EncryptionDisabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3ReportExportConfigPackaging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReportPackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
	}
	
	/// <summary>
	///  Information about the credentials for a GitHub, GitHub Enterprise, or Bitbucket repository. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceCredentialsInfo
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceCredentialsInfoServerType ServerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceCredentialsInfoAuthType AuthType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceCredentialsInfoServerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SourceCredentialsInfoAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_AUTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_ACCESS_TOKEN = 2,
	}
	
	/// <summary>
	/// <p>A tag, consisting of a key and a value.</p> <p>This tag is available for use by AWS services that support tags in AWS CodeBuild.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Max length: 127
		/// Min length: 1
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=@+\-]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(127, MinimumLength=1)]
		public string Key { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// Pattern: ^([\p{L}\p{Z}\p{N}_.:/=@+\-]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=0)]
		public string Value { get; set; }
	}
	
	/// <summary>
	///  Information about a test case created using a framework such as NUnit or Cucumber. A test case might be a unit test or a configuration test. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TestCase
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ReportArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestRawDataPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DurationInNanoSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Expired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum WebhookFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASE_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEAD_REF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTOR_ACCOUNT_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_PATH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMIT_MESSAGE = 5,
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes one or more builds.
		/// BatchDeleteBuilds /#X-Amz-Target=CodeBuild_20161006.BatchDeleteBuilds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeleteBuildsOutput> BatchDeleteBuildsAsync(BatchDeleteBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.BatchDeleteBuilds";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchDeleteBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more builds.
		/// BatchGetBuilds /#X-Amz-Target=CodeBuild_20161006.BatchGetBuilds
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetBuildsOutput> BatchGetBuildsAsync(BatchGetBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.BatchGetBuilds";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more build projects.
		/// BatchGetProjects /#X-Amz-Target=CodeBuild_20161006.BatchGetProjects
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetProjectsOutput> BatchGetProjectsAsync(BatchGetProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.BatchGetProjects";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of report groups.
		/// BatchGetReportGroups /#X-Amz-Target=CodeBuild_20161006.BatchGetReportGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetReportGroupsOutput> BatchGetReportGroupsAsync(BatchGetReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.BatchGetReportGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of reports.
		/// BatchGetReports /#X-Amz-Target=CodeBuild_20161006.BatchGetReports
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchGetReportsOutput> BatchGetReportsAsync(BatchGetReportsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.BatchGetReports";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchGetReportsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a build project.
		/// CreateProject /#X-Amz-Target=CodeBuild_20161006.CreateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectOutput> CreateProjectAsync(CreateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.CreateProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a report group. A report group contains a collection of reports.
		/// CreateReportGroup /#X-Amz-Target=CodeBuild_20161006.CreateReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateReportGroupOutput> CreateReportGroupAsync(CreateReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.CreateReportGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>For an existing AWS CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, enables AWS CodeBuild to start rebuilding the source code every time a code change is pushed to the repository.</p> <important> <p>If you enable webhooks for an AWS CodeBuild project, and the project is used as a build step in AWS CodePipeline, then two identical builds are created for each commit. One build is triggered through webhooks, and one through AWS CodePipeline. Because billing is on a per-build basis, you are billed for both builds. Therefore, if you are using AWS CodePipeline, we recommend that you disable webhooks in AWS CodeBuild. In the AWS CodeBuild console, clear the Webhook box. For more information, see step 5 in <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/change-project.html#change-project-console">Change a Build Project's Settings</a>.</p> </important>
		/// CreateWebhook /#X-Amz-Target=CodeBuild_20161006.CreateWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWebhookOutput> CreateWebhookAsync(CreateWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.CreateWebhook";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a build project. When you delete a project, its builds are not deleted.
		/// DeleteProject /#X-Amz-Target=CodeBuild_20161006.DeleteProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProjectOutput> DeleteProjectAsync(DeleteProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a report.
		/// DeleteReport /#X-Amz-Target=CodeBuild_20161006.DeleteReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReportOutput> DeleteReportAsync(DeleteReportInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteReport";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteReportOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <code>DeleteReportGroup</code>: Deletes a report group. Before you delete a report group, you must delete its reports. Use <a href="https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ListReportsForReportGroup.html">ListReportsForReportGroup</a> to get the reports in a report group. Use <a href="https://docs.aws.amazon.com/codebuild/latest/APIReference/API_DeleteReport.html">DeleteReport</a> to delete the reports. If you call <code>DeleteReportGroup</code> for a report group that contains one or more reports, an exception is thrown.
		/// DeleteReportGroup /#X-Amz-Target=CodeBuild_20161006.DeleteReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteReportGroupOutput> DeleteReportGroupAsync(DeleteReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteReportGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource policy that is identified by its resource ARN.
		/// DeleteResourcePolicy /#X-Amz-Target=CodeBuild_20161006.DeleteResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcePolicyOutput> DeleteResourcePolicyAsync(DeleteResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteResourcePolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a set of GitHub, GitHub Enterprise, or Bitbucket source credentials.
		/// DeleteSourceCredentials /#X-Amz-Target=CodeBuild_20161006.DeleteSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSourceCredentialsOutput> DeleteSourceCredentialsAsync(DeleteSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteSourceCredentials";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// For an existing AWS CodeBuild build project that has its source code stored in a GitHub or Bitbucket repository, stops AWS CodeBuild from rebuilding the source code every time a code change is pushed to the repository.
		/// DeleteWebhook /#X-Amz-Target=CodeBuild_20161006.DeleteWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWebhookOutput> DeleteWebhookAsync(DeleteWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DeleteWebhook";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of details about test cases for a report.
		/// DescribeTestCases /#X-Amz-Target=CodeBuild_20161006.DescribeTestCases
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeTestCasesOutput> DescribeTestCasesAsync(string maxResults, string nextToken, DescribeTestCasesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.DescribeTestCases?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeTestCasesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a resource policy that is identified by its resource ARN.
		/// GetResourcePolicy /#X-Amz-Target=CodeBuild_20161006.GetResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetResourcePolicyOutput> GetResourcePolicyAsync(GetResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.GetResourcePolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports the source repository credentials for an AWS CodeBuild project that has its source code stored in a GitHub, GitHub Enterprise, or Bitbucket repository.
		/// ImportSourceCredentials /#X-Amz-Target=CodeBuild_20161006.ImportSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportSourceCredentialsOutput> ImportSourceCredentialsAsync(ImportSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ImportSourceCredentials";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ImportSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resets the cache for a project.
		/// InvalidateProjectCache /#X-Amz-Target=CodeBuild_20161006.InvalidateProjectCache
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InvalidateProjectCacheOutput> InvalidateProjectCacheAsync(InvalidateProjectCacheInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.InvalidateProjectCache";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<InvalidateProjectCacheOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build IDs, with each build ID representing a single build.
		/// ListBuilds /#X-Amz-Target=CodeBuild_20161006.ListBuilds
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildsOutput> ListBuildsAsync(string nextToken, ListBuildsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListBuilds?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBuildsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build IDs for the specified build project, with each build ID representing a single build.
		/// ListBuildsForProject /#X-Amz-Target=CodeBuild_20161006.ListBuildsForProject
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBuildsForProjectOutput> ListBuildsForProjectAsync(string nextToken, ListBuildsForProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListBuildsForProject?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListBuildsForProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about Docker images that are managed by AWS CodeBuild.
		/// ListCuratedEnvironmentImages /#X-Amz-Target=CodeBuild_20161006.ListCuratedEnvironmentImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListCuratedEnvironmentImagesOutput> ListCuratedEnvironmentImagesAsync(ListCuratedEnvironmentImagesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListCuratedEnvironmentImages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCuratedEnvironmentImagesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of build project names, with each build project name representing a single build project.
		/// ListProjects /#X-Amz-Target=CodeBuild_20161006.ListProjects
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsOutput> ListProjectsAsync(string nextToken, ListProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListProjects?nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list ARNs for the report groups in the current AWS account.
		/// ListReportGroups /#X-Amz-Target=CodeBuild_20161006.ListReportGroups
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportGroupsOutput> ListReportGroupsAsync(string maxResults, string nextToken, ListReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListReportGroups?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ARNs for the reports in the current AWS account.
		/// ListReports /#X-Amz-Target=CodeBuild_20161006.ListReports
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportsOutput> ListReportsAsync(string maxResults, string nextToken, ListReportsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListReports?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListReportsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ARNs for the reports that belong to a <code>ReportGroup</code>.
		/// ListReportsForReportGroup /#X-Amz-Target=CodeBuild_20161006.ListReportsForReportGroup
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReportsForReportGroupOutput> ListReportsForReportGroupAsync(string maxResults, string nextToken, ListReportsForReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListReportsForReportGroup?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListReportsForReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of projects that are shared with other AWS accounts or users.
		/// ListSharedProjects /#X-Amz-Target=CodeBuild_20161006.ListSharedProjects
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSharedProjectsOutput> ListSharedProjectsAsync(string maxResults, string nextToken, ListSharedProjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListSharedProjects?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSharedProjectsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of report groups that are shared with other AWS accounts or users.
		/// ListSharedReportGroups /#X-Amz-Target=CodeBuild_20161006.ListSharedReportGroups
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSharedReportGroupsOutput> ListSharedReportGroupsAsync(string maxResults, string nextToken, ListSharedReportGroupsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListSharedReportGroups?maxResults=" + (maxResults==null? "" : Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSharedReportGroupsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of <code>SourceCredentialsInfo</code> objects.
		/// ListSourceCredentials /#X-Amz-Target=CodeBuild_20161006.ListSourceCredentials
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListSourceCredentialsOutput> ListSourceCredentialsAsync(ListSourceCredentialsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.ListSourceCredentials";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListSourceCredentialsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stores a resource policy for the ARN of a <code>Project</code> or <code>ReportGroup</code> object.
		/// PutResourcePolicy /#X-Amz-Target=CodeBuild_20161006.PutResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyOutput> PutResourcePolicyAsync(PutResourcePolicyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.PutResourcePolicy";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<PutResourcePolicyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts running a build.
		/// StartBuild /#X-Amz-Target=CodeBuild_20161006.StartBuild
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartBuildOutput> StartBuildAsync(StartBuildInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.StartBuild";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartBuildOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attempts to stop running a build.
		/// StopBuild /#X-Amz-Target=CodeBuild_20161006.StopBuild
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopBuildOutput> StopBuildAsync(StopBuildInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.StopBuild";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopBuildOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Changes the settings of a build project.
		/// UpdateProject /#X-Amz-Target=CodeBuild_20161006.UpdateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectOutput> UpdateProjectAsync(UpdateProjectInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.UpdateProject";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateProjectOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a report group.
		/// UpdateReportGroup /#X-Amz-Target=CodeBuild_20161006.UpdateReportGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateReportGroupOutput> UpdateReportGroupAsync(UpdateReportGroupInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.UpdateReportGroup";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateReportGroupOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Updates the webhook associated with an AWS CodeBuild build project. </p> <note> <p> If you use Bitbucket for your repository, <code>rotateSecret</code> is ignored. </p> </note>
		/// UpdateWebhook /#X-Amz-Target=CodeBuild_20161006.UpdateWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateWebhookOutput> UpdateWebhookAsync(UpdateWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=CodeBuild_20161006.UpdateWebhook";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
