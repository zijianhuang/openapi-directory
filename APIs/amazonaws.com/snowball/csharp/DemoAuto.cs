//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelClusterRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CancelJobRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAddressResult
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateAddressRequest
	{
		
		/// <summary>
		/// The address that you want the Snowball or Snowballs associated with a specific job to be shipped to. Addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. Although no individual elements of the <code>Address</code> are required, if the address is invalid or unsupported, then an exception is thrown.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterResult
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateClusterRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateClusterRequestJobType JobType { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string KmsKeyARN { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateClusterRequestSnowballType SnowballType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateClusterRequestShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
		
		/// <summary>
		/// The tax documents required in your AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateClusterRequestJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateClusterRequestSnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateClusterRequestShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobResult
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestJobType JobType { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string KmsKeyARN { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestSnowballCapacityPreference SnowballCapacityPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CreateJobRequestSnowballType SnowballType { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
		
		/// <summary>
		/// The tax documents required in your AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestSnowballCapacityPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T42 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T98 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoPreference = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateJobRequestSnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressResult
	{
		
		/// <summary>
		/// The address that you want the Snowball or Snowballs associated with a specific job to be shipped to. Addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. Although no individual elements of the <code>Address</code> are required, if the address is invalid or unsupported, then an exception is thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressRequest
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeAddressesRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterResult
	{
		
		/// <summary>
		/// Contains metadata about a specific cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadata ClusterMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeClusterRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobResult
	{
		
		/// <summary>
		/// Contains information about a specific job including shipping information, job status, and other important metadata. This information is returned as a part of the response syntax of the <code>DescribeJob</code> action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobMetadata JobMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadata[] SubJobMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeJobRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobManifestResult
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ManifestURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobManifestRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobUnlockCodeResult
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string UnlockCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetJobUnlockCodeRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSnowballUsageResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnowballLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnowballsInUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSoftwareUpdatesResult
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string UpdatesURI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSoftwareUpdatesRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClusterJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntry[] JobListEntries { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClusterJobsRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClustersResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterListEntry[] ClusterListEntries { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListClustersRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCompatibleImagesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompatibleImage[] CompatibleImages { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListCompatibleImagesRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntry[] JobListEntries { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListJobsRequest
	{
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateClusterRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: CID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateClusterRequestShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateClusterRequestShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateJobRequest
	{
		
		/// <summary>
		/// Max length: 39
		/// Min length: 39
		/// Pattern: (M|J)ID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(39, MinimumLength=39)]
		public string JobId { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateJobRequestShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateJobRequestSnowballCapacityPreference SnowballCapacityPreference { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateJobRequestShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateJobRequestSnowballCapacityPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T42 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T98 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoPreference = 5,
	}
	
	/// <summary>
	/// The address that you want the Snowball or Snowballs associated with a specific job to be shipped to. Addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. Although no individual elements of the <code>Address</code> are required, if the address is invalid or unsupported, then an exception is thrown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Address
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Company { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Street1 { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Street2 { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Street3 { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string City { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string StateOrProvince { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PrefectureOrDistrict { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Landmark { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Country { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRestricted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingQuorum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InUse = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
	}
	
	/// <summary>
	/// Contains a cluster's state, a cluster's ID, and other important information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterListEntry
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ClusterId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterListEntryClusterState ClusterState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterListEntryClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingQuorum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InUse = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	/// <summary>
	/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public S3Resource[] S3Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaResource[] LambdaResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Ec2AmiResource[] Ec2AmiResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	/// <summary>
	/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Notification
	{
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:sns:.*:[0-9]{12}:.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string SnsTopicARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobState[] JobStatesToNotify { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NotifyAll { get; set; }
	}
	
	/// <summary>
	/// The tax documents required in your AWS Region.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TaxDocuments
	{
		
		/// <summary>
		/// The tax documents required in AWS Regions in India.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public INDTaxDocuments IND { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about a specific cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ClusterMetadata
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string KmsKeyARN { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadataClusterState ClusterState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadataJobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadataSnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterMetadataShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
		
		/// <summary>
		/// The tax documents required in your AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterMetadataClusterState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AwaitingQuorum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InUse = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterMetadataJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterMetadataSnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ClusterMetadataShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	/// <summary>
	/// A JSON-formatted object that describes a compatible Amazon Machine Image (AMI), including the ID and name for a Snowball Edge AMI. This AMI is compatible with the device's physical hardware requirements, and it should be able to be run in an SBE1 instance on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompatibleImage
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string AmiId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SnowballCapacity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T42 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T98 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoPreference = 5,
	}
	
	/// <summary>
	/// Defines the real-time status of a Snowball's data transfer while the device is at AWS. This data is only available while a job has a <code>JobState</code> value of <code>InProgress</code>, for both import and export jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DataTransfer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ObjectsTransferred { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalObjects { get; set; }
	}
	
	/// <summary>
	/// Contains information about a specific job including shipping information, job status, and other important metadata. This information is returned as a part of the response syntax of the <code>DescribeJob</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobMetadata
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadataJobState JobState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadataJobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadataSnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Contains an array of AWS resource objects. Each object represents an Amazon S3 bucket, an AWS Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobResource Resources { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string KmsKeyARN { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Pattern: arn:aws.*:iam::[0-9]{12}:role/.*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string RoleARN { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string AddressId { get; set; }
		
		/// <summary>
		/// A job's shipping information, including inbound and outbound tracking numbers and shipping speed options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShippingDetails ShippingDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobMetadataSnowballCapacityPreference SnowballCapacityPreference { get; set; }
		
		/// <summary>
		/// <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated with a specific job. The <code>Notification</code> object is returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type.</p> <p>When the notification settings are defined during job creation, you can choose to notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of strings, or you can specify that you want to have Amazon SNS notifications sent out for all job states with <code>NotifyAll</code> set to true.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Notification Notification { get; set; }
		
		/// <summary>
		/// Defines the real-time status of a Snowball's data transfer while the device is at AWS. This data is only available while a job has a <code>JobState</code> value of <code>InProgress</code>, for both import and export jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DataTransfer DataTransferProgress { get; set; }
		
		/// <summary>
		/// <p>Contains job logs. Whenever Snowball is used to import data into or export data out of Amazon S3, you'll have the option of downloading a PDF job report. Job logs are returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type. The job logs can be accessed for up to 60 minutes after this request has been made. To access any of the job logs after 60 minutes have passed, you'll have to make another call to the <code>DescribeJob</code> action.</p> <p>For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snowball for your job part is being delivered to you.</p> <p>The job report provides you insight into the state of your Amazon S3 data transfer. The report includes details about your job or job part for your records.</p> <p>For deeper visibility into the status of your transferred objects, you can look at the two associated logs: a success log and a failure log. The logs are saved in comma-separated value (CSV) format, and the name of each log includes the ID of the job or job part that the log describes.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobLogs JobLogInfo { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ClusterId { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 40
		/// Pattern: ADID[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength=40)]
		public string ForwardingAddressId { get; set; }
		
		/// <summary>
		/// The tax documents required in your AWS Region.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TaxDocuments TaxDocuments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobMetadataJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingAppliance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingShipment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToCustomer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithCustomer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToAWS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWSSortingFacility = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Listing = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobMetadataJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobMetadataSnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobMetadataSnowballCapacityPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T50 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T80 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T100 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T42 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		T98 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoPreference = 5,
	}
	
	/// <summary>
	/// A JSON-formatted object that contains the IDs for an Amazon Machine Image (AMI), including the Amazon EC2 AMI ID and the Snowball Edge AMI ID. Each AMI has these two IDs to simplify identifying the AMI in both the AWS Cloud and on the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ec2AmiResource
	{
		
		/// <summary>
		/// Max length: 21
		/// Min length: 12
		/// Pattern: (ami-[0-9a-f]{8})|(ami-[0-9a-f]{17})
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(21, MinimumLength=12)]
		public string AmiId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string SnowballAmiId { get; set; }
	}
	
	/// <summary>
	/// The container for the <a>EventTriggerDefinition$EventResourceARN</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EventTriggerDefinition
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string EventResourceARN { get; set; }
	}
	
	/// <summary>
	/// The tax documents required in AWS Regions in India.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class INDTaxDocuments
	{
		
		/// <summary>
		/// Pattern: \d{2}[A-Z]{5}\d{4}[A-Z]{1}[A-Z\d]{1}[Z]{1}[A-Z\d]{1}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GSTIN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingAppliance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingShipment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToCustomer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithCustomer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToAWS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWSSortingFacility = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Listing = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 12,
	}
	
	/// <summary>
	/// Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of an export job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobListEntry
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntryJobState JobState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMaster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntryJobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobListEntrySnowballType SnowballType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobListEntryJobState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingAppliance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreparingShipment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToCustomer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithCustomer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InTransitToAWS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWSSortingFacility = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WithAWS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Complete = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Listing = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobListEntryJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL_USE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JobListEntrySnowballType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_CG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDGE_S = 4,
	}
	
	/// <summary>
	/// <p>Contains job logs. Whenever Snowball is used to import data into or export data out of Amazon S3, you'll have the option of downloading a PDF job report. Job logs are returned as a part of the response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data type. The job logs can be accessed for up to 60 minutes after this request has been made. To access any of the job logs after 60 minutes have passed, you'll have to make another call to the <code>DescribeJob</code> action.</p> <p>For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snowball for your job part is being delivered to you.</p> <p>The job report provides you insight into the state of your Amazon S3 data transfer. The report includes details about your job or job part for your records.</p> <p>For deeper visibility into the status of your transferred objects, you can look at the two associated logs: a success log and a failure log. The logs are saved in comma-separated value (CSV) format, and the name of each log includes the ID of the job or job part that the log describes.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JobLogs
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string JobCompletionReportURI { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string JobSuccessLogURI { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string JobFailureLogURI { get; set; }
	}
	
	/// <summary>
	/// A job's shipping information, including inbound and outbound tracking numbers and shipping speed options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ShippingDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShippingDetailsShippingOption ShippingOption { get; set; }
		
		/// <summary>
		/// The <code>Status</code> and <code>TrackingNumber</code> information for an inbound or outbound shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Shipment InboundShipment { get; set; }
		
		/// <summary>
		/// The <code>Status</code> and <code>TrackingNumber</code> information for an inbound or outbound shipment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Shipment OutboundShipment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ShippingDetailsShippingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND_DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_DAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
	}
	
	/// <summary>
	/// Contains a key range. For export jobs, a <code>S3Resource</code> object can have an optional <code>KeyRange</code> value. The length of the range is defined at job creation, and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are UTF-8 binary sorted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyRange
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string BeginMarker { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EndMarker { get; set; }
	}
	
	/// <summary>
	/// Identifies 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaResource
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string LambdaArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EventTriggerDefinition[] EventTriggers { get; set; }
	}
	
	/// <summary>
	/// Each <code>S3Resource</code> object represents an Amazon S3 bucket that your transferred data will be exported from or imported into. For export jobs, this object can have an optional <code>KeyRange</code> value. The length of the range is defined at job creation, and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are UTF-8 binary sorted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Resource
	{
		
		/// <summary>
		/// Max length: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public string BucketArn { get; set; }
		
		/// <summary>
		/// Contains a key range. For export jobs, a <code>S3Resource</code> object can have an optional <code>KeyRange</code> value. The length of the range is defined at job creation, and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are UTF-8 binary sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyRange KeyRange { get; set; }
	}
	
	/// <summary>
	/// The <code>Status</code> and <code>TrackingNumber</code> information for an inbound or outbound shipment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Shipment
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Status { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string TrackingNumber { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels a cluster job. You can only cancel a cluster job while it's in the <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster job to cancel it.
		/// CancelCluster /#X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelClusterResult> CancelClusterAsync(CancelClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels the specified job. You can only cancel a job before its <code>JobState</code> value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the response element data returned.
		/// CancelJob /#X-Amz-Target=AWSIESnowballJobManagementService.CancelJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CancelJobResult> CancelJobAsync(CancelJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.CancelJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CancelJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an address for a Snowball to be shipped to. In most regions, addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. If the address is invalid or unsupported, then an exception is thrown.
		/// CreateAddress /#X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAddressResult> CreateAddressAsync(CreateAddressRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateAddressResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The cluster does not ship until these five node jobs have been created.
		/// CreateCluster /#X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateClusterResult> CreateClusterAsync(CreateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a job to import or export data between Amazon S3 and your on-premises data center. Your AWS account must have the right trust policies and permissions in place to create a job for Snowball. If you're creating a job for a node in a cluster, you only need to provide the <code>clusterId</code> value; the other job attributes are inherited from the cluster.
		/// CreateJob /#X-Amz-Target=AWSIESnowballJobManagementService.CreateJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateJobResult> CreateJobAsync(CreateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.CreateJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Takes an <code>AddressId</code> and returns specific details about that address in the form of an <code>Address</code> object.
		/// DescribeAddress /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeAddressResult> DescribeAddressAsync(DescribeAddressRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAddressResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of the US regions will return addresses from the list of all addresses associated with this account in all US regions.
		/// DescribeAddresses /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeAddressesResult> DescribeAddressesAsync(string MaxResults, string NextToken, DescribeAddressesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeAddressesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific cluster including shipping information, cluster status, and other important metadata.
		/// DescribeCluster /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeClusterResult> DescribeClusterAsync(DescribeClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific job including shipping information, job status, and other important metadata.
		/// DescribeJob /#X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeJobResult> DescribeJobAsync(DescribeJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes after this request has been made. To access the manifest file after 60 minutes have passed, you'll have to make another call to the <code>GetJobManifest</code> action.</p> <p>The manifest is an encrypted file that you can download after your job enters the <code>WithCustomer</code> status. The manifest is decrypted by using the <code>UnlockCode</code> code value, when you pass both values to the Snowball through the Snowball client when the client is started for the first time.</p> <p>As a best practice, we recommend that you don't save a copy of an <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snowball associated with that job.</p> <p>The credentials of a given job, including its manifest file and unlock code, expire 90 days after the job is created.</p>
		/// GetJobManifest /#X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobManifestResult> GetJobManifestAsync(GetJobManifestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobManifestResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular <code>UnlockCode</code> value can be accessed for up to 90 days after the associated job has been created.</p> <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed along with the manifest to the Snowball through the Snowball client when the client is started for the first time.</p> <p>As a best practice, we recommend that you don't save a copy of the <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snowball associated with that job.</p>
		/// GetJobUnlockCode /#X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobUnlockCodeResult> GetJobUnlockCodeAsync(GetJobUnlockCodeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetJobUnlockCodeResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the Snowball service limit for your account, and also the number of Snowballs your account has in use.</p> <p>The default service limit for the number of Snowballs that you can have at one time is 1. If you want to increase your service limit, contact AWS Support.</p>
		/// GetSnowballUsage /#X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSnowballUsageResult> GetSnowballUsageAsync(GetSnowballUsageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSnowballUsageResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an Amazon S3 presigned URL for an update file associated with a specified <code>JobId</code>.
		/// GetSoftwareUpdates /#X-Amz-Target=AWSIESnowballJobManagementService.GetSoftwareUpdates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSoftwareUpdatesResult> GetSoftwareUpdatesAsync(GetSoftwareUpdatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.GetSoftwareUpdates";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSoftwareUpdatesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's state, a job's ID, and other information.
		/// ListClusterJobs /#X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListClusterJobsResult> ListClusterJobsAsync(ListClusterJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListClusterJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other important status information.
		/// ListClusters /#X-Amz-Target=AWSIESnowballJobManagementService.ListClusters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListClustersResult> ListClustersAsync(ListClustersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.ListClusters";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListClustersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This action returns a list of the different Amazon EC2 Amazon Machine Images (AMIs) that are owned by your AWS account that would be supported for use on a Snowball Edge device. Currently, supported AMIs are based on the CentOS 7 (x86_64) - with Updates HVM, Ubuntu Server 14.04 LTS (HVM), and Ubuntu 16.04 LTS - Xenial (HVM) images, available on the AWS Marketplace.
		/// ListCompatibleImages /#X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListCompatibleImagesResult> ListCompatibleImagesAsync(ListCompatibleImagesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListCompatibleImagesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. Calling this API action in one of the US regions will return jobs from the list of all jobs associated with this account in all US regions.
		/// ListJobs /#X-Amz-Target=AWSIESnowballJobManagementService.ListJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string MaxResults, string NextToken, ListJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.ListJobs?MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code> state, you can update some of the information associated with a cluster. Once the cluster changes to a different job state, usually 60 minutes after the cluster being created, this action is no longer available.
		/// UpdateCluster /#X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateClusterResult> UpdateClusterAsync(UpdateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateClusterResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// While a job's <code>JobState</code> value is <code>New</code>, you can update some of the information associated with a job. Once the job changes to a different job state, usually within 60 minutes of the job being created, this action is no longer available.
		/// UpdateJob /#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateJobResult> UpdateJobAsync(UpdateJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
