//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompleteMultipartUploadOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyObjectOutput
	{
		
		/// <summary>
		/// Container for all response elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CopyObjectResult CopyObjectResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BucketLocationConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sa-east-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cn-north-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultipartUploadOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteObjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeletedObject[] Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Error[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketAccelerateConfigurationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetBucketAccelerateConfigurationOutputStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetBucketAccelerateConfigurationOutputStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketAclOutput
	{
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Grant[] Grants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketAnalyticsConfigurationOutput
	{
		
		/// <summary>
		///  Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfiguration AnalyticsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketCorsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CORSRule[] CORSRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketEncryptionOutput
	{
		
		/// <summary>
		/// Specifies the default server-side-encryption configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketInventoryConfigurationOutput
	{
		
		/// <summary>
		/// Specifies the inventory configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon Simple Storage Service API Reference</i>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InventoryConfiguration InventoryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketLifecycleOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketLifecycleConfigurationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LifecycleRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketLocationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetBucketLocationOutputLocationConstraint LocationConstraint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetBucketLocationOutputLocationConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sa-east-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cn-north-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketLoggingOutput
	{
		
		/// <summary>
		/// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingEnabled LoggingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketMetricsConfigurationOutput
	{
		
		/// <summary>
		/// Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html"> PUT Bucket metrics</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricsConfiguration MetricsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationConfigurationDeprecated
	{
		
		/// <summary>
		/// A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events. This data type is deprecated. Use <a>TopicConfiguration</a> instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TopicConfigurationDeprecated TopicConfiguration { get; set; }
		
		/// <summary>
		/// This data type is deprecated. Use <a>QueueConfiguration</a> for the same purposes. This data type specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueueConfigurationDeprecated QueueConfiguration { get; set; }
		
		/// <summary>
		/// Container for specifying the AWS Lambda notification configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudFunctionConfiguration CloudFunctionConfiguration { get; set; }
	}
	
	/// <summary>
	/// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicConfiguration[] TopicConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QueueConfiguration[] QueueConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LambdaFunctionConfiguration[] LambdaFunctionConfigurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketPolicyOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketPolicyStatusOutput
	{
		
		/// <summary>
		/// The container element for a bucket's policy status.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PolicyStatus PolicyStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketReplicationOutput
	{
		
		/// <summary>
		/// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketRequestPaymentOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetBucketRequestPaymentOutputPayer Payer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetBucketRequestPaymentOutputPayer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requester = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BucketOwner = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketTaggingOutput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketVersioningOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetBucketVersioningOutputStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetBucketVersioningOutputMFADelete MFADelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetBucketVersioningOutputStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GetBucketVersioningOutputMFADelete
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetBucketWebsiteOutput
	{
		
		/// <summary>
		/// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedirectAllRequestsTo RedirectAllRequestsTo { get; set; }
		
		/// <summary>
		/// Container for the <code>Suffix</code> element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IndexDocument IndexDocument { get; set; }
		
		/// <summary>
		/// The error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorDocument ErrorDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoutingRule[] RoutingRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectAclOutput
	{
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Grant[] Grants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectLegalHoldOutput
	{
		
		/// <summary>
		/// A Legal Hold configuration for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockLegalHold LegalHold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectLockConfigurationOutput
	{
		
		/// <summary>
		/// The container element for Object Lock configuration parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockConfiguration ObjectLockConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectRetentionOutput
	{
		
		/// <summary>
		/// A Retention configuration for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockRetention Retention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectTaggingOutput
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetObjectTorrentOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetPublicAccessBlockOutput
	{
		
		/// <summary>
		/// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PublicAccessBlockConfiguration PublicAccessBlockConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HeadObjectOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBucketAnalyticsConfigurationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfiguration[] AnalyticsConfigurationList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBucketInventoryConfigurationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryConfiguration[] InventoryConfigurationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextContinuationToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBucketMetricsConfigurationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetricsConfiguration[] MetricsConfigurationList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListBucketsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Bucket[] Buckets { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMultipartUploadsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadIdMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextKeyMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextUploadIdMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxUploads { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultipartUpload[] Uploads { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommonPrefix[] CommonPrefixes { get; set; }
		
		/// <summary>
		/// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListMultipartUploadsOutputEncodingType EncodingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListMultipartUploadsOutputEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListObjectVersionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionIdMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextKeyMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextVersionIdMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectVersion[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteMarkerEntry[] DeleteMarkers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommonPrefix[] CommonPrefixes { get; set; }
		
		/// <summary>
		/// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListObjectVersionsOutputEncodingType EncodingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListObjectVersionsOutputEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListObjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Object[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommonPrefix[] CommonPrefixes { get; set; }
		
		/// <summary>
		/// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListObjectsOutputEncodingType EncodingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListObjectsOutputEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListObjectsV2Output
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Object[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CommonPrefix[] CommonPrefixes { get; set; }
		
		/// <summary>
		/// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListObjectsV2OutputEncodingType EncodingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> KeyCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StartAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListObjectsV2OutputEncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListPartsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartNumberMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NextPartNumberMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxParts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Part[] Parts { get; set; }
		
		/// <summary>
		/// Container element that identifies who initiated the multipart upload. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Initiator Initiator { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListPartsOutputStorageClass StorageClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ListPartsOutputStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BucketAccelerateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	/// <summary>
	/// Container for the owner's display name and ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Owner
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
	}
	
	/// <summary>
	/// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A container of a key value name pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		/// <summary>
		/// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsAndOperator And { get; set; }
	}
	
	/// <summary>
	/// Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StorageClassAnalysis
	{
		
		/// <summary>
		/// Container for data related to the storage class analysis for an Amazon S3 bucket for export.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StorageClassAnalysisDataExport DataExport { get; set; }
	}
	
	/// <summary>
	/// Specifies the inventory configuration for an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryDestination
	{
		
		/// <summary>
		/// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryS3BucketDestination S3BucketDestination { get; set; }
	}
	
	/// <summary>
	/// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryFilter
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryIncludedObjectVersions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Current = 1,
	}
	
	/// <summary>
	/// Specifies the schedule for generating inventory results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventorySchedule
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryScheduleFrequency Frequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryScheduleFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
	}
	
	/// <summary>
	/// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the <i>Amazon Simple Storage Service API Reference</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LoggingEnabled
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGrant[] TargetGrants { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetPrefix { get; set; }
	}
	
	/// <summary>
	/// Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricsFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A container of a key value name pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		/// <summary>
		/// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricsAndOperator And { get; set; }
	}
	
	/// <summary>
	/// A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events. This data type is deprecated. Use <a>TopicConfiguration</a> instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicConfigurationDeprecated
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The bucket event for which to send notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TopicConfigurationDeprecatedEvent Event { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TopicConfigurationDeprecatedEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ReducedRedundancyLostObject = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:* = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Put = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Post = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:CompleteMultipartUpload = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:* = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:Delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:DeleteMarkerCreated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:* = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Post = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Completed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:* = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationFailedReplication = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationNotTracked = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationMissedThreshold = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationReplicatedAfterThreshold = 16,
	}
	
	/// <summary>
	/// This data type is deprecated. Use <a>QueueConfiguration</a> for the same purposes. This data type specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueConfigurationDeprecated
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The bucket event for which to send notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueueConfigurationDeprecatedEvent Event { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Queue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QueueConfigurationDeprecatedEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ReducedRedundancyLostObject = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:* = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Put = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Post = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:CompleteMultipartUpload = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:* = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:Delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:DeleteMarkerCreated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:* = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Post = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Completed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:* = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationFailedReplication = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationNotTracked = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationMissedThreshold = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationReplicatedAfterThreshold = 16,
	}
	
	/// <summary>
	/// Container for specifying the AWS Lambda notification configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CloudFunctionConfiguration
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The bucket event for which to send notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CloudFunctionConfigurationEvent Event { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CloudFunction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string InvocationRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CloudFunctionConfigurationEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ReducedRedundancyLostObject = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:* = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Put = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Post = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:CompleteMultipartUpload = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:* = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:Delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:DeleteMarkerCreated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:* = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Post = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Completed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:* = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationFailedReplication = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationNotTracked = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationMissedThreshold = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationReplicatedAfterThreshold = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Payer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requester = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BucketOwner = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MFADelete
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BucketVersioningStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	/// <summary>
	/// The error information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ErrorDocument
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Container for the <code>Suffix</code> element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class IndexDocument
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RedirectAllRequestsTo
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string HostName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedirectAllRequestsToProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedirectAllRequestsToProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockLegalHoldStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockEnabled
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
	}
	
	/// <summary>
	/// The container element for an Object Lock rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectLockRule
	{
		
		/// <summary>
		/// The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DefaultRetention DefaultRetention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockRetentionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOVERNANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 1,
	}
	
	/// <summary>
	/// Container for S3 Glacier job parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GlacierJobParameters
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlacierJobParametersTier Tier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlacierJobParametersTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bulk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expedited = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RestoreRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Tier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bulk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expedited = 2,
	}
	
	/// <summary>
	/// Describes the parameters for Select job types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectParameters
	{
		
		/// <summary>
		/// Describes the serialization format of the object.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputSerialization InputSerialization { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SelectParametersExpressionType ExpressionType { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		/// <summary>
		/// Describes how results of the Select job are serialized.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputSerialization OutputSerialization { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelectParametersExpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 0,
	}
	
	/// <summary>
	/// Describes the location where the restore job's output is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputLocation
	{
		
		/// <summary>
		/// Describes an Amazon S3 location that will receive the results of the restore request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3Location S3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectObjectContentOutput
	{
		
		/// <summary>
		/// The container for selecting objects from a content event stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SelectObjectContentEventStream Payload { get; set; }
	}
	
	/// <summary>
	/// Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CSVInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CSVInputFileHeaderInfo FileHeaderInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuoteEscapeCharacter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordDelimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FieldDelimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuoteCharacter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowQuotedRecordDelimiter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CSVInputFileHeaderInfo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZIP2 = 2,
	}
	
	/// <summary>
	/// Specifies JSON as object's input serialization format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JSONInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public JSONInputType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JSONInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINES = 1,
	}
	
	/// <summary>
	/// Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CSVOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CSVOutputQuoteFields QuoteFields { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuoteEscapeCharacter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordDelimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FieldDelimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QuoteCharacter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CSVOutputQuoteFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASNEEDED = 1,
	}
	
	/// <summary>
	/// Specifies JSON as request's output serialization format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class JSONOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordDelimiter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UploadPartCopyOutput
	{
		
		/// <summary>
		/// Container for all response elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CopyPartResult CopyPartResult { get; set; }
	}
	
	/// <summary>
	/// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config"> Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AbortIncompleteMultipartUpload
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DaysAfterInitiation { get; set; }
	}
	
	/// <summary>
	/// If present, indicates that the requester was successfully charged for the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestCharged
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requester = 0,
	}
	
	/// <summary>
	/// Confirms that the requester knows that they will be charged for the request. Bucket owners need not specify this parameter in their requests. For information about downloading objects from requester pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in Requestor Pays Buckets</a> in the <i>Amazon S3 Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestPayer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requester = 0,
	}
	
	/// <summary>
	/// Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Amazon S3 Transfer Acceleration</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccelerateConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccelerateConfigurationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccelerateConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	/// <summary>
	/// Contains the elements that set the ACL permissions for an object per grantee.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessControlPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Grant[] Grants { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OwnerOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Destination = 0,
	}
	
	/// <summary>
	/// A container for information about access control for replicas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AccessControlTranslation
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessControlTranslationOwner Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AccessControlTranslationOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Destination = 0,
	}
	
	/// <summary>
	/// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates in any combination, and an object must match all of the predicates for the filter to apply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsAndOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	///  Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// The filter used to describe a set of objects for analyses. A filter must have exactly one prefix, one tag, or one conjunction (AnalyticsAndOperator). If no filter is provided, all objects will be considered in any analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsFilter Filter { get; set; }
		
		/// <summary>
		/// Specifies data related to access patterns to be collected and made available to analyze the tradeoffs between different storage classes for an Amazon S3 bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StorageClassAnalysis StorageClassAnalysis { get; set; }
	}
	
	/// <summary>
	/// Contains information about where to publish the analytics results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsS3BucketDestination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsS3BucketDestinationFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BucketAccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AnalyticsS3BucketDestinationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
	}
	
	/// <summary>
	/// Where to publish the analytics results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AnalyticsExportDestination
	{
		
		/// <summary>
		/// Contains information about where to publish the analytics results.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsS3BucketDestination S3BucketDestination { get; set; }
	}
	
	/// <summary>
	/// A container of a key value name pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AnalyticsS3ExportFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
	}
	
	/// <summary>
	///  In terms of implementation, a Bucket is a resource. An Amazon S3 bucket name is globally unique, and the namespace is shared by all AWS accounts. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Bucket
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BucketCannedACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read-write = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticated-read = 3,
	}
	
	/// <summary>
	/// Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BucketLifecycleConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LifecycleRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Container for logging status information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BucketLoggingStatus
	{
		
		/// <summary>
		/// Describes where logs are stored and the prefix that Amazon S3 assigns to all log object keys for a bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlogging.html">PUT Bucket logging</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LoggingEnabled LoggingEnabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BucketLogsPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE = 2,
	}
	
	/// <summary>
	/// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CORSConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CORSRule[] CORSRules { get; set; }
	}
	
	/// <summary>
	/// Specifies a cross-origin access rule for an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CORSRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AllowedHeader[] AllowedHeaders { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AllowedMethod[] AllowedMethods { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AllowedOrigin[] AllowedOrigins { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExposeHeader[] ExposeHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxAgeSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FileHeaderInfo
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum QuoteFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALWAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASNEEDED = 1,
	}
	
	/// <summary>
	/// The bucket event for which to send notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Event
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ReducedRedundancyLostObject = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:* = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Put = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Post = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:Copy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectCreated:CompleteMultipartUpload = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:* = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:Delete = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRemoved:DeleteMarkerCreated = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:* = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Post = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:ObjectRestore:Completed = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:* = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationFailedReplication = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationNotTracked = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationMissedThreshold = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s3:Replication:OperationReplicatedAfterThreshold = 16,
	}
	
	/// <summary>
	/// Container for all (if there are any) keys between Prefix and the next occurrence of the string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CommonPrefix
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerSideEncryption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws:kms = 1,
	}
	
	/// <summary>
	/// The container for the completed multipart upload details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompletedMultipartUpload
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CompletedPart[] Parts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompleteMultipartUploadRequest
	{
		
		/// <summary>
		/// The container for the completed multipart upload details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CompletedMultipartUpload MultipartUpload { get; set; }
	}
	
	/// <summary>
	/// Details of the parts that were uploaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CompletedPart
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartNumber { get; set; }
	}
	
	/// <summary>
	/// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Condition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpErrorCodeReturnedEquals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KeyPrefixEquals { get; set; }
	}
	
	/// <summary>
	/// Container for all response elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyObjectResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectCannedACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read-write = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticated-read = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws-exec-read = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-read = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-full-control = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetadataDirective
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TaggingDirective
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOVERNANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyObjectRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Container for all response elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CopyPartResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
	}
	
	/// <summary>
	/// The configuration information for the bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBucketConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CreateBucketConfigurationLocationConstraint LocationConstraint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateBucketConfigurationLocationConstraint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-west-1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us-west-2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-south-1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-southeast-2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ap-northeast-1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sa-east-1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cn-north-1 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eu-central-1 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateBucketRequest
	{
		
		/// <summary>
		/// The configuration information for the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateBucketConfiguration CreateBucketConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultipartUploadRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	/// <summary>
	/// The container element for specifying the default Object Lock retention settings for new objects placed in the specified bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DefaultRetention
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DefaultRetentionMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Years { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DefaultRetentionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOVERNANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 1,
	}
	
	/// <summary>
	/// Container for the objects to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Delete
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ObjectIdentifier[] Objects { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Quiet { get; set; }
	}
	
	/// <summary>
	/// Information about the delete marker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMarkerEntry
	{
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLatest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteMarkerReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// <p>Specifies whether Amazon S3 replicates the delete markers. If you specify a <code>Filter</code>, you must specify this element. However, in the latest version of replication configuration (when <code>Filter</code> is specified), Amazon S3 doesn't replicate delete markers. Therefore, the <code>DeleteMarkerReplication</code> element can contain only &lt;Status&gt;Disabled&lt;/Status&gt;. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration</a>. </p> <note> <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, Amazon S3 handled replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility</a>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMarkerReplication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DeleteMarkerReplicationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteMarkerReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteObjectsRequest
	{
		
		/// <summary>
		/// Container for the objects to delete.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Delete Delete { get; set; }
	}
	
	/// <summary>
	/// Information about the deleted object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeletedObject
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeleteMarker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeleteMarkerVersionId { get; set; }
	}
	
	/// <summary>
	/// Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplicaKmsKeyID { get; set; }
	}
	
	/// <summary>
	///  A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a <code>Metrics</code> block. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationTime
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationTimeStatus Status { get; set; }
		
		/// <summary>
		///  A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics <code>EventThreshold</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationTimeValue Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationTimeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	///  A container specifying replication metrics-related settings enabling metrics and Amazon S3 events for S3 Replication Time Control (S3 RTC). Must be specified together with a <code>ReplicationTime</code> block. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Metrics
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricsStatus Status { get; set; }
		
		/// <summary>
		///  A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics <code>EventThreshold</code>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationTimeValue EventThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Destination
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinationStorageClass StorageClass { get; set; }
		
		/// <summary>
		/// A container for information about access control for replicas.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessControlTranslation AccessControlTranslation { get; set; }
		
		/// <summary>
		/// Specifies encryption-related information for an Amazon S3 bucket that is a destination for replicated objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncryptionConfiguration EncryptionConfiguration { get; set; }
		
		/// <summary>
		///  A container specifying S3 Replication Time Control (S3 RTC) related information, including whether S3 RTC is enabled and the time when all objects and operations on objects must be replicated. Must be specified together with a <code>Metrics</code> block. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationTime ReplicationTime { get; set; }
		
		/// <summary>
		///  A container specifying replication metrics-related settings enabling metrics and Amazon S3 events for S3 Replication Time Control (S3 RTC). Must be specified together with a <code>ReplicationTime</code> block. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Metrics Metrics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DestinationStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	/// <summary>
	/// Requests Amazon S3 to encode the object keys in the response and specifies the encoding method to use. An object key may contain any Unicode character; however, XML 1.0 parser cannot parse some characters, such as characters with an ASCII value from 0 to 10. For characters that are not supported in XML 1.0, you can add this parameter to request that Amazon S3 encode the keys in the response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 0,
	}
	
	/// <summary>
	/// Contains the type of server-side encryption used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Encryption
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncryptionEncryptionType EncryptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EncryptionEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws:kms = 1,
	}
	
	/// <summary>
	/// Container for all error elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Error
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExistingObjectReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Optional configuration to replicate existing source bucket objects. For more information, see <a href=" https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating Existing Objects</a> in the <i>Amazon S3 Developer Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ExistingObjectReplication
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ExistingObjectReplicationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExistingObjectReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExpirationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ExpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterRuleName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suffix = 1,
	}
	
	/// <summary>
	/// Specifies the Amazon S3 object key name to filter on and whether to filter on the suffix or prefix of the key name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FilterRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FilterRuleName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FilterRuleName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prefix = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		suffix = 1,
	}
	
	/// <summary>
	/// Specifies the default server-side-encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerSideEncryptionConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Specifies the inventory configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon Simple Storage Service API Reference</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryConfiguration
	{
		
		/// <summary>
		/// Specifies the inventory configuration for an Amazon S3 bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryDestination Destination { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool IsEnabled { get; set; }
		
		/// <summary>
		/// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InventoryFilter Filter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryConfigurationIncludedObjectVersions IncludedObjectVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InventoryOptionalField[] OptionalFields { get; set; }
		
		/// <summary>
		/// Specifies the schedule for generating inventory results.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventorySchedule Schedule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryConfigurationIncludedObjectVersions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Current = 1,
	}
	
	/// <summary>
	/// Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html"> PUT Bucket metrics</a> in the <i>Amazon Simple Storage Service API Reference</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricsConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Specifies a metrics configuration filter. The metrics configuration only includes objects that meet the filter's criteria. A filter must be a prefix, a tag, or a conjunction (MetricsAndOperator).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MetricsFilter Filter { get; set; }
	}
	
	/// <summary>
	/// The container element for a bucket's policy status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PolicyStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
	}
	
	/// <summary>
	/// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Role { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRule[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MFADeleteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// A Legal Hold configuration for an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectLockLegalHold
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockLegalHoldStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockLegalHoldStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 1,
	}
	
	/// <summary>
	/// The container element for Object Lock configuration parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectLockConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockConfigurationObjectLockEnabled ObjectLockEnabled { get; set; }
		
		/// <summary>
		/// The container element for an Object Lock rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockRule Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockConfigurationObjectLockEnabled
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLICA = 3,
	}
	
	/// <summary>
	/// A Retention configuration for an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectLockRetention
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockRetentionMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RetainUntilDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectLockRetentionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOVERNANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 1,
	}
	
	/// <summary>
	/// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PublicAccessBlockConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnorePublicAcls { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BlockPublicPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RestrictPublicBuckets { get; set; }
	}
	
	/// <summary>
	/// Container for the person being granted permissions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Grantee
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GranteeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string URI { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GranteeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanonicalUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmazonCustomerByEmail = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Permission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_ACP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ACP = 4,
	}
	
	/// <summary>
	/// Container for grant information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Grant
	{
		
		/// <summary>
		/// Container for the person being granted permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Grantee Grantee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GrantPermission Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GrantPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE_ACP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ACP = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CanonicalUser = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AmazonCustomerByEmail = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 2,
	}
	
	/// <summary>
	/// Container element that identifies who initiated the multipart upload. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Initiator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Describes the serialization format of the object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSerialization
	{
		
		/// <summary>
		/// Describes how an uncompressed comma-separated values (CSV)-formatted input object is formatted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CSVInput CSV { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputSerializationCompressionType CompressionType { get; set; }
		
		/// <summary>
		/// Specifies JSON as object's input serialization format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JSONInput JSON { get; set; }
		
		/// <summary>
		/// Container for Parquet.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ParquetInput Parquet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSerializationCompressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BZIP2 = 2,
	}
	
	/// <summary>
	/// Contains the bucket name, file format, bucket owner (optional), and prefix (optional) where inventory results are published.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryS3BucketDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bucket { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryS3BucketDestinationFormat Format { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Contains the type of server-side encryption used to encrypt the inventory results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InventoryEncryption Encryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryS3BucketDestinationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parquet = 2,
	}
	
	/// <summary>
	/// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SSEKMS
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KeyId { get; set; }
	}
	
	/// <summary>
	/// Contains the type of server-side encryption used to encrypt the inventory results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InventoryEncryption
	{
		
		/// <summary>
		/// Specifies the use of SSE-S3 to encrypt delivered inventory reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SSES3 SSES3 { get; set; }
		
		/// <summary>
		/// Specifies the use of SSE-KMS to encrypt delivered inventory reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SSEKMS SSEKMS { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Parquet = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InventoryOptionalField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Size = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LastModifiedDate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StorageClass = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETag = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsMultipartUploaded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReplicationStatus = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EncryptionStatus = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ObjectLockRetainUntilDate = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ObjectLockMode = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ObjectLockLegalHoldStatus = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IntelligentTieringAccessTier = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum JSONType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINES = 1,
	}
	
	/// <summary>
	/// Specifies object key name filtering rules. For information about key name filtering, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NotificationConfigurationFilter
	{
		
		/// <summary>
		/// A container for object key name prefix and suffix filtering rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public S3KeyFilter Key { get; set; }
	}
	
	/// <summary>
	/// A container for specifying the configuration for AWS Lambda notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LambdaFunctionConfiguration
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LambdaFunctionArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// Specifies object key name filtering rules. For information about key name filtering, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfigurationFilter Filter { get; set; }
	}
	
	/// <summary>
	/// Container for lifecycle rules. You can add as many as 1000 rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Container for the expiration for the lifecycle of the object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleExpiration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExpiredObjectDeleteMarker { get; set; }
	}
	
	/// <summary>
	/// The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or <code>And</code> specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleRuleFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A container of a key value name pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		/// <summary>
		/// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecycleRuleAndOperator And { get; set; }
	}
	
	/// <summary>
	/// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoncurrentVersionExpiration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NoncurrentDays { get; set; }
	}
	
	/// <summary>
	/// A lifecycle rule for individual objects in an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleRule
	{
		
		/// <summary>
		/// Container for the expiration for the lifecycle of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecycleExpiration Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// The <code>Filter</code> is used to identify objects that a Lifecycle Rule applies to. A <code>Filter</code> must have exactly one of <code>Prefix</code>, <code>Tag</code>, or <code>And</code> specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecycleRuleFilter Filter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LifecycleRuleStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Transition[] Transitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NoncurrentVersionTransition[] NoncurrentVersionTransitions { get; set; }
		
		/// <summary>
		/// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoncurrentVersionExpiration NoncurrentVersionExpiration { get; set; }
		
		/// <summary>
		/// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config"> Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AbortIncompleteMultipartUpload AbortIncompleteMultipartUpload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LifecycleRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// This is used in a Lifecycle Rule Filter to apply a logical AND to two or more predicates. The Lifecycle Rule will apply to any object matching all of the predicates configured inside the And operator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LifecycleRuleAndOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A metadata key-value pair to store with an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetadataEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MetricsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	///  A container specifying the time value for S3 Replication Time Control (S3 RTC) and replication metrics <code>EventThreshold</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationTimeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Minutes { get; set; }
	}
	
	/// <summary>
	/// A conjunction (logical AND) of predicates, which is used in evaluating a metrics filter. The operator must have at least two predicates, and an object must match all of the predicates in order for the filter to apply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MetricsAndOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Container for the <code>MultipartUpload</code> for the Amazon S3 object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultipartUpload
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UploadId { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Initiated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MultipartUploadStorageClass StorageClass { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
		
		/// <summary>
		/// Container element that identifies who initiated the multipart upload. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Initiator Initiator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MultipartUploadStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitionStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 4,
	}
	
	/// <summary>
	/// Container for the transition rule that describes when noncurrent objects transition to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's lifetime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NoncurrentVersionTransition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NoncurrentDays { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NoncurrentVersionTransitionStorageClass StorageClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NoncurrentVersionTransitionStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 4,
	}
	
	/// <summary>
	/// A container for object key name prefix and suffix filtering rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3KeyFilter
	{
		
		/// <summary>
		/// A list of containers for the key-value pair that defines the criteria for the filter rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FilterRule[] FilterRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	/// <summary>
	/// An object consists of data and its descriptive metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Object
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectStorageClass StorageClass { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	/// <summary>
	/// Object Identifier is unique value to identify objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectIdentifier
	{
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectVersionStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
	}
	
	/// <summary>
	/// The version of an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ObjectVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ObjectVersionStorageClass StorageClass { get; set; }
		
		/// <summary>
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLatest { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// Container for the owner's display name and ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Owner Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ObjectVersionStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
	}
	
	/// <summary>
	/// Describes an Amazon S3 location that will receive the results of the restore request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class S3Location
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BucketName { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Contains the type of server-side encryption used.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Encryption Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3LocationCannedACL CannedACL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Grant[] AccessControlList { get; set; }
		
		/// <summary>
		/// Container for <code>TagSet</code> elements.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tagging Tagging { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MetadataEntry[] UserMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public S3LocationStorageClass StorageClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3LocationCannedACL
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		@private = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		public-read-write = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticated-read = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws-exec-read = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-read = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucket-owner-full-control = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum S3LocationStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDUCED_REDUNDANCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 6,
	}
	
	/// <summary>
	/// Describes how results of the Select job are serialized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputSerialization
	{
		
		/// <summary>
		/// Describes how uncompressed comma-separated values (CSV)-formatted results are formatted.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CSVOutput CSV { get; set; }
		
		/// <summary>
		/// Specifies JSON as request's output serialization format.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JSONOutput JSON { get; set; }
	}
	
	/// <summary>
	/// Container for elements related to a part.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Part
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PartNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ETag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// This data type contains information about progress of an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Progress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesScanned { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesProcessed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesReturned { get; set; }
	}
	
	/// <summary>
	/// This data type contains information about the progress event of an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ProgressEvent
	{
		
		/// <summary>
		/// This data type contains information about progress of an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Progress Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketAccelerateConfigurationRequest
	{
		
		/// <summary>
		/// Configures the transfer acceleration state for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Amazon S3 Transfer Acceleration</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccelerateConfiguration AccelerateConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketAclRequest
	{
		
		/// <summary>
		/// Contains the elements that set the ACL permissions for an object per grantee.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessControlPolicy AccessControlPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketAnalyticsConfigurationRequest
	{
		
		/// <summary>
		///  Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsConfiguration AnalyticsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketCorsRequest
	{
		
		/// <summary>
		/// Describes the cross-origin access configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CORSConfiguration CORSConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketEncryptionRequest
	{
		
		/// <summary>
		/// Specifies the default server-side-encryption configuration.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketInventoryConfigurationRequest
	{
		
		/// <summary>
		/// Specifies the inventory configuration for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html">GET Bucket inventory</a> in the <i>Amazon Simple Storage Service API Reference</i>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InventoryConfiguration InventoryConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketLifecycleConfigurationRequest
	{
		
		/// <summary>
		/// Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BucketLifecycleConfiguration LifecycleConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketLifecycleRequest
	{
		
		/// <summary>
		/// Container for lifecycle rules. You can add as many as 1000 rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecycleConfiguration LifecycleConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketLoggingRequest
	{
		
		/// <summary>
		/// Container for logging status information.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BucketLoggingStatus BucketLoggingStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketMetricsConfigurationRequest
	{
		
		/// <summary>
		/// Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration, note that this is a full replacement of the existing metrics configuration. If you don't include the elements you want to keep, they are erased. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html"> PUT Bucket metrics</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MetricsConfiguration MetricsConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketNotificationConfigurationRequest
	{
		
		/// <summary>
		/// A container for specifying the notification configuration of the bucket. If this element is empty, notifications are turned off for the bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfiguration NotificationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketNotificationRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfigurationDeprecated NotificationConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketPolicyRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketReplicationRequest
	{
		
		/// <summary>
		/// A container for replication rules. You can add up to 1,000 rules. The maximum size of a replication configuration is 2 MB.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationConfiguration ReplicationConfiguration { get; set; }
	}
	
	/// <summary>
	/// Container for Payer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestPaymentConfiguration
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestPaymentConfigurationPayer Payer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RequestPaymentConfigurationPayer
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Requester = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BucketOwner = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketRequestPaymentRequest
	{
		
		/// <summary>
		/// Container for Payer.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RequestPaymentConfiguration RequestPaymentConfiguration { get; set; }
	}
	
	/// <summary>
	/// Container for <code>TagSet</code> elements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tagging
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagSet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketTaggingRequest
	{
		
		/// <summary>
		/// Container for <code>TagSet</code> elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tagging Tagging { get; set; }
	}
	
	/// <summary>
	/// Describes the versioning state of an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html">PUT Bucket versioning</a> in the <i>Amazon Simple Storage Service API Reference</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VersioningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfigurationMFADelete MFADelete { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfigurationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VersioningConfigurationMFADelete
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VersioningConfigurationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Suspended = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketVersioningRequest
	{
		
		/// <summary>
		/// Describes the versioning state of an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html">PUT Bucket versioning</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VersioningConfiguration VersioningConfiguration { get; set; }
	}
	
	/// <summary>
	/// Specifies website configuration parameters for an Amazon S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class WebsiteConfiguration
	{
		
		/// <summary>
		/// The error information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorDocument ErrorDocument { get; set; }
		
		/// <summary>
		/// Container for the <code>Suffix</code> element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public IndexDocument IndexDocument { get; set; }
		
		/// <summary>
		/// Specifies the redirect behavior of all requests to a website endpoint of an Amazon S3 bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RedirectAllRequestsTo RedirectAllRequestsTo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoutingRule[] RoutingRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutBucketWebsiteRequest
	{
		
		/// <summary>
		/// Specifies website configuration parameters for an Amazon S3 bucket.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WebsiteConfiguration WebsiteConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectAclRequest
	{
		
		/// <summary>
		/// Contains the elements that set the ACL permissions for an object per grantee.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccessControlPolicy AccessControlPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectLegalHoldRequest
	{
		
		/// <summary>
		/// A Legal Hold configuration for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockLegalHold LegalHold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectLockConfigurationRequest
	{
		
		/// <summary>
		/// The container element for Object Lock configuration parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockConfiguration ObjectLockConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Metadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectRetentionRequest
	{
		
		/// <summary>
		/// A Retention configuration for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ObjectLockRetention Retention { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutObjectTaggingRequest
	{
		
		/// <summary>
		/// Container for <code>TagSet</code> elements.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tagging Tagging { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PutPublicAccessBlockRequest
	{
		
		/// <summary>
		/// The PublicAccessBlock configuration that you want to apply to this Amazon S3 bucket. You can enable the configuration options in any combination. For more information about when Amazon S3 considers a bucket or object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. 
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PublicAccessBlockConfiguration PublicAccessBlockConfiguration { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for publishing messages to an Amazon Simple Queue Service (Amazon SQS) queue when Amazon S3 detects specified events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class QueueConfiguration
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string QueueArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// Specifies object key name filtering rules. For information about key name filtering, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfigurationFilter Filter { get; set; }
	}
	
	/// <summary>
	/// The container for the records event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RecordsEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Payload { get; set; }
	}
	
	/// <summary>
	/// Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Redirect
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HostName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HttpRedirectCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedirectProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplaceKeyPrefixWith { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReplaceKeyWith { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RedirectProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		https = 1,
	}
	
	/// <summary>
	/// A filter that identifies the subset of objects to which the replication rule applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or an <code>And</code> child element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationRuleFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A container of a key value name pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag Tag { get; set; }
		
		/// <summary>
		/// <p>A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. </p> <p>For example:</p> <ul> <li> <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap these filters in an <code>And</code> tag. </p> </li> <li> <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements in an <code>And</code> tag</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRuleAndOperator And { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service (SSE-KMS).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SourceSelectionCriteria
	{
		
		/// <summary>
		/// A container for filter information for the selection of S3 objects encrypted with AWS KMS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SseKmsEncryptedObjects SseKmsEncryptedObjects { get; set; }
	}
	
	/// <summary>
	/// Specifies which Amazon S3 objects to replicate and where to store the replicas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		/// <summary>
		/// A filter that identifies the subset of objects to which the replication rule applies. A <code>Filter</code> must specify exactly one <code>Prefix</code>, <code>Tag</code>, or an <code>And</code> child element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRuleFilter Filter { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ReplicationRuleStatus Status { get; set; }
		
		/// <summary>
		/// A container that describes additional filters for identifying the source objects that you want to replicate. You can choose to enable or disable the replication of these objects. Currently, Amazon S3 supports only the filter that you can specify for objects created with server-side encryption using a customer master key (CMK) stored in AWS Key Management Service (SSE-KMS).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SourceSelectionCriteria SourceSelectionCriteria { get; set; }
		
		/// <summary>
		/// Optional configuration to replicate existing source bucket objects. For more information, see <a href=" https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-what-is-isnot-replicated.html#existing-object-replication">Replicating Existing Objects</a> in the <i>Amazon S3 Developer Guide</i>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ExistingObjectReplication ExistingObjectReplication { get; set; }
		
		/// <summary>
		/// Specifies information about where to publish analysis or configuration results for an Amazon S3 bucket and S3 Replication Time Control (S3 RTC).
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Destination Destination { get; set; }
		
		/// <summary>
		/// <p>Specifies whether Amazon S3 replicates the delete markers. If you specify a <code>Filter</code>, you must specify this element. However, in the latest version of replication configuration (when <code>Filter</code> is specified), Amazon S3 doesn't replicate delete markers. Therefore, the <code>DeleteMarkerReplication</code> element can contain only &lt;Status&gt;Disabled&lt;/Status&gt;. For an example configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-config-min-rule-config">Basic Rule Configuration</a>. </p> <note> <p> If you don't specify the <code>Filter</code> element, Amazon S3 assumes that the replication configuration is the earlier version, V1. In the earlier version, Amazon S3 handled replication of delete markers differently. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication-add-config.html#replication-backward-compat-considerations">Backward Compatibility</a>.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteMarkerReplication DeleteMarkerReplication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationRuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// <p>A container for specifying rule filters. The filters determine the subset of objects to which the rule applies. This element is required only if you specify more than one filter. </p> <p>For example:</p> <ul> <li> <p>If you specify both a <code>Prefix</code> and a <code>Tag</code> filter, wrap these filters in an <code>And</code> tag. </p> </li> <li> <p>If you specify a filter based on multiple tags, wrap the <code>Tag</code> elements in an <code>And</code> tag</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReplicationRuleAndOperator
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReplicationTimeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Container for specifying if periodic <code>QueryProgress</code> messages should be sent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RequestProgress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// Container for restore job parameters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Days { get; set; }
		
		/// <summary>
		/// Container for S3 Glacier job parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlacierJobParameters GlacierJobParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreRequestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RestoreRequestTier Tier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes the parameters for Select job types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SelectParameters SelectParameters { get; set; }
		
		/// <summary>
		/// Describes the location where the restore job's output is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputLocation OutputLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RestoreRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RestoreRequestTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Standard = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bulk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Expedited = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RestoreObjectRequest
	{
		
		/// <summary>
		/// Container for restore job parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RestoreRequest RestoreRequest { get; set; }
	}
	
	/// <summary>
	/// Specifies the redirect behavior and when a redirect is applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RoutingRule
	{
		
		/// <summary>
		/// A container for describing a condition that must be met for the specified redirect to apply. For example, 1. If request is for pages in the <code>/docs</code> folder, redirect to the <code>/documents</code> folder. 2. If request results in HTTP error 4xx, redirect request to another host where you might process the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Condition Condition { get; set; }
		
		/// <summary>
		/// Specifies how requests are redirected. In the event of an error, you can specify a different error code to return.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Redirect Redirect { get; set; }
	}
	
	/// <summary>
	/// Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Transition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Days { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitionStorageClass StorageClass { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitionStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLACIER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_IA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONEZONE_IA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTELLIGENT_TIERING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEEP_ARCHIVE = 4,
	}
	
	/// <summary>
	/// Specifies lifecycle rules for an Amazon S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html">Put Bucket Lifecycle Configuration</a> in the <i>Amazon Simple Storage Service API Reference</i>. For examples, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html#API_PutBucketLifecycleConfiguration_Examples">Put Bucket Lifecycle Configuration Examples</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Rule
	{
		
		/// <summary>
		/// Container for the expiration for the lifecycle of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LifecycleExpiration Expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Prefix { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RuleStatus Status { get; set; }
		
		/// <summary>
		/// Specifies when an object transitions to a specified storage class. For more information about Amazon S3 lifecycle configuration rules, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-transition-general-considerations.html">Transitioning Objects Using Amazon S3 Lifecycle</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Transition Transition { get; set; }
		
		/// <summary>
		/// Container for the transition rule that describes when noncurrent objects transition to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class. If your bucket is versioning-enabled (or versioning is suspended), you can set this action to request that Amazon S3 transition noncurrent object versions to the <code>STANDARD_IA</code>, <code>ONEZONE_IA</code>, <code>INTELLIGENT_TIERING</code>, <code>GLACIER</code>, or <code>DEEP_ARCHIVE</code> storage class at a specific period in the object's lifetime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoncurrentVersionTransition NoncurrentVersionTransition { get; set; }
		
		/// <summary>
		/// Specifies when noncurrent object versions expire. Upon expiration, Amazon S3 permanently deletes the noncurrent object versions. You set this lifecycle configuration action on a bucket that has versioning enabled (or suspended) to request that Amazon S3 delete noncurrent object versions at a specific period in the object's lifetime.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NoncurrentVersionExpiration NoncurrentVersionExpiration { get; set; }
		
		/// <summary>
		/// Specifies the days since the initiation of an incomplete multipart upload that Amazon S3 will wait before permanently removing all parts of the upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config"> Aborting Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AbortIncompleteMultipartUpload AbortIncompleteMultipartUpload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RuleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScanRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> End { get; set; }
	}
	
	/// <summary>
	/// Container for the Stats Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StatsEvent
	{
		
		/// <summary>
		/// Container for the stats details.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Stats Details { get; set; }
	}
	
	/// <summary>
	/// The container for selecting objects from a content event stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectObjectContentEventStream
	{
		
		/// <summary>
		/// The container for the records event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordsEvent Records { get; set; }
		
		/// <summary>
		/// Container for the Stats Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StatsEvent Stats { get; set; }
		
		/// <summary>
		/// This data type contains information about the progress event of an operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProgressEvent Progress { get; set; }
		
		/// <summary>
		/// <p/>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ContinuationEvent Cont { get; set; }
		
		/// <summary>
		/// A message that indicates the request is complete and no more messages will be sent. You should not assume that the request is complete until the client receives an <code>EndEvent</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EndEvent End { get; set; }
	}
	
	/// <summary>
	/// Request to filter the contents of an Amazon S3 object based on a simple Structured Query Language (SQL) statement. In the request, along with the SQL expression, you must specify a data serialization format (JSON or CSV) of the object. Amazon S3 uses this to parse object data into records. It returns only records that match the specified SQL expression. You must also specify the data serialization format for the response. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectSELECTContent.html">S3Select API Documentation</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SelectObjectContentRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SelectObjectContentRequestExpressionType ExpressionType { get; set; }
		
		/// <summary>
		/// Container for specifying if periodic <code>QueryProgress</code> messages should be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RequestProgress RequestProgress { get; set; }
		
		/// <summary>
		/// Describes the serialization format of the object.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputSerialization InputSerialization { get; set; }
		
		/// <summary>
		/// Describes how results of the Select job are serialized.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputSerialization OutputSerialization { get; set; }
		
		/// <summary>
		/// Specifies the byte range of the object to get the records from. A record is processed when its first byte is contained by the range. This parameter is optional, but when specified, it must not be empty. See RFC 2616, Section 14.35.1 about how to specify the start and end of the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScanRange ScanRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SelectObjectContentRequestExpressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQL = 0,
	}
	
	/// <summary>
	/// Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html">PUT Bucket encryption</a> in the <i>Amazon Simple Storage Service API Reference</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerSideEncryptionByDefault
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionByDefaultSSEAlgorithm SSEAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KMSMasterKeyID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ServerSideEncryptionByDefaultSSEAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aws:kms = 1,
	}
	
	/// <summary>
	/// Specifies the default server-side encryption configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ServerSideEncryptionRule
	{
		
		/// <summary>
		/// Describes the default server-side encryption to apply to new objects in the bucket. If a PUT Object request doesn't specify any server-side encryption, this default encryption will be applied. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTencryption.html">PUT Bucket encryption</a> in the <i>Amazon Simple Storage Service API Reference</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionByDefault ApplyServerSideEncryptionByDefault { get; set; }
	}
	
	/// <summary>
	/// A container for filter information for the selection of S3 objects encrypted with AWS KMS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class SseKmsEncryptedObjects
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SseKmsEncryptedObjectsStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SseKmsEncryptedObjectsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SseKmsEncryptedObjectsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enabled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Disabled = 1,
	}
	
	/// <summary>
	/// Container for the stats details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Stats
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesScanned { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesProcessed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BytesReturned { get; set; }
	}
	
	/// <summary>
	/// Container for data related to the storage class analysis for an Amazon S3 bucket for export.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StorageClassAnalysisDataExport
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StorageClassAnalysisDataExportOutputSchemaVersion OutputSchemaVersion { get; set; }
		
		/// <summary>
		/// Where to publish the analytics results.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AnalyticsExportDestination Destination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StorageClassAnalysisDataExportOutputSchemaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V_1 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StorageClassAnalysisSchemaVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V_1 = 0,
	}
	
	/// <summary>
	/// Container for granting information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TargetGrant
	{
		
		/// <summary>
		/// Container for the person being granted permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Grantee Grantee { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetGrantPermission Permission { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TargetGrantPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_CONTROL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE = 2,
	}
	
	/// <summary>
	/// A container for specifying the configuration for publication of messages to an Amazon Simple Notification Service (Amazon SNS) topic when Amazon S3 detects specified events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TopicConfiguration
	{
		
		/// <summary>
		/// An optional unique identifier for configurations in a notification configuration. If you don't provide one, Amazon S3 will assign an ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// Specifies object key name filtering rules. For information about key name filtering, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Configuring Event Notifications</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NotificationConfigurationFilter Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UploadPartRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Body { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>This operation aborts a multipart upload. After a multipart upload is aborted, no additional parts can be uploaded using that upload ID. The storage consumed by any previously uploaded parts will be freed. However, if any part uploads are currently in progress, those part uploads might or might not succeed. As a result, it might be necessary to abort a given multipart upload multiple times in order to completely free all storage consumed by all parts. </p> <p>To verify that all parts have been removed, so you don't get charged for the part storage, you should call the <a>ListParts</a> operation and ensure that the parts list is empty.</p> <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and Permissions</a>.</p> <p>The following operations are related to <code>AbortMultipartUpload</code>:</p> <ul> <li> <p> <a>CreateMultipartUpload</a> </p> </li> <li> <p> <a>UploadPart</a> </p> </li> <li> <p> <a>CompleteMultipartUpload</a> </p> </li> <li> <p> <a>ListParts</a> </p> </li> <li> <p> <a>ListMultipartUploads</a> </p> </li> </ul>
		/// AbortMultipartUpload /{Bucket}/{Key}#uploadId
		/// </summary>
		/// <param name="Bucket"><p>The bucket name to which the upload was taking place. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Key of the object for which the multipart upload was initiated.</param>
		/// <param name="uploadId">Upload ID that identifies the multipart upload.</param>
		public async Task AbortMultipartUploadAsync(string Bucket, string Key, string uploadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#uploadId&uploadId=" + (uploadId==null? "" : Uri.EscapeDataString(uploadId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the parts that have been uploaded for a specific multipart upload. This operation must include the upload ID, which you obtain by sending the initiate multipart upload request (see <a>CreateMultipartUpload</a>). This request returns a maximum of 1,000 uploaded parts. The default number of parts returned is 1,000 parts. You can restrict the number of parts returned by specifying the <code>max-parts</code> request parameter. If your multipart upload consists of more than 1,000 parts, the response returns an <code>IsTruncated</code> field with the value of true, and a <code>NextPartNumberMarker</code> element. In subsequent <code>ListParts</code> requests you can include the part-number-marker query string parameter and set its value to the <code>NextPartNumberMarker</code> field value from the previous response.</p> <p>For more information on multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart Upload</a>.</p> <p>For information on permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and Permissions</a>.</p> <p>The following operations are related to <code>ListParts</code>:</p> <ul> <li> <p> <a>CreateMultipartUpload</a> </p> </li> <li> <p> <a>UploadPart</a> </p> </li> <li> <p> <a>CompleteMultipartUpload</a> </p> </li> <li> <p> <a>AbortMultipartUpload</a> </p> </li> <li> <p> <a>ListMultipartUploads</a> </p> </li> </ul>
		/// ListParts /{Bucket}/{Key}#uploadId
		/// </summary>
		/// <param name="Bucket"><p>Name of the bucket to which the parts are being uploaded. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Object key for which the multipart upload was initiated.</param>
		/// <param name="max_parts">Sets the maximum number of parts to return.</param>
		/// <param name="part_number_marker">Specifies the part after which listing should begin. Only parts with higher part numbers will be listed.</param>
		/// <param name="uploadId">Upload ID identifying the multipart upload whose parts are being listed.</param>
		/// <param name="MaxParts">Pagination limit</param>
		/// <param name="PartNumberMarker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task ListPartsAsync(string Bucket, string Key, int max_parts, int part_number_marker, string uploadId, string MaxParts, string PartNumberMarker, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#uploadId&max_parts="+max_parts+"&part_number_marker="+part_number_marker+"&uploadId=" + (uploadId==null? "" : Uri.EscapeDataString(uploadId))+"&MaxParts=" + (MaxParts==null? "" : Uri.EscapeDataString(MaxParts))+"&PartNumberMarker=" + (PartNumberMarker==null? "" : Uri.EscapeDataString(PartNumberMarker));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the bucket. All objects (including all object versions and delete markers) in the bucket must be deleted before the bucket itself can be deleted.</p> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> </p> </li> <li> <p> </p> </li> </ul>
		/// DeleteBucket /{Bucket}
		/// </summary>
		/// <param name="Bucket">Specifies the bucket being deleted.</param>
		public async Task DeleteBucketAsync(string Bucket, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK response can contain valid or invalid XML. Be sure to design your application to parse the contents of the response and handle it appropriately.</p> <important> <p>This API has been revised. We recommend that you use the newer version, <a>ListObjectsV2</a>, when developing applications. For backward compatibility, Amazon S3 continues to support <code>ListObjects</code>.</p> </important> <p>The following operations are related to <code>ListObjects</code>:</p> <ul> <li> <p> <a>ListObjectsV2</a> </p> </li> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>PutObject</a> </p> </li> <li> <p> <a>CreateBucket</a> </p> </li> <li> <p> <a>ListBuckets</a> </p> </li> </ul>
		/// ListObjects /{Bucket}
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the objects.</param>
		/// <param name="delimiter">A delimiter is a character you use to group keys.</param>
		/// <param name="marker">Specifies the key to start with when listing objects in a bucket.</param>
		/// <param name="max_keys">Sets the maximum number of keys returned in the response. By default the API returns up to 1,000 key names. The response might contain fewer keys but will never contain more. </param>
		/// <param name="prefix">Limits the response to keys that begin with the specified prefix.</param>
		/// <param name="MaxKeys">Pagination limit</param>
		/// <param name="Marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task ListObjectsAsync(string Bucket, string delimiter, ListMultipartUploadsOutputEncodingType encoding_type, string marker, int max_keys, string prefix, string MaxKeys, string Marker, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&encoding_type=" + encoding_type+"&marker=" + (marker==null? "" : Uri.EscapeDataString(marker))+"&max_keys="+max_keys+"&prefix=" + (prefix==null? "" : Uri.EscapeDataString(prefix))+"&MaxKeys=" + (MaxKeys==null? "" : Uri.EscapeDataString(MaxKeys))+"&Marker=" + (Marker==null? "" : Uri.EscapeDataString(Marker));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an analytics configuration for the bucket (specified by the analytics configuration ID).</p> <p>To use this operation, you must have permissions to perform the <code>s3:PutAnalyticsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about the Amazon S3 analytics feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon S3 Analytics – Storage Class Analysis</a>. </p> <p>The following operations are related to <code>DeleteBucketAnalyticsConfiguration</code>:</p> <ul> <li> <p> </p> </li> <li> <p> </p> </li> <li> <p> </p> </li> </ul>
		/// DeleteBucketAnalyticsConfiguration /{Bucket}#analytics&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket from which an analytics configuration is deleted.</param>
		/// <param name="id">The ID that identifies the analytics configuration.</param>
		public async Task DeleteBucketAnalyticsConfigurationAsync(string Bucket, string id, bool analytics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#analytics&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&analytics="+analytics;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This implementation of the GET operation returns an analytics configuration (identified by the analytics configuration ID) from the bucket.</p> <p>To use this operation, you must have permissions to perform the <code>s3:GetAnalyticsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources"> Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p> <p>For information about Amazon S3 analytics feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon S3 Analytics – Storage Class Analysis</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> </p> </li> <li> <p> </p> </li> <li> <p> </p> </li> </ul>
		/// GetBucketAnalyticsConfiguration /{Bucket}#analytics&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket from which an analytics configuration is retrieved.</param>
		/// <param name="id">The ID that identifies the analytics configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketAnalyticsConfigurationAsync(string Bucket, string id, bool analytics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#analytics&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&analytics="+analytics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the <code>cors</code> configuration information set for the bucket.</p> <p>To use this operation, you must have permission to perform the <code>s3:PutBucketCORS</code> action. The bucket owner has this permission by default and can grant this permission to others. </p> <p>For information about <code>cors</code>, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html">Enabling Cross-Origin Resource Sharing</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p class="title"> <b>Related Resources:</b> </p> <ul> <li> <p> </p> </li> <li> <p> <a>RESTOPTIONSobject</a> </p> </li> </ul>
		/// DeleteBucketCors /{Bucket}#cors
		/// </summary>
		/// <param name="Bucket">Specifies the bucket whose <code>cors</code> configuration is being deleted.</param>
		public async Task DeleteBucketCorsAsync(string Bucket, bool cors, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#cors&cors="+cors;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the cors configuration information set for the bucket.</p> <p> To use this operation, you must have permission to perform the s3:GetBucketCORS action. By default, the bucket owner has this permission and can grant it to others.</p> <p> For more information about cors, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html"> Enabling Cross-Origin Resource Sharing</a>.</p> <p>The following operations are related to <code>GetBucketCors</code>:</p> <ul> <li> <p> <a>PutBucketCors</a> </p> </li> <li> <p> <a>DeleteBucketCors</a> </p> </li> </ul>
		/// GetBucketCors /{Bucket}#cors
		/// </summary>
		/// <param name="Bucket">The bucket name for which to get the cors configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketCorsAsync(string Bucket, bool cors, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#cors&cors="+cors;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This implementation of the DELETE operation removes default encryption from the bucket. For information about the Amazon S3 default encryption feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon S3 Default Bucket Encryption</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>To use this operation, you must have permissions to perform the <code>s3:PutEncryptionConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to your Amazon S3 Resources</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> <a>PutBucketEncryption</a> </p> </li> <li> <p> <a>GetBucketEncryption</a> </p> </li> </ul>
		/// DeleteBucketEncryption /{Bucket}#encryption
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the server-side encryption configuration to delete.</param>
		public async Task DeleteBucketEncryptionAsync(string Bucket, bool encryption, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#encryption&encryption="+encryption;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the default encryption configuration for an Amazon S3 bucket. For information about the Amazon S3 default encryption feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html">Amazon S3 Default Bucket Encryption</a>.</p> <p> To use this operation, you must have permission to perform the <code>s3:GetEncryptionConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>The following operations are related to <code>GetBucketEncryption</code>:</p> <ul> <li> <p> <a>PutBucketEncryption</a> </p> </li> <li> <p> <a>DeleteBucketEncryption</a> </p> </li> </ul>
		/// GetBucketEncryption /{Bucket}#encryption
		/// </summary>
		/// <param name="Bucket">The name of the bucket from which the server-side encryption configuration is retrieved.</param>
		/// <returns>Success</returns>
		public async Task GetBucketEncryptionAsync(string Bucket, bool encryption, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#encryption&encryption="+encryption;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an inventory configuration (identified by the inventory ID) from the bucket.</p> <p>To use this operation, you must have permissions to perform the <code>s3:PutInventoryConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about the Amazon S3 inventory feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon S3 Inventory</a>.</p> <p>Operations related to <code>DeleteBucketInventoryConfiguration</code> include: </p> <ul> <li> <p> <a>GetBucketInventoryConfiguration</a> </p> </li> <li> <p> <a>PutBucketInventoryConfiguration</a> </p> </li> <li> <p> <a>ListBucketInventoryConfigurations</a> </p> </li> </ul>
		/// DeleteBucketInventoryConfiguration /{Bucket}#inventory&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the inventory configuration to delete.</param>
		/// <param name="id">The ID used to identify the inventory configuration.</param>
		public async Task DeleteBucketInventoryConfigurationAsync(string Bucket, string id, bool inventory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#inventory&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&inventory="+inventory;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns an inventory configuration (identified by the inventory configuration ID) from the bucket.</p> <p>To use this operation, you must have permissions to perform the <code>s3:GetInventoryConfiguration</code> action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about the Amazon S3 inventory feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon S3 Inventory</a>.</p> <p>The following operations are related to <code>GetBucketInventoryConfiguration</code>:</p> <ul> <li> <p> <a>DeleteBucketInventoryConfiguration</a> </p> </li> <li> <p> <a>ListBucketInventoryConfigurations</a> </p> </li> <li> <p> <a>PutBucketInventoryConfiguration</a> </p> </li> </ul>
		/// GetBucketInventoryConfiguration /{Bucket}#inventory&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the inventory configuration to retrieve.</param>
		/// <param name="id">The ID used to identify the inventory configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketInventoryConfigurationAsync(string Bucket, string id, bool inventory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#inventory&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&inventory="+inventory;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the lifecycle configuration from the specified bucket. Amazon S3 removes all the lifecycle configuration rules in the lifecycle subresource associated with the bucket. Your objects never expire, and Amazon S3 no longer automatically deletes any objects on the basis of rules contained in the deleted lifecycle configuration.</p> <p>To use this operation, you must have permission to perform the <code>s3:PutLifecycleConfiguration</code> action. By default, the bucket owner has this permission and the bucket owner can grant this permission to others.</p> <p>There is usually some time lag before lifecycle configuration deletion is fully propagated to all the Amazon S3 systems.</p> <p>For more information about the object expiration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/intro-lifecycle-rules.html#intro-lifecycle-rules-actions">Elements to Describe Lifecycle Actions</a>.</p> <p>Related actions include:</p> <ul> <li> <p> <a>PutBucketLifecycleConfiguration</a> </p> </li> <li> <p> <a>GetBucketLifecycleConfiguration</a> </p> </li> </ul>
		/// DeleteBucketLifecycle /{Bucket}#lifecycle
		/// </summary>
		/// <param name="Bucket">The bucket name of the lifecycle to delete.</param>
		public async Task DeleteBucketLifecycleAsync(string Bucket, bool lifecycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#lifecycle&lifecycle="+lifecycle;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p>Bucket lifecycle configuration now supports specifying a lifecycle rule using an object key name prefix, one or more object tags, or a combination of both. Accordingly, this section describes the latest API. The response describes the new filter element that you can use to specify a filter to select a subset of objects to which the rule applies. If you are still using previous version of the lifecycle configuration, it works. For the earlier API description, see <a>GetBucketLifecycle</a>.</p> </note> <p>Returns the lifecycle configuration information set on the bucket. For information about lifecycle configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a>.</p> <p>To use this operation, you must have permission to perform the <code>s3:GetLifecycleConfiguration</code> action. The bucket owner has this permission, by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p> <code>GetBucketLifecycleConfiguration</code> has the following special error:</p> <ul> <li> <p>Error code: <code>NoSuchLifecycleConfiguration</code> </p> <ul> <li> <p>Description: The lifecycle configuration does not exist.</p> </li> <li> <p>HTTP Status Code: 404 Not Found</p> </li> <li> <p>SOAP Fault Code Prefix: Client</p> </li> </ul> </li> </ul> <p>The following operations are related to <code>GetBucketLifecycleConfiguration</code>:</p> <ul> <li> <p> <a>GetBucketLifecycle</a> </p> </li> <li> <p> <a>PutBucketLifecycle</a> </p> </li> <li> <p> <a>DeleteBucketLifecycle</a> </p> </li> </ul>
		/// GetBucketLifecycleConfiguration /{Bucket}#lifecycle
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the lifecycle information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketLifecycleConfigurationAsync(string Bucket, bool lifecycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#lifecycle&lifecycle="+lifecycle;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a metrics configuration for the Amazon CloudWatch request metrics (specified by the metrics configuration ID) from the bucket. Note that this doesn't include the daily storage metrics.</p> <p> To use this operation, you must have permissions to perform the <code>s3:PutMetricsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about CloudWatch request metrics for Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring Metrics with Amazon CloudWatch</a>. </p> <p>The following operations are related to <code>DeleteBucketMetricsConfiguration</code>:</p> <ul> <li> <p> <a>GetBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>PutBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>ListBucketMetricsConfigurations</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring Metrics with Amazon CloudWatch</a> </p> </li> </ul>
		/// DeleteBucketMetricsConfiguration /{Bucket}#metrics&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the metrics configuration to delete.</param>
		/// <param name="id">The ID used to identify the metrics configuration.</param>
		public async Task DeleteBucketMetricsConfigurationAsync(string Bucket, string id, bool metrics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#metrics&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&metrics="+metrics;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a metrics configuration (specified by the metrics configuration ID) from the bucket. Note that this doesn't include the daily storage metrics.</p> <p> To use this operation, you must have permissions to perform the <code>s3:GetMetricsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p> For information about CloudWatch request metrics for Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring Metrics with Amazon CloudWatch</a>.</p> <p>The following operations are related to <code>GetBucketMetricsConfiguration</code>:</p> <ul> <li> <p> <a>PutBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>DeleteBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>ListBucketMetricsConfigurations</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring Metrics with Amazon CloudWatch</a> </p> </li> </ul>
		/// GetBucketMetricsConfiguration /{Bucket}#metrics&id
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the metrics configuration to retrieve.</param>
		/// <param name="id">The ID used to identify the metrics configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketMetricsConfigurationAsync(string Bucket, string id, bool metrics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#metrics&id&id=" + (id==null? "" : Uri.EscapeDataString(id))+"&metrics="+metrics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This implementation of the DELETE operation uses the policy subresource to delete the policy of a specified bucket. If you are using an identity other than the root user of the AWS account that owns the bucket, the calling identity must have the <code>DeleteBucketPolicy</code> permissions on the specified bucket and belong to the bucket owner's account to use this operation. </p> <p>If you don't have <code>DeleteBucketPolicy</code> permissions, Amazon S3 returns a <code>403 Access Denied</code> error. If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns a <code>405 Method Not Allowed</code> error. </p> <important> <p>As a security precaution, the root user of the AWS account that owns a bucket can always use this operation, even if the policy explicitly denies the root user the ability to perform this action.</p> </important> <p>For more information about bucket policies, see <a href=" https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using Bucket Policies and UserPolicies</a>. </p> <p>The following operations are related to <code>DeleteBucketPolicy</code> </p> <ul> <li> <p> <a>CreateBucket</a> </p> </li> <li> <p> <a>DeleteObject</a> </p> </li> </ul>
		/// DeleteBucketPolicy /{Bucket}#policy
		/// </summary>
		/// <param name="Bucket">The bucket name.</param>
		public async Task DeleteBucketPolicyAsync(string Bucket, bool policy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#policy&policy="+policy;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the policy of a specified bucket. If you are using an identity other than the root user of the AWS account that owns the bucket, the calling identity must have the <code>GetBucketPolicy</code> permissions on the specified bucket and belong to the bucket owner's account in order to use this operation.</p> <p>If you don't have <code>GetBucketPolicy</code> permissions, Amazon S3 returns a <code>403 Access Denied</code> error. If you have the correct permissions, but you're not using an identity that belongs to the bucket owner's account, Amazon S3 returns a <code>405 Method Not Allowed</code> error.</p> <important> <p>As a security precaution, the root user of the AWS account that owns a bucket can always use this operation, even if the policy explicitly denies the root user the ability to perform this action.</p> </important> <p>For more information about bucket policies, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using Bucket Policies and User Policies</a>.</p> <p>The following operation is related to <code>GetBucketPolicy</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> </ul>
		/// GetBucketPolicy /{Bucket}#policy
		/// </summary>
		/// <param name="Bucket">The bucket name for which to get the bucket policy.</param>
		/// <returns>Success</returns>
		public async Task GetBucketPolicyAsync(string Bucket, bool policy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#policy&policy="+policy;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes the replication configuration from the bucket.</p> <p>To use this operation, you must have permissions to perform the <code>s3:PutReplicationConfiguration</code> action. The bucket owner has these permissions by default and can grant it to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>. </p> <note> <p>It can take a while for the deletion of a replication configuration to fully propagate.</p> </note> <p> For information about replication configuration, see <a href=" https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a> in the <i>Amazon S3 Developer Guide</i>. </p> <p>The following operations are related to <code>DeleteBucketReplication</code>:</p> <ul> <li> <p> <a>PutBucketReplication</a> </p> </li> <li> <p> <a>GetBucketReplication</a> </p> </li> </ul>
		/// DeleteBucketReplication /{Bucket}#replication
		/// </summary>
		/// <param name="Bucket"> The bucket name. </param>
		public async Task DeleteBucketReplicationAsync(string Bucket, bool replication, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#replication&replication="+replication;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the replication configuration of a bucket.</p> <note> <p> It can take a while to propagate the put or delete a replication configuration to all Amazon S3 systems. Therefore, a get request soon after put or delete can return a wrong result. </p> </note> <p> For information about replication configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/replication.html">Replication</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>This operation requires permissions for the <code>s3:GetReplicationConfiguration</code> action. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using Bucket Policies and User Policies</a>.</p> <p>If you include the <code>Filter</code> element in a replication configuration, you must also include the <code>DeleteMarkerReplication</code> and <code>Priority</code> elements. The response also returns those elements.</p> <p>For information about <code>GetBucketReplication</code> errors, see <a>ReplicationErrorCodeList</a> </p> <p>The following operations are related to <code>GetBucketReplication</code>:</p> <ul> <li> <p> <a>PutBucketReplication</a> </p> </li> <li> <p> <a>DeleteBucketReplication</a> </p> </li> </ul>
		/// GetBucketReplication /{Bucket}#replication
		/// </summary>
		/// <param name="Bucket">The bucket name for which to get the replication information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketReplicationAsync(string Bucket, bool replication, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#replication&replication="+replication;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the tags from the bucket.</p> <p>To use this operation, you must have permission to perform the <code>s3:PutBucketTagging</code> action. By default, the bucket owner has this permission and can grant this permission to others. </p> <p>The following operations are related to <code>DeleteBucketTagging</code>:</p> <ul> <li> <p> <a>GetBucketTagging</a> </p> </li> <li> <p> <a>PutBucketTagging</a> </p> </li> </ul>
		/// DeleteBucketTagging /{Bucket}#tagging
		/// </summary>
		/// <param name="Bucket">The bucket that has the tag set to be removed.</param>
		public async Task DeleteBucketTaggingAsync(string Bucket, bool tagging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#tagging&tagging="+tagging;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the tag set associated with the bucket.</p> <p>To use this operation, you must have permission to perform the <code>s3:GetBucketTagging</code> action. By default, the bucket owner has this permission and can grant this permission to others.</p> <p> <code>GetBucketTagging</code> has the following special error:</p> <ul> <li> <p>Error code: <code>NoSuchTagSetError</code> </p> <ul> <li> <p>Description: There is no tag set associated with the bucket.</p> </li> </ul> </li> </ul> <p>The following operations are related to <code>GetBucketTagging</code>:</p> <ul> <li> <p> <a>PutBucketTagging</a> </p> </li> <li> <p> <a>DeleteBucketTagging</a> </p> </li> </ul>
		/// GetBucketTagging /{Bucket}#tagging
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the tagging information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketTaggingAsync(string Bucket, bool tagging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#tagging&tagging="+tagging;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This operation removes the website configuration for a bucket. Amazon S3 returns a <code>200 OK</code> response upon successfully deleting a website configuration on the specified bucket. You will get a <code>200 OK</code> response if the website configuration you are trying to delete does not exist on the bucket. Amazon S3 returns a <code>404</code> response if the bucket specified in the request does not exist.</p> <p>This DELETE operation requires the <code>S3:DeleteBucketWebsite</code> permission. By default, only the bucket owner can delete the website configuration attached to a bucket. However, bucket owners can grant other users permission to delete the website configuration by writing a bucket policy granting them the <code>S3:DeleteBucketWebsite</code> permission. </p> <p>For more information about hosting websites, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting Websites on Amazon S3</a>. </p> <p>The following operations are related to <code>DeleteBucketWebsite</code>:</p> <ul> <li> <p> <a>GetBucketWebsite</a> </p> </li> <li> <p> <a>PutBucketWebsite</a> </p> </li> </ul>
		/// DeleteBucketWebsite /{Bucket}#website
		/// </summary>
		/// <param name="Bucket">The bucket name for which you want to remove the website configuration. </param>
		public async Task DeleteBucketWebsiteAsync(string Bucket, bool website, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#website&website="+website;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the website configuration for a bucket. To host website on Amazon S3, you can configure a bucket as website by adding a website configuration. For more information about hosting websites, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting Websites on Amazon S3</a>. </p> <p>This GET operation requires the <code>S3:GetBucketWebsite</code> permission. By default, only the bucket owner can read the bucket website configuration. However, bucket owners can allow other users to read the website configuration by writing a bucket policy granting them the <code>S3:GetBucketWebsite</code> permission.</p> <p>The following operations are related to <code>DeleteBucketWebsite</code>:</p> <ul> <li> <p> <a>DeleteBucketWebsite</a> </p> </li> <li> <p> <a>PutBucketWebsite</a> </p> </li> </ul>
		/// GetBucketWebsite /{Bucket}#website
		/// </summary>
		/// <param name="Bucket">The bucket name for which to get the website configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketWebsiteAsync(string Bucket, bool website, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#website&website="+website;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects.</p> <p>To remove a specific version, you must be the bucket owner and you must use the version Id subresource. Using this subresource permanently deletes the version. If the object deleted is a delete marker, Amazon S3 sets the response header, <code>x-amz-delete-marker</code>, to true. </p> <p>If the object you want to delete is in a bucket where the bucket versioning configuration is MFA Delete enabled, you must include the <code>x-amz-mfa</code> request header in the DELETE <code>versionId</code> request. Requests that include <code>x-amz-mfa</code> must use HTTPS. </p> <p> For more information about MFA Delete, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html">Using MFA Delete</a>. To see sample requests that use versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete">Sample Request</a>. </p> <p>You can delete objects by explicitly calling the DELETE Object API or configure its lifecycle (<a>PutBucketLifecycle</a>) to enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or deleting objects from your bucket, you must deny them the <code>s3:DeleteObject</code>, <code>s3:DeleteObjectVersion</code>, and <code>s3:PutLifeCycleConfiguration</code> actions. </p> <p>The following operation is related to <code>DeleteObject</code>:</p> <ul> <li> <p> <a>PutObject</a> </p> </li> </ul>
		/// DeleteObject /{Bucket}/{Key}
		/// </summary>
		/// <param name="Bucket"><p>The bucket name of the bucket containing the object. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Key name of the object to delete.</param>
		/// <param name="versionId">VersionId used to reference a specific version of the object.</param>
		public async Task DeleteObjectAsync(string Bucket, string Key, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves objects from Amazon S3. To use <code>GET</code>, you must have <code>READ</code> access to the object. If you grant <code>READ</code> access to the anonymous user, you can return the object without using an authorization header.</p> <p>An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer file system. You can, however, create a logical hierarchy by using object key names that imply a folder structure. For example, instead of naming an object <code>sample.jpg</code>, you can name it <code>photos/2006/February/sample.jpg</code>.</p> <p>To get an object from such a logical hierarchy, specify the full key name for the object in the <code>GET</code> operation. For a virtual hosted-style request example, if you have the object <code>photos/2006/February/sample.jpg</code>, specify the resource as <code>/photos/2006/February/sample.jpg</code>. For a path-style request example, if you have the object <code>photos/2006/February/sample.jpg</code> in the bucket named <code>examplebucket</code>, specify the resource as <code>/examplebucket/photos/2006/February/sample.jpg</code>. For more information about request types, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket">HTTP Host Header Bucket Specification</a>.</p> <p>To distribute large files to many people, you can save bandwidth costs by using BitTorrent. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html">Amazon S3 Torrent</a>. For more information about returning the ACL of an object, see <a>GetObjectAcl</a>.</p> <p>If the object you are retrieving is stored in the GLACIER or DEEP_ARCHIVE storage classes, before you can retrieve the object you must first restore a copy using . Otherwise, this operation returns an <code>InvalidObjectStateError</code> error. For information about restoring archived objects, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html">Restoring Archived Objects</a>.</p> <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should not be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your object does use these types of keys, you’ll get an HTTP 400 BadRequest error.</p> <p>If you encrypt an object by using server-side encryption with customer-provided encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object, you must use the following headers:</p> <ul> <li> <p>x-amz-server-side​-encryption​-customer-algorithm</p> </li> <li> <p>x-amz-server-side​-encryption​-customer-key</p> </li> <li> <p>x-amz-server-side​-encryption​-customer-key-MD5</p> </li> </ul> <p>For more information about SSE-C, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using Customer-Provided Encryption Keys)</a>.</p> <p>Assuming you have permission to read object tags (permission for the <code>s3:GetObjectVersionTagging</code> action), the response also returns the <code>x-amz-tagging-count</code> header that provides the count of number of tags associated with the object. You can use <a>GetObjectTagging</a> to retrieve the tag set associated with an object.</p> <p> <b>Permissions</b> </p> <p>You need the <code>s3:GetObject</code> permission for this operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying Permissions in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the <code>s3:ListBucket</code> permission.</p> <ul> <li> <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 will return an HTTP status code 404 ("no such key") error.</p> </li> <li> <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 will return an HTTP status code 403 ("access denied") error.</p> </li> </ul> <p> <b>Versioning</b> </p> <p>By default, the GET operation returns the current version of an object. To return a different version, use the <code>versionId</code> subresource.</p> <note> <p>If the current version of the object is a delete marker, Amazon S3 behaves as if the object was deleted and includes <code>x-amz-delete-marker: true</code> in the response.</p> </note> <p>For more information about versioning, see <a>PutBucketVersioning</a>. </p> <p> <b>Overriding Response Header Values</b> </p> <p>There are times when you want to override certain response header values in a GET response. For example, you might override the Content-Disposition response header value in your GET request.</p> <p>You can override values for a set of response headers using the following query parameters. These response header values are sent only on a successful request, that is, when status code 200 OK is returned. The set of headers you can override using these parameters is a subset of the headers that Amazon S3 accepts when you create an object. The response headers that you can override for the GET response are <code>Content-Type</code>, <code>Content-Language</code>, <code>Expires</code>, <code>Cache-Control</code>, <code>Content-Disposition</code>, and <code>Content-Encoding</code>. To override these header values in the GET response, you use the following request parameters.</p> <note> <p>You must sign the request, either using an Authorization header or a presigned URL, when using these parameters. They cannot be used with an unsigned (anonymous) request.</p> </note> <ul> <li> <p> <code>response-content-type</code> </p> </li> <li> <p> <code>response-content-language</code> </p> </li> <li> <p> <code>response-expires</code> </p> </li> <li> <p> <code>response-cache-control</code> </p> </li> <li> <p> <code>response-content-disposition</code> </p> </li> <li> <p> <code>response-content-encoding</code> </p> </li> </ul> <p> <b>Additional Considerations about Request Headers</b> </p> <p>If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code> headers are present in the request as follows: <code>If-Match</code> condition evaluates to <code>true</code>, and; <code>If-Unmodified-Since</code> condition evaluates to <code>false</code>; then, S3 returns 200 OK and the data requested. </p> <p>If both of the <code>If-None-Match</code> and <code>If-Modified-Since</code> headers are present in the request as follows:<code> If-None-Match</code> condition evaluates to <code>false</code>, and; <code>If-Modified-Since</code> condition evaluates to <code>true</code>; then, S3 returns 304 Not Modified response code.</p> <p>For more information about conditional requests, see <a href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.</p> <p>The following operations are related to <code>GetObject</code>:</p> <ul> <li> <p> <a>ListBuckets</a> </p> </li> <li> <p> <a>GetObjectAcl</a> </p> </li> </ul>
		/// GetObject /{Bucket}/{Key}
		/// </summary>
		/// <param name="Bucket"><p>The bucket name containing the object. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Key of the object to get.</param>
		/// <param name="response_cache_control">Sets the <code>Cache-Control</code> header of the response.</param>
		/// <param name="response_content_disposition">Sets the <code>Content-Disposition</code> header of the response</param>
		/// <param name="response_content_encoding">Sets the <code>Content-Encoding</code> header of the response.</param>
		/// <param name="response_content_language">Sets the <code>Content-Language</code> header of the response.</param>
		/// <param name="response_content_type">Sets the <code>Content-Type</code> header of the response.</param>
		/// <param name="response_expires">Sets the <code>Expires</code> header of the response.</param>
		/// <param name="versionId">VersionId used to reference a specific version of the object.</param>
		/// <param name="partNumber">Part number of the object being read. This is a positive integer between 1 and 10,000. Effectively performs a 'ranged' GET request for the part specified. Useful for downloading just a part of an object.</param>
		/// <returns>Success</returns>
		public async Task GetObjectAsync(string Bucket, string Key, string response_cache_control, string response_content_disposition, string response_content_encoding, string response_content_language, string response_content_type, System.DateTimeOffset response_expires, string versionId, int partNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"&response_cache_control=" + (response_cache_control==null? "" : Uri.EscapeDataString(response_cache_control))+"&response_content_disposition=" + (response_content_disposition==null? "" : Uri.EscapeDataString(response_content_disposition))+"&response_content_encoding=" + (response_content_encoding==null? "" : Uri.EscapeDataString(response_content_encoding))+"&response_content_language=" + (response_content_language==null? "" : Uri.EscapeDataString(response_content_language))+"&response_content_type=" + (response_content_type==null? "" : Uri.EscapeDataString(response_content_type))+"&response_expires=" + response_expires.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&partNumber="+partNumber;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the entire tag set from the specified object. For more information about managing object tags, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html"> Object Tagging</a>.</p> <p>To use this operation, you must have permission to perform the <code>s3:DeleteObjectTagging</code> action.</p> <p>To delete tags of a specific object version, add the <code>versionId</code> query parameter in the request. You will need permission for the <code>s3:DeleteObjectVersionTagging</code> action.</p> <p>The following operations are related to <code>DeleteBucketMetricsConfiguration</code>:</p> <ul> <li> <p> <a>PutObjectTagging</a> </p> </li> <li> <p> <a>GetObjectTagging</a> </p> </li> </ul>
		/// DeleteObjectTagging /{Bucket}/{Key}#tagging
		/// </summary>
		/// <param name="Bucket"><p>The bucket name containing the objects from which to remove the tags. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Name of the tag.</param>
		/// <param name="versionId">The versionId of the object that the tag-set will be removed from.</param>
		public async Task DeleteObjectTaggingAsync(string Bucket, string Key, string versionId, bool tagging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#tagging&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&tagging="+tagging;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the tag-set of an object. You send the GET request against the tagging subresource associated with the object.</p> <p>To use this operation, you must have permission to perform the <code>s3:GetObjectTagging</code> action. By default, the GET operation returns information about current version of an object. For a versioned bucket, you can have multiple versions of an object in your bucket. To retrieve tags of any other version, use the versionId query parameter. You also need permission for the <code>s3:GetObjectVersionTagging</code> action.</p> <p> By default, the bucket owner has this permission and can grant this permission to others.</p> <p> For information about the Amazon S3 object tagging feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-tagging.html">Object Tagging</a>.</p> <p>The following operation is related to <code>GetObjectTagging</code>:</p> <ul> <li> <p> <a>PutObjectTagging</a> </p> </li> </ul>
		/// GetObjectTagging /{Bucket}/{Key}#tagging
		/// </summary>
		/// <param name="Bucket"><p>The bucket name containing the object for which to get the tagging information. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">Object key for which to get the tagging information.</param>
		/// <param name="versionId">The versionId of the object for which to get the tagging information.</param>
		/// <returns>Success</returns>
		public async Task GetObjectTaggingAsync(string Bucket, string Key, string versionId, bool tagging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#tagging&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&tagging="+tagging;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the <code>PublicAccessBlock</code> configuration for an Amazon S3 bucket. To use this operation, you must have the <code>s3:PutBucketPublicAccessBlock</code> permission. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>The following operations are related to <code>DeletePublicAccessBlock</code>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using Amazon S3 Block Public Access</a> </p> </li> <li> <p> <a>GetPublicAccessBlock</a> </p> </li> <li> <p> <a>PutPublicAccessBlock</a> </p> </li> <li> <p> <a>GetBucketPolicyStatus</a> </p> </li> </ul>
		/// DeletePublicAccessBlock /{Bucket}#publicAccessBlock
		/// </summary>
		/// <param name="Bucket">The Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want to delete. </param>
		public async Task DeletePublicAccessBlockAsync(string Bucket, bool publicAccessBlock, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#publicAccessBlock&publicAccessBlock="+publicAccessBlock;
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the <code>PublicAccessBlock</code> configuration for an Amazon S3 bucket. To use this operation, you must have the <code>s3:GetBucketPublicAccessBlock</code> permission. For more information about Amazon S3 permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying Permissions in a Policy</a>.</p> <important> <p>When Amazon S3 evaluates the <code>PublicAccessBlock</code> configuration for a bucket or an object, it checks the <code>PublicAccessBlock</code> configuration for both the bucket (or the bucket that contains the object) and the bucket owner's account. If the <code>PublicAccessBlock</code> settings are different between the bucket and the account, Amazon S3 uses the most restrictive combination of the bucket-level and account-level settings.</p> </important> <p>For more information about when Amazon S3 considers a bucket or an object public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a>.</p> <p>The following operations are related to <code>GetPublicAccessBlock</code>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using Amazon S3 Block Public Access</a> </p> </li> <li> <p> <a>PutPublicAccessBlock</a> </p> </li> <li> <p> <a>GetPublicAccessBlock</a> </p> </li> <li> <p> <a>DeletePublicAccessBlock</a> </p> </li> </ul>
		/// GetPublicAccessBlock /{Bucket}#publicAccessBlock
		/// </summary>
		/// <param name="Bucket">The name of the Amazon S3 bucket whose <code>PublicAccessBlock</code> configuration you want to retrieve. </param>
		/// <returns>Success</returns>
		public async Task GetPublicAccessBlockAsync(string Bucket, bool publicAccessBlock, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#publicAccessBlock&publicAccessBlock="+publicAccessBlock;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This implementation of the GET operation uses the <code>accelerate</code> subresource to return the Transfer Acceleration state of a bucket, which is either <code>Enabled</code> or <code>Suspended</code>. Amazon S3 Transfer Acceleration is a bucket-level feature that enables you to perform faster data transfers to and from Amazon S3.</p> <p>To use this operation, you must have permission to perform the <code>s3:GetAccelerateConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to your Amazon S3 Resources</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>You set the Transfer Acceleration state of an existing bucket to <code>Enabled</code> or <code>Suspended</code> by using the <a>PutBucketAccelerateConfiguration</a> operation. </p> <p>A GET <code>accelerate</code> request does not return a state value for a bucket that has no transfer acceleration state. A bucket has no Transfer Acceleration state if a state has never been set on the bucket. </p> <p>For more information about transfer acceleration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Transfer Acceleration</a> in the Amazon Simple Storage Service Developer Guide.</p> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> <a>PutBucketAccelerateConfiguration</a> </p> </li> </ul>
		/// GetBucketAccelerateConfiguration /{Bucket}#accelerate
		/// </summary>
		/// <param name="Bucket">Name of the bucket for which the accelerate configuration is retrieved.</param>
		/// <returns>Success</returns>
		public async Task GetBucketAccelerateConfigurationAsync(string Bucket, bool accelerate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#accelerate&accelerate="+accelerate;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This implementation of the <code>GET</code> operation uses the <code>acl</code> subresource to return the access control list (ACL) of a bucket. To use <code>GET</code> to return the ACL of the bucket, you must have <code>READ_ACP</code> access to the bucket. If <code>READ_ACP</code> permission is granted to the anonymous user, you can return the ACL of the bucket without using an authorization header.</p> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> </p> </li> </ul>
		/// GetBucketAcl /{Bucket}#acl
		/// </summary>
		/// <param name="Bucket">Specifies the S3 bucket whose ACL is being requested.</param>
		/// <returns>Success</returns>
		public async Task GetBucketAclAsync(string Bucket, bool acl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#acl&acl="+acl;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <important> <p>For an updated version of this API, see <a>GetBucketLifecycleConfiguration</a>. If you configured a bucket lifecycle using the <code>filter</code> element, you should see the updated version of this topic. This topic is provided for backward compatibility.</p> </important> <p>Returns the lifecycle configuration information set on the bucket. For information about lifecycle configuration, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html">Object Lifecycle Management</a>.</p> <p> To use this operation, you must have permission to perform the <code>s3:GetLifecycleConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p> <code>GetBucketLifecycle</code> has the following special error:</p> <ul> <li> <p>Error code: <code>NoSuchLifecycleConfiguration</code> </p> <ul> <li> <p>Description: The lifecycle configuration does not exist.</p> </li> <li> <p>HTTP Status Code: 404 Not Found</p> </li> <li> <p>SOAP Fault Code Prefix: Client</p> </li> </ul> </li> </ul> <p>The following operations are related to <code>GetBucketLifecycle</code>:</p> <ul> <li> <p> <a>GetBucketLifecycleConfiguration</a> </p> </li> <li> <p> <a>PutBucketLifecycle</a> </p> </li> <li> <p> <a>DeleteBucketLifecycle</a> </p> </li> </ul>
		/// GetBucketLifecycle /{Bucket}#lifecycle&deprecated!
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the lifecycle information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketLifecycleAsync(string Bucket, bool lifecycle, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#lifecycle&deprecated!&lifecycle="+lifecycle;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the Region the bucket resides in. You set the bucket's Region using the <code>LocationConstraint</code> request parameter in a <code>CreateBucket</code> request. For more information, see <a>CreateBucket</a>.</p> <p> To use this implementation of the operation, you must be the bucket owner.</p> <p>The following operations are related to <code>GetBucketLocation</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>CreateBucket</a> </p> </li> </ul>
		/// GetBucketLocation /{Bucket}#location
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the location.</param>
		/// <returns>Success</returns>
		public async Task GetBucketLocationAsync(string Bucket, bool location, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#location&location="+location;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the logging status of a bucket and the permissions users have to view and modify that status. To use GET, you must be the bucket owner.</p> <p>The following operations are related to <code>GetBucketLogging</code>:</p> <ul> <li> <p> <a>CreateBucket</a> </p> </li> <li> <p> <a>PutBucketLogging</a> </p> </li> </ul>
		/// GetBucketLogging /{Bucket}#logging
		/// </summary>
		/// <param name="Bucket">The bucket name for which to get the logging information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketLoggingAsync(string Bucket, bool logging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#logging&logging="+logging;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the notification configuration of a bucket.</p> <p>If notifications are not enabled on the bucket, the operation returns an empty <code>NotificationConfiguration</code> element.</p> <p>By default, you must be the bucket owner to read the notification configuration of a bucket. However, the bucket owner can use a bucket policy to grant permission to other users to read this configuration with the <code>s3:GetBucketNotification</code> permission.</p> <p>For more information about setting and reading the notification configuration on a bucket, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html">Setting Up Notification of Bucket Events</a>. For more information about bucket policies, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html">Using Bucket Policies</a>.</p> <p>The following operation is related to <code>GetBucketNotification</code>:</p> <ul> <li> <p> <a>PutBucketNotification</a> </p> </li> </ul>
		/// GetBucketNotificationConfiguration /{Bucket}#notification
		/// </summary>
		/// <param name="Bucket">Name of the bucket for which to get the notification configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketNotificationConfigurationAsync(string Bucket, bool notification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#notification&notification="+notification;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// No longer used, see <a>GetBucketNotificationConfiguration</a>.
		/// GetBucketNotification /{Bucket}#notification&deprecated!
		/// </summary>
		/// <param name="Bucket">Name of the bucket for which to get the notification configuration.</param>
		/// <returns>Success</returns>
		public async Task GetBucketNotificationAsync(string Bucket, bool notification, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#notification&deprecated!&notification="+notification;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the policy status for an Amazon S3 bucket, indicating whether the bucket is public. In order to use this operation, you must have the <code>s3:GetBucketPolicyStatus</code> permission. For more information about Amazon S3 permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying Permissions in a Policy</a>.</p> <p> For more information about when Amazon S3 considers a bucket public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a>. </p> <p>The following operations are related to <code>GetBucketPolicyStatus</code>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html">Using Amazon S3 Block Public Access</a> </p> </li> <li> <p> <a>GetPublicAccessBlock</a> </p> </li> <li> <p> <a>PutPublicAccessBlock</a> </p> </li> <li> <p> <a>DeletePublicAccessBlock</a> </p> </li> </ul>
		/// GetBucketPolicyStatus /{Bucket}#policyStatus
		/// </summary>
		/// <param name="Bucket">The name of the Amazon S3 bucket whose policy status you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task GetBucketPolicyStatusAsync(string Bucket, bool policyStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#policyStatus&policyStatus="+policyStatus;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the request payment configuration of a bucket. To use this version of the operation, you must be the bucket owner. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html">Requester Pays Buckets</a>.</p> <p>The following operations are related to <code>GetBucketRequestPayment</code>:</p> <ul> <li> <p> <a>ListObjects</a> </p> </li> </ul>
		/// GetBucketRequestPayment /{Bucket}#requestPayment
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the payment request configuration</param>
		/// <returns>Success</returns>
		public async Task GetBucketRequestPaymentAsync(string Bucket, bool requestPayment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#requestPayment&requestPayment="+requestPayment;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the versioning state of a bucket.</p> <p>To retrieve the versioning state of a bucket, you must be the bucket owner.</p> <p>This implementation also returns the MFA Delete status of the versioning state. If the MFA Delete status is <code>enabled</code>, the bucket owner must use an authentication device to change the versioning state of the bucket.</p> <p>The following operations are related to <code>GetBucketVersioning</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>PutObject</a> </p> </li> <li> <p> <a>DeleteObject</a> </p> </li> </ul>
		/// GetBucketVersioning /{Bucket}#versioning
		/// </summary>
		/// <param name="Bucket">The name of the bucket for which to get the versioning information.</param>
		/// <returns>Success</returns>
		public async Task GetBucketVersioningAsync(string Bucket, bool versioning, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#versioning&versioning="+versioning;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the access control list (ACL) of an object. To use this operation, you must have READ_ACP access to the object.</p> <p> <b>Versioning</b> </p> <p>By default, GET returns ACL information about the current version of an object. To return ACL information about a different version, use the versionId subresource.</p> <p>The following operations are related to <code>GetObjectAcl</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>DeleteObject</a> </p> </li> <li> <p> <a>PutObject</a> </p> </li> </ul>
		/// GetObjectAcl /{Bucket}/{Key}#acl
		/// </summary>
		/// <param name="Bucket"><p>The bucket name that contains the object for which to get the ACL information. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">The key of the object for which to get the ACL information.</param>
		/// <param name="versionId">VersionId used to reference a specific version of the object.</param>
		/// <returns>Success</returns>
		public async Task GetObjectAclAsync(string Bucket, string Key, string versionId, bool acl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#acl&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&acl="+acl;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an object's current Legal Hold status. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking Objects</a>.
		/// GetObjectLegalHold /{Bucket}/{Key}#legal-hold
		/// </summary>
		/// <param name="Bucket"><p>The bucket name containing the object whose Legal Hold status you want to retrieve. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">The key name for the object whose Legal Hold status you want to retrieve.</param>
		/// <param name="versionId">The version ID of the object whose Legal Hold status you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task GetObjectLegalHoldAsync(string Bucket, string Key, string versionId, bool legal_hold, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#legal-hold&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&legal_hold="+legal_hold;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Object Lock configuration for a bucket. The rule specified in the Object Lock configuration will be applied by default to every new object placed in the specified bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking Objects</a>.
		/// GetObjectLockConfiguration /{Bucket}#object-lock
		/// </summary>
		/// <param name="Bucket">The bucket whose Object Lock configuration you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task GetObjectLockConfigurationAsync(string Bucket, bool object_lock, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#object-lock&object_lock="+object_lock;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves an object's retention settings. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Locking Objects</a>.
		/// GetObjectRetention /{Bucket}/{Key}#retention
		/// </summary>
		/// <param name="Bucket"><p>The bucket name containing the object whose retention settings you want to retrieve. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="Key">The key name for the object whose retention settings you want to retrieve.</param>
		/// <param name="versionId">The version ID for the object whose retention settings you want to retrieve.</param>
		/// <returns>Success</returns>
		public async Task GetObjectRetentionAsync(string Bucket, string Key, string versionId, bool retention, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#retention&versionId=" + (versionId==null? "" : Uri.EscapeDataString(versionId))+"&retention="+retention;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Return torrent files from a bucket. BitTorrent can save you bandwidth when you're distributing large files. For more information about BitTorrent, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html">Amazon S3 Torrent</a>.</p> <note> <p>You can get torrent only for objects that are less than 5 GB in size and that are not encrypted using server-side encryption with customer-provided encryption key.</p> </note> <p>To use GET, you must have READ access to the object.</p> <p>The following operation is related to <code>GetObjectTorrent</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> </ul>
		/// GetObjectTorrent /{Bucket}/{Key}#torrent
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the object for which to get the torrent files.</param>
		/// <param name="Key">The object key for which to get the information.</param>
		/// <returns>Success</returns>
		public async Task GetObjectTorrentAsync(string Bucket, string Key, bool torrent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#torrent&torrent="+torrent;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the analytics configurations for the bucket. You can have up to 1,000 analytics configurations per bucket.</p> <p>This operation supports list pagination and does not return more than 100 configurations at a time. You should always check the <code>IsTruncated</code> element in the response. If there are no more configurations to list, <code>IsTruncated</code> is set to false. If there are more configurations to list, <code>IsTruncated</code> is set to true, and there will be a value in <code>NextContinuationToken</code>. You use the <code>NextContinuationToken</code> value to continue the pagination of the list by passing the value in continuation-token in the request to <code>GET</code> the next page.</p> <p>To use this operation, you must have permissions to perform the <code>s3:GetAnalyticsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about Amazon S3 analytics feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/analytics-storage-class.html">Amazon S3 Analytics – Storage Class Analysis</a>. </p> <p>The following operations are related to <code>ListBucketAnalyticsConfigurations</code>:</p> <ul> <li> <p> <a>GetBucketAnalyticsConfiguration</a> </p> </li> <li> <p> <a>DeleteBucketAnalyticsConfiguration</a> </p> </li> <li> <p> <a>PutBucketAnalyticsConfiguration</a> </p> </li> </ul>
		/// ListBucketAnalyticsConfigurations /{Bucket}#analytics
		/// </summary>
		/// <param name="Bucket">The name of the bucket from which analytics configurations are retrieved.</param>
		/// <param name="continuation_token">The ContinuationToken that represents a placeholder from where this request should begin.</param>
		/// <returns>Success</returns>
		public async Task ListBucketAnalyticsConfigurationsAsync(string Bucket, string continuation_token, bool analytics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#analytics&continuation_token=" + (continuation_token==null? "" : Uri.EscapeDataString(continuation_token))+"&analytics="+analytics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of inventory configurations for the bucket. You can have up to 1,000 analytics configurations per bucket.</p> <p>This operation supports list pagination and does not return more than 100 configurations at a time. Always check the <code>IsTruncated</code> element in the response. If there are no more configurations to list, <code>IsTruncated</code> is set to false. If there are more configurations to list, <code>IsTruncated</code> is set to true, and there is a value in <code>NextContinuationToken</code>. You use the <code>NextContinuationToken</code> value to continue the pagination of the list by passing the value in continuation-token in the request to <code>GET</code> the next page.</p> <p> To use this operation, you must have permissions to perform the <code>s3:GetInventoryConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For information about the Amazon S3 inventory feature, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html">Amazon S3 Inventory</a> </p> <p>The following operations are related to <code>ListBucketInventoryConfigurations</code>:</p> <ul> <li> <p> <a>GetBucketInventoryConfiguration</a> </p> </li> <li> <p> <a>DeleteBucketInventoryConfiguration</a> </p> </li> <li> <p> <a>PutBucketInventoryConfiguration</a> </p> </li> </ul>
		/// ListBucketInventoryConfigurations /{Bucket}#inventory
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the inventory configurations to retrieve.</param>
		/// <param name="continuation_token">The marker used to continue an inventory configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.</param>
		/// <returns>Success</returns>
		public async Task ListBucketInventoryConfigurationsAsync(string Bucket, string continuation_token, bool inventory, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#inventory&continuation_token=" + (continuation_token==null? "" : Uri.EscapeDataString(continuation_token))+"&inventory="+inventory;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the metrics configurations for the bucket. The metrics configurations are only for the request metrics of the bucket and do not provide information on daily storage metrics. You can have up to 1,000 configurations per bucket.</p> <p>This operation supports list pagination and does not return more than 100 configurations at a time. Always check the <code>IsTruncated</code> element in the response. If there are no more configurations to list, <code>IsTruncated</code> is set to false. If there are more configurations to list, <code>IsTruncated</code> is set to true, and there is a value in <code>NextContinuationToken</code>. You use the <code>NextContinuationToken</code> value to continue the pagination of the list by passing the value in <code>continuation-token</code> in the request to <code>GET</code> the next page.</p> <p>To use this operation, you must have permissions to perform the <code>s3:GetMetricsConfiguration</code> action. The bucket owner has this permission by default. The bucket owner can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <p>For more information about metrics configurations and CloudWatch request metrics, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/cloudwatch-monitoring.html">Monitoring Metrics with Amazon CloudWatch</a>.</p> <p>The following operations are related to <code>ListBucketMetricsConfigurations</code>:</p> <ul> <li> <p> <a>PutBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>GetBucketMetricsConfiguration</a> </p> </li> <li> <p> <a>DeleteBucketMetricsConfiguration</a> </p> </li> </ul>
		/// ListBucketMetricsConfigurations /{Bucket}#metrics
		/// </summary>
		/// <param name="Bucket">The name of the bucket containing the metrics configurations to retrieve.</param>
		/// <param name="continuation_token">The marker that is used to continue a metrics configuration listing that has been truncated. Use the NextContinuationToken from a previously truncated list response to continue the listing. The continuation token is an opaque value that Amazon S3 understands.</param>
		/// <returns>Success</returns>
		public async Task ListBucketMetricsConfigurationsAsync(string Bucket, string continuation_token, bool metrics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#metrics&continuation_token=" + (continuation_token==null? "" : Uri.EscapeDataString(continuation_token))+"&metrics="+metrics;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all buckets owned by the authenticated sender of the request.
		/// ListBuckets /
		/// </summary>
		/// <returns>Success</returns>
		public async Task ListBucketsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/";
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>This operation lists in-progress multipart uploads. An in-progress multipart upload is a multipart upload that has been initiated using the Initiate Multipart Upload request, but has not yet been completed or aborted.</p> <p>This operation returns at most 1,000 multipart uploads in the response. 1,000 multipart uploads is the maximum number of uploads a response can include, which is also the default value. You can further limit the number of uploads in a response by specifying the <code>max-uploads</code> parameter in the response. If additional multipart uploads satisfy the list criteria, the response will contain an <code>IsTruncated</code> element with the value true. To list the additional multipart uploads, use the <code>key-marker</code> and <code>upload-id-marker</code> request parameters.</p> <p>In the response, the uploads are sorted by key. If your application has initiated more than one multipart upload using the same object key, then uploads in the response are first sorted by key. Additionally, uploads are sorted in ascending order within each key by the upload initiation time.</p> <p>For more information on multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart Upload</a>.</p> <p>For information on permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and Permissions</a>.</p> <p>The following operations are related to <code>ListMultipartUploads</code>:</p> <ul> <li> <p> <a>CreateMultipartUpload</a> </p> </li> <li> <p> <a>UploadPart</a> </p> </li> <li> <p> <a>CompleteMultipartUpload</a> </p> </li> <li> <p> <a>ListParts</a> </p> </li> <li> <p> <a>AbortMultipartUpload</a> </p> </li> </ul>
		/// ListMultipartUploads /{Bucket}#uploads
		/// </summary>
		/// <param name="Bucket"><p>Name of the bucket to which the multipart upload was initiated. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="delimiter"><p>Character you use to group keys.</p> <p>All keys that contain the same string between the prefix, if specified, and the first occurrence of the delimiter after the prefix are grouped under a single result element, <code>CommonPrefixes</code>. If you don't specify the prefix parameter, then the substring starts at the beginning of the key. The keys that are grouped under <code>CommonPrefixes</code> result element are not returned elsewhere in the response.</p></param>
		/// <param name="key_marker"><p>Together with upload-id-marker, this parameter specifies the multipart upload after which listing should begin.</p> <p>If <code>upload-id-marker</code> is not specified, only the keys lexicographically greater than the specified <code>key-marker</code> will be included in the list.</p> <p>If <code>upload-id-marker</code> is specified, any multipart uploads for a key equal to the <code>key-marker</code> might also be included, provided those multipart uploads have upload IDs lexicographically greater than the specified <code>upload-id-marker</code>.</p></param>
		/// <param name="max_uploads">Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response.</param>
		/// <param name="prefix">Lists in-progress uploads only for those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different grouping of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.)</param>
		/// <param name="upload_id_marker">Together with key-marker, specifies the multipart upload after which listing should begin. If key-marker is not specified, the upload-id-marker parameter is ignored. Otherwise, any multipart uploads for a key equal to the key-marker might be included in the list only if they have an upload ID lexicographically greater than the specified <code>upload-id-marker</code>.</param>
		/// <param name="MaxUploads">Pagination limit</param>
		/// <param name="KeyMarker">Pagination token</param>
		/// <param name="UploadIdMarker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task ListMultipartUploadsAsync(string Bucket, string delimiter, ListMultipartUploadsOutputEncodingType encoding_type, string key_marker, int max_uploads, string prefix, string upload_id_marker, string MaxUploads, string KeyMarker, string UploadIdMarker, bool uploads, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#uploads&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&encoding_type=" + encoding_type+"&key_marker=" + (key_marker==null? "" : Uri.EscapeDataString(key_marker))+"&max_uploads="+max_uploads+"&prefix=" + (prefix==null? "" : Uri.EscapeDataString(prefix))+"&upload_id_marker=" + (upload_id_marker==null? "" : Uri.EscapeDataString(upload_id_marker))+"&MaxUploads=" + (MaxUploads==null? "" : Uri.EscapeDataString(MaxUploads))+"&KeyMarker=" + (KeyMarker==null? "" : Uri.EscapeDataString(KeyMarker))+"&UploadIdMarker=" + (UploadIdMarker==null? "" : Uri.EscapeDataString(UploadIdMarker))+"&uploads="+uploads;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns metadata about all of the versions of objects in a bucket. You can also use request parameters as selection criteria to return metadata about a subset of all the object versions. </p> <note> <p> A 200 OK response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately.</p> </note> <p>To use this operation, you must have READ access to the bucket.</p> <p>The following operations are related to <code>ListObjectVersions</code>:</p> <ul> <li> <p> <a>ListObjectsV2</a> </p> </li> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>PutObject</a> </p> </li> <li> <p> <a>DeleteObject</a> </p> </li> </ul>
		/// ListObjectVersions /{Bucket}#versions
		/// </summary>
		/// <param name="Bucket"><p>The bucket name that contains the objects. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="delimiter">A delimiter is a character that you specify to group keys. All keys that contain the same string between the <code>prefix</code> and the first occurrence of the delimiter are grouped under a single result element in CommonPrefixes. These groups are counted as one result against the max-keys limitation. These keys are not returned elsewhere in the response.</param>
		/// <param name="key_marker">Specifies the key to start with when listing objects in a bucket.</param>
		/// <param name="max_keys">Sets the maximum number of keys returned in the response. By default the API returns up to 1,000 key names. The response might contain fewer keys but will never contain more. If additional keys satisfy the search criteria, but were not returned because max-keys was exceeded, the response contains &lt;isTruncated&gt;true&lt;/isTruncated&gt;. To return the additional keys, see key-marker and version-id-marker.</param>
		/// <param name="prefix">Use this parameter to select only those keys that begin with the specified prefix. You can use prefixes to separate a bucket into different groupings of keys. (You can think of using prefix to make groups in the same way you'd use a folder in a file system.) You can use prefix with delimiter to roll up numerous objects into a single result under CommonPrefixes. </param>
		/// <param name="version_id_marker">Specifies the object version you want to start listing from.</param>
		/// <param name="MaxKeys">Pagination limit</param>
		/// <param name="KeyMarker">Pagination token</param>
		/// <param name="VersionIdMarker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task ListObjectVersionsAsync(string Bucket, string delimiter, ListMultipartUploadsOutputEncodingType encoding_type, string key_marker, int max_keys, string prefix, string version_id_marker, string MaxKeys, string KeyMarker, string VersionIdMarker, bool versions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#versions&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&encoding_type=" + encoding_type+"&key_marker=" + (key_marker==null? "" : Uri.EscapeDataString(key_marker))+"&max_keys="+max_keys+"&prefix=" + (prefix==null? "" : Uri.EscapeDataString(prefix))+"&version_id_marker=" + (version_id_marker==null? "" : Uri.EscapeDataString(version_id_marker))+"&MaxKeys=" + (MaxKeys==null? "" : Uri.EscapeDataString(MaxKeys))+"&KeyMarker=" + (KeyMarker==null? "" : Uri.EscapeDataString(KeyMarker))+"&VersionIdMarker=" + (VersionIdMarker==null? "" : Uri.EscapeDataString(VersionIdMarker))+"&versions="+versions;
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request parameters as selection criteria to return a subset of the objects in a bucket. A <code>200 OK</code> response can contain valid or invalid XML. Make sure to design your application to parse the contents of the response and handle it appropriately.</p> <p>To use this operation, you must have READ access to the bucket.</p> <p>To use this operation in an AWS Identity and Access Management (IAM) policy, you must have permissions to perform the <code>s3:ListBucket</code> action. The bucket owner has this permission by default and can grant this permission to others. For more information about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3 Resources</a>.</p> <important> <p>This section describes the latest revision of the API. We recommend that you use this revised API for application development. For backward compatibility, Amazon S3 continues to support the prior version of this API, <a>ListObjects</a>.</p> </important> <p>To get a list of your buckets, see <a>ListBuckets</a>.</p> <p>The following operations are related to <code>ListObjectsV2</code>:</p> <ul> <li> <p> <a>GetObject</a> </p> </li> <li> <p> <a>PutObject</a> </p> </li> <li> <p> <a>CreateBucket</a> </p> </li> </ul>
		/// ListObjectsV2 /{Bucket}#list-type=2
		/// </summary>
		/// <param name="Bucket"><p>Bucket name to list. </p> <p>When using this API with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this operation using an access point through the AWS SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html">Using Access Points</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p></param>
		/// <param name="delimiter">A delimiter is a character you use to group keys.</param>
		/// <param name="encoding_type">Encoding type used by Amazon S3 to encode object keys in the response.</param>
		/// <param name="max_keys">Sets the maximum number of keys returned in the response. By default the API returns up to 1,000 key names. The response might contain fewer keys but will never contain more.</param>
		/// <param name="prefix">Limits the response to keys that begin with the specified prefix.</param>
		/// <param name="continuation_token">ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a token. ContinuationToken is obfuscated and is not a real key.</param>
		/// <param name="fetch_owner">The owner field is not present in listV2 by default, if you want to return owner field with each key in the result then set the fetch owner field to true.</param>
		/// <param name="start_after">StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this specified key. StartAfter can be any key in the bucket.</param>
		/// <param name="MaxKeys">Pagination limit</param>
		/// <param name="ContinuationToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task ListObjectsV2Async(string Bucket, string delimiter, ListMultipartUploadsOutputEncodingType encoding_type, int max_keys, string prefix, string continuation_token, bool fetch_owner, string start_after, string MaxKeys, string ContinuationToken, string list_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"#list-type=2&delimiter=" + (delimiter==null? "" : Uri.EscapeDataString(delimiter))+"&encoding_type=" + encoding_type+"&max_keys="+max_keys+"&prefix=" + (prefix==null? "" : Uri.EscapeDataString(prefix))+"&continuation_token=" + (continuation_token==null? "" : Uri.EscapeDataString(continuation_token))+"&fetch_owner="+fetch_owner+"&start_after=" + (start_after==null? "" : Uri.EscapeDataString(start_after))+"&MaxKeys=" + (MaxKeys==null? "" : Uri.EscapeDataString(MaxKeys))+"&ContinuationToken=" + (ContinuationToken==null? "" : Uri.EscapeDataString(ContinuationToken))+"&list_type=" + (list_type==null? "" : Uri.EscapeDataString(list_type));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads a part by copying data from an existing object as data source. You specify the data source by adding the request header <code>x-amz-copy-source</code> in your request and a byte range by adding the request header <code>x-amz-copy-source-range</code> in your request. </p> <p>The minimum allowable part size for a multipart upload is 5 MB. For more information about multipart upload limits, go to <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html">Quick Facts</a> in the <i>Amazon Simple Storage Service Developer Guide</i>. </p> <note> <p>Instead of using an existing object as part data, you might use the <a>UploadPart</a> operation and provide data in your request.</p> </note> <p>You must initiate a multipart upload before you can upload any part. In response to your initiate request. Amazon S3 returns a unique identifier, the upload ID, that you must include in your upload part request.</p> <p>For more information about using the <code>UploadPartCopy</code> operation, see the following:</p> <ul> <li> <p>For conceptual information about multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart Upload</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> </li> <li> <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> </li> <li> <p>For information about copying objects using a single atomic operation vs. the multipart upload, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectOperations.html">Operations on Objects</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> </li> <li> <p>For information about using server-side encryption with customer-provided encryption keys with the UploadPartCopy operation, see <a>CopyObject</a> and <a>UploadPart</a>.</p> </li> </ul> <p>Note the following additional considerations about the request headers <code>x-amz-copy-source-if-match</code>, <code>x-amz-copy-source-if-none-match</code>, <code>x-amz-copy-source-if-unmodified-since</code>, and <code>x-amz-copy-source-if-modified-since</code>:</p> <p> </p> <ul> <li> <p> <b>Consideration 1</b> - If both of the <code>x-amz-copy-source-if-match</code> and <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the request as follows:</p> <p> <code>x-amz-copy-source-if-match</code> condition evaluates to <code>true</code>, and;</p> <p> <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to <code>false</code>;</p> <p>Amazon S3 returns <code>200 OK</code> and copies the data. </p> </li> <li> <p> <b>Consideration 2</b> - If both of the <code>x-amz-copy-source-if-none-match</code> and <code>x-amz-copy-source-if-modified-since</code> headers are present in the request as follows:</p> <p> <code>x-amz-copy-source-if-none-match</code> condition evaluates to <code>false</code>, and;</p> <p> <code>x-amz-copy-source-if-modified-since</code> condition evaluates to <code>true</code>;</p> <p>Amazon S3 returns <code>412 Precondition Failed</code> response code. </p> </li> </ul> <p> <b>Versioning</b> </p> <p>If your bucket has versioning enabled, you could have multiple versions of the same object. By default, <code>x-amz-copy-source</code> identifies the current version of the object to copy. If the current version is a delete marker and you don't specify a versionId in the <code>x-amz-copy-source</code>, Amazon S3 returns a 404 error, because the object does not exist. If you specify versionId in the <code>x-amz-copy-source</code> and the versionId is a delete marker, Amazon S3 returns an HTTP 400 error, because you are not allowed to specify a delete marker as a version for the <code>x-amz-copy-source</code>. </p> <p>You can optionally specify a specific version of the source object to copy by adding the <code>versionId</code> subresource as shown in the following example:</p> <p> <code>x-amz-copy-source: /bucket/object?versionId=version id</code> </p> <p class="title"> <b>Special Errors</b> </p> <ul> <li> <p class="title"> <b/> </p> <ul> <li> <p> <i>Code: NoSuchUpload</i> </p> </li> <li> <p> <i>Cause: The specified multipart upload does not exist. The upload ID might be invalid, or the multipart upload might have been aborted or completed.</i> </p> </li> <li> <p> <i>HTTP Status Code: 404 Not Found</i> </p> </li> </ul> </li> <li> <p class="title"> <b/> </p> <ul> <li> <p> <i>Code: InvalidRequest</i> </p> </li> <li> <p> <i>Cause: The specified copy source is not supported as a byte-range copy source.</i> </p> </li> <li> <p> <i>HTTP Status Code: 400 Bad Request</i> </p> </li> </ul> </li> </ul> <p class="title"> <b>Related Resources</b> </p> <ul> <li> <p> <a>CreateMultipartUpload</a> </p> </li> <li> <p> <a>UploadPart</a> </p> </li> <li> <p> <a>CompleteMultipartUpload</a> </p> </li> <li> <p> <a>AbortMultipartUpload</a> </p> </li> <li> <p> <a>ListParts</a> </p> </li> <li> <p> <a>ListMultipartUploads</a> </p> </li> </ul>
		/// UploadPartCopy /{Bucket}/{Key}#x-amz-copy-source&partNumber&uploadId
		/// </summary>
		/// <param name="Bucket">The bucket name.</param>
		/// <param name="Key">Object key for which the multipart upload was initiated.</param>
		/// <param name="partNumber">Part number of part being copied. This is a positive integer between 1 and 10,000.</param>
		/// <param name="uploadId">Upload ID identifying the multipart upload whose part is being copied.</param>
		/// <returns>Success</returns>
		public async Task UploadPartCopyAsync(string Bucket, string Key, int partNumber, string uploadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/"+ (Bucket==null? "" : Uri.EscapeDataString(Bucket))+"/"+ (Key==null? "" : Uri.EscapeDataString(Key))+"#x-amz-copy-source&partNumber&uploadId&partNumber="+partNumber+"&uploadId=" + (uploadId==null? "" : Uri.EscapeDataString(uploadId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
