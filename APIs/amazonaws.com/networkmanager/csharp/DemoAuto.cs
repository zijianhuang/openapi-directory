//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateCustomerGatewayResponse
	{
		
		/// <summary>
		/// Describes the association between a customer gateway, a device, and a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation CustomerGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateLinkResponse
	{
		
		/// <summary>
		/// Describes the association between a device and a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation LinkAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeviceResponse
	{
		
		/// <summary>
		/// Describes a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	/// <summary>
	/// Describes a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGlobalNetworkResponse
	{
		
		/// <summary>
		/// Describes a global network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLinkResponse
	{
		
		/// <summary>
		/// Describes a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSiteResponse
	{
		
		/// <summary>
		/// Describes a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteDeviceResponse
	{
		
		/// <summary>
		/// Describes a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteGlobalNetworkResponse
	{
		
		/// <summary>
		/// Describes a global network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteLinkResponse
	{
		
		/// <summary>
		/// Describes a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteSiteResponse
	{
		
		/// <summary>
		/// Describes a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeregisterTransitGatewayResponse
	{
		
		/// <summary>
		/// Describes the registration of a transit gateway to a global network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration TransitGatewayRegistration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeGlobalNetworksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork[] GlobalNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateCustomerGatewayResponse
	{
		
		/// <summary>
		/// Describes the association between a customer gateway, a device, and a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation CustomerGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DisassociateLinkResponse
	{
		
		/// <summary>
		/// Describes the association between a device and a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation LinkAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetCustomerGatewayAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation[] CustomerGatewayAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLinkAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation[] LinkAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetSitesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Site[] Sites { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GetTransitGatewayRegistrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration[] TransitGatewayRegistrations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayResponse
	{
		
		/// <summary>
		/// Describes the registration of a transit gateway to a global network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration TransitGatewayRegistration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceResponse
	{
		
		/// <summary>
		/// Describes a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGlobalNetworkResponse
	{
		
		/// <summary>
		/// Describes a global network.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLinkResponse
	{
		
		/// <summary>
		/// Describes a link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSiteResponse
	{
		
		/// <summary>
		/// Describes a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateCustomerGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayArn { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	/// <summary>
	/// Describes the association between a customer gateway, a device, and a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CustomerGatewayAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CustomerGatewayAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateLinkRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	/// <summary>
	/// Describes the association between a device and a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class LinkAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociationLinkAssociationState LinkAssociationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LinkAssociationLinkAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Describes bandwidth information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Bandwidth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownloadSpeed { get; set; }
	}
	
	/// <summary>
	/// Describes a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeviceState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGlobalNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a global network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GlobalNetwork
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetworkState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalNetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LinkState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LinkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes a site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Site
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SiteState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SiteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CustomerGatewayAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Describes the registration of a transit gateway to a global network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRegistration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		/// <summary>
		/// Describes the status of a transit gateway registration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistrationStateReason State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalNetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LinkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LinkAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SiteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceRequest
	{
		
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a transit gateway registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TransitGatewayRegistrationStateReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistrationStateReasonCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayRegistrationStateReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TransitGatewayRegistrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateGlobalNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. </p> <p>You can only associate customer gateways that are connected to a VPN attachment on a transit gateway. The transit gateway must be registered in your global network. When you register a transit gateway, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by <code>transit-gateway-id</code>.</p> <p>You cannot associate a customer gateway with more than one device and link. </p>
		/// AssociateCustomerGateway /global-networks/{globalNetworkId}/customer-gateway-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<AssociateCustomerGatewayResponse> AssociateCustomerGatewayAsync(string globalNetworkId, AssociateCustomerGatewayBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateCustomerGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the association information for customer gateways that are associated with devices and links in your global network.
		/// GetCustomerGatewayAssociations /global-networks/{globalNetworkId}/customer-gateway-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="customerGatewayArns">One or more customer gateway Amazon Resource Names (ARNs). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonec2.html#amazonec2-resources-for-iam-policies">Resources Defined by Amazon EC2</a>. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCustomerGatewayAssociationsResponse> GetCustomerGatewayAssociationsAsync(string globalNetworkId, String[] customerGatewayArns, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations&"+String.Join("&", customerGatewayArns.Select(z => $"customerGatewayArns={z}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetCustomerGatewayAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
		/// AssociateLink /global-networks/{globalNetworkId}/link-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<AssociateLinkResponse> AssociateLinkAsync(string globalNetworkId, AssociateLinkBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/link-associations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<AssociateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
		/// GetLinkAssociations /global-networks/{globalNetworkId}/link-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="linkId">The ID of the link.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetLinkAssociationsResponse> GetLinkAssociationsAsync(string globalNetworkId, string deviceId, string linkId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/link-associations&deviceId=" + (deviceId==null? "" : Uri.EscapeDataString(deviceId))+"&linkId=" + (linkId==null? "" : Uri.EscapeDataString(linkId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLinkAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console.
		/// CreateDevice /global-networks/{globalNetworkId}/devices
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<CreateDeviceResponse> CreateDeviceAsync(string globalNetworkId, CreateDeviceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/devices";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your devices in a global network.
		/// GetDevices /global-networks/{globalNetworkId}/devices
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="deviceIds">One or more device IDs. The maximum is 10.</param>
		/// <param name="siteId">The ID of the site.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetDevicesResponse> GetDevicesAsync(string globalNetworkId, String[] deviceIds, string siteId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/devices&"+String.Join("&", deviceIds.Select(z => $"deviceIds={z}"))+"&siteId=" + (siteId==null? "" : Uri.EscapeDataString(siteId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new, empty global network.
		/// CreateGlobalNetwork /global-networks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGlobalNetworkResponse> CreateGlobalNetworkAsync(CreateGlobalNetworkBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateGlobalNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate <code>Get*</code> action. For example, to list the transit gateways in your global network, use <a>GetTransitGatewayRegistrations</a>.
		/// DescribeGlobalNetworks /global-networks
		/// </summary>
		/// <param name="globalNetworkIds">The IDs of one or more global networks. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeGlobalNetworksResponse> DescribeGlobalNetworksAsync(String[] globalNetworkIds, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks?"+String.Join("&", globalNetworkIds.Select(z => $"globalNetworkIds={z}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeGlobalNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new link for a specified site.
		/// CreateLink /global-networks/{globalNetworkId}/links
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<CreateLinkResponse> CreateLinkAsync(string globalNetworkId, CreateLinkBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/links";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about one or more links in a specified global network.</p> <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p>
		/// GetLinks /global-networks/{globalNetworkId}/links
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="linkIds">One or more link IDs. The maximum is 10.</param>
		/// <param name="siteId">The ID of the site.</param>
		/// <param name="type">The link type.</param>
		/// <param name="provider">The link provider.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetLinksResponse> GetLinksAsync(string globalNetworkId, String[] linkIds, string siteId, string type, string provider, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/links&"+String.Join("&", linkIds.Select(z => $"linkIds={z}"))+"&siteId=" + (siteId==null? "" : Uri.EscapeDataString(siteId))+"&type=" + (type==null? "" : Uri.EscapeDataString(type))+"&provider=" + (provider==null? "" : Uri.EscapeDataString(provider))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetLinksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new site in a global network.
		/// CreateSite /global-networks/{globalNetworkId}/sites
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<CreateSiteResponse> CreateSiteAsync(string globalNetworkId, CreateSiteBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/sites";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateSiteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your sites in a global network.
		/// GetSites /global-networks/{globalNetworkId}/sites
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="siteIds">One or more site IDs. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetSitesResponse> GetSitesAsync(string globalNetworkId, String[] siteIds, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/sites&"+String.Join("&", siteIds.Select(z => $"siteIds={z}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetSitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing device. You must first disassociate the device from any links and customer gateways.
		/// DeleteDevice /global-networks/{globalNetworkId}/devices/{deviceId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <returns>Success</returns>
		public async Task<DeleteDeviceResponse> DeleteDeviceAsync(string globalNetworkId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/devices/"+ (deviceId==null? "" : Uri.EscapeDataString(deviceId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing global network. You must first delete all global network objects (devices, links, and sites) and deregister all transit gateways.
		/// DeleteGlobalNetwork /global-networks/{globalNetworkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<DeleteGlobalNetworkResponse> DeleteGlobalNetworkAsync(string globalNetworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteGlobalNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing link. You must first disassociate the link from any devices and customer gateways.
		/// DeleteLink /global-networks/{globalNetworkId}/links/{linkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="linkId">The ID of the link.</param>
		/// <returns>Success</returns>
		public async Task<DeleteLinkResponse> DeleteLinkAsync(string globalNetworkId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/links/"+ (linkId==null? "" : Uri.EscapeDataString(linkId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing site. The site cannot be associated with any device or link.
		/// DeleteSite /global-networks/{globalNetworkId}/sites/{siteId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="siteId">The ID of the site.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSiteResponse> DeleteSiteAsync(string globalNetworkId, string siteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/sites/"+ (siteId==null? "" : Uri.EscapeDataString(siteId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteSiteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
		/// DeregisterTransitGateway /global-networks/{globalNetworkId}/transit-gateway-registrations/{transitGatewayArn}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="transitGatewayArn">The Amazon Resource Name (ARN) of the transit gateway.</param>
		/// <returns>Success</returns>
		public async Task<DeregisterTransitGatewayResponse> DeregisterTransitGatewayAsync(string globalNetworkId, string transitGatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations/"+ (transitGatewayArn==null? "" : Uri.EscapeDataString(transitGatewayArn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeregisterTransitGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a customer gateway from a device and a link.
		/// DisassociateCustomerGateway /global-networks/{globalNetworkId}/customer-gateway-associations/{customerGatewayArn}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="customerGatewayArn">The Amazon Resource Name (ARN) of the customer gateway. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonec2.html#amazonec2-resources-for-iam-policies">Resources Defined by Amazon EC2</a>.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateCustomerGatewayResponse> DisassociateCustomerGatewayAsync(string globalNetworkId, string customerGatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations/"+ (customerGatewayArn==null? "" : Uri.EscapeDataString(customerGatewayArn));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateCustomerGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link.
		/// DisassociateLink /global-networks/{globalNetworkId}/link-associations#deviceId&linkId
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="deviceId">The ID of the device.</param>
		/// <param name="linkId">The ID of the link.</param>
		/// <returns>Success</returns>
		public async Task<DisassociateLinkResponse> DisassociateLinkAsync(string globalNetworkId, string deviceId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/link-associations#deviceId&linkId&deviceId=" + (deviceId==null? "" : Uri.EscapeDataString(deviceId))+"&linkId=" + (linkId==null? "" : Uri.EscapeDataString(linkId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DisassociateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the transit gateway registrations in a specified global network.
		/// GetTransitGatewayRegistrations /global-networks/{globalNetworkId}/transit-gateway-registrations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <param name="transitGatewayArns">The Amazon Resource Names (ARNs) of one or more transit gateways. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetTransitGatewayRegistrationsResponse> GetTransitGatewayRegistrationsAsync(string globalNetworkId, String[] transitGatewayArns, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations&"+String.Join("&", transitGatewayArns.Select(z => $"transitGatewayArns={z}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<GetTransitGatewayRegistrationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers a transit gateway in your global network. The transit gateway can be in any AWS Region, but it must be owned by the same AWS account that owns the global network. You cannot register a transit gateway in more than one global network.
		/// RegisterTransitGateway /global-networks/{globalNetworkId}/transit-gateway-registrations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.</param>
		/// <returns>Success</returns>
		public async Task<RegisterTransitGatewayResponse> RegisterTransitGatewayAsync(string globalNetworkId, RegisterTransitGatewayBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/global-networks/"+ (globalNetworkId==null? "" : Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<RegisterTransitGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for a specified resource.
		/// ListTagsForResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tags a specified resource.
		/// TagResource /tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a specified resource.
		/// UntagResource /tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The tag keys to remove from the specified resource.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, TagKey[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/tags/"+ (resourceArn==null? "" : Uri.EscapeDataString(resourceArn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateCustomerGatewayBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the customer gateway. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonec2.html#amazonec2-resources-for-iam-policies">Resources Defined by Amazon EC2</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayArn { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AssociateLinkBody
	{
		
		/// <summary>
		/// The ID of the device.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateDeviceBody
	{
		
		/// <summary>
		/// <p>A description of the device.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// <p>The vendor of the device.</p> <p>Length Constraints: Maximum length of 128 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		/// <summary>
		/// <p>The model of the device.</p> <p>Length Constraints: Maximum length of 128 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		/// <summary>
		/// <p>The serial number of the device.</p> <p>Length Constraints: Maximum length of 128 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateGlobalNetworkBody
	{
		
		/// <summary>
		/// <p>A description of the global network.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateLinkBody
	{
		
		/// <summary>
		/// <p>A description of the link.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The type of the link.</p> <p>Constraints: Cannot include the following characters: | \ ^</p> <p>Length Constraints: Maximum length of 128 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Bandwidth { get; set; }
		
		/// <summary>
		/// <p>The provider of the link.</p> <p>Constraints: Cannot include the following characters: | \ ^</p> <p>Length Constraints: Maximum length of 128 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateSiteBody
	{
		
		/// <summary>
		/// <p>A description of your site.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Location { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RegisterTransitGatewayBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the transit gateway. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazonec2.html#amazonec2-resources-for-iam-policies">Resources Defined by Amazon EC2</a>.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TagResourceBody
	{
		
		/// <summary>
		/// The tags to apply to the specified resource.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
