//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace My.Demo.Client
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Net.Http;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Placeholder documentation for BatchUpdateScheduleResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateScheduleResponse
	{
		
		/// <summary>
		/// List of actions that have been created in the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionCreateResult Creates { get; set; }
		
		/// <summary>
		/// List of actions that have been deleted from the schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionDeleteResult Deletes { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for OutputDestination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputDestination
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaPackageOutputDestinationSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageOutputDestinationSettings[] MediaPackageSettings { get; set; }
		
		/// <summary>
		/// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramChannelDestinationSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestinationSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestinationSettings[] Settings { get; set; }
	}
	
	/// <summary>
	/// Avail Blanking
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailBlanking
	{
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation AvailBlankingImage { get; set; }
		
		/// <summary>
		/// Avail Blanking State
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailBlankingState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AvailBlankingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Avail Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailConfiguration
	{
		
		/// <summary>
		/// Avail Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailSettings AvailSettings { get; set; }
	}
	
	/// <summary>
	/// Blackout Slate
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BlackoutSlate
	{
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation BlackoutSlateImage { get; set; }
		
		/// <summary>
		/// Blackout Slate Network End Blackout
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlateNetworkEndBlackout NetworkEndBlackout { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation NetworkEndBlackoutImage { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin34Max34
		/// Max length: 34
		/// Min length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength=34)]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Blackout Slate State
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlateState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlackoutSlateNetworkEndBlackout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlackoutSlateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Global Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class GlobalConfiguration
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMinNegative60Max60
		/// Minimum: -60
		/// Maximum: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-60, 60)]
		public System.Nullable<System.Int32> InitialAudioGain { get; set; }
		
		/// <summary>
		/// Global Configuration Input End Action
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationInputEndAction InputEndAction { get; set; }
		
		/// <summary>
		/// Input Loss Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLossBehavior InputLossBehavior { get; set; }
		
		/// <summary>
		/// Global Configuration Output Locking Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationOutputLockingMode OutputLockingMode { get; set; }
		
		/// <summary>
		/// Global Configuration Output Timing Source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationOutputTimingSource OutputTimingSource { get; set; }
		
		/// <summary>
		/// Global Configuration Low Framerate Inputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfigurationSupportLowFramerateInputs SupportLowFramerateInputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationInputEndAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH_AND_LOOP_INPUTS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationOutputLockingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPOCH_LOCKING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_LOCKING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationOutputTimingSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_CLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_CLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationSupportLowFramerateInputs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Nielsen Configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NielsenConfiguration
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DistributorId { get; set; }
		
		/// <summary>
		/// State of Nielsen PCM to ID3 tagging
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfigurationNielsenPcmToId3Tagging NielsenPcmToId3Tagging { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NielsenConfigurationNielsenPcmToId3Tagging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Timecode Config
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TimecodeConfig
	{
		
		/// <summary>
		/// Timecode Config Source
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfigSource Source { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max1000000
		/// Minimum: 1
		/// Maximum: 1000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 1000000)]
		public System.Nullable<System.Int32> SyncThreshold { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeConfigSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEMCLOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 2,
	}
	
	/// <summary>
	/// Placeholder documentation for InputAttachment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputAttachment
	{
		
		/// <summary>
		/// The settings for Automatic Input Failover.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutomaticInputFailoverSettings AutomaticInputFailoverSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputId { get; set; }
		
		/// <summary>
		/// Live Event input parameters. There can be multiple inputs in a single Live Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettings InputSettings { get; set; }
	}
	
	/// <summary>
	/// codec in increasing order of complexity
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEVC = 2,
	}
	
	/// <summary>
	/// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_50_MBPS = 2,
	}
	
	/// <summary>
	/// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UHD = 2,
	}
	
	/// <summary>
	/// Placeholder documentation for CreateInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Input
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
	}
	
	/// <summary>
	/// Endpoint settings for a PUSH type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDestinationRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	/// <summary>
	/// Settings for an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The settings for a MediaConnect Flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaConnectFlowRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	/// <summary>
	/// Settings for for a PULL type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSourceRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputSecurityGroupResponse
	{
		
		/// <summary>
		/// An Input Security Group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup SecurityGroup { get; set; }
	}
	
	/// <summary>
	/// An IPv4 CIDR to whitelist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputWhitelistRuleCidr
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexResponse
	{
		
		/// <summary>
		/// The multiplex object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Multiplex Multiplex { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for CreateMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexProgramResponse
	{
		
		/// <summary>
		/// The multiplex program object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgram MultiplexProgram { get; set; }
	}
	
	/// <summary>
	/// Indicates which pipeline is preferred by the multiplex for program ingest.
	///If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
	///it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
	///it will not switch back to the other pipeline based on it recovering to a healthy state,
	///it will only switch if the active pipeline becomes unhealthy.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PreferredChannelPipeline
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENTLY_ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_1 = 2,
	}
	
	/// <summary>
	/// Transport stream service descriptor configuration for the Multiplex program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgramServiceDescriptor
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMax256
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMax256
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256)]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// The video configuration for each program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexVideoSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max100000000
		/// Minimum: 100000
		/// Maximum: 100000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 100000000)]
		public System.Nullable<System.Int32> ConstantBitrate { get; set; }
		
		/// <summary>
		/// Statmux rate control settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexStatmuxVideoSettings StatmuxSettings { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteChannelResponseChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteChannelResponseLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelineDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteChannelResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteChannelResponseChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteChannelResponseLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteChannelResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMultiplexResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteMultiplexResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteMultiplexResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteMultiplexProgramResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Packet identifiers map for a given Multiplex program.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DeleteReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DeleteReservationResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Units for duration, e.g. 'MONTHS'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteReservationResponseDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Offering type, e.g. 'NO_UPFRONT'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteReservationResponseOfferingType OfferingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		/// <summary>
		/// Resource configuration (codec, resolution, bitrate, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Current reservation state
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DeleteReservationResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteReservationResponseDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteReservationResponseOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeleteReservationResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeChannelResponseChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeChannelResponseLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelineDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeChannelResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeChannelResponseChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeChannelResponseLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeChannelResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInputResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AttachedChannels { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A standard input has two sources and a single pipeline input only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputResponseInputClass InputClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		/// <summary>
		/// There are two types of input sources, static and dynamic. If an input source is dynamic you can
		///change the source url of the input dynamically using an input switch action. However, the only input type
		///to support a dynamic url at this time is MP4_FILE. By default all input sources are static.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputResponseInputSourceType InputSourceType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlow
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlow[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSource[] Sources { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputResponseType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputResponseInputClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputResponseInputSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_DEVICE = 7,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInputDeviceResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The state of the connection between the input device and AWS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputDeviceResponseConnectionState ConnectionState { get; set; }
		
		/// <summary>
		/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputDeviceResponseDeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		/// <summary>
		/// Settings that describe the active source from the input device, and the video characteristics of that source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The network settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputDeviceResponseType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputDeviceResponseConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputDeviceResponseDeviceSettingsSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputDeviceResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 0,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeInputSecurityGroupResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Inputs { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSecurityGroupState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeInputSecurityGroupResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRule[] WhitelistRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeInputSecurityGroupResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMultiplexResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeMultiplexResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeMultiplexResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeMultiplexProgramResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Packet identifiers map for a given Multiplex program.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeOfferingResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeOfferingResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Units for duration, e.g. 'MONTHS'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeOfferingResponseDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Offering type, e.g. 'NO_UPFRONT'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeOfferingResponseOfferingType OfferingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Resource configuration (codec, resolution, bitrate, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeOfferingResponseDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeOfferingResponseOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeReservationResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Units for duration, e.g. 'MONTHS'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeReservationResponseDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Offering type, e.g. 'NO_UPFRONT'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeReservationResponseOfferingType OfferingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		/// <summary>
		/// Resource configuration (codec, resolution, bitrate, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Current reservation state
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DescribeReservationResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeReservationResponseDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeReservationResponseOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DescribeReservationResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Placeholder documentation for DescribeScheduleResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DescribeScheduleResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfScheduleAction
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListChannelsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListChannelsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelSummary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummary[] Channels { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputDevicesResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInputDevicesResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSummary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSummary[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputSecurityGroupsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInputSecurityGroupsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSecurityGroup
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListInputsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListInputsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInput
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Input[] Inputs { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexProgramsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMultiplexProgramsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexProgramSummary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSummary[] MultiplexPrograms { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListMultiplexesResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListMultiplexesResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexSummary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSummary[] Multiplexes { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListOfferingsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListOfferingsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOffering
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Offering[] Offerings { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListReservationsResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListReservationsResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfReservation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reservation[] Reservations { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ListTagsForResourceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ListTagsForResourceResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for PurchaseOfferingResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseOfferingResponse
	{
		
		/// <summary>
		/// Reserved resources available to use
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for StartChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChannelResponseChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChannelResponseLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelineDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartChannelResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChannelResponseChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChannelResponseLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartChannelResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for StartMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartMultiplexResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartMultiplexResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StartMultiplexResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for StopChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopChannelResponseChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopChannelResponseLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelineDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopChannelResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopChannelResponseChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopChannelResponseLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopChannelResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for StopMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopMultiplexResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopMultiplexResponseState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopMultiplexResponseState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateChannelResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateChannelClassResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelClassResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Channel
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Channel Channel { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputResponse
	{
		
		/// <summary>
		/// Placeholder documentation for Input
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Input Input { get; set; }
	}
	
	/// <summary>
	/// Settings for an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputDeviceResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputDeviceResponse
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The state of the connection between the input device and AWS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateInputDeviceResponseConnectionState ConnectionState { get; set; }
		
		/// <summary>
		/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateInputDeviceResponseDeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		/// <summary>
		/// Settings that describe the active source from the input device, and the video characteristics of that source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The network settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateInputDeviceResponseType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateInputDeviceResponseConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateInputDeviceResponseDeviceSettingsSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateInputDeviceResponseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 0,
	}
	
	/// <summary>
	/// The source to activate (use) from the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceConfiguredInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDMI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDI = 2,
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateInputSecurityGroupResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputSecurityGroupResponse
	{
		
		/// <summary>
		/// An Input Security Group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroup SecurityGroup { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateMultiplexResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexResponse
	{
		
		/// <summary>
		/// The multiplex object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Multiplex Multiplex { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateMultiplexProgramResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexProgramResponse
	{
		
		/// <summary>
		/// The multiplex program object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgram MultiplexProgram { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for UpdateReservationResponse
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReservationResponse
	{
		
		/// <summary>
		/// Reserved resources available to use
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Reservation Reservation { get; set; }
	}
	
	/// <summary>
	/// Aac Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_RECEIVER_MIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_5_1 = 4,
	}
	
	/// <summary>
	/// Aac Input Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROADCASTER_MIXED_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	/// <summary>
	/// Aac Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 2,
	}
	
	/// <summary>
	/// Aac Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	/// <summary>
	/// Aac Raw Format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacRawFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATM_LOAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Aac Spec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSpec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG4 = 1,
	}
	
	/// <summary>
	/// Aac Vbr Quality
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacVbrQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_LOW = 3,
	}
	
	/// <summary>
	/// Aac Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AacSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		/// <summary>
		/// Aac Coding Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Aac Input Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsInputType InputType { get; set; }
		
		/// <summary>
		/// Aac Profile
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsProfile Profile { get; set; }
		
		/// <summary>
		/// Aac Rate Control Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// Aac Raw Format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsRawFormat RawFormat { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleRate { get; set; }
		
		/// <summary>
		/// Aac Spec
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsSpec Spec { get; set; }
		
		/// <summary>
		/// Aac Vbr Quality
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettingsVbrQuality VbrQuality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_RECEIVER_MIX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_5_1 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsInputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BROADCASTER_MIXED_AD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsRawFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATM_LOAS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsSpec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG4 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AacSettingsVbrQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_LOW = 3,
	}
	
	/// <summary>
	/// Ac3 Bitstream Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIALOGUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_AND_EFFECTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE_OVER = 7,
	}
	
	/// <summary>
	/// Ac3 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2_LFE = 3,
	}
	
	/// <summary>
	/// Ac3 Drc Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3DrcProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Ac3 Lfe Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Ac3 Metadata Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Ac3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Ac3Settings
	{
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		/// <summary>
		/// Ac3 Bitstream Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsBitstreamMode BitstreamMode { get; set; }
		
		/// <summary>
		/// Ac3 Coding Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max31
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		/// <summary>
		/// Ac3 Drc Profile
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsDrcProfile DrcProfile { get; set; }
		
		/// <summary>
		/// Ac3 Lfe Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsLfeFilter LfeFilter { get; set; }
		
		/// <summary>
		/// Ac3 Metadata Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3SettingsMetadataControl MetadataControl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIALOGUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_AND_EFFECTS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOICE_OVER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2_LFE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsDrcProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsLfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Ac3SettingsMetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Afd Signaling
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	/// <summary>
	/// M2ts Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class M2tsSettings
	{
		
		/// <summary>
		/// M2ts Absent Input Audio Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsAbsentInputAudioBehavior AbsentInputAudioBehavior { get; set; }
		
		/// <summary>
		/// M2ts Arib
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsArib Arib { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AribCaptionsPid { get; set; }
		
		/// <summary>
		/// M2ts Arib Captions Pid Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsAribCaptionsPidControl AribCaptionsPidControl { get; set; }
		
		/// <summary>
		/// M2ts Audio Buffer Model
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsAudioBufferModel AudioBufferModel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioPids { get; set; }
		
		/// <summary>
		/// M2ts Audio Stream Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsAudioStreamType AudioStreamType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// M2ts Buffer Model
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsBufferModel BufferModel { get; set; }
		
		/// <summary>
		/// M2ts Cc Descriptor
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsCcDescriptor CcDescriptor { get; set; }
		
		/// <summary>
		/// DVB Network Information Table (NIT)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbNitSettings DvbNitSettings { get; set; }
		
		/// <summary>
		/// DVB Service Description Table (SDT)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtSettings DvbSdtSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DvbSubPids { get; set; }
		
		/// <summary>
		/// DVB Time and Date Table (SDT)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbTdtSettings DvbTdtSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DvbTeletextPid { get; set; }
		
		/// <summary>
		/// M2ts Ebif Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEbif Ebif { get; set; }
		
		/// <summary>
		/// M2ts Audio Interval
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEbpAudioInterval EbpAudioInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max10000
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> EbpLookaheadMs { get; set; }
		
		/// <summary>
		/// M2ts Ebp Placement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEbpPlacement EbpPlacement { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EcmPid { get; set; }
		
		/// <summary>
		/// M2ts Es Rate In Pes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsEsRateInPes EsRateInPes { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EtvPlatformPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EtvSignalPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __doubleMin0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FragmentTime { get; set; }
		
		/// <summary>
		/// M2ts Klv
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsKlv Klv { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KlvDataPids { get; set; }
		
		/// <summary>
		/// M2ts Nielsen Id3 Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __doubleMin0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> NullPacketBitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		/// <summary>
		/// M2ts Pcr Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsPcrControl PcrControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max500
		/// Minimum: 0
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 500)]
		public System.Nullable<System.Int32> PcrPeriod { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PcrPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PmtPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> ProgramNum { get; set; }
		
		/// <summary>
		/// M2ts Rate Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsRateMode RateMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scte27Pids { get; set; }
		
		/// <summary>
		/// M2ts Scte35 Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsScte35Control Scte35Control { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scte35Pid { get; set; }
		
		/// <summary>
		/// M2ts Segmentation Markers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsSegmentationMarkers SegmentationMarkers { get; set; }
		
		/// <summary>
		/// M2ts Segmentation Style
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsSegmentationStyle SegmentationStyle { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __doubleMin1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SegmentationTime { get; set; }
		
		/// <summary>
		/// M2ts Timed Metadata Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettingsTimedMetadataBehavior TimedMetadataBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimedMetadataPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VideoPid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsAbsentInputAudioBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCODE_SILENCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsArib
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsAribCaptionsPidControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsAudioBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsAudioStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsCcDescriptor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEbif
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEbpAudioInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_FIXED_INTERVALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_INTERVAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEbpPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_AUDIO_PIDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PID = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsEsRateInPes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsKlv
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsNielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsRateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsScte35Control
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsSegmentationMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP_LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSI_SEGSTART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_ADAPT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_SEGSTART = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsSegmentationStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTAIN_CADENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_CADENCE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSettingsTimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Archive Container Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArchiveContainerSettings
	{
		
		/// <summary>
		/// M2ts Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettings M2tsSettings { get; set; }
	}
	
	/// <summary>
	/// Reference to an OutputDestination ID defined in the channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputLocationRef
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DestinationRefId { get; set; }
	}
	
	/// <summary>
	/// Archive Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArchiveGroupSettings
	{
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RolloverInterval { get; set; }
	}
	
	/// <summary>
	/// Archive Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ArchiveOutputSettings
	{
		
		/// <summary>
		/// Archive Container Settings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ArchiveContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Extension { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	/// <summary>
	/// Audio Channel Mapping
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioChannelMapping
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputChannelLevel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputChannelLevel[] InputChannelLevels { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max7
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public int OutputChannel { get; set; }
	}
	
	/// <summary>
	/// Eac3 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Eac3Settings
	{
		
		/// <summary>
		/// Eac3 Attenuation Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsAttenuationControl AttenuationControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		/// <summary>
		/// Eac3 Bitstream Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsBitstreamMode BitstreamMode { get; set; }
		
		/// <summary>
		/// Eac3 Coding Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Eac3 Dc Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDcFilter DcFilter { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max31
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public System.Nullable<System.Int32> Dialnorm { get; set; }
		
		/// <summary>
		/// Eac3 Drc Line
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDrcLine DrcLine { get; set; }
		
		/// <summary>
		/// Eac3 Drc Rf
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsDrcRf DrcRf { get; set; }
		
		/// <summary>
		/// Eac3 Lfe Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsLfeControl LfeControl { get; set; }
		
		/// <summary>
		/// Eac3 Lfe Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsLfeFilter LfeFilter { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoCenterMixLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LoRoSurroundMixLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtCenterMixLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LtRtSurroundMixLevel { get; set; }
		
		/// <summary>
		/// Eac3 Metadata Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsMetadataControl MetadataControl { get; set; }
		
		/// <summary>
		/// Eac3 Passthrough Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsPassthroughControl PassthroughControl { get; set; }
		
		/// <summary>
		/// Eac3 Phase Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsPhaseControl PhaseControl { get; set; }
		
		/// <summary>
		/// Eac3 Stereo Downmix
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsStereoDownmix StereoDownmix { get; set; }
		
		/// <summary>
		/// Eac3 Surround Ex Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsSurroundExMode SurroundExMode { get; set; }
		
		/// <summary>
		/// Eac3 Surround Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3SettingsSurroundMode SurroundMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsAttenuationControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTENUATE_3_DB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsBitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDcFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDrcLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsDrcRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsLfeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LFE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LFE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsLfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsMetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsPassthroughControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHEN_POSSIBLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsPhaseControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SHIFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIFT_90_DEGREES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsStereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LO_RO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT_RT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsSurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SettingsSurroundMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 2,
	}
	
	/// <summary>
	/// Mp2 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Mp2Settings
	{
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Bitrate { get; set; }
		
		/// <summary>
		/// Mp2 Coding Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp2SettingsCodingMode CodingMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SampleRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp2SettingsCodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
	}
	
	/// <summary>
	/// Audio Codec Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioCodecSettings
	{
		
		/// <summary>
		/// Aac Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AacSettings AacSettings { get; set; }
		
		/// <summary>
		/// Ac3 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Ac3Settings Ac3Settings { get; set; }
		
		/// <summary>
		/// Eac3 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Eac3Settings Eac3Settings { get; set; }
		
		/// <summary>
		/// Mp2 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Mp2Settings Mp2Settings { get; set; }
		
		/// <summary>
		/// Pass Through Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PassThroughSettings PassThroughSettings { get; set; }
	}
	
	/// <summary>
	/// Audio Normalization Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioNormalizationSettings
	{
		
		/// <summary>
		/// Audio Normalization Algorithm
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// Audio Normalization Algorithm Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettingsAlgorithmControl AlgorithmControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __doubleMinNegative59Max0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TargetLkfs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_1770_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_1770_2 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationSettingsAlgorithmControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRECT_AUDIO = 0,
	}
	
	/// <summary>
	/// Audio Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEAN_EFFECTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEFINED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUAL_IMPAIRED_COMMENTARY = 3,
	}
	
	/// <summary>
	/// Audio Description Audio Type Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionAudioTypeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Audio Description Language Code Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionLanguageCodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Remix Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RemixSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfAudioChannelMapping
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioChannelMapping[] ChannelMappings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max16
		/// Minimum: 1
		/// Maximum: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 16)]
		public System.Nullable<System.Int32> ChannelsIn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max8
		/// Minimum: 1
		/// Maximum: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 8)]
		public System.Nullable<System.Int32> ChannelsOut { get; set; }
	}
	
	/// <summary>
	/// Audio Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioDescription
	{
		
		/// <summary>
		/// Audio Normalization Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioNormalizationSettings AudioNormalizationSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AudioSelectorName { get; set; }
		
		/// <summary>
		/// Audio Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioType AudioType { get; set; }
		
		/// <summary>
		/// Audio Description Audio Type Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionAudioTypeControl AudioTypeControl { get; set; }
		
		/// <summary>
		/// Audio Codec Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioCodecSettings CodecSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin3Max3
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Audio Description Language Code Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioDescriptionLanguageCodeControl LanguageCodeControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Remix Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RemixSettings RemixSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionAudioType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEAN_EFFECTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEFINED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUAL_IMPAIRED_COMMENTARY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionAudioTypeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioDescriptionLanguageCodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Audio Language Selection Policy
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioLanguageSelectionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT = 1,
	}
	
	/// <summary>
	/// Audio Language Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioLanguageSelection
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Audio Language Selection Policy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioLanguageSelectionLanguageSelectionPolicy LanguageSelectionPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioLanguageSelectionLanguageSelectionPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRICT = 1,
	}
	
	/// <summary>
	/// Audio Normalization Algorithm
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_1770_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ITU_1770_2 = 1,
	}
	
	/// <summary>
	/// Audio Normalization Algorithm Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioNormalizationAlgorithmControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORRECT_AUDIO = 0,
	}
	
	/// <summary>
	/// Audio Only Hls Segment Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioOnlyHlsSegmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMP4 = 1,
	}
	
	/// <summary>
	/// Input Location
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputLocation
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Uri { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Audio Only Hls Track Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioOnlyHlsTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_NOT_AUTO_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_ONLY_VARIANT_STREAM = 3,
	}
	
	/// <summary>
	/// Audio Only Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioOnlyHlsSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioGroupId { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation AudioOnlyImage { get; set; }
		
		/// <summary>
		/// Audio Only Hls Track Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsSettingsAudioTrackType AudioTrackType { get; set; }
		
		/// <summary>
		/// Audio Only Hls Segment Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsSettingsSegmentType SegmentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioOnlyHlsSettingsAudioTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_AUDIO_NOT_AUTO_SELECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_ONLY_VARIANT_STREAM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AudioOnlyHlsSettingsSegmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FMP4 = 1,
	}
	
	/// <summary>
	/// Audio Pid Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioPidSelection
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max8191
		/// Minimum: 0
		/// Maximum: 8191
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 8191)]
		public int Pid { get; set; }
	}
	
	/// <summary>
	/// Audio Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioSelectorSettings
	{
		
		/// <summary>
		/// Audio Language Selection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioLanguageSelection AudioLanguageSelection { get; set; }
		
		/// <summary>
		/// Audio Pid Selection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioPidSelection AudioPidSelection { get; set; }
		
		/// <summary>
		/// Audio Track Selection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioTrackSelection AudioTrackSelection { get; set; }
	}
	
	/// <summary>
	/// Audio Selector
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioSelector
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Audio Selector Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioSelectorSettings SelectorSettings { get; set; }
	}
	
	/// <summary>
	/// Audio Track Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioTrackSelection
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfAudioTrack
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioTrack[] Tracks { get; set; }
	}
	
	/// <summary>
	/// Audio Track
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AudioTrack
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Track { get; set; }
	}
	
	/// <summary>
	/// Authentication Scheme
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AuthenticationScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKAMAI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMON = 1,
	}
	
	/// <summary>
	/// Input preference when deciding which input to make active when a previously failed input has recovered.
	///If \"EQUAL_INPUT_PREFERENCE\", then the active input will stay active as long as it is healthy.
	///If \"PRIMARY_INPUT_PREFERRED\", then always switch back to the primary input when it is healthy.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_INPUT_PREFERENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY_INPUT_PREFERRED = 1,
	}
	
	/// <summary>
	/// The settings for Automatic Input Failover.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AutomaticInputFailoverSettings
	{
		
		/// <summary>
		/// Input preference when deciding which input to make active when a previously failed input has recovered.
		///If \"EQUAL_INPUT_PREFERENCE\", then the active input will stay active as long as it is healthy.
		///If \"PRIMARY_INPUT_PREFERRED\", then always switch back to the primary input when it is healthy.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AutomaticInputFailoverSettingsInputPreference InputPreference { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryInputId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AutomaticInputFailoverSettingsInputPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUAL_INPUT_PREFERENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY_INPUT_PREFERRED = 1,
	}
	
	/// <summary>
	/// Avail Blanking State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum AvailBlankingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Avail Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class AvailSettings
	{
		
		/// <summary>
		/// Scte35 Splice Insert
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsert Scte35SpliceInsert { get; set; }
		
		/// <summary>
		/// Scte35 Time Signal Apos
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalApos Scte35TimeSignalApos { get; set; }
	}
	
	/// <summary>
	/// Scte35 Splice Insert
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35SpliceInsert
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMinNegative1000Max1000
		/// Minimum: -1000
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1000, 1000)]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		/// <summary>
		/// Scte35 Splice Insert No Regional Blackout Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertNoRegionalBlackoutFlag NoRegionalBlackoutFlag { get; set; }
		
		/// <summary>
		/// Scte35 Splice Insert Web Delivery Allowed Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertWebDeliveryAllowedFlag WebDeliveryAllowedFlag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SpliceInsertNoRegionalBlackoutFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SpliceInsertWebDeliveryAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Scte35 Time Signal Apos
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35TimeSignalApos
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMinNegative1000Max1000
		/// Minimum: -1000
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1000, 1000)]
		public System.Nullable<System.Int32> AdAvailOffset { get; set; }
		
		/// <summary>
		/// Scte35 Apos No Regional Blackout Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalAposNoRegionalBlackoutFlag NoRegionalBlackoutFlag { get; set; }
		
		/// <summary>
		/// Scte35 Apos Web Delivery Allowed Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalAposWebDeliveryAllowedFlag WebDeliveryAllowedFlag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35TimeSignalAposNoRegionalBlackoutFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35TimeSignalAposWebDeliveryAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// A list of schedule actions to create (in a request) or that have been created (in a response).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchScheduleActionCreateRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfScheduleAction
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// List of actions that have been created in the schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchScheduleActionCreateResult
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfScheduleAction
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// A list of schedule actions to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchScheduleActionDeleteRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__string[] ActionNames { get; set; }
	}
	
	/// <summary>
	/// List of actions that have been deleted from the schedule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchScheduleActionDeleteResult
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfScheduleAction
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleAction[] ScheduleActions { get; set; }
	}
	
	/// <summary>
	/// List of actions to create and list of actions to delete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateScheduleRequest
	{
		
		/// <summary>
		/// A list of schedule actions to create (in a request) or that have been created (in a response).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionCreateRequest Creates { get; set; }
		
		/// <summary>
		/// A list of schedule actions to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchScheduleActionDeleteRequest Deletes { get; set; }
	}
	
	/// <summary>
	/// Blackout Slate Network End Blackout
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlackoutSlateNetworkEndBlackout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Blackout Slate State
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BlackoutSlateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Burn In Alignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMART = 2,
	}
	
	/// <summary>
	/// Burn In Background Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Burn In Font Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Burn In Outline Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Burn In Shadow Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Burn In Teletext Grid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALED = 1,
	}
	
	/// <summary>
	/// Burn In Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BurnInDestinationSettings
	{
		
		/// <summary>
		/// Burn In Alignment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsAlignment Alignment { get; set; }
		
		/// <summary>
		/// Burn In Background Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsBackgroundColor BackgroundColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Font { get; set; }
		
		/// <summary>
		/// Burn In Font Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsFontColor FontColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin96Max600
		/// Minimum: 96
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(96, 600)]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FontSize { get; set; }
		
		/// <summary>
		/// Burn In Outline Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsOutlineColor OutlineColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max10
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		/// <summary>
		/// Burn In Shadow Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsShadowColor ShadowColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		/// <summary>
		/// Burn In Teletext Grid Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettingsTeletextGridControl TeletextGridControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMART = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum BurnInDestinationSettingsTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALED = 1,
	}
	
	/// <summary>
	/// Caption Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionDestinationSettings
	{
		
		/// <summary>
		/// Arib Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AribDestinationSettings AribDestinationSettings { get; set; }
		
		/// <summary>
		/// Burn In Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BurnInDestinationSettings BurnInDestinationSettings { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettings DvbSubDestinationSettings { get; set; }
		
		/// <summary>
		/// Embedded Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedDestinationSettings EmbeddedDestinationSettings { get; set; }
		
		/// <summary>
		/// Embedded Plus Scte20 Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedPlusScte20DestinationSettings EmbeddedPlusScte20DestinationSettings { get; set; }
		
		/// <summary>
		/// Rtmp Caption Info Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpCaptionInfoDestinationSettings RtmpCaptionInfoDestinationSettings { get; set; }
		
		/// <summary>
		/// Scte20 Plus Embedded Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte20PlusEmbeddedDestinationSettings Scte20PlusEmbeddedDestinationSettings { get; set; }
		
		/// <summary>
		/// Scte27 Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte27DestinationSettings Scte27DestinationSettings { get; set; }
		
		/// <summary>
		/// Smpte Tt Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SmpteTtDestinationSettings SmpteTtDestinationSettings { get; set; }
		
		/// <summary>
		/// Teletext Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TeletextDestinationSettings TeletextDestinationSettings { get; set; }
		
		/// <summary>
		/// Ttml Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationSettings TtmlDestinationSettings { get; set; }
		
		/// <summary>
		/// Webvtt Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WebvttDestinationSettings WebvttDestinationSettings { get; set; }
	}
	
	/// <summary>
	/// Caption Description
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionDescription
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CaptionSelectorName { get; set; }
		
		/// <summary>
		/// Caption Destination Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDestinationSettings DestinationSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LanguageDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Dvb Sub Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSubDestinationSettings
	{
		
		/// <summary>
		/// Dvb Sub Destination Alignment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsAlignment Alignment { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Background Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsBackgroundColor BackgroundColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> BackgroundOpacity { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Font { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Font Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsFontColor FontColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> FontOpacity { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin96Max600
		/// Minimum: 96
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(96, 600)]
		public System.Nullable<System.Int32> FontResolution { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FontSize { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Outline Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsOutlineColor OutlineColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max10
		/// Minimum: 0
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10)]
		public System.Nullable<System.Int32> OutlineSize { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Shadow Color
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsShadowColor ShadowColor { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> ShadowOpacity { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowXOffset { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShadowYOffset { get; set; }
		
		/// <summary>
		/// Dvb Sub Destination Teletext Grid Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubDestinationSettingsTeletextGridControl TeletextGridControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> XPosition { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> YPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMART = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationSettingsTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALED = 1,
	}
	
	/// <summary>
	/// Ttml Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TtmlDestinationSettings
	{
		
		/// <summary>
		/// Ttml Destination Style Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TtmlDestinationSettingsStyleControl StyleControl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TtmlDestinationSettingsStyleControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Maps a caption channel to an ISO 693-2 language code (http://www.loc.gov/standards/iso639-2), with an optional description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionLanguageMapping
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max4
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public int CaptionChannel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin3Max3
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength=3)]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string LanguageDescription { get; set; }
	}
	
	/// <summary>
	/// Caption Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSelectorSettings
	{
		
		/// <summary>
		/// Arib Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AribSourceSettings AribSourceSettings { get; set; }
		
		/// <summary>
		/// Dvb Sub Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSubSourceSettings DvbSubSourceSettings { get; set; }
		
		/// <summary>
		/// Embedded Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettings EmbeddedSourceSettings { get; set; }
		
		/// <summary>
		/// Scte20 Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte20SourceSettings Scte20SourceSettings { get; set; }
		
		/// <summary>
		/// Scte27 Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte27SourceSettings Scte27SourceSettings { get; set; }
		
		/// <summary>
		/// Teletext Source Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TeletextSourceSettings TeletextSourceSettings { get; set; }
	}
	
	/// <summary>
	/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CaptionSelector
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string Name { get; set; }
		
		/// <summary>
		/// Caption Selector Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSelectorSettings SelectorSettings { get; set; }
	}
	
	/// <summary>
	/// Dvb Sub Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSubSourceSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Embedded Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EmbeddedSourceSettings
	{
		
		/// <summary>
		/// Embedded Convert608 To708
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettingsConvert608To708 Convert608To708 { get; set; }
		
		/// <summary>
		/// Embedded Scte20 Detection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmbeddedSourceSettingsScte20Detection Scte20Detection { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max4
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> Source608ChannelNumber { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max5
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> Source608TrackNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedSourceSettingsConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedSourceSettingsScte20Detection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 1,
	}
	
	/// <summary>
	/// Scte20 Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte20SourceSettings
	{
		
		/// <summary>
		/// Scte20 Convert608 To708
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte20SourceSettingsConvert608To708 Convert608To708 { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max4
		/// Minimum: 1
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 4)]
		public System.Nullable<System.Int32> Source608ChannelNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte20SourceSettingsConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 1,
	}
	
	/// <summary>
	/// Scte27 Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte27SourceSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Teletext Source Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TeletextSourceSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PageNumber { get; set; }
	}
	
	/// <summary>
	/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	/// <summary>
	/// Encoder Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class EncoderSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfAudioDescription
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AudioDescription[] AudioDescriptions { get; set; }
		
		/// <summary>
		/// Avail Blanking
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailBlanking AvailBlanking { get; set; }
		
		/// <summary>
		/// Avail Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AvailConfiguration AvailConfiguration { get; set; }
		
		/// <summary>
		/// Blackout Slate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BlackoutSlate BlackoutSlate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfCaptionDescription
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionDescription[] CaptionDescriptions { get; set; }
		
		/// <summary>
		/// Global Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GlobalConfiguration GlobalConfiguration { get; set; }
		
		/// <summary>
		/// Nielsen Configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NielsenConfiguration NielsenConfiguration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputGroup
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputGroup[] OutputGroups { get; set; }
		
		/// <summary>
		/// Timecode Config
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TimecodeConfig TimecodeConfig { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfVideoDescription
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VideoDescription[] VideoDescriptions { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for InputSpecification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSpecification
	{
		
		/// <summary>
		/// codec in increasing order of complexity
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecificationCodec Codec { get; set; }
		
		/// <summary>
		/// Maximum input bitrate in megabits per second. Bitrates up to 50 Mbps are supported currently.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecificationMaximumBitrate MaximumBitrate { get; set; }
		
		/// <summary>
		/// Input resolution based on lines of vertical resolution in the input; SD is less than 720 lines, HD is 720 to 1080 lines, UHD is greater than 1080 lines
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecificationResolution Resolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSpecificationCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEVC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSpecificationMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_50_MBPS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSpecificationResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UHD = 2,
	}
	
	/// <summary>
	/// The log level the user wants for their channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for Channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Channel
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelineDetail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelineDetail[] PipelineDetails { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelEgressEndpoint
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelEgressEndpoint
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SourceIp { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for ChannelSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ChannelSummary
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummaryChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfChannelEgressEndpoint
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelEgressEndpoint[] EgressEndpoints { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummaryLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for ChannelState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChannelSummaryState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelSummaryChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelSummaryLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ChannelSummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE_FAILED = 10,
	}
	
	/// <summary>
	/// A request to create a channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelRequest
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateChannelRequestChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateChannelRequestLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reserved { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateChannelRequestChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateChannelRequestLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// Placeholder documentation for InputType
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_DEVICE = 7,
	}
	
	/// <summary>
	/// Settings for a private VPC Input.
	///When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
	///This property requires setting the roleArn property on Input creation.
	///Not compatible with the inputSecurityGroups property.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputVpcRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SubnetIds { get; set; }
	}
	
	/// <summary>
	/// The name of the input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateInputRequestType Type { get; set; }
		
		/// <summary>
		/// Settings for a private VPC Input.
		///When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
		///This property requires setting the roleArn property on Input creation.
		///Not compatible with the inputSecurityGroups property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputVpcRequest Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateInputRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_DEVICE = 7,
	}
	
	/// <summary>
	/// Placeholder documentation for Input
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Input
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AttachedChannels { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// A standard input has two sources and a single pipeline input only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputInputClass InputClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		/// <summary>
		/// There are two types of input sources, static and dynamic. If an input source is dynamic you can
		///change the source url of the input dynamically using an input switch action. However, the only input type
		///to support a dynamic url at this time is MP4_FILE. By default all input sources are static.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputInputSourceType InputSourceType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlow
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlow[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] SecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSource
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSource[] Sources { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputInputClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputInputSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_DEVICE = 7,
	}
	
	/// <summary>
	/// The IPv4 CIDRs to whitelist for this Input Security Group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputSecurityGroupRequest
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// An Input Security Group
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSecurityGroup
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] Inputs { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSecurityGroupState
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSecurityGroupState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRule[] WhitelistRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSecurityGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Multiplex Program settings configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgramSettings
	{
		
		/// <summary>
		/// Indicates which pipeline is preferred by the multiplex for program ingest.
		///If set to \"PIPELINE_0\" or \"PIPELINE_1\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
		///it will switch back once that ingest is healthy again. If set to \"CURRENTLY_ACTIVE\",
		///it will not switch back to the other pipeline based on it recovering to a healthy state,
		///it will only switch if the active pipeline becomes unhealthy.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettingsPreferredChannelPipeline PreferredChannelPipeline { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int ProgramNumber { get; set; }
		
		/// <summary>
		/// Transport stream service descriptor configuration for the Multiplex program.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramServiceDescriptor ServiceDescriptor { get; set; }
		
		/// <summary>
		/// The video configuration for each program in a multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexVideoSettings VideoSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MultiplexProgramSettingsPreferredChannelPipeline
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENTLY_ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_1 = 2,
	}
	
	/// <summary>
	/// A request to create a program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexProgramRequest
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// The multiplex program object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgram
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Packet identifiers map for a given Multiplex program.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramPacketIdentifiersMap PacketIdentifiersMap { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Contains configuration for a Multiplex event
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000Max3000
		/// Minimum: 1000
		/// Maximum: 3000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 3000)]
		public System.Nullable<System.Int32> MaximumVideoBufferDelayMilliseconds { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000000Max100000000
		/// Minimum: 1000000
		/// Maximum: 100000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000000, 100000000)]
		public int TransportStreamBitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public int TransportStreamId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max100000000
		/// Minimum: 0
		/// Maximum: 100000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100000000)]
		public System.Nullable<System.Int32> TransportStreamReservedBitrate { get; set; }
	}
	
	/// <summary>
	/// A request to create a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// The multiplex object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Multiplex
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMultiplexOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MultiplexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Placeholder documentation for CreateTagsRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsRequest
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Packet identifiers map for a given Multiplex program.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgramPacketIdentifiersMap
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__integer[] AudioPids { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__integer[] DvbSubPids { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DvbTeletextPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EtvPlatformPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EtvSignalPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__integer[] KlvDataPids { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PcrPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PmtPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PrivateMetadataPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__integer[] Scte27Pids { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Scte35Pid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TimedMetadataPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VideoPid { get; set; }
	}
	
	/// <summary>
	/// The current state of the multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MultiplexState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Units for duration, e.g. 'MONTHS'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	/// <summary>
	/// Offering type, e.g. 'NO_UPFRONT'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	/// <summary>
	/// Resource configuration (codec, resolution, bitrate, ...)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ReservationResourceSpecification
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Codec, 'MPEG2', 'AVC', 'HEVC', or 'AUDIO'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationCodec Codec { get; set; }
		
		/// <summary>
		/// Maximum bitrate in megabits per second
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationMaximumBitrate MaximumBitrate { get; set; }
		
		/// <summary>
		/// Maximum framerate in frames per second (Outputs only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationMaximumFramerate MaximumFramerate { get; set; }
		
		/// <summary>
		/// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationResolution Resolution { get; set; }
		
		/// <summary>
		/// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationResourceType ResourceType { get; set; }
		
		/// <summary>
		/// Special features, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationSpecialFeature SpecialFeature { get; set; }
		
		/// <summary>
		/// Video quality, e.g. 'STANDARD' (Outputs only)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecificationVideoQuality VideoQuality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEVC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_50_MBPS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationMaximumFramerate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_30_FPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_60_FPS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FHD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UHD = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTPUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationSpecialFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCED_AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_NORMALIZATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceSpecificationVideoQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREMIUM = 2,
	}
	
	/// <summary>
	/// Current reservation state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// The state of the connection between the input device and AWS.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 1,
	}
	
	/// <summary>
	/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DeviceSettingsSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 1,
	}
	
	/// <summary>
	/// Settings that describe the active source from the input device, and the video characteristics of that source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceHdSettings
	{
		
		/// <summary>
		/// The source at the input device that is currently active.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettingsActiveInput ActiveInput { get; set; }
		
		/// <summary>
		/// The source to activate (use) from the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettingsConfiguredInput ConfiguredInput { get; set; }
		
		/// <summary>
		/// The state of the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettingsDeviceState DeviceState { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Framerate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// The scan type of the video source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettingsScanType ScanType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceHdSettingsActiveInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDMI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDI = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceHdSettingsConfiguredInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDMI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDI = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceHdSettingsDeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceHdSettingsScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// The network settings for the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceNetworkSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] DnsAddresses { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Gateway { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettingsIpScheme IpScheme { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubnetMask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceNetworkSettingsIpScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DHCP = 1,
	}
	
	/// <summary>
	/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 0,
	}
	
	/// <summary>
	/// A standard input has two sources and a single pipeline input only has one.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	/// <summary>
	/// There are two types of input sources, static and dynamic. If an input source is dynamic you can
	///change the source url of the input dynamically using an input switch action. However, the only input type
	///to support a dynamic url at this time is MP4_FILE. By default all input sources are static.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for InputState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DETACHED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	/// <summary>
	/// Placeholder documentation for InputSecurityGroupState
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSecurityGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// DVB Network Information Table (NIT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbNitSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65536
		/// Minimum: 0
		/// Maximum: 65536
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65536)]
		public int NetworkId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1Max256
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string NetworkName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin25Max10000
		/// Minimum: 25
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(25, 10000)]
		public System.Nullable<System.Int32> RepInterval { get; set; }
	}
	
	/// <summary>
	/// Dvb Sdt Output Sdt
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSdtOutputSdt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW_IF_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_NONE = 3,
	}
	
	/// <summary>
	/// DVB Service Description Table (SDT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbSdtSettings
	{
		
		/// <summary>
		/// Dvb Sdt Output Sdt
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DvbSdtSettingsOutputSdt OutputSdt { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin25Max2000
		/// Minimum: 25
		/// Maximum: 2000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(25, 2000)]
		public System.Nullable<System.Int32> RepInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1Max256
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1Max256
		/// Max length: 256
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength=1)]
		public string ServiceProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSdtSettingsOutputSdt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_FOLLOW_IF_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDT_NONE = 3,
	}
	
	/// <summary>
	/// Dvb Sub Destination Alignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMART = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Background Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationBackgroundColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Font Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationFontColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Dvb Sub Destination Outline Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationOutlineColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YELLOW = 5,
	}
	
	/// <summary>
	/// Dvb Sub Destination Shadow Color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationShadowColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE = 2,
	}
	
	/// <summary>
	/// Dvb Sub Destination Teletext Grid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum DvbSubDestinationTeletextGridControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCALED = 1,
	}
	
	/// <summary>
	/// DVB Time and Date Table (SDT)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class DvbTdtSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000Max30000
		/// Minimum: 1000
		/// Maximum: 30000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 30000)]
		public System.Nullable<System.Int32> RepInterval { get; set; }
	}
	
	/// <summary>
	/// Eac3 Attenuation Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3AttenuationControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTENUATE_3_DB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Eac3 Bitstream Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3BitstreamMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMERGENCY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARING_IMPAIRED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISUALLY_IMPAIRED = 4,
	}
	
	/// <summary>
	/// Eac3 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_3_2 = 2,
	}
	
	/// <summary>
	/// Eac3 Dc Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DcFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Eac3 Drc Line
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DrcLine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Drc Rf
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3DrcRf
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_LIGHT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_LIGHT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC_STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPEECH = 5,
	}
	
	/// <summary>
	/// Eac3 Lfe Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3LfeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LFE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LFE = 1,
	}
	
	/// <summary>
	/// Eac3 Lfe Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3LfeFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Eac3 Metadata Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3MetadataControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW_INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Eac3 Passthrough Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3PassthroughControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHEN_POSSIBLE = 1,
	}
	
	/// <summary>
	/// Eac3 Phase Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3PhaseControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SHIFT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIFT_90_DEGREES = 1,
	}
	
	/// <summary>
	/// Eac3 Stereo Downmix
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3StereoDownmix
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DPL2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LO_RO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LT_RT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 3,
	}
	
	/// <summary>
	/// Eac3 Surround Ex Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SurroundExMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 2,
	}
	
	/// <summary>
	/// Eac3 Surround Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Eac3SurroundMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INDICATED = 2,
	}
	
	/// <summary>
	/// Embedded Convert608 To708
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedConvert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 1,
	}
	
	/// <summary>
	/// Embedded Scte20 Detection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum EmbeddedScte20Detection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 1,
	}
	
	/// <summary>
	/// Fec Output Include Fec
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FecOutputIncludeFec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_AND_ROW = 1,
	}
	
	/// <summary>
	/// Fec Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FecOutputSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin4Max20
		/// Minimum: 4
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(4, 20)]
		public System.Nullable<System.Int32> ColumnDepth { get; set; }
		
		/// <summary>
		/// Fec Output Include Fec
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FecOutputSettingsIncludeFec IncludeFec { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max20
		/// Minimum: 1
		/// Maximum: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 20)]
		public System.Nullable<System.Int32> RowLength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FecOutputSettingsIncludeFec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_AND_ROW = 1,
	}
	
	/// <summary>
	/// Fixed Afd
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FixedAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0010 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0011 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1000 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1001 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1010 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1011 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1101 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1110 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1111 = 10,
	}
	
	/// <summary>
	/// Start time for the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FixedModeScheduleActionStartSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Time { get; set; }
	}
	
	/// <summary>
	/// Fmp4 Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Fmp4NielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Fmp4 Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Fmp4TimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Fmp4 Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Fmp4HlsSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioRenditionSets { get; set; }
		
		/// <summary>
		/// Fmp4 Nielsen Id3 Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Fmp4HlsSettingsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		/// <summary>
		/// Fmp4 Timed Metadata Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Fmp4HlsSettingsTimedMetadataBehavior TimedMetadataBehavior { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Fmp4HlsSettingsNielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Fmp4HlsSettingsTimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Follow reference point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FollowPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
	}
	
	/// <summary>
	/// Settings to specify if an action follows another.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FollowModeScheduleActionStartSettings
	{
		
		/// <summary>
		/// Follow reference point.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public FollowModeScheduleActionStartSettingsFollowPoint FollowPoint { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReferenceActionName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FollowModeScheduleActionStartSettingsFollowPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
	}
	
	/// <summary>
	/// Frame Capture Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FrameCaptureGroupSettings
	{
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Interval Unit
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FrameCaptureIntervalUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLISECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Frame Capture Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FrameCaptureOutputSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	/// <summary>
	/// Frame Capture Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class FrameCaptureSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max3600000
		/// Minimum: 1
		/// Maximum: 3600000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 3600000)]
		public int CaptureInterval { get; set; }
		
		/// <summary>
		/// Frame Capture Interval Unit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureSettingsCaptureIntervalUnits CaptureIntervalUnits { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum FrameCaptureSettingsCaptureIntervalUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILLISECONDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// Global Configuration Input End Action
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationInputEndAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWITCH_AND_LOOP_INPUTS = 1,
	}
	
	/// <summary>
	/// Input Loss Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputLossBehavior
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000000
		/// Minimum: 0
		/// Maximum: 1000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000000)]
		public System.Nullable<System.Int32> BlackFrameMsec { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin6Max6
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength=6)]
		public string InputLossImageColor { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation InputLossImageSlate { get; set; }
		
		/// <summary>
		/// Input Loss Image Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLossBehaviorInputLossImageType InputLossImageType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000000
		/// Minimum: 0
		/// Maximum: 1000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000000)]
		public System.Nullable<System.Int32> RepeatFrameMsec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossBehaviorInputLossImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLATE = 1,
	}
	
	/// <summary>
	/// Global Configuration Output Locking Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationOutputLockingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EPOCH_LOCKING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_LOCKING = 1,
	}
	
	/// <summary>
	/// Global Configuration Output Timing Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationOutputTimingSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_CLOCK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_CLOCK = 1,
	}
	
	/// <summary>
	/// Global Configuration Low Framerate Inputs
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum GlobalConfigurationLowFramerateInputs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Adaptive Quantization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 5,
	}
	
	/// <summary>
	/// H264 Color Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	/// <summary>
	/// H264 Color Space Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H264ColorSpaceSettings
	{
		
		/// <summary>
		/// Passthrough applies no color space conversion to the output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ColorSpacePassthroughSettings ColorSpacePassthroughSettings { get; set; }
		
		/// <summary>
		/// Rec601 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rec601Settings Rec601Settings { get; set; }
		
		/// <summary>
		/// Rec709 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rec709Settings Rec709Settings { get; set; }
	}
	
	/// <summary>
	/// H264 Entropy Encoding
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264EntropyEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CABAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAVLC = 1,
	}
	
	/// <summary>
	/// Temporal Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class TemporalFilterSettings
	{
		
		/// <summary>
		/// Temporal Filter Post Filter Sharpening
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettingsPostFilterSharpening PostFilterSharpening { get; set; }
		
		/// <summary>
		/// Temporal Filter Strength
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettingsStrength Strength { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemporalFilterSettingsPostFilterSharpening
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemporalFilterSettingsStrength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_16 = 16,
	}
	
	/// <summary>
	/// H264 Filter Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H264FilterSettings
	{
		
		/// <summary>
		/// Temporal Filter Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TemporalFilterSettings TemporalFilterSettings { get; set; }
	}
	
	/// <summary>
	/// H264 Flicker Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Force Field Pictures
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264ForceFieldPictures
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Framerate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264FramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// H264 Gop BReference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264GopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Gop Size Units
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// H264 Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264Level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2_2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5_1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5_2 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_AUTO = 16,
	}
	
	/// <summary>
	/// H264 Look Ahead Rate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264LookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
	}
	
	/// <summary>
	/// H264 Par Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264ParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	/// <summary>
	/// H264 Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_10BIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422_10BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 5,
	}
	
	/// <summary>
	/// H264 Quality Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264QualityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED_QUALITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_QUALITY = 1,
	}
	
	/// <summary>
	/// H264 Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 3,
	}
	
	/// <summary>
	/// H264 Scan Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// H264 Scene Change Detect
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Spatial Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SpatialAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Sub Gop Length
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SubGopLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
	}
	
	/// <summary>
	/// H264 Syntax
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264Syntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RP2027 = 1,
	}
	
	/// <summary>
	/// H264 Temporal Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264TemporalAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H264 Timecode Insertion Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264TimecodeInsertionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// H264 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H264Settings
	{
		
		/// <summary>
		/// H264 Adaptive Quantization
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Afd Signaling
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsAfdSignaling AfdSignaling { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000
		/// Minimum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max100
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> BufFillPct { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BufSize { get; set; }
		
		/// <summary>
		/// H264 Color Metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsColorMetadata ColorMetadata { get; set; }
		
		/// <summary>
		/// H264 Color Space Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264ColorSpaceSettings ColorSpaceSettings { get; set; }
		
		/// <summary>
		/// H264 Entropy Encoding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsEntropyEncoding EntropyEncoding { get; set; }
		
		/// <summary>
		/// H264 Filter Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264FilterSettings FilterSettings { get; set; }
		
		/// <summary>
		/// Fixed Afd
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFixedAfd FixedAfd { get; set; }
		
		/// <summary>
		/// H264 Flicker Aq
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFlickerAq FlickerAq { get; set; }
		
		/// <summary>
		/// H264 Force Field Pictures
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsForceFieldPictures ForceFieldPictures { get; set; }
		
		/// <summary>
		/// H264 Framerate Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsFramerateControl FramerateControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FramerateDenominator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FramerateNumerator { get; set; }
		
		/// <summary>
		/// H264 Gop BReference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsGopBReference GopBReference { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max7
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> GopNumBFrames { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// H264 Gop Size Units
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsGopSizeUnits GopSizeUnits { get; set; }
		
		/// <summary>
		/// H264 Level
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsLevel Level { get; set; }
		
		/// <summary>
		/// H264 Look Ahead Rate Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsLookAheadRateControl LookAheadRateControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000
		/// Minimum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max30
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max6
		/// Minimum: 1
		/// Maximum: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 6)]
		public System.Nullable<System.Int32> NumRefFrames { get; set; }
		
		/// <summary>
		/// H264 Par Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsParControl ParControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// H264 Profile
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsProfile Profile { get; set; }
		
		/// <summary>
		/// H264 Quality Level
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsQualityLevel QualityLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max10
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		/// <summary>
		/// H264 Rate Control Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// H264 Scan Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsScanType ScanType { get; set; }
		
		/// <summary>
		/// H264 Scene Change Detect
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSceneChangeDetect SceneChangeDetect { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max32
		/// Minimum: 1
		/// Maximum: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 32)]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max128
		/// Minimum: 0
		/// Maximum: 128
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 128)]
		public System.Nullable<System.Int32> Softness { get; set; }
		
		/// <summary>
		/// H264 Spatial Aq
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSpatialAq SpatialAq { get; set; }
		
		/// <summary>
		/// H264 Sub Gop Length
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSubgopLength SubgopLength { get; set; }
		
		/// <summary>
		/// H264 Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsSyntax Syntax { get; set; }
		
		/// <summary>
		/// H264 Temporal Aq
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsTemporalAq TemporalAq { get; set; }
		
		/// <summary>
		/// H264 Timecode Insertion Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264SettingsTimecodeInsertion TimecodeInsertion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsAfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsEntropyEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CABAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAVLC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFixedAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0010 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0011 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1000 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1001 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1010 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1011 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1101 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1110 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1111 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsForceFieldPictures
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsFramerateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsGopBReference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsGopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_1_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2_1 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_2_2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_3_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_4_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5_1 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_5_2 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H264_LEVEL_AUTO = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsLookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsParControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZE_FROM_SOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPECIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_10BIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_422_10BIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsQualityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED_QUALITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_QUALITY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSpatialAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSubgopLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DYNAMIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsSyntax
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RP2027 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsTemporalAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H264SettingsTimecodeInsertion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// H265 Adaptive Quantization
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265AdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 5,
	}
	
	/// <summary>
	/// H265 Alternative Transfer Function
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265AlternativeTransferFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 1,
	}
	
	/// <summary>
	/// H265 Color Metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265ColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	/// <summary>
	/// Hdr10 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Hdr10Settings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max32768
		/// Minimum: 0
		/// Maximum: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 32768)]
		public System.Nullable<System.Int32> MaxCll { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max32768
		/// Minimum: 0
		/// Maximum: 32768
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 32768)]
		public System.Nullable<System.Int32> MaxFall { get; set; }
	}
	
	/// <summary>
	/// H265 Color Space Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H265ColorSpaceSettings
	{
		
		/// <summary>
		/// Passthrough applies no color space conversion to the output
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ColorSpacePassthroughSettings ColorSpacePassthroughSettings { get; set; }
		
		/// <summary>
		/// Hdr10 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Hdr10Settings Hdr10Settings { get; set; }
		
		/// <summary>
		/// Rec601 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rec601Settings Rec601Settings { get; set; }
		
		/// <summary>
		/// Rec709 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Rec709Settings Rec709Settings { get; set; }
	}
	
	/// <summary>
	/// H265 Flicker Aq
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265FlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H265 Gop Size Units
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265GopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	/// <summary>
	/// H265 Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265Level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_2_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_3_1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_4_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_AUTO = 13,
	}
	
	/// <summary>
	/// H265 Look Ahead Rate Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265LookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
	}
	
	/// <summary>
	/// H265 Profile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265Profile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_10BIT = 1,
	}
	
	/// <summary>
	/// H265 Rate Control Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265RateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	/// <summary>
	/// H265 Scan Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265ScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
	}
	
	/// <summary>
	/// H265 Scene Change Detect
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// H265 Tier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265Tier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 1,
	}
	
	/// <summary>
	/// H265 Timecode Insertion Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265TimecodeInsertionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// H265 Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class H265Settings
	{
		
		/// <summary>
		/// H265 Adaptive Quantization
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsAdaptiveQuantization AdaptiveQuantization { get; set; }
		
		/// <summary>
		/// Afd Signaling
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsAfdSignaling AfdSignaling { get; set; }
		
		/// <summary>
		/// H265 Alternative Transfer Function
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsAlternativeTransferFunction AlternativeTransferFunction { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max40000000
		/// Minimum: 100000
		/// Maximum: 40000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 40000000)]
		public System.Nullable<System.Int32> Bitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max80000000
		/// Minimum: 100000
		/// Maximum: 80000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 80000000)]
		public System.Nullable<System.Int32> BufSize { get; set; }
		
		/// <summary>
		/// H265 Color Metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsColorMetadata ColorMetadata { get; set; }
		
		/// <summary>
		/// H265 Color Space Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265ColorSpaceSettings ColorSpaceSettings { get; set; }
		
		/// <summary>
		/// Fixed Afd
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsFixedAfd FixedAfd { get; set; }
		
		/// <summary>
		/// H265 Flicker Aq
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsFlickerAq FlickerAq { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max3003
		/// Minimum: 1
		/// Maximum: 3003
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 3003)]
		public int FramerateDenominator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int FramerateNumerator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> GopClosedCadence { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GopSize { get; set; }
		
		/// <summary>
		/// H265 Gop Size Units
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsGopSizeUnits GopSizeUnits { get; set; }
		
		/// <summary>
		/// H265 Level
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsLevel Level { get; set; }
		
		/// <summary>
		/// H265 Look Ahead Rate Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsLookAheadRateControl LookAheadRateControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max40000000
		/// Minimum: 100000
		/// Maximum: 40000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 40000000)]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max30
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> MinIInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ParDenominator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ParNumerator { get; set; }
		
		/// <summary>
		/// H265 Profile
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsProfile Profile { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max10
		/// Minimum: 1
		/// Maximum: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 10)]
		public System.Nullable<System.Int32> QvbrQualityLevel { get; set; }
		
		/// <summary>
		/// H265 Rate Control Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsRateControlMode RateControlMode { get; set; }
		
		/// <summary>
		/// H265 Scan Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsScanType ScanType { get; set; }
		
		/// <summary>
		/// H265 Scene Change Detect
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsSceneChangeDetect SceneChangeDetect { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max16
		/// Minimum: 1
		/// Maximum: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 16)]
		public System.Nullable<System.Int32> Slices { get; set; }
		
		/// <summary>
		/// H265 Tier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTier Tier { get; set; }
		
		/// <summary>
		/// H265 Timecode Insertion Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265SettingsTimecodeInsertion TimecodeInsertion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsAdaptiveQuantization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsAfdSignaling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsAlternativeTransferFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsColorMetadata
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsFixedAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0010 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0011 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_0100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1000 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1001 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1010 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1011 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1101 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1110 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFD_1111 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsFlickerAq
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsGopSizeUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAMES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_2_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_3_1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_4 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_4_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5_1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_5_2 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6_1 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_6_2 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H265_LEVEL_AUTO = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsLookAheadRateControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN_10BIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsRateControlMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QVBR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsSceneChangeDetect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum H265SettingsTimecodeInsertion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIC_TIMING_SEI = 1,
	}
	
	/// <summary>
	/// Hls Ad Markers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAdMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADOBE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELEMENTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELEMENTAL_SCTE35 = 2,
	}
	
	/// <summary>
	/// Hls Akamai Http Transfer Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAkamaiHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Hls Akamai Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsAkamaiSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max600
		/// Minimum: 0
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 600)]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		/// <summary>
		/// Hls Akamai Http Transfer Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsAkamaiSettingsHttpTransferMode HttpTransferMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max15
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Salt { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsAkamaiSettingsHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Hls Basic Put Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsBasicPutSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max600
		/// Minimum: 0
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 600)]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max15
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	/// <summary>
	/// Hls Caption Language Setting
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsCaptionLanguageSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 2,
	}
	
	/// <summary>
	/// Hls Media Store Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsMediaStoreSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max600
		/// Minimum: 0
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 600)]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		/// <summary>
		/// Hls Media Store Storage Class
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsMediaStoreSettingsMediaStoreStorageClass MediaStoreStorageClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max15
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsMediaStoreSettingsMediaStoreStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORAL = 0,
	}
	
	/// <summary>
	/// Hls Webdav Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsWebdavSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max600
		/// Minimum: 0
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 600)]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		/// <summary>
		/// Hls Webdav Http Transfer Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsWebdavSettingsHttpTransferMode HttpTransferMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max15
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsWebdavSettingsHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Hls Cdn Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsCdnSettings
	{
		
		/// <summary>
		/// Hls Akamai Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsAkamaiSettings HlsAkamaiSettings { get; set; }
		
		/// <summary>
		/// Hls Basic Put Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsBasicPutSettings HlsBasicPutSettings { get; set; }
		
		/// <summary>
		/// Hls Media Store Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsMediaStoreSettings HlsMediaStoreSettings { get; set; }
		
		/// <summary>
		/// Hls Webdav Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsWebdavSettings HlsWebdavSettings { get; set; }
	}
	
	/// <summary>
	/// Hls Client Cache
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Hls Codec Specification
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 1,
	}
	
	/// <summary>
	/// Hls Directory Structure
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsDirectoryStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBDIRECTORY_PER_STREAM = 1,
	}
	
	/// <summary>
	/// Hls Encryption Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	/// <summary>
	/// State of HLS ID3 Segment Tagging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsId3SegmentTaggingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum IFrameOnlyPlaylistType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Hls Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossActionForHlsOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Hls Iv In Manifest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsIvInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Iv Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsIvSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOWS_SEGMENT_NUMBER = 1,
	}
	
	/// <summary>
	/// Key Provider Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class KeyProviderSettings
	{
		
		/// <summary>
		/// Static Key Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticKeySettings StaticKeySettings { get; set; }
	}
	
	/// <summary>
	/// Hls Manifest Compression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// Hls Manifest Duration Format
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	/// <summary>
	/// Hls Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 1,
	}
	
	/// <summary>
	/// Hls Output Selection
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsOutputSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANIFESTS_AND_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTS_ONLY = 1,
	}
	
	/// <summary>
	/// Hls Program Date Time
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsProgramDateTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Redundant Manifest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsRedundantManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Hls Segmentation Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_SEGMENT_DURATION = 1,
	}
	
	/// <summary>
	/// Hls Stream Inf Resolution
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// Hls Timed Metadata Id3 Frame
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	/// <summary>
	/// Hls Ts File Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsTsFileMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 1,
	}
	
	/// <summary>
	/// Hls Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsGroupSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfHlsAdMarkers
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsAdMarkers[] AdMarkers { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlContent { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlContent1 { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlManifest { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BaseUrlManifest1 { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfCaptionLanguageMapping
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionLanguageMapping[] CaptionLanguageMappings { get; set; }
		
		/// <summary>
		/// Hls Caption Language Setting
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsCaptionLanguageSetting CaptionLanguageSetting { get; set; }
		
		/// <summary>
		/// Hls Client Cache
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsClientCache ClientCache { get; set; }
		
		/// <summary>
		/// Hls Codec Specification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsCodecSpecification CodecSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin32Max32
		/// Max length: 32
		/// Min length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=32)]
		public string ConstantIv { get; set; }
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		/// <summary>
		/// Hls Directory Structure
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsDirectoryStructure DirectoryStructure { get; set; }
		
		/// <summary>
		/// Hls Encryption Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsEncryptionType EncryptionType { get; set; }
		
		/// <summary>
		/// Hls Cdn Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsCdnSettings HlsCdnSettings { get; set; }
		
		/// <summary>
		/// State of HLS ID3 Segment Tagging
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsHlsId3SegmentTagging HlsId3SegmentTagging { get; set; }
		
		/// <summary>
		/// When set to "standard", an I-Frame only playlist will be written out for each video output in the output group. This I-Frame only playlist will contain byte range offsets pointing to the I-frame(s) in each segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsIFrameOnlyPlaylists IFrameOnlyPlaylists { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin3
		/// Minimum: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(3, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> IndexNSegments { get; set; }
		
		/// <summary>
		/// Input Loss Action For Hls Out
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsInputLossAction InputLossAction { get; set; }
		
		/// <summary>
		/// Hls Iv In Manifest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsIvInManifest IvInManifest { get; set; }
		
		/// <summary>
		/// Hls Iv Source
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsIvSource IvSource { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> KeepSegments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormat { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string KeyFormatVersions { get; set; }
		
		/// <summary>
		/// Key Provider Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public KeyProviderSettings KeyProviderSettings { get; set; }
		
		/// <summary>
		/// Hls Manifest Compression
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsManifestCompression ManifestCompression { get; set; }
		
		/// <summary>
		/// Hls Manifest Duration Format
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsManifestDurationFormat ManifestDurationFormat { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> MinSegmentLength { get; set; }
		
		/// <summary>
		/// Hls Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsMode Mode { get; set; }
		
		/// <summary>
		/// Hls Output Selection
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsOutputSelection OutputSelection { get; set; }
		
		/// <summary>
		/// Hls Program Date Time
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsProgramDateTime ProgramDateTime { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max3600
		/// Minimum: 0
		/// Maximum: 3600
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 3600)]
		public System.Nullable<System.Int32> ProgramDateTimePeriod { get; set; }
		
		/// <summary>
		/// Hls Redundant Manifest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsRedundantManifest RedundantManifest { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SegmentLength { get; set; }
		
		/// <summary>
		/// Hls Segmentation Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsSegmentationMode SegmentationMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> SegmentsPerSubdirectory { get; set; }
		
		/// <summary>
		/// Hls Stream Inf Resolution
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsStreamInfResolution StreamInfResolution { get; set; }
		
		/// <summary>
		/// Hls Timed Metadata Id3 Frame
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsTimedMetadataId3Frame TimedMetadataId3Frame { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimedMetadataId3Period { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimestampDeltaMilliseconds { get; set; }
		
		/// <summary>
		/// Hls Ts File Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettingsTsFileMode TsFileMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsCaptionLanguageSetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMIT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsClientCache
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsCodecSpecification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_4281 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC_6381 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsDirectoryStructure
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_DIRECTORY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBDIRECTORY_PER_STREAM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsEncryptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAMPLE_AES = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsHlsId3SegmentTagging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsIFrameOnlyPlaylists
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsInputLossAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsIvInManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsIvSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOWS_SEGMENT_NUMBER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsManifestCompression
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GZIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsManifestDurationFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOATING_POINT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOD = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsOutputSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANIFESTS_AND_SEGMENTS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTS_ONLY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsProgramDateTime
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsRedundantManifest
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_SEGMENT_DURATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsStreamInfResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsGroupSettingsTsFileMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTED_FILES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_FILE = 1,
	}
	
	/// <summary>
	/// Hls H265 Packaging Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 1,
	}
	
	/// <summary>
	/// Settings for the action to insert a user-defined ID3 tag in each HLS segment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsId3SegmentTaggingScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Hls Input Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsInputSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Bandwidth { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> BufferSegments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Retries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RetryInterval { get; set; }
	}
	
	/// <summary>
	/// Hls Media Store Storage Class
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsMediaStoreStorageClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORAL = 0,
	}
	
	/// <summary>
	/// Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsSettings
	{
		
		/// <summary>
		/// Audio Only Hls Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioOnlyHlsSettings AudioOnlyHlsSettings { get; set; }
		
		/// <summary>
		/// Fmp4 Hls Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Fmp4HlsSettings Fmp4HlsSettings { get; set; }
		
		/// <summary>
		/// Standard Hls Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StandardHlsSettings StandardHlsSettings { get; set; }
	}
	
	/// <summary>
	/// Hls Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsOutputSettings
	{
		
		/// <summary>
		/// Hls H265 Packaging Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsOutputSettingsH265PackagingType H265PackagingType { get; set; }
		
		/// <summary>
		/// Hls Settings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HlsSettings HlsSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string NameModifier { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SegmentModifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsOutputSettingsH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 1,
	}
	
	/// <summary>
	/// Standard Hls Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StandardHlsSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioRenditionSets { get; set; }
		
		/// <summary>
		/// Settings information for the .m3u8 container
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public M3u8Settings M3u8Settings { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to emit HLS metadata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class HlsTimedMetadataScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id3 { get; set; }
	}
	
	/// <summary>
	/// Hls Webdav Http Transfer Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum HlsWebdavHttpTransferMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHUNKED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NON_CHUNKED = 1,
	}
	
	/// <summary>
	/// Live Event input parameters. There can be multiple inputs in a single Live Event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfAudioSelector
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AudioSelector[] AudioSelectors { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfCaptionSelector
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CaptionSelector[] CaptionSelectors { get; set; }
		
		/// <summary>
		/// Input Deblock Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettingsDeblockFilter DeblockFilter { get; set; }
		
		/// <summary>
		/// Input Denoise Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettingsDenoiseFilter DenoiseFilter { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1Max5
		/// Minimum: 1
		/// Maximum: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 5)]
		public System.Nullable<System.Int32> FilterStrength { get; set; }
		
		/// <summary>
		/// Input Filter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettingsInputFilter InputFilter { get; set; }
		
		/// <summary>
		/// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInputSettings NetworkInputSettings { get; set; }
		
		/// <summary>
		/// Smpte2038 Data Preference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettingsSmpte2038DataPreference Smpte2038DataPreference { get; set; }
		
		/// <summary>
		/// Input Source End Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSettingsSourceEndBehavior SourceEndBehavior { get; set; }
		
		/// <summary>
		/// Specifies a particular video stream within an input source. An input may have only a single video selector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelector VideoSelector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSettingsDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSettingsDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSettingsInputFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSettingsSmpte2038DataPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSettingsSourceEndBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOOP = 1,
	}
	
	/// <summary>
	/// Input Channel Level
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputChannelLevel
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMinNegative60Max6
		/// Minimum: -60
		/// Maximum: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-60, 6)]
		public int Gain { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max15
		/// Minimum: 0
		/// Maximum: 15
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 15)]
		public int InputChannel { get; set; }
	}
	
	/// <summary>
	/// Documentation update needed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 1,
	}
	
	/// <summary>
	/// Settings to identify the start of the clip.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StartTimecode
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timecode { get; set; }
	}
	
	/// <summary>
	/// Settings to identify the end of the clip.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StopTimecode
	{
		
		/// <summary>
		/// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopTimecodeLastFrameClippingBehavior LastFrameClippingBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Timecode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum StopTimecodeLastFrameClippingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE_LAST_FRAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_LAST_FRAME = 1,
	}
	
	/// <summary>
	/// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputClippingSettings
	{
		
		/// <summary>
		/// Documentation update needed
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputClippingSettingsInputTimecodeSource InputTimecodeSource { get; set; }
		
		/// <summary>
		/// Settings to identify the start of the clip.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StartTimecode StartTimecode { get; set; }
		
		/// <summary>
		/// Settings to identify the end of the clip.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StopTimecode StopTimecode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputClippingSettingsInputTimecodeSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 1,
	}
	
	/// <summary>
	/// Input Deblock Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeblockFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Input Denoise Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDenoiseFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// The properties for a VPC type input destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDestinationVpc
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NetworkInterfaceId { get; set; }
	}
	
	/// <summary>
	/// The settings for a PUSH type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDestination
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Ip { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Port { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// The properties for a VPC type input destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationVpc Vpc { get; set; }
	}
	
	/// <summary>
	/// The source at the input device that is currently active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceActiveInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDMI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDI = 1,
	}
	
	/// <summary>
	/// Configurable settings for the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceConfigurableSettings
	{
		
		/// <summary>
		/// The source to activate (use) from the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfigurableSettingsConfiguredInput ConfiguredInput { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxBitrate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceConfigurableSettingsConfiguredInput
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HDMI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDI = 2,
	}
	
	/// <summary>
	/// The state of the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAMING = 1,
	}
	
	/// <summary>
	/// The scan type of the video source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceScanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERLACED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRESSIVE = 1,
	}
	
	/// <summary>
	/// Specifies whether the input device has been configured (outside of MediaLive) to use a dynamic IP address assignment (DHCP) or a static IP address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceIpScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DHCP = 1,
	}
	
	/// <summary>
	/// Details of the input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputDeviceSummary
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// The state of the connection between the input device and AWS.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSummaryConnectionState ConnectionState { get; set; }
		
		/// <summary>
		/// The status of the action to synchronize the device configuration. If you change the configuration of the input device (for example, the maximum bitrate), MediaLive sends the new data to the device. The device might not update itself immediately. SYNCED means the device has updated its configuration. SYNCING means that it has not updated its configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSummaryDeviceSettingsSyncState DeviceSettingsSyncState { get; set; }
		
		/// <summary>
		/// Settings that describe the active source from the input device, and the video characteristics of that source.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceHdSettings HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The network settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceNetworkSettings NetworkSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// The type of the input device. For an AWS Elemental Link device that outputs resolutions up to 1080, choose "HD".
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSummaryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceSummaryConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceSummaryDeviceSettingsSyncState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNCING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputDeviceSummaryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 0,
	}
	
	/// <summary>
	/// Input Filter
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCED = 2,
	}
	
	/// <summary>
	/// Input Loss Action For Ms Smooth Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossActionForMsSmoothOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Rtmp Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossActionForRtmpOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Input Loss Action For Udp Out
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossActionForUdpOut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_PROGRAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_TS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_PROGRAM = 2,
	}
	
	/// <summary>
	/// Input Loss Image Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputLossImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLOR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLATE = 1,
	}
	
	/// <summary>
	/// Network source to transcode. Must be accessible to the Elemental Live node that is running the live event through a network connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class NetworkInputSettings
	{
		
		/// <summary>
		/// Hls Input Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsInputSettings HlsInputSettings { get; set; }
		
		/// <summary>
		/// Network Input Server Validation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NetworkInputSettingsServerValidation ServerValidation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInputSettingsServerValidation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_CRYPTOGRAPHY_ONLY = 1,
	}
	
	/// <summary>
	/// Smpte2038 Data Preference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Smpte2038DataPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFER = 1,
	}
	
	/// <summary>
	/// Input Source End Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum InputSourceEndBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOOP = 1,
	}
	
	/// <summary>
	/// Specifies a particular video stream within an input source. An input may have only a single video selector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoSelector
	{
		
		/// <summary>
		/// Video Selector Color Space
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpace ColorSpace { get; set; }
		
		/// <summary>
		/// Video Selector Color Space Usage
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorColorSpaceUsage ColorSpaceUsage { get; set; }
		
		/// <summary>
		/// Video Selector Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorSettings SelectorSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_709 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpaceUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALLBACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 1,
	}
	
	/// <summary>
	/// The settings for a PULL type input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSource
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputSwitchScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InputAttachmentNameReference { get; set; }
		
		/// <summary>
		/// Settings to let you create a clip of the file input, in order to set up the input to ingest only a portion of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputClippingSettings InputClippingSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] UrlPath { get; set; }
	}
	
	/// <summary>
	/// Whitelist rule
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class InputWhitelistRule
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	/// <summary>
	/// Static Key Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticKeySettings
	{
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputLocation KeyProviderServer { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin32Max32
		/// Max length: 32
		/// Min length: 32
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength=32)]
		public string StaticKeyValue { get; set; }
	}
	
	/// <summary>
	/// If you specify a StopTimecode in an input (in order to clip the file), you can specify if you want the clip to exclude (the default) or include the frame specified by the timecode.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum LastFrameClippingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE_LAST_FRAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_LAST_FRAME = 1,
	}
	
	/// <summary>
	/// M2ts Absent Input Audio Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAbsentInputAudioBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCODE_SILENCE = 1,
	}
	
	/// <summary>
	/// M2ts Arib
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsArib
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// M2ts Arib Captions Pid Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAribCaptionsPidControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// M2ts Audio Buffer Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAudioBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 1,
	}
	
	/// <summary>
	/// M2ts Audio Interval
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAudioInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_FIXED_INTERVALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_INTERVAL = 1,
	}
	
	/// <summary>
	/// M2ts Audio Stream Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsAudioStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATSC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DVB = 1,
	}
	
	/// <summary>
	/// M2ts Buffer Model
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsBufferModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	/// <summary>
	/// M2ts Cc Descriptor
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsCcDescriptor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// M2ts Ebif Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEbifControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Ebp Placement
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEbpPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_AND_AUDIO_PIDS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PID = 1,
	}
	
	/// <summary>
	/// M2ts Es Rate In Pes
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsEsRateInPes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCLUDE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE = 1,
	}
	
	/// <summary>
	/// M2ts Klv
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsKlv
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsNielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Pcr Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	/// <summary>
	/// M2ts Rate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsRateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CBR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VBR = 1,
	}
	
	/// <summary>
	/// M2ts Scte35 Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsScte35Control
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M2ts Segmentation Markers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSegmentationMarkers
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBP_LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PSI_SEGSTART = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_ADAPT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAI_SEGSTART = 5,
	}
	
	/// <summary>
	/// M2ts Segmentation Style
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsSegmentationStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAINTAIN_CADENCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESET_CADENCE = 1,
	}
	
	/// <summary>
	/// M2ts Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M2tsTimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Nielsen Id3 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8NielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Pcr Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8PcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	/// <summary>
	/// M3u8 Scte35 Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8Scte35Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// M3u8 Timed Metadata Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8TimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// Settings information for the .m3u8 container
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class M3u8Settings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> AudioFramesPerPes { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AudioPids { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EcmPid { get; set; }
		
		/// <summary>
		/// M3u8 Nielsen Id3 Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsNielsenId3Behavior NielsenId3Behavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PatInterval { get; set; }
		
		/// <summary>
		/// M3u8 Pcr Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsPcrControl PcrControl { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max500
		/// Minimum: 0
		/// Maximum: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 500)]
		public System.Nullable<System.Int32> PcrPeriod { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PcrPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max1000
		/// Minimum: 0
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1000)]
		public System.Nullable<System.Int32> PmtInterval { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PmtPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> ProgramNum { get; set; }
		
		/// <summary>
		/// M3u8 Scte35 Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsScte35Behavior Scte35Behavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Scte35Pid { get; set; }
		
		/// <summary>
		/// M3u8 Timed Metadata Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M3u8SettingsTimedMetadataBehavior TimedMetadataBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimedMetadataPid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65535
		/// Minimum: 0
		/// Maximum: 65535
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65535)]
		public System.Nullable<System.Int32> TransportStreamId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VideoPid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsNielsenId3Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsPcrControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIGURED_PCR_PERIOD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PCR_EVERY_PES_PACKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsScte35Behavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum M3u8SettingsTimedMetadataBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
	}
	
	/// <summary>
	/// The settings for a MediaConnect Flow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaConnectFlow
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FlowArn { get; set; }
	}
	
	/// <summary>
	/// Media Package Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaPackageGroupSettings
	{
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
	}
	
	/// <summary>
	/// MediaPackage Output Destination Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MediaPackageOutputDestinationSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ChannelId { get; set; }
	}
	
	/// <summary>
	/// Mp2 Coding Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Mp2CodingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_1_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CODING_MODE_2_0 = 1,
	}
	
	/// <summary>
	/// Smooth Group Audio Only Timecode Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupAudioOnlyTimecodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED_CLOCK = 1,
	}
	
	/// <summary>
	/// Smooth Group Certificate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_AUTHENTICITY = 1,
	}
	
	/// <summary>
	/// Smooth Group Event Id Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupEventIdMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EVENT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_TIMESTAMP = 2,
	}
	
	/// <summary>
	/// Smooth Group Event Stop Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupEventStopBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_EOS = 1,
	}
	
	/// <summary>
	/// Smooth Group Segmentation Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_SEGMENT_DURATION = 1,
	}
	
	/// <summary>
	/// Smooth Group Sparse Track Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupSparseTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE_35 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE_35_WITHOUT_SEGMENTATION = 2,
	}
	
	/// <summary>
	/// Smooth Group Stream Manifest Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupStreamManifestBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_SEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND = 1,
	}
	
	/// <summary>
	/// Smooth Group Timestamp Offset Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum SmoothGroupTimestampOffsetMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED_OFFSET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_EVENT_START_DATE = 1,
	}
	
	/// <summary>
	/// Ms Smooth Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MsSmoothGroupSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AcquisitionPointId { get; set; }
		
		/// <summary>
		/// Smooth Group Audio Only Timecode Control
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsAudioOnlyTimecodeControl AudioOnlyTimecodeControl { get; set; }
		
		/// <summary>
		/// Smooth Group Certificate Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsCertificateMode CertificateMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EventId { get; set; }
		
		/// <summary>
		/// Smooth Group Event Id Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsEventIdMode EventIdMode { get; set; }
		
		/// <summary>
		/// Smooth Group Event Stop Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsEventStopBehavior EventStopBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FilecacheDuration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FragmentLength { get; set; }
		
		/// <summary>
		/// Input Loss Action For Ms Smooth Out
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsInputLossAction InputLossAction { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
		
		/// <summary>
		/// Smooth Group Segmentation Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsSegmentationMode SegmentationMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max10000
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> SendDelayMs { get; set; }
		
		/// <summary>
		/// Smooth Group Sparse Track Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsSparseTrackType SparseTrackType { get; set; }
		
		/// <summary>
		/// Smooth Group Stream Manifest Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsStreamManifestBehavior StreamManifestBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TimestampOffset { get; set; }
		
		/// <summary>
		/// Smooth Group Timestamp Offset Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettingsTimestampOffsetMode TimestampOffsetMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsAudioOnlyTimecodeControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED_CLOCK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_AUTHENTICITY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsEventIdMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EVENT_ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_TIMESTAMP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsEventStopBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND_EOS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsInputLossAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsSegmentationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_INPUT_SEGMENTATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_SEGMENT_DURATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsSparseTrackType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE_35 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCTE_35_WITHOUT_SEGMENTATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsStreamManifestBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_SEND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEND = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothGroupSettingsTimestampOffsetMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED_OFFSET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_EVENT_START_DATE = 1,
	}
	
	/// <summary>
	/// Ms Smooth H265 Packaging Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 1,
	}
	
	/// <summary>
	/// Ms Smooth Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MsSmoothOutputSettings
	{
		
		/// <summary>
		/// Ms Smooth H265 Packaging Type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothOutputSettingsH265PackagingType H265PackagingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NameModifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MsSmoothOutputSettingsH265PackagingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEV1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HVC1 = 1,
	}
	
	/// <summary>
	/// Multiplex MediaConnect output destination settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexMediaConnectOutputDestinationSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string EntitlementArn { get; set; }
	}
	
	/// <summary>
	/// Multiplex output destination settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexOutputDestination
	{
		
		/// <summary>
		/// Multiplex MediaConnect output destination settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexMediaConnectOutputDestinationSettings MediaConnectSettings { get; set; }
	}
	
	/// <summary>
	/// Multiplex Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexOutputSettings
	{
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
	}
	
	/// <summary>
	/// Multiplex Program Input Destination Settings for outputting a Channel to a Multiplex
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgramChannelDestinationSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string MultiplexId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength=1)]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for MultiplexProgramSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexProgramSummary
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
	}
	
	/// <summary>
	/// Contains summary configuration for a Multiplex event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexSettingsSummary
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1000000Max100000000
		/// Minimum: 1000000
		/// Maximum: 100000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000000, 100000000)]
		public System.Nullable<System.Int32> TransportStreamBitrate { get; set; }
	}
	
	/// <summary>
	/// Statmux rate control settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexStatmuxVideoSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max100000000
		/// Minimum: 100000
		/// Maximum: 100000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 100000000)]
		public System.Nullable<System.Int32> MaximumBitrate { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin100000Max100000000
		/// Minimum: 100000
		/// Maximum: 100000000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(100000, 100000000)]
		public System.Nullable<System.Int32> MinimumBitrate { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for MultiplexSummary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class MultiplexSummary
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		/// <summary>
		/// Contains summary configuration for a Multiplex event.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettingsSummary MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PipelinesRunningCount { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ProgramCount { get; set; }
		
		/// <summary>
		/// The current state of the multiplex.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSummaryState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum MultiplexSummaryState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECOVERING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 8,
	}
	
	/// <summary>
	/// Network Input Server Validation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NetworkInputServerValidation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_CRYPTOGRAPHY_AND_VALIDATE_NAME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_CRYPTOGRAPHY_ONLY = 1,
	}
	
	/// <summary>
	/// State of Nielsen PCM to ID3 tagging
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum NielsenPcmToId3TaggingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Reserved resources available for purchase
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Offering
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Units for duration, e.g. 'MONTHS'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferingDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Offering type, e.g. 'NO_UPFRONT'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OfferingOfferingType OfferingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Resource configuration (codec, resolution, bitrate, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum OfferingOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	/// <summary>
	/// Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputSettings
	{
		
		/// <summary>
		/// Archive Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ArchiveOutputSettings ArchiveOutputSettings { get; set; }
		
		/// <summary>
		/// Frame Capture Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureOutputSettings FrameCaptureOutputSettings { get; set; }
		
		/// <summary>
		/// Hls Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsOutputSettings HlsOutputSettings { get; set; }
		
		/// <summary>
		/// Media Package Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageOutputSettings MediaPackageOutputSettings { get; set; }
		
		/// <summary>
		/// Ms Smooth Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothOutputSettings MsSmoothOutputSettings { get; set; }
		
		/// <summary>
		/// Multiplex Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexOutputSettings MultiplexOutputSettings { get; set; }
		
		/// <summary>
		/// Rtmp Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpOutputSettings RtmpOutputSettings { get; set; }
		
		/// <summary>
		/// Udp Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UdpOutputSettings UdpOutputSettings { get; set; }
	}
	
	/// <summary>
	/// Output settings. There can be multiple outputs within a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Output
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AudioDescriptionNames { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] CaptionDescriptionNames { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __stringMin1Max255
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength=1)]
		public string OutputName { get; set; }
		
		/// <summary>
		/// Output Settings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputSettings OutputSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VideoDescriptionName { get; set; }
	}
	
	/// <summary>
	/// Placeholder documentation for OutputDestinationSettings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputDestinationSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PasswordParam { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string StreamName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Output Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputGroupSettings
	{
		
		/// <summary>
		/// Archive Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ArchiveGroupSettings ArchiveGroupSettings { get; set; }
		
		/// <summary>
		/// Frame Capture Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureGroupSettings FrameCaptureGroupSettings { get; set; }
		
		/// <summary>
		/// Hls Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsGroupSettings HlsGroupSettings { get; set; }
		
		/// <summary>
		/// Media Package Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaPackageGroupSettings MediaPackageGroupSettings { get; set; }
		
		/// <summary>
		/// Ms Smooth Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MsSmoothGroupSettings MsSmoothGroupSettings { get; set; }
		
		/// <summary>
		/// Multiplex Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexGroupSettings MultiplexGroupSettings { get; set; }
		
		/// <summary>
		/// Rtmp Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettings RtmpGroupSettings { get; set; }
		
		/// <summary>
		/// Udp Group Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UdpGroupSettings UdpGroupSettings { get; set; }
	}
	
	/// <summary>
	/// Output groups for this Live Event. Output groups contain information about where streams should be distributed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class OutputGroup
	{
		
		/// <summary>
		/// Placeholder documentation for __stringMax32
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.StringLength(32)]
		public string Name { get; set; }
		
		/// <summary>
		/// Output Group Settings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputGroupSettings OutputGroupSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutput
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Output[] Outputs { get; set; }
	}
	
	/// <summary>
	/// Rtmp Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RtmpGroupSettings
	{
		
		/// <summary>
		/// Authentication Scheme
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettingsAuthenticationScheme AuthenticationScheme { get; set; }
		
		/// <summary>
		/// Rtmp Cache Full Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettingsCacheFullBehavior CacheFullBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin30
		/// Minimum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(30, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> CacheLength { get; set; }
		
		/// <summary>
		/// Rtmp Caption Data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettingsCaptionData CaptionData { get; set; }
		
		/// <summary>
		/// Input Loss Action For Rtmp Out
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpGroupSettingsInputLossAction InputLossAction { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> RestartDelay { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpGroupSettingsAuthenticationScheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AKAMAI = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpGroupSettingsCacheFullBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECT_IMMEDIATELY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAIT_FOR_SERVER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpGroupSettingsCaptionData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIELD1_608 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIELD1_AND_FIELD2_608 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpGroupSettingsInputLossAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_OUTPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSE_OUTPUT = 1,
	}
	
	/// <summary>
	/// Udp Group Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UdpGroupSettings
	{
		
		/// <summary>
		/// Input Loss Action For Udp Out
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UdpGroupSettingsInputLossAction InputLossAction { get; set; }
		
		/// <summary>
		/// Udp Timed Metadata Id3 Frame
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UdpGroupSettingsTimedMetadataId3Frame TimedMetadataId3Frame { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimedMetadataId3Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UdpGroupSettingsInputLossAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_PROGRAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP_TS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMIT_PROGRAM = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UdpGroupSettingsTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	/// <summary>
	/// Rtmp Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class RtmpOutputSettings
	{
		
		/// <summary>
		/// Rtmp Output Certificate Mode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtmpOutputSettingsCertificateMode CertificateMode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ConnectionRetryInterval { get; set; }
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> NumRetries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpOutputSettingsCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_AUTHENTICITY = 1,
	}
	
	/// <summary>
	/// Udp Output Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UdpOutputSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max10000
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int32> BufferMsec { get; set; }
		
		/// <summary>
		/// Udp Container Settings
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UdpContainerSettings ContainerSettings { get; set; }
		
		/// <summary>
		/// Reference to an OutputDestination ID defined in the channel
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputLocationRef Destination { get; set; }
		
		/// <summary>
		/// Fec Output Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FecOutputSettings FecOutputSettings { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to set pause state of a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PauseStateScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfPipelinePauseStateSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PipelinePauseStateSettings[] Pipelines { get; set; }
	}
	
	/// <summary>
	/// Runtime details of a pipeline when a channel is running.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PipelineDetail
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActiveInputAttachmentName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ActiveInputSwitchActionName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PipelineId { get; set; }
	}
	
	/// <summary>
	/// Pipeline ID
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PipelineId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_1 = 1,
	}
	
	/// <summary>
	/// Settings for pausing a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PipelinePauseStateSettings
	{
		
		/// <summary>
		/// Pipeline ID
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PipelinePauseStateSettingsPipelineId PipelineId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum PipelinePauseStateSettingsPipelineId
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_1 = 1,
	}
	
	/// <summary>
	/// Placeholder documentation for PurchaseOfferingRequest
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseOfferingRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
	}
	
	/// <summary>
	/// Reserved resources available to use
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Reservation
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Units for duration, e.g. 'MONTHS'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationDurationUnits DurationUnits { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string End { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingDescription { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Offering type, e.g. 'NO_UPFRONT'
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationOfferingType OfferingType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		/// <summary>
		/// Resource configuration (codec, resolution, bitrate, ...)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationResourceSpecification ResourceSpecification { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Current reservation state
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReservationState State { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __double
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UsagePrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationDurationUnits
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationOfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_UPFRONT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 3,
	}
	
	/// <summary>
	/// Codec, 'MPEG2', 'AVC', 'HEVC', or 'AUDIO'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationCodec
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MPEG2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEVC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO = 3,
	}
	
	/// <summary>
	/// Maximum bitrate in megabits per second
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationMaximumBitrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_10_MBPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_20_MBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_50_MBPS = 2,
	}
	
	/// <summary>
	/// Maximum framerate in frames per second (Outputs only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationMaximumFramerate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_30_FPS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_60_FPS = 1,
	}
	
	/// <summary>
	/// Resolution based on lines of vertical resolution; SD is less than 720 lines, HD is 720 to 1080 lines, FHD is 1080 lines, UHD is greater than 1080 lines
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FHD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UHD = 3,
	}
	
	/// <summary>
	/// Resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTPUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTIPLEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANNEL = 3,
	}
	
	/// <summary>
	/// Special features, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationSpecialFeature
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCED_AUDIO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_NORMALIZATION = 1,
	}
	
	/// <summary>
	/// Video quality, e.g. 'STANDARD' (Outputs only)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum ReservationVideoQuality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENHANCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREMIUM = 2,
	}
	
	/// <summary>
	/// Rtmp Cache Full Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpCacheFullBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCONNECT_IMMEDIATELY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAIT_FOR_SERVER = 1,
	}
	
	/// <summary>
	/// Rtmp Caption Data
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpCaptionData
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIELD1_608 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIELD1_AND_FIELD2_608 = 2,
	}
	
	/// <summary>
	/// Rtmp Output Certificate Mode
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum RtmpOutputCertificateMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELF_SIGNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFY_AUTHENTICITY = 1,
	}
	
	/// <summary>
	/// Holds the settings for a single schedule action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleActionSettings
	{
		
		/// <summary>
		/// Settings for the action to insert a user-defined ID3 tag in each HLS segment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsId3SegmentTaggingScheduleActionSettings HlsId3SegmentTaggingSettings { get; set; }
		
		/// <summary>
		/// Settings for the action to emit HLS metadata
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HlsTimedMetadataScheduleActionSettings HlsTimedMetadataSettings { get; set; }
		
		/// <summary>
		/// Settings for the "switch input" action: to switch from ingesting one input to ingesting another input.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSwitchScheduleActionSettings InputSwitchSettings { get; set; }
		
		/// <summary>
		/// Settings for the action to set pause state of a channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PauseStateScheduleActionSettings PauseStateSettings { get; set; }
		
		/// <summary>
		/// Settings for a SCTE-35 return_to_network message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35ReturnToNetworkScheduleActionSettings Scte35ReturnToNetworkSettings { get; set; }
		
		/// <summary>
		/// Settings for a SCTE-35 splice_insert message.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35SpliceInsertScheduleActionSettings Scte35SpliceInsertSettings { get; set; }
		
		/// <summary>
		/// Settings for a SCTE-35 time_signal.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35TimeSignalScheduleActionSettings Scte35TimeSignalSettings { get; set; }
		
		/// <summary>
		/// Settings for the action to activate a static image.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticImageActivateScheduleActionSettings StaticImageActivateSettings { get; set; }
		
		/// <summary>
		/// Settings for the action to deactivate the image in a specific layer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public StaticImageDeactivateScheduleActionSettings StaticImageDeactivateSettings { get; set; }
	}
	
	/// <summary>
	/// Settings to specify when an action should occur. Only one of the options must be selected.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleActionStartSettings
	{
		
		/// <summary>
		/// Start time for the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FixedModeScheduleActionStartSettings FixedModeScheduleActionStartSettings { get; set; }
		
		/// <summary>
		/// Settings to specify if an action follows another.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FollowModeScheduleActionStartSettings FollowModeScheduleActionStartSettings { get; set; }
		
		/// <summary>
		/// Settings to configure an action so that it occurs as soon as possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImmediateModeScheduleActionStartSettings ImmediateModeScheduleActionStartSettings { get; set; }
	}
	
	/// <summary>
	/// Contains information on a single schedule action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class ScheduleAction
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Holds the settings for a single schedule action.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActionSettings ScheduleActionSettings { get; set; }
		
		/// <summary>
		/// Settings to specify when an action should occur. Only one of the options must be selected.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleActionStartSettings ScheduleActionStartSettings { get; set; }
	}
	
	/// <summary>
	/// Settings for a SCTE-35 return_to_network message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35ReturnToNetworkScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __longMin0Max4294967295
		/// Minimum: 0
		/// Maximum: 4294967295
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 4294967295)]
		public int SpliceEventId { get; set; }
	}
	
	/// <summary>
	/// Settings for a SCTE-35 splice_insert message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35SpliceInsertScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __longMin0Max8589934591
		/// Minimum: 0
		/// Maximum: 8589934591
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 8589934591)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __longMin0Max4294967295
		/// Minimum: 0
		/// Maximum: 4294967295
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 4294967295)]
		public int SpliceEventId { get; set; }
	}
	
	/// <summary>
	/// Settings for a SCTE-35 time_signal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35TimeSignalScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfScte35Descriptor
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35Descriptor[] Scte35Descriptors { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to activate a static image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticImageActivateScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FadeIn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FadeOut { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Input Location
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputLocation Image { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ImageX { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ImageY { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max7
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> Layer { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max100
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Opacity { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Settings for the action to deactivate the image in a specific layer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class StaticImageDeactivateScheduleActionSettings
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> FadeOut { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max7
		/// Minimum: 0
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 7)]
		public System.Nullable<System.Int32> Layer { get; set; }
	}
	
	/// <summary>
	/// Scte20 Convert608 To708
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte20Convert608To708
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPCONVERT = 1,
	}
	
	/// <summary>
	/// Scte35 Apos No Regional Blackout Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35AposNoRegionalBlackoutBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Scte35 Apos Web Delivery Allowed Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35AposWebDeliveryAllowedBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35ArchiveAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE_ALLOWED = 1,
	}
	
	/// <summary>
	/// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35DeviceRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP2 = 3,
	}
	
	/// <summary>
	/// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35NoRegionalBlackoutFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_BLACKOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_REGIONAL_BLACKOUT = 1,
	}
	
	/// <summary>
	/// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35WebDeliveryAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_DELIVERY_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_DELIVERY_ALLOWED = 1,
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35DeliveryRestrictions
	{
		
		/// <summary>
		/// Corresponds to the archive_allowed parameter. A value of ARCHIVE_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictionsArchiveAllowedFlag ArchiveAllowedFlag { get; set; }
		
		/// <summary>
		/// Corresponds to the device_restrictions parameter in a segmentation_descriptor. If you include one of the "restriction" flags then you must include all four of them.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictionsDeviceRestrictions DeviceRestrictions { get; set; }
		
		/// <summary>
		/// Corresponds to the no_regional_blackout_flag parameter. A value of REGIONAL_BLACKOUT corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictionsNoRegionalBlackoutFlag NoRegionalBlackoutFlag { get; set; }
		
		/// <summary>
		/// Corresponds to the web_delivery_allowed_flag parameter. A value of WEB_DELIVERY_NOT_ALLOWED corresponds to 0 (false) in the SCTE-35 specification. If you include one of the "restriction" flags then you must include all four of them.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictionsWebDeliveryAllowedFlag WebDeliveryAllowedFlag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35DeliveryRestrictionsArchiveAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHIVE_ALLOWED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35DeliveryRestrictionsDeviceRestrictions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESTRICT_GROUP2 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35DeliveryRestrictionsNoRegionalBlackoutFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_BLACKOUT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_REGIONAL_BLACKOUT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35DeliveryRestrictionsWebDeliveryAllowedFlag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_DELIVERY_NOT_ALLOWED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_DELIVERY_ALLOWED = 1,
	}
	
	/// <summary>
	/// SCTE-35 Descriptor settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35DescriptorSettings
	{
		
		/// <summary>
		/// Corresponds to SCTE-35 segmentation_descriptor.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35SegmentationDescriptor SegmentationDescriptorScte35DescriptorSettings { get; set; }
	}
	
	/// <summary>
	/// Holds one set of SCTE-35 Descriptor Settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35Descriptor
	{
		
		/// <summary>
		/// SCTE-35 Descriptor settings.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35DescriptorSettings Scte35DescriptorSettings { get; set; }
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 segmentation_descriptor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class Scte35SegmentationDescriptor
	{
		
		/// <summary>
		/// Corresponds to SCTE-35 delivery_not_restricted_flag parameter. To declare delivery restrictions, include this element and its four "restriction" flags. To declare that there are no restrictions, omit this element.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Scte35DeliveryRestrictions DeliveryRestrictions { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SegmentNum { get; set; }
		
		/// <summary>
		/// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Scte35SegmentationDescriptorSegmentationCancelIndicator SegmentationCancelIndicator { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __longMin0Max1099511627775
		/// Minimum: 0
		/// Maximum: 1099511627775
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1099511627775)]
		public System.Nullable<System.Int32> SegmentationDuration { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __longMin0Max4294967295
		/// Minimum: 0
		/// Maximum: 4294967295
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 4294967295)]
		public int SegmentationEventId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SegmentationTypeId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SegmentationUpid { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SegmentationUpidType { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SegmentsExpected { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SubSegmentNum { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max255
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> SubSegmentsExpected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SegmentationDescriptorSegmentationCancelIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTATION_EVENT_NOT_CANCELED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTATION_EVENT_CANCELED = 1,
	}
	
	/// <summary>
	/// Corresponds to SCTE-35 segmentation_event_cancel_indicator. SEGMENTATION_EVENT_NOT_CANCELED corresponds to 0 in the SCTE-35 specification and indicates that this is an insertion request. SEGMENTATION_EVENT_CANCELED corresponds to 1 in the SCTE-35 specification and indicates that this is a cancelation request, in which case complete this field and the existing event ID to cancel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SegmentationCancelIndicator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTATION_EVENT_NOT_CANCELED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEGMENTATION_EVENT_CANCELED = 1,
	}
	
	/// <summary>
	/// Scte35 Splice Insert No Regional Blackout Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SpliceInsertNoRegionalBlackoutBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Scte35 Splice Insert Web Delivery Allowed Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum Scte35SpliceInsertWebDeliveryAllowedBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IGNORE = 1,
	}
	
	/// <summary>
	/// Temporal Filter Post Filter Sharpening
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemporalFilterPostFilterSharpening
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 2,
	}
	
	/// <summary>
	/// Temporal Filter Strength
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TemporalFilterStrength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRENGTH_16 = 16,
	}
	
	/// <summary>
	/// Timecode Config Source
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TimecodeConfigSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMBEDDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEMCLOCK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZEROBASED = 2,
	}
	
	/// <summary>
	/// Ttml Destination Style Control
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum TtmlDestinationStyleControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USE_CONFIGURED = 1,
	}
	
	/// <summary>
	/// Udp Container Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UdpContainerSettings
	{
		
		/// <summary>
		/// M2ts Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public M2tsSettings M2tsSettings { get; set; }
	}
	
	/// <summary>
	/// Udp Timed Metadata Id3 Frame
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UdpTimedMetadataId3Frame
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TDRL = 2,
	}
	
	/// <summary>
	/// Channel class that the channel should be updated to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelClassRequest
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateChannelClassRequestChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateChannelClassRequestChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	/// <summary>
	/// A request to update a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EncoderSettings EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSpecification InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateChannelRequestLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateChannelRequestLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	/// <summary>
	/// A request to update an input device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputDeviceRequest
	{
		
		/// <summary>
		/// Configurable settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceConfigurableSettings HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A request to update an input.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceRequest[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
	}
	
	/// <summary>
	/// The request to update some combination of the Input Security Group name and the IPv4 CIDRs the Input Security Group should allow.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputSecurityGroupRequest
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tags Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	/// <summary>
	/// A request to update a program in a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexProgramRequest
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexProgramSettings MultiplexProgramSettings { get; set; }
	}
	
	/// <summary>
	/// A request to update a multiplex.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexRequest
	{
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MultiplexSettings MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request to update a reservation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReservationRequest
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Video Codec Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoCodecSettings
	{
		
		/// <summary>
		/// Frame Capture Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FrameCaptureSettings FrameCaptureSettings { get; set; }
		
		/// <summary>
		/// H264 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H264Settings H264Settings { get; set; }
		
		/// <summary>
		/// H265 Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public H265Settings H265Settings { get; set; }
	}
	
	/// <summary>
	/// Video Description Respond To Afd
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionRespondToAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPOND = 2,
	}
	
	/// <summary>
	/// Video Description Scaling Behavior
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionScalingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRETCH_TO_OUTPUT = 1,
	}
	
	/// <summary>
	/// Video settings for this stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoDescription
	{
		
		/// <summary>
		/// Video Codec Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoCodecSettings CodecSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Video Description Respond To Afd
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionRespondToAfd RespondToAfd { get; set; }
		
		/// <summary>
		/// Video Description Scaling Behavior
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoDescriptionScalingBehavior ScalingBehavior { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max100
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Sharpness { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __integer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionRespondToAfd
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSTHROUGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESPOND = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoDescriptionScalingBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRETCH_TO_OUTPUT = 1,
	}
	
	/// <summary>
	/// Video Selector Color Space
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOLLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_601 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REC_709 = 2,
	}
	
	/// <summary>
	/// Video Selector Color Space Usage
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum VideoSelectorColorSpaceUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALLBACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE = 1,
	}
	
	/// <summary>
	/// Video Selector Settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoSelectorSettings
	{
		
		/// <summary>
		/// Video Selector Pid
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorPid VideoSelectorPid { get; set; }
		
		/// <summary>
		/// Video Selector Program Id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VideoSelectorProgramId VideoSelectorProgramId { get; set; }
	}
	
	/// <summary>
	/// Video Selector Pid
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoSelectorPid
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max8191
		/// Minimum: 0
		/// Maximum: 8191
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 8191)]
		public System.Nullable<System.Int32> Pid { get; set; }
	}
	
	/// <summary>
	/// Video Selector Program Id
	/// </summary>
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class VideoSelectorProgramId
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin0Max65536
		/// Minimum: 0
		/// Maximum: 65536
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 65536)]
		public System.Nullable<System.Int32> ProgramId { get; set; }
	}
	
	public partial class DemoClient
	{
		
		private System.Net.Http.HttpClient client;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public DemoClient(System.Net.Http.HttpClient client, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (client == null)
				throw new ArgumentNullException("Null HttpClient.", "client");

			if (client.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "client");

			this.client = client;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Update a channel schedule
		/// BatchUpdateSchedule /prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being updated.</param>
		/// <returns>Success</returns>
		public async Task<BatchUpdateScheduleResponse> BatchUpdateScheduleAsync(string channelId, BatchUpdateScheduleBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/schedule";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<BatchUpdateScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete all schedule actions on a channel.
		/// DeleteSchedule /prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being deleted.</param>
		/// <returns>Success</returns>
		public async Task<DeleteScheduleResponse> DeleteScheduleAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/schedule";
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a channel schedule
		/// DescribeSchedule /prod/channels/{channelId}/schedule
		/// </summary>
		/// <param name="channelId">Id of the channel whose schedule is being updated.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeScheduleResponse> DescribeScheduleAsync(string channelId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/schedule&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeScheduleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new channel
		/// CreateChannel /prod/channels
		/// </summary>
		public async Task CreateChannelAsync(CreateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of channels that have been created
		/// ListChannels /prod/channels
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an input
		/// CreateInput /prod/inputs
		/// </summary>
		public async Task CreateInputAsync(CreateInputBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of inputs that have been created
		/// ListInputs /prod/inputs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputsResponse> ListInputsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInputsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Input Security Group
		/// CreateInputSecurityGroup /prod/inputSecurityGroups
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInputSecurityGroupResponse> CreateInputSecurityGroupAsync(CreateInputSecurityGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputSecurityGroups";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<CreateInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces a list of Input Security Groups for an account
		/// ListInputSecurityGroups /prod/inputSecurityGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputSecurityGroupsResponse> ListInputSecurityGroupsAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputSecurityGroups?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInputSecurityGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new multiplex.
		/// CreateMultiplex /prod/multiplexes
		/// </summary>
		public async Task CreateMultiplexAsync(CreateMultiplexBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of the existing multiplexes.
		/// ListMultiplexes /prod/multiplexes
		/// </summary>
		/// <param name="maxResults">The maximum number of items to return.</param>
		/// <param name="nextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMultiplexesResponse> ListMultiplexesAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMultiplexesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new program in the multiplex.
		/// CreateMultiplexProgram /prod/multiplexes/{multiplexId}/programs
		/// </summary>
		/// <param name="multiplexId">ID of the multiplex where the program is to be created.</param>
		public async Task CreateMultiplexProgramAsync(string multiplexId, CreateMultiplexProgramBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/programs";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the programs that currently exist for a specific multiplex.
		/// ListMultiplexPrograms /prod/multiplexes/{multiplexId}/programs
		/// </summary>
		/// <param name="maxResults">The maximum number of items to return.</param>
		/// <param name="multiplexId">The ID of the multiplex that the programs belong to.</param>
		/// <param name="nextToken">The token to retrieve the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMultiplexProgramsResponse> ListMultiplexProgramsAsync(int maxResults, string multiplexId, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/programs?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListMultiplexProgramsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create tags for a resource
		/// CreateTags /prod/tags/{resource_arn}
		/// </summary>
		public async Task CreateTagsAsync(string resource_arn, CreateTagsBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Produces list of tags that have been created for a resource
		/// ListTagsForResource /prod/tags/{resource_arn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resource_arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts deletion of channel. The associated outputs are also deleted.
		/// DeleteChannel /prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">Unique ID of the channel.</param>
		/// <returns>Success</returns>
		public async Task<DeleteChannelResponse> DeleteChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a channel
		/// DescribeChannel /prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">channel ID</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a channel.
		/// UpdateChannel /prod/channels/{channelId}
		/// </summary>
		/// <param name="channelId">channel ID</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelResponse> UpdateChannelAsync(string channelId, UpdateChannelBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the input end point
		/// DeleteInput /prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input</param>
		/// <returns>Success</returns>
		public async Task<DeleteInputResponse> DeleteInputAsync(string inputId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputs/"+ (inputId==null? "" : Uri.EscapeDataString(inputId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Produces details about an input
		/// DescribeInput /prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputResponse> DescribeInputAsync(string inputId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputs/"+ (inputId==null? "" : Uri.EscapeDataString(inputId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an input.
		/// UpdateInput /prod/inputs/{inputId}
		/// </summary>
		/// <param name="inputId">Unique ID of the input.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputResponse> UpdateInputAsync(string inputId, UpdateInputBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputs/"+ (inputId==null? "" : Uri.EscapeDataString(inputId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateInputResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Input Security Group
		/// DeleteInputSecurityGroup /prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The Input Security Group to delete</param>
		/// <returns>Success</returns>
		public async Task<DeleteInputSecurityGroupResponse> DeleteInputSecurityGroupAsync(string inputSecurityGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : Uri.EscapeDataString(inputSecurityGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Produces a summary of an Input Security Group
		/// DescribeInputSecurityGroup /prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The id of the Input Security Group to describe</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputSecurityGroupResponse> DescribeInputSecurityGroupAsync(string inputSecurityGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : Uri.EscapeDataString(inputSecurityGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an Input Security Group's Whilelists.
		/// UpdateInputSecurityGroup /prod/inputSecurityGroups/{inputSecurityGroupId}
		/// </summary>
		/// <param name="inputSecurityGroupId">The id of the Input Security Group to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputSecurityGroupResponse> UpdateInputSecurityGroupAsync(string inputSecurityGroupId, UpdateInputSecurityGroupBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputSecurityGroups/"+ (inputSecurityGroupId==null? "" : Uri.EscapeDataString(inputSecurityGroupId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateInputSecurityGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a multiplex. The multiplex must be idle.
		/// DeleteMultiplex /prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task DeleteMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about a multiplex.
		/// DescribeMultiplex /prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMultiplexResponse> DescribeMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMultiplexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a multiplex.
		/// UpdateMultiplex /prod/multiplexes/{multiplexId}
		/// </summary>
		/// <param name="multiplexId">ID of the multiplex to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMultiplexResponse> UpdateMultiplexAsync(string multiplexId, UpdateMultiplexBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMultiplexResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a program from a multiplex.
		/// DeleteMultiplexProgram /prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex that the program belongs to.</param>
		/// <param name="programName">The multiplex program name.</param>
		/// <returns>Success</returns>
		public async Task<DeleteMultiplexProgramResponse> DeleteMultiplexProgramAsync(string multiplexId, string programName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : Uri.EscapeDataString(programName));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details for a program in a multiplex.
		/// DescribeMultiplexProgram /prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex that the program belongs to.</param>
		/// <param name="programName">The name of the program.</param>
		/// <returns>Success</returns>
		public async Task<DescribeMultiplexProgramResponse> DescribeMultiplexProgramAsync(string multiplexId, string programName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : Uri.EscapeDataString(programName));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a program in a multiplex.
		/// UpdateMultiplexProgram /prod/multiplexes/{multiplexId}/programs/{programName}
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex of the program to update.</param>
		/// <param name="programName">The name of the program to update.</param>
		/// <returns>Success</returns>
		public async Task<UpdateMultiplexProgramResponse> UpdateMultiplexProgramAsync(string multiplexId, string programName, UpdateMultiplexProgramBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/programs/"+ (programName==null? "" : Uri.EscapeDataString(programName));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateMultiplexProgramResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an expired reservation.
		/// DeleteReservation /prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<DeleteReservationResponse> DeleteReservationAsync(string reservationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/reservations/"+ (reservationId==null? "" : Uri.EscapeDataString(reservationId));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DeleteReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details for a reservation.
		/// DescribeReservation /prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<DescribeReservationResponse> DescribeReservationAsync(string reservationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/reservations/"+ (reservationId==null? "" : Uri.EscapeDataString(reservationId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update reservation.
		/// UpdateReservation /prod/reservations/{reservationId}
		/// </summary>
		/// <param name="reservationId">Unique reservation ID, e.g. '1234567'</param>
		/// <returns>Success</returns>
		public async Task<UpdateReservationResponse> UpdateReservationAsync(string reservationId, UpdateReservationBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/reservations/"+ (reservationId==null? "" : Uri.EscapeDataString(reservationId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateReservationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags for a resource
		/// DeleteTags /prod/tags/{resource_arn}#tagKeys
		/// </summary>
		/// <param name="tagKeys">An array of tag keys to delete</param>
		public async Task DeleteTagsAsync(string resource_arn, @__string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/tags/"+ (resource_arn==null? "" : Uri.EscapeDataString(resource_arn))+"#tagKeys&"+String.Join("&", tagKeys.Select(z => $"tagKeys={z}"));
			using (var request = new HttpRequestMessage(HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the details for the input device
		/// DescribeInputDevice /prod/inputDevices/{inputDeviceId}
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of this input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<DescribeInputDeviceResponse> DescribeInputDeviceAsync(string inputDeviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputDevices/"+ (inputDeviceId==null? "" : Uri.EscapeDataString(inputDeviceId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters for the input device.
		/// UpdateInputDevice /prod/inputDevices/{inputDeviceId}
		/// </summary>
		/// <param name="inputDeviceId">The unique ID of the input device. For example, hd-123456789abcdef.</param>
		/// <returns>Success</returns>
		public async Task<UpdateInputDeviceResponse> UpdateInputDeviceAsync(string inputDeviceId, UpdateInputDeviceBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputDevices/"+ (inputDeviceId==null? "" : Uri.EscapeDataString(inputDeviceId));
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateInputDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details for an offering.
		/// DescribeOffering /prod/offerings/{offeringId}
		/// </summary>
		/// <param name="offeringId">Unique offering ID, e.g. '87654321'</param>
		/// <returns>Success</returns>
		public async Task<DescribeOfferingResponse> DescribeOfferingAsync(string offeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/offerings/"+ (offeringId==null? "" : Uri.EscapeDataString(offeringId));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<DescribeOfferingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List input devices
		/// ListInputDevices /prod/inputDevices
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListInputDevicesResponse> ListInputDevicesAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/inputDevices?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListInputDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List offerings available for purchase.
		/// ListOfferings /prod/offerings
		/// </summary>
		/// <param name="channelClass">Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
		///</param>
		/// <param name="channelConfiguration">Filter to offerings that match the configuration of an existing channel, e.g. '2345678' (a channel ID)
		///</param>
		/// <param name="codec">Filter by codec, 'AVC', 'HEVC', 'MPEG2', or 'AUDIO'</param>
		/// <param name="duration">Filter by offering duration, e.g. '12'</param>
		/// <param name="maximumBitrate">Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
		///</param>
		/// <param name="maximumFramerate">Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'</param>
		/// <param name="resolution">Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'</param>
		/// <param name="resourceType">Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'</param>
		/// <param name="specialFeature">Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
		///</param>
		/// <param name="videoQuality">Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
		///</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingsResponse> ListOfferingsAsync(string channelClass, string channelConfiguration, string codec, string duration, int maxResults, string maximumBitrate, string maximumFramerate, string nextToken, string resolution, string resourceType, string specialFeature, string videoQuality, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/offerings?channelClass=" + (channelClass==null? "" : Uri.EscapeDataString(channelClass))+"&channelConfiguration=" + (channelConfiguration==null? "" : Uri.EscapeDataString(channelConfiguration))+"&codec=" + (codec==null? "" : Uri.EscapeDataString(codec))+"&duration=" + (duration==null? "" : Uri.EscapeDataString(duration))+"&maxResults="+maxResults+"&maximumBitrate=" + (maximumBitrate==null? "" : Uri.EscapeDataString(maximumBitrate))+"&maximumFramerate=" + (maximumFramerate==null? "" : Uri.EscapeDataString(maximumFramerate))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&resolution=" + (resolution==null? "" : Uri.EscapeDataString(resolution))+"&resourceType=" + (resourceType==null? "" : Uri.EscapeDataString(resourceType))+"&specialFeature=" + (specialFeature==null? "" : Uri.EscapeDataString(specialFeature))+"&videoQuality=" + (videoQuality==null? "" : Uri.EscapeDataString(videoQuality))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListOfferingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List purchased reservations.
		/// ListReservations /prod/reservations
		/// </summary>
		/// <param name="channelClass">Filter by channel class, 'STANDARD' or 'SINGLE_PIPELINE'
		///</param>
		/// <param name="codec">Filter by codec, 'AVC', 'HEVC', 'MPEG2', or 'AUDIO'</param>
		/// <param name="maximumBitrate">Filter by bitrate, 'MAX_10_MBPS', 'MAX_20_MBPS', or 'MAX_50_MBPS'
		///</param>
		/// <param name="maximumFramerate">Filter by framerate, 'MAX_30_FPS' or 'MAX_60_FPS'</param>
		/// <param name="resolution">Filter by resolution, 'SD', 'HD', 'FHD', or 'UHD'</param>
		/// <param name="resourceType">Filter by resource type, 'INPUT', 'OUTPUT', 'MULTIPLEX', or 'CHANNEL'</param>
		/// <param name="specialFeature">Filter by special feature, 'ADVANCED_AUDIO' or 'AUDIO_NORMALIZATION'
		///</param>
		/// <param name="videoQuality">Filter by video quality, 'STANDARD', 'ENHANCED', or 'PREMIUM'
		///</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListReservationsResponse> ListReservationsAsync(string channelClass, string codec, int maxResults, string maximumBitrate, string maximumFramerate, string nextToken, string resolution, string resourceType, string specialFeature, string videoQuality, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/reservations?channelClass=" + (channelClass==null? "" : Uri.EscapeDataString(channelClass))+"&codec=" + (codec==null? "" : Uri.EscapeDataString(codec))+"&maxResults="+maxResults+"&maximumBitrate=" + (maximumBitrate==null? "" : Uri.EscapeDataString(maximumBitrate))+"&maximumFramerate=" + (maximumFramerate==null? "" : Uri.EscapeDataString(maximumFramerate))+"&nextToken=" + (nextToken==null? "" : Uri.EscapeDataString(nextToken))+"&resolution=" + (resolution==null? "" : Uri.EscapeDataString(resolution))+"&resourceType=" + (resourceType==null? "" : Uri.EscapeDataString(resourceType))+"&specialFeature=" + (specialFeature==null? "" : Uri.EscapeDataString(specialFeature))+"&videoQuality=" + (videoQuality==null? "" : Uri.EscapeDataString(videoQuality))+"&MaxResults=" + (MaxResults==null? "" : Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : Uri.EscapeDataString(NextToken));
			using (var request = new HttpRequestMessage(HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<ListReservationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase an offering and create a reservation.
		/// PurchaseOffering /prod/offerings/{offeringId}/purchase
		/// </summary>
		/// <param name="offeringId">Offering to purchase, e.g. '87654321'</param>
		public async Task PurchaseOfferingAsync(string offeringId, PurchaseOfferingBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/offerings/"+ (offeringId==null? "" : Uri.EscapeDataString(offeringId))+"/purchase";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an existing channel
		/// StartChannel /prod/channels/{channelId}/start
		/// </summary>
		/// <param name="channelId">A request to start a channel</param>
		/// <returns>Success</returns>
		public async Task<StartChannelResponse> StartChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/start";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StartChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
		/// StartMultiplex /prod/multiplexes/{multiplexId}/start
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task StartMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/start";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running channel
		/// StopChannel /prod/channels/{channelId}/stop
		/// </summary>
		/// <param name="channelId">A request to stop a running channel</param>
		/// <returns>Success</returns>
		public async Task<StopChannelResponse> StopChannelAsync(string channelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<StopChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a running multiplex. If the multiplex isn't running, this action has no effect.
		/// StopMultiplex /prod/multiplexes/{multiplexId}/stop
		/// </summary>
		/// <param name="multiplexId">The ID of the multiplex.</param>
		public async Task StopMultiplexAsync(string multiplexId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/multiplexes/"+ (multiplexId==null? "" : Uri.EscapeDataString(multiplexId))+"/stop";
			using (var request = new HttpRequestMessage(HttpMethod.Post, requestUri))
			{
			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the class of the channel.
		/// UpdateChannelClass /prod/channels/{channelId}/channelClass
		/// </summary>
		/// <param name="channelId">Channel Id of the channel whose class should be updated.</param>
		/// <returns>Success</returns>
		public async Task<UpdateChannelClassResponse> UpdateChannelClassAsync(string channelId, UpdateChannelClassBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "/prod/channels/"+ (channelId==null? "" : Uri.EscapeDataString(channelId))+"/channelClass";
			using (var request = new HttpRequestMessage(HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			request.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(request.Headers);
			}

			var responseMessage = await client.SendAsync(request);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var stream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(stream)))
				{
				var serializer = new JsonSerializer();
				return serializer.Deserialize<UpdateChannelClassResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class BatchUpdateScheduleBody
	{
		
		/// <summary>
		/// A list of schedule actions to create (in a request) or that have been created (in a response).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Creates { get; set; }
		
		/// <summary>
		/// A list of schedule actions to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Deletes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateChannelBody
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateChannelBodyChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateChannelBodyLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reserved { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateChannelBodyChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateChannelBodyLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceSettings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceSettings[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputType
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateInputBodyType Type { get; set; }
		
		/// <summary>
		/// Settings for a private VPC Input.
		///When this property is specified, the input destination addresses will be created in a VPC rather than with public Internet addresses.
		///This property requires setting the roleArn property on Input creation.
		///Not compatible with the inputSecurityGroups property.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum CreateInputBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP_PUSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTP_PUSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PUSH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTMP_PULL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_PULL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP4_FILE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIACONNECT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_DEVICE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateInputSecurityGroupBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public @__string[] AvailabilityZones { get; set; }
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateMultiplexProgramBody
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MultiplexProgramSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProgramName { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class CreateTagsBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
		
		/// <summary>
		/// Encoder Settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EncoderSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputAttachment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputAttachment[] InputAttachments { get; set; }
		
		/// <summary>
		/// Placeholder documentation for InputSpecification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InputSpecification { get; set; }
		
		/// <summary>
		/// The log level the user wants for their channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateChannelBodyLogLevel LogLevel { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateChannelBodyLogLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBUG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputBody
	{
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDestinationRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDestinationRequest[] Destinations { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputDeviceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDeviceRequest[] InputDevices { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOf__string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public @__string[] InputSecurityGroups { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfMediaConnectFlowRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MediaConnectFlowRequest[] MediaConnectFlows { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputSourceRequest
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputSourceRequest[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputSecurityGroupBody
	{
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfInputWhitelistRuleCidr
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputWhitelistRuleCidr[] WhitelistRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexBody
	{
		
		/// <summary>
		/// Contains configuration for a Multiplex event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MultiplexSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateMultiplexProgramBody
	{
		
		/// <summary>
		/// Multiplex Program settings configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MultiplexProgramSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateReservationBody
	{
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateInputDeviceBody
	{
		
		/// <summary>
		/// Configurable settings for the input device.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HdDeviceSettings { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class PurchaseOfferingBody
	{
		
		/// <summary>
		/// Placeholder documentation for __integerMin1
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Count { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Start { get; set; }
		
		/// <summary>
		/// Placeholder documentation for Tags
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public class UpdateChannelClassBody
	{
		
		/// <summary>
		/// A standard channel has two encoding pipelines and a single pipeline channel only has one.
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateChannelClassBodyChannelClass ChannelClass { get; set; }
		
		/// <summary>
		/// Placeholder documentation for __listOfOutputDestination
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDestination[] Destinations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Name="http://demo.domain/2020/03")]
	public enum UpdateChannelClassBodyChannelClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SINGLE_PIPELINE = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
